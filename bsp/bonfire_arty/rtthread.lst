
rtthread.elf:     file format elf32-littleriscv


Disassembly of section .text:

00010000 <_bonfire_init>:



_bonfire_init:
  // init all registers
  li x1, 0
   10000:	00000093          	li	ra,0
  li x2, 0
   10004:	00000113          	li	sp,0
  li x3, 0
   10008:	00000193          	li	gp,0
  li x4, 0
   1000c:	00000213          	li	tp,0
  li x5, 0
   10010:	00000293          	li	t0,0
  li x6, 0
   10014:	00000313          	li	t1,0
  li x7, 0
   10018:	00000393          	li	t2,0
  li x8, 0
   1001c:	00000413          	li	s0,0
  li x9, 0
   10020:	00000493          	li	s1,0
  li x10, 0
   10024:	00000513          	li	a0,0
  li x11, 0
   10028:	00000593          	li	a1,0
  li x12, 0
   1002c:	00000613          	li	a2,0
  li x13, 0
   10030:	00000693          	li	a3,0
  li x14, 0
   10034:	00000713          	li	a4,0
  li x15, 0
   10038:	00000793          	li	a5,0
  li x16, 0
   1003c:	00000813          	li	a6,0
  li x17, 0
   10040:	00000893          	li	a7,0
  li x18, 0
   10044:	00000913          	li	s2,0
  li x19, 0
   10048:	00000993          	li	s3,0
  li x20, 0
   1004c:	00000a13          	li	s4,0
  li x21, 0
   10050:	00000a93          	li	s5,0
  li x22, 0
   10054:	00000b13          	li	s6,0
  li x23, 0
   10058:	00000b93          	li	s7,0
  li x24, 0
   1005c:	00000c13          	li	s8,0
  li x25, 0
   10060:	00000c93          	li	s9,0
  li x26, 0
   10064:	00000d13          	li	s10,0
  li x27, 0
   10068:	00000d93          	li	s11,0
  li x28, 0
   1006c:	00000e13          	li	t3,0
  li x29, 0
   10070:	00000e93          	li	t4,0
  li x30, 0
   10074:	00000f13          	li	t5,0
  li x31, 0
   10078:	00000f93          	li	t6,0

  la sp, _stacktop -1024 // Leave room for interrupt stack
   1007c:	0fff0117          	auipc	sp,0xfff0
   10080:	b7410113          	addi	sp,sp,-1164 # ffffbf0 <_endofheap+0xfc00>


  la a1, IRQ_Handler
   10084:	00010597          	auipc	a1,0x10
   10088:	9ac58593          	addi	a1,a1,-1620 # 1fa30 <IRQ_Handler>
  csrw mtvec,a1
   1008c:	30559073          	csrw	mtvec,a1

  call _start_local
   10090:	70d0b0ef          	jal	ra,1bf9c <_start_local>

00010094 <endless>:

  endless:
  j endless
   10094:	0000006f          	j	10094 <endless>

00010098 <mtime_setinterval>:
static volatile uint32_t *pmtime = (uint32_t*)MTIME_BASE; // Pointer to memory mapped RISC-V Timer registers
static uint32_t tick_interval=0;


static uint32_t mtime_setinterval(uint32_t interval)
{
   10098:	fd010113          	addi	sp,sp,-48
   1009c:	02112623          	sw	ra,44(sp)
   100a0:	02812423          	sw	s0,40(sp)
   100a4:	03010413          	addi	s0,sp,48
   100a8:	fca42e23          	sw	a0,-36(s0)
// Implementation for 32 Bit timer in Bonfire. Need to be adapted in case of a 64Bit Timer

   tick_interval=interval;
   100ac:	83c18793          	addi	a5,gp,-1988 # 2239c <_bss_start>
   100b0:	fdc42703          	lw	a4,-36(s0)
   100b4:	00e7a023          	sw	a4,0(a5)

   BOARD_DEBUG("Set tick interval to %ld\n",interval);
   100b8:	fdc42583          	lw	a1,-36(s0)
   100bc:	00010517          	auipc	a0,0x10
   100c0:	bd850513          	addi	a0,a0,-1064 # 1fc94 <__rt_init_end>
   100c4:	03d020ef          	jal	ra,12900 <rt_kprintf>

   if (interval >0) {
   100c8:	fdc42783          	lw	a5,-36(s0)
   100cc:	04078063          	beqz	a5,1010c <mtime_setinterval+0x74>
     pmtime[2]=pmtime[0]+interval;
   100d0:	00012797          	auipc	a5,0x12
   100d4:	29078793          	addi	a5,a5,656 # 22360 <pmtime>
   100d8:	0007a783          	lw	a5,0(a5)
   100dc:	0007a683          	lw	a3,0(a5)
   100e0:	00012797          	auipc	a5,0x12
   100e4:	28078793          	addi	a5,a5,640 # 22360 <pmtime>
   100e8:	0007a783          	lw	a5,0(a5)
   100ec:	00878793          	addi	a5,a5,8
   100f0:	fdc42703          	lw	a4,-36(s0)
   100f4:	00e68733          	add	a4,a3,a4
   100f8:	00e7a023          	sw	a4,0(a5)
     set_csr(mie,MIP_MTIP); // Enable Timer Interrupt
   100fc:	08000793          	li	a5,128
   10100:	3047a7f3          	csrrs	a5,mie,a5
   10104:	fef42423          	sw	a5,-24(s0)
   10108:	0100006f          	j	10118 <mtime_setinterval+0x80>
   } else {
     clear_csr(mie,MIP_MTIP); // Disable Timer Interrupt
   1010c:	08000793          	li	a5,128
   10110:	3047b7f3          	csrrc	a5,mie,a5
   10114:	fef42623          	sw	a5,-20(s0)

   }
   return tick_interval;
   10118:	83c18793          	addi	a5,gp,-1988 # 2239c <_bss_start>
   1011c:	0007a783          	lw	a5,0(a5)
}
   10120:	00078513          	mv	a0,a5
   10124:	02c12083          	lw	ra,44(sp)
   10128:	02812403          	lw	s0,40(sp)
   1012c:	03010113          	addi	sp,sp,48
   10130:	00008067          	ret

00010134 <rt_os_tick_callback>:

void rt_os_tick_callback(void)
{
   10134:	ff010113          	addi	sp,sp,-16
   10138:	00112623          	sw	ra,12(sp)
   1013c:	00812423          	sw	s0,8(sp)
   10140:	01010413          	addi	s0,sp,16
    rt_interrupt_enter();
   10144:	305080ef          	jal	ra,18c48 <rt_interrupt_enter>
    
    rt_tick_increase();
   10148:	018080ef          	jal	ra,18160 <rt_tick_increase>

    rt_interrupt_leave();
   1014c:	365080ef          	jal	ra,18cb0 <rt_interrupt_leave>
}
   10150:	00000013          	nop
   10154:	00c12083          	lw	ra,12(sp)
   10158:	00812403          	lw	s0,8(sp)
   1015c:	01010113          	addi	sp,sp,16
   10160:	00008067          	ret

00010164 <SystemIrqHandler>:

void SystemIrqHandler(uint32_t mcause,uint32_t mepc,void *trapframe)
{
   10164:	fe010113          	addi	sp,sp,-32
   10168:	00112e23          	sw	ra,28(sp)
   1016c:	00812c23          	sw	s0,24(sp)
   10170:	02010413          	addi	s0,sp,32
   10174:	fea42623          	sw	a0,-20(s0)
   10178:	feb42423          	sw	a1,-24(s0)
   1017c:	fec42223          	sw	a2,-28(s0)
    if (mcause & 0x80000000) {
   10180:	fec42783          	lw	a5,-20(s0)
   10184:	0607d263          	bgez	a5,101e8 <SystemIrqHandler+0x84>
       // interrupt
       switch (mcause & 0x0ff) {
   10188:	fec42783          	lw	a5,-20(s0)
   1018c:	0ff7f713          	andi	a4,a5,255
   10190:	00700793          	li	a5,7
   10194:	04f71063          	bne	a4,a5,101d4 <SystemIrqHandler+0x70>
         case 0x07:
           //BOARD_DEBUG("Timer irq @%ld\n",pmtime[0]);
           pmtime[2]=pmtime[0]+tick_interval;  // Will as side effect clear the pending irq
   10198:	00012797          	auipc	a5,0x12
   1019c:	1c878793          	addi	a5,a5,456 # 22360 <pmtime>
   101a0:	0007a783          	lw	a5,0(a5)
   101a4:	0007a683          	lw	a3,0(a5)
   101a8:	83c18793          	addi	a5,gp,-1988 # 2239c <_bss_start>
   101ac:	0007a703          	lw	a4,0(a5)
   101b0:	00012797          	auipc	a5,0x12
   101b4:	1b078793          	addi	a5,a5,432 # 22360 <pmtime>
   101b8:	0007a783          	lw	a5,0(a5)
   101bc:	00878793          	addi	a5,a5,8
   101c0:	00e68733          	add	a4,a3,a4
   101c4:	00e7a023          	sw	a4,0(a5)
           rt_os_tick_callback();
   101c8:	f6dff0ef          	jal	ra,10134 <rt_os_tick_callback>
           break;
   101cc:	00000013          	nop
        BOARD_DEBUG("Trap Exception %lx at %lx\n",mcause,mepc);
        uart_readchar();        
        rt_hw_cpu_shutdown();
    }

}
   101d0:	0340006f          	j	10204 <SystemIrqHandler+0xa0>
          BOARD_DEBUG("Unexpeced interupt %lx\n",mcause);    
   101d4:	fec42583          	lw	a1,-20(s0)
   101d8:	00010517          	auipc	a0,0x10
   101dc:	ad850513          	addi	a0,a0,-1320 # 1fcb0 <__rt_init_end+0x1c>
   101e0:	720020ef          	jal	ra,12900 <rt_kprintf>
}
   101e4:	0200006f          	j	10204 <SystemIrqHandler+0xa0>
        BOARD_DEBUG("Trap Exception %lx at %lx\n",mcause,mepc);
   101e8:	fe842603          	lw	a2,-24(s0)
   101ec:	fec42583          	lw	a1,-20(s0)
   101f0:	00010517          	auipc	a0,0x10
   101f4:	ad850513          	addi	a0,a0,-1320 # 1fcc8 <__rt_init_end+0x34>
   101f8:	708020ef          	jal	ra,12900 <rt_kprintf>
        uart_readchar();        
   101fc:	290000ef          	jal	ra,1048c <uart_readchar>
        rt_hw_cpu_shutdown();
   10200:	108000ef          	jal	ra,10308 <rt_hw_cpu_shutdown>
}
   10204:	00000013          	nop
   10208:	01c12083          	lw	ra,28(sp)
   1020c:	01812403          	lw	s0,24(sp)
   10210:	02010113          	addi	sp,sp,32
   10214:	00008067          	ret

00010218 <rt_heap_begin_get>:

           /* end of free memory */
static void *heap_ptr = (void *)&end;         /* Previous end */

RT_WEAK void *rt_heap_begin_get(void)
{
   10218:	ff010113          	addi	sp,sp,-16
   1021c:	00112623          	sw	ra,12(sp)
   10220:	00812423          	sw	s0,8(sp)
   10224:	01010413          	addi	s0,sp,16
    // if (!rt_heap) rt_heap = malloc(RT_HEAP_SIZE);
    // RT_ASSERT(rt_heap!=NULL);
    BOARD_DEBUG("Allocated rt_heap at %lx, size %ld\n",heap_ptr,(void*)&_endofheap - heap_ptr );
   10228:	00012797          	auipc	a5,0x12
   1022c:	13c78793          	addi	a5,a5,316 # 22364 <heap_ptr>
   10230:	0007a683          	lw	a3,0(a5)
   10234:	00012797          	auipc	a5,0x12
   10238:	13078793          	addi	a5,a5,304 # 22364 <heap_ptr>
   1023c:	0007a783          	lw	a5,0(a5)
   10240:	0ffe0717          	auipc	a4,0xffe0
   10244:	db070713          	addi	a4,a4,-592 # ffefff0 <_endofheap>
   10248:	40f707b3          	sub	a5,a4,a5
   1024c:	00078613          	mv	a2,a5
   10250:	00068593          	mv	a1,a3
   10254:	00010517          	auipc	a0,0x10
   10258:	a9050513          	addi	a0,a0,-1392 # 1fce4 <__rt_init_end+0x50>
   1025c:	6a4020ef          	jal	ra,12900 <rt_kprintf>

    return heap_ptr;
   10260:	00012797          	auipc	a5,0x12
   10264:	10478793          	addi	a5,a5,260 # 22364 <heap_ptr>
   10268:	0007a783          	lw	a5,0(a5)
}
   1026c:	00078513          	mv	a0,a5
   10270:	00c12083          	lw	ra,12(sp)
   10274:	00812403          	lw	s0,8(sp)
   10278:	01010113          	addi	sp,sp,16
   1027c:	00008067          	ret

00010280 <rt_heap_end_get>:

RT_WEAK void *rt_heap_end_get(void)
{ 
   10280:	ff010113          	addi	sp,sp,-16
   10284:	00812623          	sw	s0,12(sp)
   10288:	01010413          	addi	s0,sp,16
  //  RT_ASSERT(rt_heap!=NULL);
//     return rt_heap + RT_HEAP_SIZE;
    return (void*)&_endofheap;;
   1028c:	0ffe0797          	auipc	a5,0xffe0
   10290:	d6478793          	addi	a5,a5,-668 # ffefff0 <_endofheap>
}
   10294:	00078513          	mv	a0,a5
   10298:	00c12403          	lw	s0,12(sp)
   1029c:	01010113          	addi	sp,sp,16
   102a0:	00008067          	ret

000102a4 <rt_hw_board_init>:

/**
 * This function will init your board.
 */
void rt_hw_board_init(void)
{
   102a4:	ff010113          	addi	sp,sp,-16
   102a8:	00112623          	sw	ra,12(sp)
   102ac:	00812423          	sw	s0,8(sp)
   102b0:	00912223          	sw	s1,4(sp)
   102b4:	01010413          	addi	s0,sp,16
     * TODO 1: OS Tick Configuration
     * Enable the hardware timer and call the rt_os_tick_callback function
     * periodically with the frequency RT_TICK_PER_SECOND. 
     */

    mtime_setinterval( ((long)(SYSCLK/RT_TICK_PER_SECOND)));
   102b8:	000cb7b7          	lui	a5,0xcb
   102bc:	73578513          	addi	a0,a5,1845 # cb735 <__global_pointer$+0xa8bd5>
   102c0:	dd9ff0ef          	jal	ra,10098 <mtime_setinterval>

    /* Call components board initial (use INIT_BOARD_EXPORT()) */
#ifdef RT_USING_COMPONENTS_INIT
    BOARD_DEBUG("invoking rt_components_board_init\n");
   102c4:	00010517          	auipc	a0,0x10
   102c8:	a4450513          	addi	a0,a0,-1468 # 1fd08 <__rt_init_end+0x74>
   102cc:	634020ef          	jal	ra,12900 <rt_kprintf>
    rt_components_board_init();
   102d0:	07d090ef          	jal	ra,19b4c <rt_components_board_init>
#endif

#if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
    rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
   102d4:	f45ff0ef          	jal	ra,10218 <rt_heap_begin_get>
   102d8:	00050493          	mv	s1,a0
   102dc:	fa5ff0ef          	jal	ra,10280 <rt_heap_end_get>
   102e0:	00050793          	mv	a5,a0
   102e4:	00078593          	mv	a1,a5
   102e8:	00048513          	mv	a0,s1
   102ec:	089020ef          	jal	ra,12b74 <rt_system_heap_init>
#endif

  //  #ifdef RT_USING_MUTEX
  //  rt_mutex_init(&malloc_mutex,"malloc",RT_IPC_FLAG_PRIO);
  //  #endif 
}
   102f0:	00000013          	nop
   102f4:	00c12083          	lw	ra,12(sp)
   102f8:	00812403          	lw	s0,8(sp)
   102fc:	00412483          	lw	s1,4(sp)
   10300:	01010113          	addi	sp,sp,16
   10304:	00008067          	ret

00010308 <rt_hw_cpu_shutdown>:


void rt_hw_cpu_shutdown()
{
   10308:	fe010113          	addi	sp,sp,-32
   1030c:	00112e23          	sw	ra,28(sp)
   10310:	00812c23          	sw	s0,24(sp)
   10314:	02010413          	addi	s0,sp,32
     clear_csr(mie,MIP_MTIP); // Disable Timer Interrupt
   10318:	08000793          	li	a5,128
   1031c:	3047b7f3          	csrrc	a5,mie,a5
   10320:	fef42623          	sw	a5,-20(s0)
     rt_hw_interrupt_disable();
   10324:	3250b0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>

     void (*sram_base)() = (void*)SRAM_BASE;
   10328:	c00007b7          	lui	a5,0xc0000
   1032c:	fef42423          	sw	a5,-24(s0)
     sram_base();
   10330:	fe842783          	lw	a5,-24(s0)
   10334:	000780e7          	jalr	a5 # c0000000 <__top+0xb0000010>
}
   10338:	00000013          	nop
   1033c:	01c12083          	lw	ra,28(sp)
   10340:	01812403          	lw	s0,24(sp)
   10344:	02010113          	addi	sp,sp,32
   10348:	00008067          	ret

0001034c <uart_init>:


#ifdef RT_USING_CONSOLE

static int uart_init(void)
{
   1034c:	ff010113          	addi	sp,sp,-16
   10350:	00112623          	sw	ra,12(sp)
   10354:	00812423          	sw	s0,8(sp)
   10358:	01010413          	addi	s0,sp,16

    uart_setBaudRate(PLATFORM_BAUDRATE);
   1035c:	0007a7b7          	lui	a5,0x7a
   10360:	12078513          	addi	a0,a5,288 # 7a120 <__global_pointer$+0x575c0>
   10364:	334000ef          	jal	ra,10698 <uart_setBaudRate>
    return 0;
   10368:	00000793          	li	a5,0
}
   1036c:	00078513          	mv	a0,a5
   10370:	00c12083          	lw	ra,12(sp)
   10374:	00812403          	lw	s0,8(sp)
   10378:	01010113          	addi	sp,sp,16
   1037c:	00008067          	ret

00010380 <rt_hw_console_output>:
INIT_BOARD_EXPORT(uart_init);


void rt_hw_console_output(const char *str)
{
   10380:	fe010113          	addi	sp,sp,-32
   10384:	00112e23          	sw	ra,28(sp)
   10388:	00812c23          	sw	s0,24(sp)
   1038c:	02010413          	addi	s0,sp,32
   10390:	fea42623          	sw	a0,-20(s0)
// Output the string 'str' through the uart."
   while (*str) {
   10394:	0340006f          	j	103c8 <rt_hw_console_output+0x48>
     if (*str=='\n') uart_writechar('\r');
   10398:	fec42783          	lw	a5,-20(s0)
   1039c:	0007c703          	lbu	a4,0(a5)
   103a0:	00a00793          	li	a5,10
   103a4:	00f71663          	bne	a4,a5,103b0 <rt_hw_console_output+0x30>
   103a8:	00d00513          	li	a0,13
   103ac:	088000ef          	jal	ra,10434 <uart_writechar>
     uart_writechar(*str++);      
   103b0:	fec42783          	lw	a5,-20(s0)
   103b4:	00178713          	addi	a4,a5,1
   103b8:	fee42623          	sw	a4,-20(s0)
   103bc:	0007c783          	lbu	a5,0(a5)
   103c0:	00078513          	mv	a0,a5
   103c4:	070000ef          	jal	ra,10434 <uart_writechar>
   while (*str) {
   103c8:	fec42783          	lw	a5,-20(s0)
   103cc:	0007c783          	lbu	a5,0(a5)
   103d0:	fc0794e3          	bnez	a5,10398 <rt_hw_console_output+0x18>
   }    
}
   103d4:	00000013          	nop
   103d8:	00000013          	nop
   103dc:	01c12083          	lw	ra,28(sp)
   103e0:	01812403          	lw	s0,24(sp)
   103e4:	02010113          	addi	sp,sp,32
   103e8:	00008067          	ret

000103ec <main>:
//#include <rtdevice.h>

//#define LED_PIN 25

int main(void)
{
   103ec:	fe010113          	addi	sp,sp,-32
   103f0:	00112e23          	sw	ra,28(sp)
   103f4:	00812c23          	sw	s0,24(sp)
   103f8:	02010413          	addi	s0,sp,32
    rt_kprintf("Hello, RT-Thread!\n");
   103fc:	00010517          	auipc	a0,0x10
   10400:	93050513          	addi	a0,a0,-1744 # 1fd2c <__rt_init_end+0x98>
   10404:	4fc020ef          	jal	ra,12900 <rt_kprintf>

    //rt_pin_mode(LED_PIN, PIN_MODE_OUTPUT);

    int cnt  = 0;
   10408:	fe042623          	sw	zero,-20(s0)
    while (1)
    {
        //rt_pin_write(LED_PIN, 1);
        rt_thread_mdelay(1000);
   1040c:	3e800513          	li	a0,1000
   10410:	7a4030ef          	jal	ra,13bb4 <rt_thread_mdelay>
        rt_kprintf("Test %d\n",cnt++);
   10414:	fec42783          	lw	a5,-20(s0)
   10418:	00178713          	addi	a4,a5,1
   1041c:	fee42623          	sw	a4,-20(s0)
   10420:	00078593          	mv	a1,a5
   10424:	00010517          	auipc	a0,0x10
   10428:	91c50513          	addi	a0,a0,-1764 # 1fd40 <__rt_init_end+0xac>
   1042c:	4d4020ef          	jal	ra,12900 <rt_kprintf>
        rt_thread_mdelay(1000);
   10430:	fddff06f          	j	1040c <main+0x20>

00010434 <uart_writechar>:




void uart_writechar(char c)
{
   10434:	fe010113          	addi	sp,sp,-32
   10438:	00812e23          	sw	s0,28(sp)
   1043c:	02010413          	addi	s0,sp,32
   10440:	00050793          	mv	a5,a0
   10444:	fef407a3          	sb	a5,-17(s0)

 #if defined(ENABLE_SEND_DELAY) && !defined(SIM) 
   wait(1000);
 #endif
  while (!(uartadr[UART_STATUS] & 0x2)); // Wait while transmit buffer full
   10448:	00000013          	nop
   1044c:	00012797          	auipc	a5,0x12
   10450:	f1c78793          	addi	a5,a5,-228 # 22368 <uartadr>
   10454:	0007a783          	lw	a5,0(a5)
   10458:	00478793          	addi	a5,a5,4
   1045c:	0007a783          	lw	a5,0(a5)
   10460:	0027f793          	andi	a5,a5,2
   10464:	fe0784e3          	beqz	a5,1044c <uart_writechar+0x18>
  uartadr[UART_TX]=(uint32_t)c;
   10468:	00012797          	auipc	a5,0x12
   1046c:	f0078793          	addi	a5,a5,-256 # 22368 <uartadr>
   10470:	0007a783          	lw	a5,0(a5)
   10474:	fef44703          	lbu	a4,-17(s0)
   10478:	00e7a023          	sw	a4,0(a5)

}
   1047c:	00000013          	nop
   10480:	01c12403          	lw	s0,28(sp)
   10484:	02010113          	addi	sp,sp,32
   10488:	00008067          	ret

0001048c <uart_readchar>:

char uart_readchar()
{
   1048c:	fe010113          	addi	sp,sp,-32
   10490:	00812e23          	sw	s0,28(sp)
   10494:	02010413          	addi	s0,sp,32
uint32_t rx_data;

  while (!(uartadr[UART_STATUS] & 0x01)) {
   10498:	00000013          	nop
   1049c:	00012797          	auipc	a5,0x12
   104a0:	ecc78793          	addi	a5,a5,-308 # 22368 <uartadr>
   104a4:	0007a783          	lw	a5,0(a5)
   104a8:	00478793          	addi	a5,a5,4
   104ac:	0007a783          	lw	a5,0(a5)
   104b0:	0017f793          	andi	a5,a5,1
   104b4:	fe0784e3          	beqz	a5,1049c <uart_readchar+0x10>
   
  }; // Wait while receive buffer empty
  rx_data=uartadr[UART_RECV];
   104b8:	00012797          	auipc	a5,0x12
   104bc:	eb078793          	addi	a5,a5,-336 # 22368 <uartadr>
   104c0:	0007a783          	lw	a5,0(a5)
   104c4:	0007a783          	lw	a5,0(a5)
   104c8:	fef42623          	sw	a5,-20(s0)
  if (rx_data & 0x80000000) framing_errors++;
   104cc:	fec42783          	lw	a5,-20(s0)
   104d0:	0007dc63          	bgez	a5,104e8 <uart_readchar+0x5c>
   104d4:	84018793          	addi	a5,gp,-1984 # 223a0 <framing_errors>
   104d8:	0007a783          	lw	a5,0(a5)
   104dc:	00178713          	addi	a4,a5,1
   104e0:	84018793          	addi	a5,gp,-1984 # 223a0 <framing_errors>
   104e4:	00e7a023          	sw	a4,0(a5)
  return (char)rx_data;
   104e8:	fec42783          	lw	a5,-20(s0)
   104ec:	0ff7f793          	andi	a5,a5,255
}
   104f0:	00078513          	mv	a0,a5
   104f4:	01c12403          	lw	s0,28(sp)
   104f8:	02010113          	addi	sp,sp,32
   104fc:	00008067          	ret

00010500 <uart_wait_receive>:


int uart_wait_receive(long timeout)
{
   10500:	fd010113          	addi	sp,sp,-48
   10504:	02812623          	sw	s0,44(sp)
   10508:	03010413          	addi	s0,sp,48
   1050c:	fca42e23          	sw	a0,-36(s0)
uint8_t status;
bool forever = timeout < 0;
   10510:	fdc42783          	lw	a5,-36(s0)
   10514:	01f7d793          	srli	a5,a5,0x1f
   10518:	fef407a3          	sb	a5,-17(s0)
uint32_t rx_data;

  do {
    status=uartadr[UART_STATUS];
   1051c:	00012797          	auipc	a5,0x12
   10520:	e4c78793          	addi	a5,a5,-436 # 22368 <uartadr>
   10524:	0007a783          	lw	a5,0(a5)
   10528:	00478793          	addi	a5,a5,4
   1052c:	0007a783          	lw	a5,0(a5)
   10530:	fef40723          	sb	a5,-18(s0)
    if (status & 0x01) { // receive buffer not empty?
   10534:	fee44783          	lbu	a5,-18(s0)
   10538:	0017f793          	andi	a5,a5,1
   1053c:	04078063          	beqz	a5,1057c <uart_wait_receive+0x7c>
      rx_data=uartadr[UART_RECV];
   10540:	00012797          	auipc	a5,0x12
   10544:	e2878793          	addi	a5,a5,-472 # 22368 <uartadr>
   10548:	0007a783          	lw	a5,0(a5)
   1054c:	0007a783          	lw	a5,0(a5)
   10550:	fef42423          	sw	a5,-24(s0)
      if (rx_data & 0x80000000) framing_errors++;
   10554:	fe842783          	lw	a5,-24(s0)
   10558:	0007dc63          	bgez	a5,10570 <uart_wait_receive+0x70>
   1055c:	84018793          	addi	a5,gp,-1984 # 223a0 <framing_errors>
   10560:	0007a783          	lw	a5,0(a5)
   10564:	00178713          	addi	a4,a5,1
   10568:	84018793          	addi	a5,gp,-1984 # 223a0 <framing_errors>
   1056c:	00e7a023          	sw	a4,0(a5)
      return rx_data & 0x0ff;
   10570:	fe842783          	lw	a5,-24(s0)
   10574:	0ff7f793          	andi	a5,a5,255
   10578:	0240006f          	j	1059c <uart_wait_receive+0x9c>
    } else
      timeout--;
   1057c:	fdc42783          	lw	a5,-36(s0)
   10580:	fff78793          	addi	a5,a5,-1
   10584:	fcf42e23          	sw	a5,-36(s0)

  }while(forever ||  timeout>=0 );
   10588:	fef44783          	lbu	a5,-17(s0)
   1058c:	f80798e3          	bnez	a5,1051c <uart_wait_receive+0x1c>
   10590:	fdc42783          	lw	a5,-36(s0)
   10594:	f807d4e3          	bgez	a5,1051c <uart_wait_receive+0x1c>

  return -1;
   10598:	fff00793          	li	a5,-1

}
   1059c:	00078513          	mv	a0,a5
   105a0:	02c12403          	lw	s0,44(sp)
   105a4:	03010113          	addi	sp,sp,48
   105a8:	00008067          	ret

000105ac <_setDivisor>:



static uint16_t l_divisor=0;

static inline void _setDivisor(uint32_t divisor){
   105ac:	fe010113          	addi	sp,sp,-32
   105b0:	00812e23          	sw	s0,28(sp)
   105b4:	02010413          	addi	s0,sp,32
   105b8:	fea42623          	sw	a0,-20(s0)

   l_divisor = divisor;
   105bc:	fec42783          	lw	a5,-20(s0)
   105c0:	01079713          	slli	a4,a5,0x10
   105c4:	01075713          	srli	a4,a4,0x10
   105c8:	84418793          	addi	a5,gp,-1980 # 223a4 <l_divisor>
   105cc:	00e79023          	sh	a4,0(a5)
  //avoid chaning Baudrate while transmit in progress transmitter ready
   while (!(uartadr[UART_STATUS] & 0x2)); 
   105d0:	00000013          	nop
   105d4:	00012797          	auipc	a5,0x12
   105d8:	d9478793          	addi	a5,a5,-620 # 22368 <uartadr>
   105dc:	0007a783          	lw	a5,0(a5)
   105e0:	00478793          	addi	a5,a5,4
   105e4:	0007a783          	lw	a5,0(a5)
   105e8:	0027f793          	andi	a5,a5,2
   105ec:	fe0784e3          	beqz	a5,105d4 <_setDivisor+0x28>
   uartadr[UART_CONTROL]= 0x030000L | (uint16_t)divisor; // Set Baudrate divisor and enable port and set extended mode
   105f0:	fec42783          	lw	a5,-20(s0)
   105f4:	01079793          	slli	a5,a5,0x10
   105f8:	0107d793          	srli	a5,a5,0x10
   105fc:	00078713          	mv	a4,a5
   10600:	000307b7          	lui	a5,0x30
   10604:	00f76733          	or	a4,a4,a5
   10608:	00012797          	auipc	a5,0x12
   1060c:	d6078793          	addi	a5,a5,-672 # 22368 <uartadr>
   10610:	0007a783          	lw	a5,0(a5)
   10614:	00878793          	addi	a5,a5,8
   10618:	00e7a023          	sw	a4,0(a5)
}
   1061c:	00000013          	nop
   10620:	01c12403          	lw	s0,28(sp)
   10624:	02010113          	addi	sp,sp,32
   10628:	00008067          	ret

0001062c <uart_setDivisor>:

void uart_setDivisor(uint32_t divisor)
{
   1062c:	fe010113          	addi	sp,sp,-32
   10630:	00112e23          	sw	ra,28(sp)
   10634:	00812c23          	sw	s0,24(sp)
   10638:	02010413          	addi	s0,sp,32
   1063c:	fea42623          	sw	a0,-20(s0)
    _setDivisor(divisor);
   10640:	fec42503          	lw	a0,-20(s0)
   10644:	f69ff0ef          	jal	ra,105ac <_setDivisor>
}
   10648:	00000013          	nop
   1064c:	01c12083          	lw	ra,28(sp)
   10650:	01812403          	lw	s0,24(sp)
   10654:	02010113          	addi	sp,sp,32
   10658:	00008067          	ret

0001065c <uart_getDivisor>:

uint32_t uart_getDivisor()
{
   1065c:	ff010113          	addi	sp,sp,-16
   10660:	00812623          	sw	s0,12(sp)
   10664:	01010413          	addi	s0,sp,16
  return  uartadr[UART_CONTROL] & 0x0ffff ;
   10668:	00012797          	auipc	a5,0x12
   1066c:	d0078793          	addi	a5,a5,-768 # 22368 <uartadr>
   10670:	0007a783          	lw	a5,0(a5)
   10674:	00878793          	addi	a5,a5,8
   10678:	0007a703          	lw	a4,0(a5)
   1067c:	000107b7          	lui	a5,0x10
   10680:	fff78793          	addi	a5,a5,-1 # ffff <__load-0x1>
   10684:	00f777b3          	and	a5,a4,a5
}
   10688:	00078513          	mv	a0,a5
   1068c:	00c12403          	lw	s0,12(sp)
   10690:	01010113          	addi	sp,sp,16
   10694:	00008067          	ret

00010698 <uart_setBaudRate>:

void uart_setBaudRate(int baudrate) {
   10698:	fe010113          	addi	sp,sp,-32
   1069c:	00112e23          	sw	ra,28(sp)
   106a0:	00812c23          	sw	s0,24(sp)
   106a4:	02010413          	addi	s0,sp,32
   106a8:	fea42623          	sw	a0,-20(s0)


   uart_setDivisor(SYSCLK / baudrate -1);
   106ac:	04f797b7          	lui	a5,0x4f79
   106b0:	0d578713          	addi	a4,a5,213 # 4f790d5 <__global_pointer$+0x4f56575>
   106b4:	fec42783          	lw	a5,-20(s0)
   106b8:	02f747b3          	div	a5,a4,a5
   106bc:	fff78793          	addi	a5,a5,-1
   106c0:	00078513          	mv	a0,a5
   106c4:	f69ff0ef          	jal	ra,1062c <uart_setDivisor>
}
   106c8:	00000013          	nop
   106cc:	01c12083          	lw	ra,28(sp)
   106d0:	01812403          	lw	s0,24(sp)
   106d4:	02010113          	addi	sp,sp,32
   106d8:	00008067          	ret

000106dc <uart_getFramingErrors>:



uint32_t uart_getFramingErrors()
{
   106dc:	fe010113          	addi	sp,sp,-32
   106e0:	00812e23          	sw	s0,28(sp)
   106e4:	02010413          	addi	s0,sp,32
uint32_t fe=framing_errors;
   106e8:	84018793          	addi	a5,gp,-1984 # 223a0 <framing_errors>
   106ec:	0007a783          	lw	a5,0(a5)
   106f0:	fef42623          	sw	a5,-20(s0)
  framing_errors=0;
   106f4:	84018793          	addi	a5,gp,-1984 # 223a0 <framing_errors>
   106f8:	0007a023          	sw	zero,0(a5)
  return fe;
   106fc:	fec42783          	lw	a5,-20(s0)
}
   10700:	00078513          	mv	a0,a5
   10704:	01c12403          	lw	s0,28(sp)
   10708:	02010113          	addi	sp,sp,32
   1070c:	00008067          	ret

00010710 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
   10710:	fe010113          	addi	sp,sp,-32
   10714:	00812e23          	sw	s0,28(sp)
   10718:	02010413          	addi	s0,sp,32
   1071c:	fea42623          	sw	a0,-20(s0)
   10720:	feb42423          	sw	a1,-24(s0)
    l->next->prev = n;
   10724:	fec42783          	lw	a5,-20(s0)
   10728:	0007a783          	lw	a5,0(a5)
   1072c:	fe842703          	lw	a4,-24(s0)
   10730:	00e7a223          	sw	a4,4(a5)
    n->next = l->next;
   10734:	fec42783          	lw	a5,-20(s0)
   10738:	0007a703          	lw	a4,0(a5)
   1073c:	fe842783          	lw	a5,-24(s0)
   10740:	00e7a023          	sw	a4,0(a5)

    l->next = n;
   10744:	fec42783          	lw	a5,-20(s0)
   10748:	fe842703          	lw	a4,-24(s0)
   1074c:	00e7a023          	sw	a4,0(a5)
    n->prev = l;
   10750:	fe842783          	lw	a5,-24(s0)
   10754:	fec42703          	lw	a4,-20(s0)
   10758:	00e7a223          	sw	a4,4(a5)
}
   1075c:	00000013          	nop
   10760:	01c12403          	lw	s0,28(sp)
   10764:	02010113          	addi	sp,sp,32
   10768:	00008067          	ret

0001076c <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
   1076c:	fe010113          	addi	sp,sp,-32
   10770:	00812e23          	sw	s0,28(sp)
   10774:	02010413          	addi	s0,sp,32
   10778:	fea42623          	sw	a0,-20(s0)
    n->next->prev = n->prev;
   1077c:	fec42783          	lw	a5,-20(s0)
   10780:	0007a783          	lw	a5,0(a5)
   10784:	fec42703          	lw	a4,-20(s0)
   10788:	00472703          	lw	a4,4(a4)
   1078c:	00e7a223          	sw	a4,4(a5)
    n->prev->next = n->next;
   10790:	fec42783          	lw	a5,-20(s0)
   10794:	0047a783          	lw	a5,4(a5)
   10798:	fec42703          	lw	a4,-20(s0)
   1079c:	00072703          	lw	a4,0(a4)
   107a0:	00e7a023          	sw	a4,0(a5)

    n->next = n->prev = n;
   107a4:	fec42783          	lw	a5,-20(s0)
   107a8:	fec42703          	lw	a4,-20(s0)
   107ac:	00e7a223          	sw	a4,4(a5)
   107b0:	fec42783          	lw	a5,-20(s0)
   107b4:	0047a703          	lw	a4,4(a5)
   107b8:	fec42783          	lw	a5,-20(s0)
   107bc:	00e7a023          	sw	a4,0(a5)
}
   107c0:	00000013          	nop
   107c4:	01c12403          	lw	s0,28(sp)
   107c8:	02010113          	addi	sp,sp,32
   107cc:	00008067          	ret

000107d0 <rt_object_attach_sethook>:
 *        attaches to kernel object system.
 *
 * @param hook is the hook function.
 */
void rt_object_attach_sethook(void (*hook)(struct rt_object *object))
{
   107d0:	fe010113          	addi	sp,sp,-32
   107d4:	00812e23          	sw	s0,28(sp)
   107d8:	02010413          	addi	s0,sp,32
   107dc:	fea42623          	sw	a0,-20(s0)
    rt_object_attach_hook = hook;
   107e0:	84818793          	addi	a5,gp,-1976 # 223a8 <rt_object_attach_hook>
   107e4:	fec42703          	lw	a4,-20(s0)
   107e8:	00e7a023          	sw	a4,0(a5)
}
   107ec:	00000013          	nop
   107f0:	01c12403          	lw	s0,28(sp)
   107f4:	02010113          	addi	sp,sp,32
   107f8:	00008067          	ret

000107fc <rt_object_detach_sethook>:
 *        detaches from kernel object system.
 *
 * @param hook is the hook function
 */
void rt_object_detach_sethook(void (*hook)(struct rt_object *object))
{
   107fc:	fe010113          	addi	sp,sp,-32
   10800:	00812e23          	sw	s0,28(sp)
   10804:	02010413          	addi	s0,sp,32
   10808:	fea42623          	sw	a0,-20(s0)
    rt_object_detach_hook = hook;
   1080c:	84c18793          	addi	a5,gp,-1972 # 223ac <rt_object_detach_hook>
   10810:	fec42703          	lw	a4,-20(s0)
   10814:	00e7a023          	sw	a4,0(a5)
}
   10818:	00000013          	nop
   1081c:	01c12403          	lw	s0,28(sp)
   10820:	02010113          	addi	sp,sp,32
   10824:	00008067          	ret

00010828 <rt_object_trytake_sethook>:
 *            message queue - message is received by thread
 *
 * @param hook is the hook function.
 */
void rt_object_trytake_sethook(void (*hook)(struct rt_object *object))
{
   10828:	fe010113          	addi	sp,sp,-32
   1082c:	00812e23          	sw	s0,28(sp)
   10830:	02010413          	addi	s0,sp,32
   10834:	fea42623          	sw	a0,-20(s0)
    rt_object_trytake_hook = hook;
   10838:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   1083c:	fec42703          	lw	a4,-20(s0)
   10840:	00e7a023          	sw	a4,0(a5)
}
   10844:	00000013          	nop
   10848:	01c12403          	lw	s0,28(sp)
   1084c:	02010113          	addi	sp,sp,32
   10850:	00008067          	ret

00010854 <rt_object_take_sethook>:
 *            timer - timer is started
 *
 * @param hook the hook function.
 */
void rt_object_take_sethook(void (*hook)(struct rt_object *object))
{
   10854:	fe010113          	addi	sp,sp,-32
   10858:	00812e23          	sw	s0,28(sp)
   1085c:	02010413          	addi	s0,sp,32
   10860:	fea42623          	sw	a0,-20(s0)
    rt_object_take_hook = hook;
   10864:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   10868:	fec42703          	lw	a4,-20(s0)
   1086c:	00e7a023          	sw	a4,0(a5)
}
   10870:	00000013          	nop
   10874:	01c12403          	lw	s0,28(sp)
   10878:	02010113          	addi	sp,sp,32
   1087c:	00008067          	ret

00010880 <rt_object_put_sethook>:
 *        is put to kernel object system.
 *
 * @param hook is the hook function
 */
void rt_object_put_sethook(void (*hook)(struct rt_object *object))
{
   10880:	fe010113          	addi	sp,sp,-32
   10884:	00812e23          	sw	s0,28(sp)
   10888:	02010413          	addi	s0,sp,32
   1088c:	fea42623          	sw	a0,-20(s0)
    rt_object_put_hook = hook;
   10890:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   10894:	fec42703          	lw	a4,-20(s0)
   10898:	00e7a023          	sw	a4,0(a5)
}
   1089c:	00000013          	nop
   108a0:	01c12403          	lw	s0,28(sp)
   108a4:	02010113          	addi	sp,sp,32
   108a8:	00008067          	ret

000108ac <rt_object_get_information>:
 *
 * @return the object type information or RT_NULL
 */
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
   108ac:	fd010113          	addi	sp,sp,-48
   108b0:	02812623          	sw	s0,44(sp)
   108b4:	03010413          	addi	s0,sp,48
   108b8:	fca42e23          	sw	a0,-36(s0)
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
   108bc:	fe042623          	sw	zero,-20(s0)
   108c0:	0480006f          	j	10908 <rt_object_get_information+0x5c>
        if (_object_container[index].type == type) return &_object_container[index];
   108c4:	00011717          	auipc	a4,0x11
   108c8:	5cc70713          	addi	a4,a4,1484 # 21e90 <_fdata>
   108cc:	fec42783          	lw	a5,-20(s0)
   108d0:	00479793          	slli	a5,a5,0x4
   108d4:	00f707b3          	add	a5,a4,a5
   108d8:	0007a783          	lw	a5,0(a5)
   108dc:	fdc42703          	lw	a4,-36(s0)
   108e0:	00f71e63          	bne	a4,a5,108fc <rt_object_get_information+0x50>
   108e4:	fec42783          	lw	a5,-20(s0)
   108e8:	00479713          	slli	a4,a5,0x4
   108ec:	00011797          	auipc	a5,0x11
   108f0:	5a478793          	addi	a5,a5,1444 # 21e90 <_fdata>
   108f4:	00f707b3          	add	a5,a4,a5
   108f8:	0200006f          	j	10918 <rt_object_get_information+0x6c>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
   108fc:	fec42783          	lw	a5,-20(s0)
   10900:	00178793          	addi	a5,a5,1
   10904:	fef42623          	sw	a5,-20(s0)
   10908:	fec42703          	lw	a4,-20(s0)
   1090c:	00900793          	li	a5,9
   10910:	fae7dae3          	bge	a5,a4,108c4 <rt_object_get_information+0x18>

    return RT_NULL;
   10914:	00000793          	li	a5,0
}
   10918:	00078513          	mv	a0,a5
   1091c:	02c12403          	lw	s0,44(sp)
   10920:	03010113          	addi	sp,sp,48
   10924:	00008067          	ret

00010928 <rt_object_get_length>:
 *             RT_Object_Class_Thread/Semaphore/Mutex... etc
 *
 * @return the length of object list
 */
int rt_object_get_length(enum rt_object_class_type type)
{
   10928:	fd010113          	addi	sp,sp,-48
   1092c:	02112623          	sw	ra,44(sp)
   10930:	02812423          	sw	s0,40(sp)
   10934:	03010413          	addi	s0,sp,48
   10938:	fca42e23          	sw	a0,-36(s0)
    int count = 0;
   1093c:	fe042623          	sw	zero,-20(s0)
    rt_ubase_t level;
    struct rt_list_node *node = RT_NULL;
   10940:	fe042423          	sw	zero,-24(s0)
    struct rt_object_information *information = RT_NULL;
   10944:	fe042223          	sw	zero,-28(s0)

    information = rt_object_get_information((enum rt_object_class_type)type);
   10948:	fdc42503          	lw	a0,-36(s0)
   1094c:	f61ff0ef          	jal	ra,108ac <rt_object_get_information>
   10950:	fea42223          	sw	a0,-28(s0)
    if (information == RT_NULL) return 0;
   10954:	fe442783          	lw	a5,-28(s0)
   10958:	00079663          	bnez	a5,10964 <rt_object_get_length+0x3c>
   1095c:	00000793          	li	a5,0
   10960:	0580006f          	j	109b8 <rt_object_get_length+0x90>

    level = rt_hw_interrupt_disable();
   10964:	4e40b0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10968:	00050793          	mv	a5,a0
   1096c:	fef42023          	sw	a5,-32(s0)
    /* get the count of objects */
    rt_list_for_each(node, &(information->object_list))
   10970:	fe442783          	lw	a5,-28(s0)
   10974:	0047a783          	lw	a5,4(a5)
   10978:	fef42423          	sw	a5,-24(s0)
   1097c:	01c0006f          	j	10998 <rt_object_get_length+0x70>
    {
        count ++;
   10980:	fec42783          	lw	a5,-20(s0)
   10984:	00178793          	addi	a5,a5,1
   10988:	fef42623          	sw	a5,-20(s0)
    rt_list_for_each(node, &(information->object_list))
   1098c:	fe842783          	lw	a5,-24(s0)
   10990:	0007a783          	lw	a5,0(a5)
   10994:	fef42423          	sw	a5,-24(s0)
   10998:	fe442783          	lw	a5,-28(s0)
   1099c:	00478793          	addi	a5,a5,4
   109a0:	fe842703          	lw	a4,-24(s0)
   109a4:	fcf71ee3          	bne	a4,a5,10980 <rt_object_get_length+0x58>
    }
    rt_hw_interrupt_enable(level);
   109a8:	fe042783          	lw	a5,-32(s0)
   109ac:	00078513          	mv	a0,a5
   109b0:	4a00b0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return count;
   109b4:	fec42783          	lw	a5,-20(s0)
}
   109b8:	00078513          	mv	a0,a5
   109bc:	02c12083          	lw	ra,44(sp)
   109c0:	02812403          	lw	s0,40(sp)
   109c4:	03010113          	addi	sp,sp,48
   109c8:	00008067          	ret

000109cc <rt_object_get_pointers>:
 * @param maxlen is the maximum number of pointers can be saved.
 *
 * @return the copied number of object pointers.
 */
int rt_object_get_pointers(enum rt_object_class_type type, rt_object_t *pointers, int maxlen)
{
   109cc:	fc010113          	addi	sp,sp,-64
   109d0:	02112e23          	sw	ra,60(sp)
   109d4:	02812c23          	sw	s0,56(sp)
   109d8:	04010413          	addi	s0,sp,64
   109dc:	fca42623          	sw	a0,-52(s0)
   109e0:	fcb42423          	sw	a1,-56(s0)
   109e4:	fcc42223          	sw	a2,-60(s0)
    int index = 0;
   109e8:	fe042623          	sw	zero,-20(s0)
    rt_ubase_t level;

    struct rt_object *object;
    struct rt_list_node *node = RT_NULL;
   109ec:	fe042423          	sw	zero,-24(s0)
    struct rt_object_information *information = RT_NULL;
   109f0:	fe042223          	sw	zero,-28(s0)

    if (maxlen <= 0) return 0;
   109f4:	fc442783          	lw	a5,-60(s0)
   109f8:	00f04663          	bgtz	a5,10a04 <rt_object_get_pointers+0x38>
   109fc:	00000793          	li	a5,0
   10a00:	0ac0006f          	j	10aac <rt_object_get_pointers+0xe0>

    information = rt_object_get_information((enum rt_object_class_type)type);
   10a04:	fcc42503          	lw	a0,-52(s0)
   10a08:	ea5ff0ef          	jal	ra,108ac <rt_object_get_information>
   10a0c:	fea42223          	sw	a0,-28(s0)
    if (information == RT_NULL) return 0;
   10a10:	fe442783          	lw	a5,-28(s0)
   10a14:	00079663          	bnez	a5,10a20 <rt_object_get_pointers+0x54>
   10a18:	00000793          	li	a5,0
   10a1c:	0900006f          	j	10aac <rt_object_get_pointers+0xe0>

    level = rt_hw_interrupt_disable();
   10a20:	4280b0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10a24:	00050793          	mv	a5,a0
   10a28:	fef42023          	sw	a5,-32(s0)
    /* retrieve pointer of object */
    rt_list_for_each(node, &(information->object_list))
   10a2c:	fe442783          	lw	a5,-28(s0)
   10a30:	0047a783          	lw	a5,4(a5)
   10a34:	fef42423          	sw	a5,-24(s0)
   10a38:	04c0006f          	j	10a84 <rt_object_get_pointers+0xb8>
    {
        object = rt_list_entry(node, struct rt_object, list);
   10a3c:	fe842783          	lw	a5,-24(s0)
   10a40:	ff478793          	addi	a5,a5,-12
   10a44:	fcf42e23          	sw	a5,-36(s0)

        pointers[index] = object;
   10a48:	fec42783          	lw	a5,-20(s0)
   10a4c:	00279793          	slli	a5,a5,0x2
   10a50:	fc842703          	lw	a4,-56(s0)
   10a54:	00f707b3          	add	a5,a4,a5
   10a58:	fdc42703          	lw	a4,-36(s0)
   10a5c:	00e7a023          	sw	a4,0(a5)
        index ++;
   10a60:	fec42783          	lw	a5,-20(s0)
   10a64:	00178793          	addi	a5,a5,1
   10a68:	fef42623          	sw	a5,-20(s0)

        if (index >= maxlen) break;
   10a6c:	fec42703          	lw	a4,-20(s0)
   10a70:	fc442783          	lw	a5,-60(s0)
   10a74:	02f75263          	bge	a4,a5,10a98 <rt_object_get_pointers+0xcc>
    rt_list_for_each(node, &(information->object_list))
   10a78:	fe842783          	lw	a5,-24(s0)
   10a7c:	0007a783          	lw	a5,0(a5)
   10a80:	fef42423          	sw	a5,-24(s0)
   10a84:	fe442783          	lw	a5,-28(s0)
   10a88:	00478793          	addi	a5,a5,4
   10a8c:	fe842703          	lw	a4,-24(s0)
   10a90:	faf716e3          	bne	a4,a5,10a3c <rt_object_get_pointers+0x70>
   10a94:	0080006f          	j	10a9c <rt_object_get_pointers+0xd0>
        if (index >= maxlen) break;
   10a98:	00000013          	nop
    }
    rt_hw_interrupt_enable(level);
   10a9c:	fe042783          	lw	a5,-32(s0)
   10aa0:	00078513          	mv	a0,a5
   10aa4:	3ac0b0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return index;
   10aa8:	fec42783          	lw	a5,-20(s0)
}
   10aac:	00078513          	mv	a0,a5
   10ab0:	03c12083          	lw	ra,60(sp)
   10ab4:	03812403          	lw	s0,56(sp)
   10ab8:	04010113          	addi	sp,sp,64
   10abc:	00008067          	ret

00010ac0 <rt_object_init>:
 * @param name is the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
   10ac0:	fd010113          	addi	sp,sp,-48
   10ac4:	02112623          	sw	ra,44(sp)
   10ac8:	02812423          	sw	s0,40(sp)
   10acc:	02912223          	sw	s1,36(sp)
   10ad0:	03010413          	addi	s0,sp,48
   10ad4:	fca42e23          	sw	a0,-36(s0)
   10ad8:	fcb42c23          	sw	a1,-40(s0)
   10adc:	fcc42a23          	sw	a2,-44(s0)
    register rt_base_t temp;
    struct rt_list_node *node = RT_NULL;
   10ae0:	fe042623          	sw	zero,-20(s0)
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif /* RT_USING_MODULE */

    /* get object information */
    information = rt_object_get_information(type);
   10ae4:	fd842503          	lw	a0,-40(s0)
   10ae8:	dc5ff0ef          	jal	ra,108ac <rt_object_get_information>
   10aec:	fea42423          	sw	a0,-24(s0)
    RT_ASSERT(information != RT_NULL);
   10af0:	fe842783          	lw	a5,-24(s0)
   10af4:	00079e63          	bnez	a5,10b10 <rt_object_init+0x50>
   10af8:	14500613          	li	a2,325
   10afc:	0000f597          	auipc	a1,0xf
   10b00:	2e458593          	addi	a1,a1,740 # 1fde0 <__FUNCTION__.2516>
   10b04:	0000f517          	auipc	a0,0xf
   10b08:	24850513          	addi	a0,a0,584 # 1fd4c <__rt_init_end+0xb8>
   10b0c:	538020ef          	jal	ra,13044 <rt_assert_handler>

    /* check object type to avoid re-initialization */

    /* enter critical */
    rt_enter_critical();
   10b10:	7c5070ef          	jal	ra,18ad4 <rt_enter_critical>
    /* try to find object */
    for (node  = information->object_list.next;
   10b14:	fe842783          	lw	a5,-24(s0)
   10b18:	0047a783          	lw	a5,4(a5)
   10b1c:	fef42623          	sw	a5,-20(s0)
   10b20:	0480006f          	j	10b68 <rt_object_init+0xa8>
            node != &(information->object_list);
            node  = node->next)
    {
        struct rt_object *obj;

        obj = rt_list_entry(node, struct rt_object, list);
   10b24:	fec42783          	lw	a5,-20(s0)
   10b28:	ff478793          	addi	a5,a5,-12
   10b2c:	fef42223          	sw	a5,-28(s0)
        if (obj) /* skip warning when disable debug */
   10b30:	fe442783          	lw	a5,-28(s0)
   10b34:	02078463          	beqz	a5,10b5c <rt_object_init+0x9c>
        {
            RT_ASSERT(obj != object);
   10b38:	fe442703          	lw	a4,-28(s0)
   10b3c:	fdc42783          	lw	a5,-36(s0)
   10b40:	00f71e63          	bne	a4,a5,10b5c <rt_object_init+0x9c>
   10b44:	15500613          	li	a2,341
   10b48:	0000f597          	auipc	a1,0xf
   10b4c:	29858593          	addi	a1,a1,664 # 1fde0 <__FUNCTION__.2516>
   10b50:	0000f517          	auipc	a0,0xf
   10b54:	21450513          	addi	a0,a0,532 # 1fd64 <__rt_init_end+0xd0>
   10b58:	4ec020ef          	jal	ra,13044 <rt_assert_handler>
            node  = node->next)
   10b5c:	fec42783          	lw	a5,-20(s0)
   10b60:	0007a783          	lw	a5,0(a5)
   10b64:	fef42623          	sw	a5,-20(s0)
            node != &(information->object_list);
   10b68:	fe842783          	lw	a5,-24(s0)
   10b6c:	00478793          	addi	a5,a5,4
    for (node  = information->object_list.next;
   10b70:	fec42703          	lw	a4,-20(s0)
   10b74:	faf718e3          	bne	a4,a5,10b24 <rt_object_init+0x64>
        }
    }
    /* leave critical */
    rt_exit_critical();
   10b78:	7bd070ef          	jal	ra,18b34 <rt_exit_critical>

    /* initialize object's parameters */
    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
   10b7c:	fd842783          	lw	a5,-40(s0)
   10b80:	0ff7f793          	andi	a5,a5,255
   10b84:	f807e793          	ori	a5,a5,-128
   10b88:	0ff7f713          	andi	a4,a5,255
   10b8c:	fdc42783          	lw	a5,-36(s0)
   10b90:	00e78423          	sb	a4,8(a5)
    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
   10b94:	fdc42783          	lw	a5,-36(s0)
   10b98:	00800613          	li	a2,8
   10b9c:	fd442583          	lw	a1,-44(s0)
   10ba0:	00078513          	mv	a0,a5
   10ba4:	3e9000ef          	jal	ra,1178c <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
   10ba8:	84818793          	addi	a5,gp,-1976 # 223a8 <rt_object_attach_hook>
   10bac:	0007a783          	lw	a5,0(a5)
   10bb0:	00078a63          	beqz	a5,10bc4 <rt_object_init+0x104>
   10bb4:	84818793          	addi	a5,gp,-1976 # 223a8 <rt_object_attach_hook>
   10bb8:	0007a783          	lw	a5,0(a5)
   10bbc:	fdc42503          	lw	a0,-36(s0)
   10bc0:	000780e7          	jalr	a5

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
   10bc4:	2840b0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10bc8:	00050493          	mv	s1,a0
    }
    else
#endif /* RT_USING_MODULE */
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
   10bcc:	fe842783          	lw	a5,-24(s0)
   10bd0:	00478713          	addi	a4,a5,4
   10bd4:	fdc42783          	lw	a5,-36(s0)
   10bd8:	00c78793          	addi	a5,a5,12
   10bdc:	00078593          	mv	a1,a5
   10be0:	00070513          	mv	a0,a4
   10be4:	b2dff0ef          	jal	ra,10710 <rt_list_insert_after>
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
   10be8:	00048513          	mv	a0,s1
   10bec:	2640b0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   10bf0:	00000013          	nop
   10bf4:	02c12083          	lw	ra,44(sp)
   10bf8:	02812403          	lw	s0,40(sp)
   10bfc:	02412483          	lw	s1,36(sp)
   10c00:	03010113          	addi	sp,sp,48
   10c04:	00008067          	ret

00010c08 <rt_object_detach>:
 *        and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
   10c08:	fe010113          	addi	sp,sp,-32
   10c0c:	00112e23          	sw	ra,28(sp)
   10c10:	00812c23          	sw	s0,24(sp)
   10c14:	00912a23          	sw	s1,20(sp)
   10c18:	02010413          	addi	s0,sp,32
   10c1c:	fea42623          	sw	a0,-20(s0)
    register rt_base_t temp;

    /* object check */
    RT_ASSERT(object != RT_NULL);
   10c20:	fec42783          	lw	a5,-20(s0)
   10c24:	00079e63          	bnez	a5,10c40 <rt_object_detach+0x38>
   10c28:	18200613          	li	a2,386
   10c2c:	0000f597          	auipc	a1,0xf
   10c30:	1c458593          	addi	a1,a1,452 # 1fdf0 <__FUNCTION__.2525>
   10c34:	0000f517          	auipc	a0,0xf
   10c38:	14050513          	addi	a0,a0,320 # 1fd74 <__rt_init_end+0xe0>
   10c3c:	408020ef          	jal	ra,13044 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
   10c40:	84c18793          	addi	a5,gp,-1972 # 223ac <rt_object_detach_hook>
   10c44:	0007a783          	lw	a5,0(a5)
   10c48:	00078a63          	beqz	a5,10c5c <rt_object_detach+0x54>
   10c4c:	84c18793          	addi	a5,gp,-1972 # 223ac <rt_object_detach_hook>
   10c50:	0007a783          	lw	a5,0(a5)
   10c54:	fec42503          	lw	a0,-20(s0)
   10c58:	000780e7          	jalr	a5

    /* reset object type */
    object->type = 0;
   10c5c:	fec42783          	lw	a5,-20(s0)
   10c60:	00078423          	sb	zero,8(a5)

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
   10c64:	1e40b0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10c68:	00050493          	mv	s1,a0

    /* remove from old list */
    rt_list_remove(&(object->list));
   10c6c:	fec42783          	lw	a5,-20(s0)
   10c70:	00c78793          	addi	a5,a5,12
   10c74:	00078513          	mv	a0,a5
   10c78:	af5ff0ef          	jal	ra,1076c <rt_list_remove>

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
   10c7c:	00048513          	mv	a0,s1
   10c80:	1d00b0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   10c84:	00000013          	nop
   10c88:	01c12083          	lw	ra,28(sp)
   10c8c:	01812403          	lw	s0,24(sp)
   10c90:	01412483          	lw	s1,20(sp)
   10c94:	02010113          	addi	sp,sp,32
   10c98:	00008067          	ret

00010c9c <rt_object_allocate>:
 * @param name is the object name. In system, the object's name must be unique.
 *
 * @return object
 */
rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
{
   10c9c:	fd010113          	addi	sp,sp,-48
   10ca0:	02112623          	sw	ra,44(sp)
   10ca4:	02812423          	sw	s0,40(sp)
   10ca8:	02912223          	sw	s1,36(sp)
   10cac:	03010413          	addi	s0,sp,48
   10cb0:	fca42e23          	sw	a0,-36(s0)
   10cb4:	fcb42c23          	sw	a1,-40(s0)
    struct rt_object_information *information;
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif /* RT_USING_MODULE */

    RT_DEBUG_NOT_IN_INTERRUPT;
   10cb8:	1900b0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10cbc:	fea42623          	sw	a0,-20(s0)
   10cc0:	058080ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   10cc4:	00050793          	mv	a5,a0
   10cc8:	02078863          	beqz	a5,10cf8 <rt_object_allocate+0x5c>
   10ccc:	0000f597          	auipc	a1,0xf
   10cd0:	13858593          	addi	a1,a1,312 # 1fe04 <__FUNCTION__.2534>
   10cd4:	0000f517          	auipc	a0,0xf
   10cd8:	0b450513          	addi	a0,a0,180 # 1fd88 <__rt_init_end+0xf4>
   10cdc:	425010ef          	jal	ra,12900 <rt_kprintf>
   10ce0:	1a600613          	li	a2,422
   10ce4:	0000f597          	auipc	a1,0xf
   10ce8:	12058593          	addi	a1,a1,288 # 1fe04 <__FUNCTION__.2534>
   10cec:	0000f517          	auipc	a0,0xf
   10cf0:	0c450513          	addi	a0,a0,196 # 1fdb0 <__rt_init_end+0x11c>
   10cf4:	350020ef          	jal	ra,13044 <rt_assert_handler>
   10cf8:	fec42503          	lw	a0,-20(s0)
   10cfc:	1540b0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* get object information */
    information = rt_object_get_information(type);
   10d00:	fdc42503          	lw	a0,-36(s0)
   10d04:	ba9ff0ef          	jal	ra,108ac <rt_object_get_information>
   10d08:	fea42423          	sw	a0,-24(s0)
    RT_ASSERT(information != RT_NULL);
   10d0c:	fe842783          	lw	a5,-24(s0)
   10d10:	00079e63          	bnez	a5,10d2c <rt_object_allocate+0x90>
   10d14:	1aa00613          	li	a2,426
   10d18:	0000f597          	auipc	a1,0xf
   10d1c:	0ec58593          	addi	a1,a1,236 # 1fe04 <__FUNCTION__.2534>
   10d20:	0000f517          	auipc	a0,0xf
   10d24:	02c50513          	addi	a0,a0,44 # 1fd4c <__rt_init_end+0xb8>
   10d28:	31c020ef          	jal	ra,13044 <rt_assert_handler>

    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
   10d2c:	fe842783          	lw	a5,-24(s0)
   10d30:	00c7a783          	lw	a5,12(a5)
   10d34:	00078513          	mv	a0,a5
   10d38:	6d9010ef          	jal	ra,12c10 <rt_malloc>
   10d3c:	fea42223          	sw	a0,-28(s0)
    if (object == RT_NULL)
   10d40:	fe442783          	lw	a5,-28(s0)
   10d44:	00079663          	bnez	a5,10d50 <rt_object_allocate+0xb4>
    {
        /* no memory can be allocated */
        return RT_NULL;
   10d48:	00000793          	li	a5,0
   10d4c:	0940006f          	j	10de0 <rt_object_allocate+0x144>
    }

    /* clean memory data of object */
    rt_memset(object, 0x0, information->object_size);
   10d50:	fe842783          	lw	a5,-24(s0)
   10d54:	00c7a783          	lw	a5,12(a5)
   10d58:	00078613          	mv	a2,a5
   10d5c:	00000593          	li	a1,0
   10d60:	fe442503          	lw	a0,-28(s0)
   10d64:	458000ef          	jal	ra,111bc <rt_memset>

    /* initialize object's parameters */

    /* set object type */
    object->type = type;
   10d68:	fdc42783          	lw	a5,-36(s0)
   10d6c:	0ff7f713          	andi	a4,a5,255
   10d70:	fe442783          	lw	a5,-28(s0)
   10d74:	00e78423          	sb	a4,8(a5)

    /* set object flag */
    object->flag = 0;
   10d78:	fe442783          	lw	a5,-28(s0)
   10d7c:	000784a3          	sb	zero,9(a5)

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
   10d80:	fe442783          	lw	a5,-28(s0)
   10d84:	00800613          	li	a2,8
   10d88:	fd842583          	lw	a1,-40(s0)
   10d8c:	00078513          	mv	a0,a5
   10d90:	1fd000ef          	jal	ra,1178c <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
   10d94:	84818793          	addi	a5,gp,-1976 # 223a8 <rt_object_attach_hook>
   10d98:	0007a783          	lw	a5,0(a5)
   10d9c:	00078a63          	beqz	a5,10db0 <rt_object_allocate+0x114>
   10da0:	84818793          	addi	a5,gp,-1976 # 223a8 <rt_object_attach_hook>
   10da4:	0007a783          	lw	a5,0(a5)
   10da8:	fe442503          	lw	a0,-28(s0)
   10dac:	000780e7          	jalr	a5

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
   10db0:	0980b0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10db4:	00050493          	mv	s1,a0
    }
    else
#endif /* RT_USING_MODULE */
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
   10db8:	fe842783          	lw	a5,-24(s0)
   10dbc:	00478713          	addi	a4,a5,4
   10dc0:	fe442783          	lw	a5,-28(s0)
   10dc4:	00c78793          	addi	a5,a5,12
   10dc8:	00078593          	mv	a1,a5
   10dcc:	00070513          	mv	a0,a4
   10dd0:	941ff0ef          	jal	ra,10710 <rt_list_insert_after>
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
   10dd4:	00048513          	mv	a0,s1
   10dd8:	0780b0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* return object */
    return object;
   10ddc:	fe442783          	lw	a5,-28(s0)
}
   10de0:	00078513          	mv	a0,a5
   10de4:	02c12083          	lw	ra,44(sp)
   10de8:	02812403          	lw	s0,40(sp)
   10dec:	02412483          	lw	s1,36(sp)
   10df0:	03010113          	addi	sp,sp,48
   10df4:	00008067          	ret

00010df8 <rt_object_delete>:
 * @brief This function will delete an object and release object memory.
 *
 * @param object is the specified object to be deleted.
 */
void rt_object_delete(rt_object_t object)
{
   10df8:	fe010113          	addi	sp,sp,-32
   10dfc:	00112e23          	sw	ra,28(sp)
   10e00:	00812c23          	sw	s0,24(sp)
   10e04:	00912a23          	sw	s1,20(sp)
   10e08:	02010413          	addi	s0,sp,32
   10e0c:	fea42623          	sw	a0,-20(s0)
    register rt_base_t temp;

    /* object check */
    RT_ASSERT(object != RT_NULL);
   10e10:	fec42783          	lw	a5,-20(s0)
   10e14:	00079e63          	bnez	a5,10e30 <rt_object_delete+0x38>
   10e18:	1e400613          	li	a2,484
   10e1c:	0000f597          	auipc	a1,0xf
   10e20:	ffc58593          	addi	a1,a1,-4 # 1fe18 <__FUNCTION__.2539>
   10e24:	0000f517          	auipc	a0,0xf
   10e28:	f5050513          	addi	a0,a0,-176 # 1fd74 <__rt_init_end+0xe0>
   10e2c:	218020ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(!(object->type & RT_Object_Class_Static));
   10e30:	fec42783          	lw	a5,-20(s0)
   10e34:	0087c783          	lbu	a5,8(a5)
   10e38:	01879793          	slli	a5,a5,0x18
   10e3c:	4187d793          	srai	a5,a5,0x18
   10e40:	0007de63          	bgez	a5,10e5c <rt_object_delete+0x64>
   10e44:	1e500613          	li	a2,485
   10e48:	0000f597          	auipc	a1,0xf
   10e4c:	fd058593          	addi	a1,a1,-48 # 1fe18 <__FUNCTION__.2539>
   10e50:	0000f517          	auipc	a0,0xf
   10e54:	f6450513          	addi	a0,a0,-156 # 1fdb4 <__rt_init_end+0x120>
   10e58:	1ec020ef          	jal	ra,13044 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
   10e5c:	84c18793          	addi	a5,gp,-1972 # 223ac <rt_object_detach_hook>
   10e60:	0007a783          	lw	a5,0(a5)
   10e64:	00078a63          	beqz	a5,10e78 <rt_object_delete+0x80>
   10e68:	84c18793          	addi	a5,gp,-1972 # 223ac <rt_object_detach_hook>
   10e6c:	0007a783          	lw	a5,0(a5)
   10e70:	fec42503          	lw	a0,-20(s0)
   10e74:	000780e7          	jalr	a5

    /* reset object type */
    object->type = RT_Object_Class_Null;
   10e78:	fec42783          	lw	a5,-20(s0)
   10e7c:	00078423          	sb	zero,8(a5)

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
   10e80:	7c90a0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10e84:	00050493          	mv	s1,a0

    /* remove from old list */
    rt_list_remove(&(object->list));
   10e88:	fec42783          	lw	a5,-20(s0)
   10e8c:	00c78793          	addi	a5,a5,12
   10e90:	00078513          	mv	a0,a5
   10e94:	8d9ff0ef          	jal	ra,1076c <rt_list_remove>

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
   10e98:	00048513          	mv	a0,s1
   10e9c:	7b50a0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* free the memory of object */
    RT_KERNEL_FREE(object);
   10ea0:	fec42503          	lw	a0,-20(s0)
   10ea4:	6a9010ef          	jal	ra,12d4c <rt_free>
}
   10ea8:	00000013          	nop
   10eac:	01c12083          	lw	ra,28(sp)
   10eb0:	01812403          	lw	s0,24(sp)
   10eb4:	01412483          	lw	s1,20(sp)
   10eb8:	02010113          	addi	sp,sp,32
   10ebc:	00008067          	ret

00010ec0 <rt_object_is_systemobject>:
 * @param object is the specified object to be judged.
 *
 * @return RT_TRUE if a system object, RT_FALSE for others.
 */
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
   10ec0:	fe010113          	addi	sp,sp,-32
   10ec4:	00112e23          	sw	ra,28(sp)
   10ec8:	00812c23          	sw	s0,24(sp)
   10ecc:	02010413          	addi	s0,sp,32
   10ed0:	fea42623          	sw	a0,-20(s0)
    /* object check */
    RT_ASSERT(object != RT_NULL);
   10ed4:	fec42783          	lw	a5,-20(s0)
   10ed8:	00079e63          	bnez	a5,10ef4 <rt_object_is_systemobject+0x34>
   10edc:	20700613          	li	a2,519
   10ee0:	0000f597          	auipc	a1,0xf
   10ee4:	f4c58593          	addi	a1,a1,-180 # 1fe2c <__FUNCTION__.2543>
   10ee8:	0000f517          	auipc	a0,0xf
   10eec:	e8c50513          	addi	a0,a0,-372 # 1fd74 <__rt_init_end+0xe0>
   10ef0:	154020ef          	jal	ra,13044 <rt_assert_handler>

    if (object->type & RT_Object_Class_Static)
   10ef4:	fec42783          	lw	a5,-20(s0)
   10ef8:	0087c783          	lbu	a5,8(a5)
   10efc:	01879793          	slli	a5,a5,0x18
   10f00:	4187d793          	srai	a5,a5,0x18
   10f04:	0007d663          	bgez	a5,10f10 <rt_object_is_systemobject+0x50>
        return RT_TRUE;
   10f08:	00100793          	li	a5,1
   10f0c:	0080006f          	j	10f14 <rt_object_is_systemobject+0x54>

    return RT_FALSE;
   10f10:	00000793          	li	a5,0
}
   10f14:	00078513          	mv	a0,a5
   10f18:	01c12083          	lw	ra,28(sp)
   10f1c:	01812403          	lw	s0,24(sp)
   10f20:	02010113          	addi	sp,sp,32
   10f24:	00008067          	ret

00010f28 <rt_object_get_type>:
 * @param object is the specified object to be get type.
 *
 * @return the type of object.
 */
rt_uint8_t rt_object_get_type(rt_object_t object)
{
   10f28:	fe010113          	addi	sp,sp,-32
   10f2c:	00112e23          	sw	ra,28(sp)
   10f30:	00812c23          	sw	s0,24(sp)
   10f34:	02010413          	addi	s0,sp,32
   10f38:	fea42623          	sw	a0,-20(s0)
    /* object check */
    RT_ASSERT(object != RT_NULL);
   10f3c:	fec42783          	lw	a5,-20(s0)
   10f40:	00079e63          	bnez	a5,10f5c <rt_object_get_type+0x34>
   10f44:	21a00613          	li	a2,538
   10f48:	0000f597          	auipc	a1,0xf
   10f4c:	f0058593          	addi	a1,a1,-256 # 1fe48 <__FUNCTION__.2547>
   10f50:	0000f517          	auipc	a0,0xf
   10f54:	e2450513          	addi	a0,a0,-476 # 1fd74 <__rt_init_end+0xe0>
   10f58:	0ec020ef          	jal	ra,13044 <rt_assert_handler>

    return object->type & ~RT_Object_Class_Static;
   10f5c:	fec42783          	lw	a5,-20(s0)
   10f60:	0087c783          	lbu	a5,8(a5)
   10f64:	07f7f793          	andi	a5,a5,127
   10f68:	0ff7f793          	andi	a5,a5,255
}
   10f6c:	00078513          	mv	a0,a5
   10f70:	01c12083          	lw	ra,28(sp)
   10f74:	01812403          	lw	s0,24(sp)
   10f78:	02010113          	addi	sp,sp,32
   10f7c:	00008067          	ret

00010f80 <rt_object_find>:
 * in object container.
 *
 * @note this function shall not be invoked in interrupt status.
 */
rt_object_t rt_object_find(const char *name, rt_uint8_t type)
{
   10f80:	fd010113          	addi	sp,sp,-48
   10f84:	02112623          	sw	ra,44(sp)
   10f88:	02812423          	sw	s0,40(sp)
   10f8c:	03010413          	addi	s0,sp,48
   10f90:	fca42e23          	sw	a0,-36(s0)
   10f94:	00058793          	mv	a5,a1
   10f98:	fcf40da3          	sb	a5,-37(s0)
    struct rt_object *object = RT_NULL;
   10f9c:	fe042423          	sw	zero,-24(s0)
    struct rt_list_node *node = RT_NULL;
   10fa0:	fe042623          	sw	zero,-20(s0)
    struct rt_object_information *information = RT_NULL;
   10fa4:	fe042223          	sw	zero,-28(s0)

    information = rt_object_get_information((enum rt_object_class_type)type);
   10fa8:	fdb44783          	lbu	a5,-37(s0)
   10fac:	00078513          	mv	a0,a5
   10fb0:	8fdff0ef          	jal	ra,108ac <rt_object_get_information>
   10fb4:	fea42223          	sw	a0,-28(s0)

    /* parameter check */
    if ((name == RT_NULL) || (information == RT_NULL)) return RT_NULL;
   10fb8:	fdc42783          	lw	a5,-36(s0)
   10fbc:	00078663          	beqz	a5,10fc8 <rt_object_find+0x48>
   10fc0:	fe442783          	lw	a5,-28(s0)
   10fc4:	00079663          	bnez	a5,10fd0 <rt_object_find+0x50>
   10fc8:	00000793          	li	a5,0
   10fcc:	0b80006f          	j	11084 <rt_object_find+0x104>

    /* which is invoke in interrupt status */
    RT_DEBUG_NOT_IN_INTERRUPT;
   10fd0:	6790a0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   10fd4:	fea42023          	sw	a0,-32(s0)
   10fd8:	541070ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   10fdc:	00050793          	mv	a5,a0
   10fe0:	02078863          	beqz	a5,11010 <rt_object_find+0x90>
   10fe4:	0000f597          	auipc	a1,0xf
   10fe8:	e7858593          	addi	a1,a1,-392 # 1fe5c <__FUNCTION__.2556>
   10fec:	0000f517          	auipc	a0,0xf
   10ff0:	d9c50513          	addi	a0,a0,-612 # 1fd88 <__rt_init_end+0xf4>
   10ff4:	10d010ef          	jal	ra,12900 <rt_kprintf>
   10ff8:	23800613          	li	a2,568
   10ffc:	0000f597          	auipc	a1,0xf
   11000:	e6058593          	addi	a1,a1,-416 # 1fe5c <__FUNCTION__.2556>
   11004:	0000f517          	auipc	a0,0xf
   11008:	dac50513          	addi	a0,a0,-596 # 1fdb0 <__rt_init_end+0x11c>
   1100c:	038020ef          	jal	ra,13044 <rt_assert_handler>
   11010:	fe042503          	lw	a0,-32(s0)
   11014:	63d0a0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* enter critical */
    rt_enter_critical();
   11018:	2bd070ef          	jal	ra,18ad4 <rt_enter_critical>

    /* try to find object */
    rt_list_for_each(node, &(information->object_list))
   1101c:	fe442783          	lw	a5,-28(s0)
   11020:	0047a783          	lw	a5,4(a5)
   11024:	fef42623          	sw	a5,-20(s0)
   11028:	0440006f          	j	1106c <rt_object_find+0xec>
    {
        object = rt_list_entry(node, struct rt_object, list);
   1102c:	fec42783          	lw	a5,-20(s0)
   11030:	ff478793          	addi	a5,a5,-12
   11034:	fef42423          	sw	a5,-24(s0)
        if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
   11038:	fe842783          	lw	a5,-24(s0)
   1103c:	00800613          	li	a2,8
   11040:	fdc42583          	lw	a1,-36(s0)
   11044:	00078513          	mv	a0,a5
   11048:	031000ef          	jal	ra,11878 <rt_strncmp>
   1104c:	00050793          	mv	a5,a0
   11050:	00079863          	bnez	a5,11060 <rt_object_find+0xe0>
        {
            /* leave critical */
            rt_exit_critical();
   11054:	2e1070ef          	jal	ra,18b34 <rt_exit_critical>

            return object;
   11058:	fe842783          	lw	a5,-24(s0)
   1105c:	0280006f          	j	11084 <rt_object_find+0x104>
    rt_list_for_each(node, &(information->object_list))
   11060:	fec42783          	lw	a5,-20(s0)
   11064:	0007a783          	lw	a5,0(a5)
   11068:	fef42623          	sw	a5,-20(s0)
   1106c:	fe442783          	lw	a5,-28(s0)
   11070:	00478793          	addi	a5,a5,4
   11074:	fec42703          	lw	a4,-20(s0)
   11078:	faf71ae3          	bne	a4,a5,1102c <rt_object_find+0xac>
        }
    }

    /* leave critical */
    rt_exit_critical();
   1107c:	2b9070ef          	jal	ra,18b34 <rt_exit_critical>

    return RT_NULL;
   11080:	00000793          	li	a5,0
}
   11084:	00078513          	mv	a0,a5
   11088:	02c12083          	lw	ra,44(sp)
   1108c:	02812403          	lw	s0,40(sp)
   11090:	03010113          	addi	sp,sp,48
   11094:	00008067          	ret

00011098 <rt_get_errno>:
 * This function gets the global errno for the current thread.
 *
 * @return errno
 */
rt_err_t rt_get_errno(void)
{
   11098:	fe010113          	addi	sp,sp,-32
   1109c:	00112e23          	sw	ra,28(sp)
   110a0:	00812c23          	sw	s0,24(sp)
   110a4:	02010413          	addi	s0,sp,32
    rt_thread_t tid;

    if (rt_interrupt_get_nest() != 0)
   110a8:	471070ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   110ac:	00050793          	mv	a5,a0
   110b0:	00078863          	beqz	a5,110c0 <rt_get_errno+0x28>
    {
        /* it's in interrupt context */
        return __rt_errno;
   110b4:	85018793          	addi	a5,gp,-1968 # 223b0 <__rt_errno>
   110b8:	0007a783          	lw	a5,0(a5)
   110bc:	0280006f          	j	110e4 <rt_get_errno+0x4c>
    }

    tid = rt_thread_self();
   110c0:	410020ef          	jal	ra,134d0 <rt_thread_self>
   110c4:	fea42623          	sw	a0,-20(s0)
    if (tid == RT_NULL)
   110c8:	fec42783          	lw	a5,-20(s0)
   110cc:	00079863          	bnez	a5,110dc <rt_get_errno+0x44>
        return __rt_errno;
   110d0:	85018793          	addi	a5,gp,-1968 # 223b0 <__rt_errno>
   110d4:	0007a783          	lw	a5,0(a5)
   110d8:	00c0006f          	j	110e4 <rt_get_errno+0x4c>

    return tid->error;
   110dc:	fec42783          	lw	a5,-20(s0)
   110e0:	0307a783          	lw	a5,48(a5)
}
   110e4:	00078513          	mv	a0,a5
   110e8:	01c12083          	lw	ra,28(sp)
   110ec:	01812403          	lw	s0,24(sp)
   110f0:	02010113          	addi	sp,sp,32
   110f4:	00008067          	ret

000110f8 <rt_set_errno>:
 * This function sets the global errno for the current thread.
 *
 * @param error is the errno shall be set.
 */
void rt_set_errno(rt_err_t error)
{
   110f8:	fd010113          	addi	sp,sp,-48
   110fc:	02112623          	sw	ra,44(sp)
   11100:	02812423          	sw	s0,40(sp)
   11104:	03010413          	addi	s0,sp,48
   11108:	fca42e23          	sw	a0,-36(s0)
    rt_thread_t tid;

    if (rt_interrupt_get_nest() != 0)
   1110c:	40d070ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   11110:	00050793          	mv	a5,a0
   11114:	00078a63          	beqz	a5,11128 <rt_set_errno+0x30>
    {
        /* it's in interrupt context */
        __rt_errno = error;
   11118:	85018793          	addi	a5,gp,-1968 # 223b0 <__rt_errno>
   1111c:	fdc42703          	lw	a4,-36(s0)
   11120:	00e7a023          	sw	a4,0(a5)

        return;
   11124:	0300006f          	j	11154 <rt_set_errno+0x5c>
    }

    tid = rt_thread_self();
   11128:	3a8020ef          	jal	ra,134d0 <rt_thread_self>
   1112c:	fea42623          	sw	a0,-20(s0)
    if (tid == RT_NULL)
   11130:	fec42783          	lw	a5,-20(s0)
   11134:	00079a63          	bnez	a5,11148 <rt_set_errno+0x50>
    {
        __rt_errno = error;
   11138:	85018793          	addi	a5,gp,-1968 # 223b0 <__rt_errno>
   1113c:	fdc42703          	lw	a4,-36(s0)
   11140:	00e7a023          	sw	a4,0(a5)

        return;
   11144:	0100006f          	j	11154 <rt_set_errno+0x5c>
    }

    tid->error = error;
   11148:	fec42783          	lw	a5,-20(s0)
   1114c:	fdc42703          	lw	a4,-36(s0)
   11150:	02e7a823          	sw	a4,48(a5)
}
   11154:	02c12083          	lw	ra,44(sp)
   11158:	02812403          	lw	s0,40(sp)
   1115c:	03010113          	addi	sp,sp,48
   11160:	00008067          	ret

00011164 <_rt_errno>:
 * This function returns the address of the current thread errno.
 *
 * @return The errno address.
 */
int *_rt_errno(void)
{
   11164:	fe010113          	addi	sp,sp,-32
   11168:	00112e23          	sw	ra,28(sp)
   1116c:	00812c23          	sw	s0,24(sp)
   11170:	02010413          	addi	s0,sp,32
    rt_thread_t tid;

    if (rt_interrupt_get_nest() != 0)
   11174:	3a5070ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   11178:	00050793          	mv	a5,a0
   1117c:	00078663          	beqz	a5,11188 <_rt_errno+0x24>
        return (int *)&__rt_errno;
   11180:	85018793          	addi	a5,gp,-1968 # 223b0 <__rt_errno>
   11184:	0240006f          	j	111a8 <_rt_errno+0x44>

    tid = rt_thread_self();
   11188:	348020ef          	jal	ra,134d0 <rt_thread_self>
   1118c:	fea42623          	sw	a0,-20(s0)
    if (tid != RT_NULL)
   11190:	fec42783          	lw	a5,-20(s0)
   11194:	00078863          	beqz	a5,111a4 <_rt_errno+0x40>
        return (int *) & (tid->error);
   11198:	fec42783          	lw	a5,-20(s0)
   1119c:	03078793          	addi	a5,a5,48
   111a0:	0080006f          	j	111a8 <_rt_errno+0x44>

    return (int *)&__rt_errno;
   111a4:	85018793          	addi	a5,gp,-1968 # 223b0 <__rt_errno>
}
   111a8:	00078513          	mv	a0,a5
   111ac:	01c12083          	lw	ra,28(sp)
   111b0:	01812403          	lw	s0,24(sp)
   111b4:	02010113          	addi	sp,sp,32
   111b8:	00008067          	ret

000111bc <rt_memset>:
 * @param  count number of bytes to be set.
 *
 * @return The address of source memory.
 */
RT_WEAK void *rt_memset(void *s, int c, rt_ubase_t count)
{
   111bc:	fd010113          	addi	sp,sp,-48
   111c0:	02812623          	sw	s0,44(sp)
   111c4:	03010413          	addi	s0,sp,48
   111c8:	fca42e23          	sw	a0,-36(s0)
   111cc:	fcb42c23          	sw	a1,-40(s0)
   111d0:	fcc42a23          	sw	a2,-44(s0)
#define LBLOCKSIZE      (sizeof(long))
#define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
#define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)

    unsigned int i;
    char *m = (char *)s;
   111d4:	fdc42783          	lw	a5,-36(s0)
   111d8:	fef42623          	sw	a5,-20(s0)
    unsigned long buffer;
    unsigned long *aligned_addr;
    unsigned int d = c & 0xff;  /* To avoid sign extension, copy C to an
   111dc:	fd842783          	lw	a5,-40(s0)
   111e0:	0ff7f793          	andi	a5,a5,255
   111e4:	fef42223          	sw	a5,-28(s0)
                                unsigned variable.  */

    if (!TOO_SMALL(count) && !UNALIGNED(s))
   111e8:	fd442703          	lw	a4,-44(s0)
   111ec:	00300793          	li	a5,3
   111f0:	10e7f063          	bgeu	a5,a4,112f0 <rt_memset+0x134>
   111f4:	fdc42783          	lw	a5,-36(s0)
   111f8:	0037f793          	andi	a5,a5,3
   111fc:	0e079a63          	bnez	a5,112f0 <rt_memset+0x134>
    {
        /* If we get this far, we know that count is large and s is word-aligned. */
        aligned_addr = (unsigned long *)s;
   11200:	fdc42783          	lw	a5,-36(s0)
   11204:	fef42423          	sw	a5,-24(s0)
        /* Store d into each char sized location in buffer so that
         * we can set large blocks quickly.
         */
        if (LBLOCKSIZE == 4)
        {
            buffer = (d << 8) | d;
   11208:	fe442783          	lw	a5,-28(s0)
   1120c:	00879793          	slli	a5,a5,0x8
   11210:	fe442703          	lw	a4,-28(s0)
   11214:	00f767b3          	or	a5,a4,a5
   11218:	fef42023          	sw	a5,-32(s0)
            buffer |= (buffer << 16);
   1121c:	fe042783          	lw	a5,-32(s0)
   11220:	01079793          	slli	a5,a5,0x10
   11224:	fe042703          	lw	a4,-32(s0)
   11228:	00f767b3          	or	a5,a4,a5
   1122c:	fef42023          	sw	a5,-32(s0)
            buffer = 0;
            for (i = 0; i < LBLOCKSIZE; i ++)
                buffer = (buffer << 8) | d;
        }

        while (count >= LBLOCKSIZE * 4)
   11230:	0600006f          	j	11290 <rt_memset+0xd4>
        {
            *aligned_addr++ = buffer;
   11234:	fe842783          	lw	a5,-24(s0)
   11238:	00478713          	addi	a4,a5,4
   1123c:	fee42423          	sw	a4,-24(s0)
   11240:	fe042703          	lw	a4,-32(s0)
   11244:	00e7a023          	sw	a4,0(a5)
            *aligned_addr++ = buffer;
   11248:	fe842783          	lw	a5,-24(s0)
   1124c:	00478713          	addi	a4,a5,4
   11250:	fee42423          	sw	a4,-24(s0)
   11254:	fe042703          	lw	a4,-32(s0)
   11258:	00e7a023          	sw	a4,0(a5)
            *aligned_addr++ = buffer;
   1125c:	fe842783          	lw	a5,-24(s0)
   11260:	00478713          	addi	a4,a5,4
   11264:	fee42423          	sw	a4,-24(s0)
   11268:	fe042703          	lw	a4,-32(s0)
   1126c:	00e7a023          	sw	a4,0(a5)
            *aligned_addr++ = buffer;
   11270:	fe842783          	lw	a5,-24(s0)
   11274:	00478713          	addi	a4,a5,4
   11278:	fee42423          	sw	a4,-24(s0)
   1127c:	fe042703          	lw	a4,-32(s0)
   11280:	00e7a023          	sw	a4,0(a5)
            count -= 4 * LBLOCKSIZE;
   11284:	fd442783          	lw	a5,-44(s0)
   11288:	ff078793          	addi	a5,a5,-16
   1128c:	fcf42a23          	sw	a5,-44(s0)
        while (count >= LBLOCKSIZE * 4)
   11290:	fd442703          	lw	a4,-44(s0)
   11294:	00f00793          	li	a5,15
   11298:	f8e7eee3          	bltu	a5,a4,11234 <rt_memset+0x78>
        }

        while (count >= LBLOCKSIZE)
   1129c:	0240006f          	j	112c0 <rt_memset+0x104>
        {
            *aligned_addr++ = buffer;
   112a0:	fe842783          	lw	a5,-24(s0)
   112a4:	00478713          	addi	a4,a5,4
   112a8:	fee42423          	sw	a4,-24(s0)
   112ac:	fe042703          	lw	a4,-32(s0)
   112b0:	00e7a023          	sw	a4,0(a5)
            count -= LBLOCKSIZE;
   112b4:	fd442783          	lw	a5,-44(s0)
   112b8:	ffc78793          	addi	a5,a5,-4
   112bc:	fcf42a23          	sw	a5,-44(s0)
        while (count >= LBLOCKSIZE)
   112c0:	fd442703          	lw	a4,-44(s0)
   112c4:	00300793          	li	a5,3
   112c8:	fce7ece3          	bltu	a5,a4,112a0 <rt_memset+0xe4>
        }

        /* Pick up the remainder with a bytewise loop. */
        m = (char *)aligned_addr;
   112cc:	fe842783          	lw	a5,-24(s0)
   112d0:	fef42623          	sw	a5,-20(s0)
    }

    while (count--)
   112d4:	01c0006f          	j	112f0 <rt_memset+0x134>
    {
        *m++ = (char)d;
   112d8:	fec42783          	lw	a5,-20(s0)
   112dc:	00178713          	addi	a4,a5,1
   112e0:	fee42623          	sw	a4,-20(s0)
   112e4:	fe442703          	lw	a4,-28(s0)
   112e8:	0ff77713          	andi	a4,a4,255
   112ec:	00e78023          	sb	a4,0(a5)
    while (count--)
   112f0:	fd442783          	lw	a5,-44(s0)
   112f4:	fff78713          	addi	a4,a5,-1
   112f8:	fce42a23          	sw	a4,-44(s0)
   112fc:	fc079ee3          	bnez	a5,112d8 <rt_memset+0x11c>
    }

    return s;
   11300:	fdc42783          	lw	a5,-36(s0)

#undef LBLOCKSIZE
#undef UNALIGNED
#undef TOO_SMALL
#endif /* RT_KSERVICE_USING_TINY_SIZE */
}
   11304:	00078513          	mv	a0,a5
   11308:	02c12403          	lw	s0,44(sp)
   1130c:	03010113          	addi	sp,sp,48
   11310:	00008067          	ret

00011314 <rt_memcpy>:
 * @param  count is the copied length.
 *
 * @return The address of destination memory
 */
RT_WEAK void *rt_memcpy(void *dst, const void *src, rt_ubase_t count)
{
   11314:	fc010113          	addi	sp,sp,-64
   11318:	02812e23          	sw	s0,60(sp)
   1131c:	04010413          	addi	s0,sp,64
   11320:	fca42623          	sw	a0,-52(s0)
   11324:	fcb42423          	sw	a1,-56(s0)
   11328:	fcc42223          	sw	a2,-60(s0)
    (((long)X & (sizeof (long) - 1)) | ((long)Y & (sizeof (long) - 1)))
#define BIGBLOCKSIZE    (sizeof (long) << 2)
#define LITTLEBLOCKSIZE (sizeof (long))
#define TOO_SMALL(LEN)  ((LEN) < BIGBLOCKSIZE)

    char *dst_ptr = (char *)dst;
   1132c:	fcc42783          	lw	a5,-52(s0)
   11330:	fef42623          	sw	a5,-20(s0)
    char *src_ptr = (char *)src;
   11334:	fc842783          	lw	a5,-56(s0)
   11338:	fef42423          	sw	a5,-24(s0)
    long *aligned_dst;
    long *aligned_src;
    int len = count;
   1133c:	fc442783          	lw	a5,-60(s0)
   11340:	fcf42e23          	sw	a5,-36(s0)

    /* If the size is small, or either SRC or DST is unaligned,
    then punt into the byte copy loop.  This should be rare. */
    if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
   11344:	fdc42703          	lw	a4,-36(s0)
   11348:	00f00793          	li	a5,15
   1134c:	12e7fa63          	bgeu	a5,a4,11480 <rt_memcpy+0x16c>
   11350:	fe842703          	lw	a4,-24(s0)
   11354:	fec42783          	lw	a5,-20(s0)
   11358:	00f767b3          	or	a5,a4,a5
   1135c:	0037f793          	andi	a5,a5,3
   11360:	12079063          	bnez	a5,11480 <rt_memcpy+0x16c>
    {
        aligned_dst = (long *)dst_ptr;
   11364:	fec42783          	lw	a5,-20(s0)
   11368:	fef42223          	sw	a5,-28(s0)
        aligned_src = (long *)src_ptr;
   1136c:	fe842783          	lw	a5,-24(s0)
   11370:	fef42023          	sw	a5,-32(s0)

        /* Copy 4X long words at a time if possible. */
        while (len >= BIGBLOCKSIZE)
   11374:	0900006f          	j	11404 <rt_memcpy+0xf0>
        {
            *aligned_dst++ = *aligned_src++;
   11378:	fe042703          	lw	a4,-32(s0)
   1137c:	00470793          	addi	a5,a4,4
   11380:	fef42023          	sw	a5,-32(s0)
   11384:	fe442783          	lw	a5,-28(s0)
   11388:	00478693          	addi	a3,a5,4
   1138c:	fed42223          	sw	a3,-28(s0)
   11390:	00072703          	lw	a4,0(a4)
   11394:	00e7a023          	sw	a4,0(a5)
            *aligned_dst++ = *aligned_src++;
   11398:	fe042703          	lw	a4,-32(s0)
   1139c:	00470793          	addi	a5,a4,4
   113a0:	fef42023          	sw	a5,-32(s0)
   113a4:	fe442783          	lw	a5,-28(s0)
   113a8:	00478693          	addi	a3,a5,4
   113ac:	fed42223          	sw	a3,-28(s0)
   113b0:	00072703          	lw	a4,0(a4)
   113b4:	00e7a023          	sw	a4,0(a5)
            *aligned_dst++ = *aligned_src++;
   113b8:	fe042703          	lw	a4,-32(s0)
   113bc:	00470793          	addi	a5,a4,4
   113c0:	fef42023          	sw	a5,-32(s0)
   113c4:	fe442783          	lw	a5,-28(s0)
   113c8:	00478693          	addi	a3,a5,4
   113cc:	fed42223          	sw	a3,-28(s0)
   113d0:	00072703          	lw	a4,0(a4)
   113d4:	00e7a023          	sw	a4,0(a5)
            *aligned_dst++ = *aligned_src++;
   113d8:	fe042703          	lw	a4,-32(s0)
   113dc:	00470793          	addi	a5,a4,4
   113e0:	fef42023          	sw	a5,-32(s0)
   113e4:	fe442783          	lw	a5,-28(s0)
   113e8:	00478693          	addi	a3,a5,4
   113ec:	fed42223          	sw	a3,-28(s0)
   113f0:	00072703          	lw	a4,0(a4)
   113f4:	00e7a023          	sw	a4,0(a5)
            len -= BIGBLOCKSIZE;
   113f8:	fdc42783          	lw	a5,-36(s0)
   113fc:	ff078793          	addi	a5,a5,-16
   11400:	fcf42e23          	sw	a5,-36(s0)
        while (len >= BIGBLOCKSIZE)
   11404:	fdc42703          	lw	a4,-36(s0)
   11408:	00f00793          	li	a5,15
   1140c:	f6e7e6e3          	bltu	a5,a4,11378 <rt_memcpy+0x64>
        }

        /* Copy one long word at a time if possible. */
        while (len >= LITTLEBLOCKSIZE)
   11410:	0300006f          	j	11440 <rt_memcpy+0x12c>
        {
            *aligned_dst++ = *aligned_src++;
   11414:	fe042703          	lw	a4,-32(s0)
   11418:	00470793          	addi	a5,a4,4
   1141c:	fef42023          	sw	a5,-32(s0)
   11420:	fe442783          	lw	a5,-28(s0)
   11424:	00478693          	addi	a3,a5,4
   11428:	fed42223          	sw	a3,-28(s0)
   1142c:	00072703          	lw	a4,0(a4)
   11430:	00e7a023          	sw	a4,0(a5)
            len -= LITTLEBLOCKSIZE;
   11434:	fdc42783          	lw	a5,-36(s0)
   11438:	ffc78793          	addi	a5,a5,-4
   1143c:	fcf42e23          	sw	a5,-36(s0)
        while (len >= LITTLEBLOCKSIZE)
   11440:	fdc42703          	lw	a4,-36(s0)
   11444:	00300793          	li	a5,3
   11448:	fce7e6e3          	bltu	a5,a4,11414 <rt_memcpy+0x100>
        }

        /* Pick up any residual with a byte copier. */
        dst_ptr = (char *)aligned_dst;
   1144c:	fe442783          	lw	a5,-28(s0)
   11450:	fef42623          	sw	a5,-20(s0)
        src_ptr = (char *)aligned_src;
   11454:	fe042783          	lw	a5,-32(s0)
   11458:	fef42423          	sw	a5,-24(s0)
    }

    while (len--)
   1145c:	0240006f          	j	11480 <rt_memcpy+0x16c>
        *dst_ptr++ = *src_ptr++;
   11460:	fe842703          	lw	a4,-24(s0)
   11464:	00170793          	addi	a5,a4,1
   11468:	fef42423          	sw	a5,-24(s0)
   1146c:	fec42783          	lw	a5,-20(s0)
   11470:	00178693          	addi	a3,a5,1
   11474:	fed42623          	sw	a3,-20(s0)
   11478:	00074703          	lbu	a4,0(a4)
   1147c:	00e78023          	sb	a4,0(a5)
    while (len--)
   11480:	fdc42783          	lw	a5,-36(s0)
   11484:	fff78713          	addi	a4,a5,-1
   11488:	fce42e23          	sw	a4,-36(s0)
   1148c:	fc079ae3          	bnez	a5,11460 <rt_memcpy+0x14c>

    return dst;
   11490:	fcc42783          	lw	a5,-52(s0)
#undef UNALIGNED
#undef BIGBLOCKSIZE
#undef LITTLEBLOCKSIZE
#undef TOO_SMALL
#endif /* RT_KSERVICE_USING_TINY_SIZE */
}
   11494:	00078513          	mv	a0,a5
   11498:	03c12403          	lw	s0,60(sp)
   1149c:	04010113          	addi	sp,sp,64
   114a0:	00008067          	ret

000114a4 <rt_memmove>:
 * @param  n is the copied length.
 *
 * @return The address of destination memory.
 */
void *rt_memmove(void *dest, const void *src, rt_size_t n)
{
   114a4:	fd010113          	addi	sp,sp,-48
   114a8:	02812623          	sw	s0,44(sp)
   114ac:	03010413          	addi	s0,sp,48
   114b0:	fca42e23          	sw	a0,-36(s0)
   114b4:	fcb42c23          	sw	a1,-40(s0)
   114b8:	fcc42a23          	sw	a2,-44(s0)
    char *tmp = (char *)dest, *s = (char *)src;
   114bc:	fdc42783          	lw	a5,-36(s0)
   114c0:	fef42623          	sw	a5,-20(s0)
   114c4:	fd842783          	lw	a5,-40(s0)
   114c8:	fef42423          	sw	a5,-24(s0)

    if (s < tmp && tmp < s + n)
   114cc:	fe842703          	lw	a4,-24(s0)
   114d0:	fec42783          	lw	a5,-20(s0)
   114d4:	08f77c63          	bgeu	a4,a5,1156c <rt_memmove+0xc8>
   114d8:	fe842703          	lw	a4,-24(s0)
   114dc:	fd442783          	lw	a5,-44(s0)
   114e0:	00f707b3          	add	a5,a4,a5
   114e4:	fec42703          	lw	a4,-20(s0)
   114e8:	08f77263          	bgeu	a4,a5,1156c <rt_memmove+0xc8>
    {
        tmp += n;
   114ec:	fec42703          	lw	a4,-20(s0)
   114f0:	fd442783          	lw	a5,-44(s0)
   114f4:	00f707b3          	add	a5,a4,a5
   114f8:	fef42623          	sw	a5,-20(s0)
        s += n;
   114fc:	fe842703          	lw	a4,-24(s0)
   11500:	fd442783          	lw	a5,-44(s0)
   11504:	00f707b3          	add	a5,a4,a5
   11508:	fef42423          	sw	a5,-24(s0)

        while (n--)
   1150c:	02c0006f          	j	11538 <rt_memmove+0x94>
            *(--tmp) = *(--s);
   11510:	fe842783          	lw	a5,-24(s0)
   11514:	fff78793          	addi	a5,a5,-1
   11518:	fef42423          	sw	a5,-24(s0)
   1151c:	fec42783          	lw	a5,-20(s0)
   11520:	fff78793          	addi	a5,a5,-1
   11524:	fef42623          	sw	a5,-20(s0)
   11528:	fe842783          	lw	a5,-24(s0)
   1152c:	0007c703          	lbu	a4,0(a5)
   11530:	fec42783          	lw	a5,-20(s0)
   11534:	00e78023          	sb	a4,0(a5)
        while (n--)
   11538:	fd442783          	lw	a5,-44(s0)
   1153c:	fff78713          	addi	a4,a5,-1
   11540:	fce42a23          	sw	a4,-44(s0)
   11544:	fc0796e3          	bnez	a5,11510 <rt_memmove+0x6c>
    if (s < tmp && tmp < s + n)
   11548:	0340006f          	j	1157c <rt_memmove+0xd8>
    }
    else
    {
        while (n--)
            *tmp++ = *s++;
   1154c:	fe842703          	lw	a4,-24(s0)
   11550:	00170793          	addi	a5,a4,1
   11554:	fef42423          	sw	a5,-24(s0)
   11558:	fec42783          	lw	a5,-20(s0)
   1155c:	00178693          	addi	a3,a5,1
   11560:	fed42623          	sw	a3,-20(s0)
   11564:	00074703          	lbu	a4,0(a4)
   11568:	00e78023          	sb	a4,0(a5)
        while (n--)
   1156c:	fd442783          	lw	a5,-44(s0)
   11570:	fff78713          	addi	a4,a5,-1
   11574:	fce42a23          	sw	a4,-44(s0)
   11578:	fc079ae3          	bnez	a5,1154c <rt_memmove+0xa8>
    }

    return dest;
   1157c:	fdc42783          	lw	a5,-36(s0)
}
   11580:	00078513          	mv	a0,a5
   11584:	02c12403          	lw	s0,44(sp)
   11588:	03010113          	addi	sp,sp,48
   1158c:	00008067          	ret

00011590 <rt_memcmp>:
 *         If the result < 0, cs is smaller than ct.
 *         If the result > 0, cs is greater than ct.
 *         If the result = 0, cs is equal to ct.
 */
rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_size_t count)
{
   11590:	fd010113          	addi	sp,sp,-48
   11594:	02812623          	sw	s0,44(sp)
   11598:	03010413          	addi	s0,sp,48
   1159c:	fca42e23          	sw	a0,-36(s0)
   115a0:	fcb42c23          	sw	a1,-40(s0)
   115a4:	fcc42a23          	sw	a2,-44(s0)
    const unsigned char *su1, *su2;
    int res = 0;
   115a8:	fe042223          	sw	zero,-28(s0)

    for (su1 = (const unsigned char *)cs, su2 = (const unsigned char *)ct; 0 < count; ++su1, ++su2, count--)
   115ac:	fdc42783          	lw	a5,-36(s0)
   115b0:	fef42623          	sw	a5,-20(s0)
   115b4:	fd842783          	lw	a5,-40(s0)
   115b8:	fef42423          	sw	a5,-24(s0)
   115bc:	04c0006f          	j	11608 <rt_memcmp+0x78>
        if ((res = *su1 - *su2) != 0)
   115c0:	fec42783          	lw	a5,-20(s0)
   115c4:	0007c783          	lbu	a5,0(a5)
   115c8:	00078713          	mv	a4,a5
   115cc:	fe842783          	lw	a5,-24(s0)
   115d0:	0007c783          	lbu	a5,0(a5)
   115d4:	40f707b3          	sub	a5,a4,a5
   115d8:	fef42223          	sw	a5,-28(s0)
   115dc:	fe442783          	lw	a5,-28(s0)
   115e0:	02079a63          	bnez	a5,11614 <rt_memcmp+0x84>
    for (su1 = (const unsigned char *)cs, su2 = (const unsigned char *)ct; 0 < count; ++su1, ++su2, count--)
   115e4:	fec42783          	lw	a5,-20(s0)
   115e8:	00178793          	addi	a5,a5,1
   115ec:	fef42623          	sw	a5,-20(s0)
   115f0:	fe842783          	lw	a5,-24(s0)
   115f4:	00178793          	addi	a5,a5,1
   115f8:	fef42423          	sw	a5,-24(s0)
   115fc:	fd442783          	lw	a5,-44(s0)
   11600:	fff78793          	addi	a5,a5,-1
   11604:	fcf42a23          	sw	a5,-44(s0)
   11608:	fd442783          	lw	a5,-44(s0)
   1160c:	fa079ae3          	bnez	a5,115c0 <rt_memcmp+0x30>
   11610:	0080006f          	j	11618 <rt_memcmp+0x88>
            break;
   11614:	00000013          	nop

    return res;
   11618:	fe442783          	lw	a5,-28(s0)
}
   1161c:	00078513          	mv	a0,a5
   11620:	02c12403          	lw	s0,44(sp)
   11624:	03010113          	addi	sp,sp,48
   11628:	00008067          	ret

0001162c <rt_strstr>:
 * @param  s2 is the find string.
 *
 * @return The first occurrence of a s2 in s1, or RT_NULL if no found.
 */
char *rt_strstr(const char *s1, const char *s2)
{
   1162c:	fd010113          	addi	sp,sp,-48
   11630:	02112623          	sw	ra,44(sp)
   11634:	02812423          	sw	s0,40(sp)
   11638:	03010413          	addi	s0,sp,48
   1163c:	fca42e23          	sw	a0,-36(s0)
   11640:	fcb42c23          	sw	a1,-40(s0)
    int l1, l2;

    l2 = rt_strlen(s2);
   11644:	fd842503          	lw	a0,-40(s0)
   11648:	338000ef          	jal	ra,11980 <rt_strlen>
   1164c:	00050793          	mv	a5,a0
   11650:	fef42423          	sw	a5,-24(s0)
    if (!l2)
   11654:	fe842783          	lw	a5,-24(s0)
   11658:	00079663          	bnez	a5,11664 <rt_strstr+0x38>
        return (char *)s1;
   1165c:	fdc42783          	lw	a5,-36(s0)
   11660:	0640006f          	j	116c4 <rt_strstr+0x98>
    l1 = rt_strlen(s1);
   11664:	fdc42503          	lw	a0,-36(s0)
   11668:	318000ef          	jal	ra,11980 <rt_strlen>
   1166c:	00050793          	mv	a5,a0
   11670:	fef42623          	sw	a5,-20(s0)
    while (l1 >= l2)
   11674:	0400006f          	j	116b4 <rt_strstr+0x88>
    {
        l1 --;
   11678:	fec42783          	lw	a5,-20(s0)
   1167c:	fff78793          	addi	a5,a5,-1
   11680:	fef42623          	sw	a5,-20(s0)
        if (!rt_memcmp(s1, s2, l2))
   11684:	fe842783          	lw	a5,-24(s0)
   11688:	00078613          	mv	a2,a5
   1168c:	fd842583          	lw	a1,-40(s0)
   11690:	fdc42503          	lw	a0,-36(s0)
   11694:	efdff0ef          	jal	ra,11590 <rt_memcmp>
   11698:	00050793          	mv	a5,a0
   1169c:	00079663          	bnez	a5,116a8 <rt_strstr+0x7c>
            return (char *)s1;
   116a0:	fdc42783          	lw	a5,-36(s0)
   116a4:	0200006f          	j	116c4 <rt_strstr+0x98>
        s1 ++;
   116a8:	fdc42783          	lw	a5,-36(s0)
   116ac:	00178793          	addi	a5,a5,1
   116b0:	fcf42e23          	sw	a5,-36(s0)
    while (l1 >= l2)
   116b4:	fec42703          	lw	a4,-20(s0)
   116b8:	fe842783          	lw	a5,-24(s0)
   116bc:	faf75ee3          	bge	a4,a5,11678 <rt_strstr+0x4c>
    }

    return RT_NULL;
   116c0:	00000793          	li	a5,0
}
   116c4:	00078513          	mv	a0,a5
   116c8:	02c12083          	lw	ra,44(sp)
   116cc:	02812403          	lw	s0,40(sp)
   116d0:	03010113          	addi	sp,sp,48
   116d4:	00008067          	ret

000116d8 <rt_strcasecmp>:
 *         If the result < 0, a is smaller than a.
 *         If the result > 0, a is greater than a.
 *         If the result = 0, a is equal to a.
 */
rt_int32_t rt_strcasecmp(const char *a, const char *b)
{
   116d8:	fd010113          	addi	sp,sp,-48
   116dc:	02812623          	sw	s0,44(sp)
   116e0:	03010413          	addi	s0,sp,48
   116e4:	fca42e23          	sw	a0,-36(s0)
   116e8:	fcb42c23          	sw	a1,-40(s0)
    int ca, cb;

    do
    {
        ca = *a++ & 0xff;
   116ec:	fdc42783          	lw	a5,-36(s0)
   116f0:	00178713          	addi	a4,a5,1
   116f4:	fce42e23          	sw	a4,-36(s0)
   116f8:	0007c783          	lbu	a5,0(a5)
   116fc:	fef42623          	sw	a5,-20(s0)
        cb = *b++ & 0xff;
   11700:	fd842783          	lw	a5,-40(s0)
   11704:	00178713          	addi	a4,a5,1
   11708:	fce42c23          	sw	a4,-40(s0)
   1170c:	0007c783          	lbu	a5,0(a5)
   11710:	fef42423          	sw	a5,-24(s0)
        if (ca >= 'A' && ca <= 'Z')
   11714:	fec42703          	lw	a4,-20(s0)
   11718:	04000793          	li	a5,64
   1171c:	00e7de63          	bge	a5,a4,11738 <rt_strcasecmp+0x60>
   11720:	fec42703          	lw	a4,-20(s0)
   11724:	05a00793          	li	a5,90
   11728:	00e7c863          	blt	a5,a4,11738 <rt_strcasecmp+0x60>
            ca += 'a' - 'A';
   1172c:	fec42783          	lw	a5,-20(s0)
   11730:	02078793          	addi	a5,a5,32
   11734:	fef42623          	sw	a5,-20(s0)
        if (cb >= 'A' && cb <= 'Z')
   11738:	fe842703          	lw	a4,-24(s0)
   1173c:	04000793          	li	a5,64
   11740:	00e7de63          	bge	a5,a4,1175c <rt_strcasecmp+0x84>
   11744:	fe842703          	lw	a4,-24(s0)
   11748:	05a00793          	li	a5,90
   1174c:	00e7c863          	blt	a5,a4,1175c <rt_strcasecmp+0x84>
            cb += 'a' - 'A';
   11750:	fe842783          	lw	a5,-24(s0)
   11754:	02078793          	addi	a5,a5,32
   11758:	fef42423          	sw	a5,-24(s0)
    }
    while (ca == cb && ca != '\0');
   1175c:	fec42703          	lw	a4,-20(s0)
   11760:	fe842783          	lw	a5,-24(s0)
   11764:	00f71663          	bne	a4,a5,11770 <rt_strcasecmp+0x98>
   11768:	fec42783          	lw	a5,-20(s0)
   1176c:	f80790e3          	bnez	a5,116ec <rt_strcasecmp+0x14>

    return ca - cb;
   11770:	fec42703          	lw	a4,-20(s0)
   11774:	fe842783          	lw	a5,-24(s0)
   11778:	40f707b3          	sub	a5,a4,a5
}
   1177c:	00078513          	mv	a0,a5
   11780:	02c12403          	lw	s0,44(sp)
   11784:	03010113          	addi	sp,sp,48
   11788:	00008067          	ret

0001178c <rt_strncpy>:
 * @param  n is the maximum copied length.
 *
 * @return The address where the copied content is stored.
 */
char *rt_strncpy(char *dst, const char *src, rt_size_t n)
{
   1178c:	fd010113          	addi	sp,sp,-48
   11790:	02812623          	sw	s0,44(sp)
   11794:	03010413          	addi	s0,sp,48
   11798:	fca42e23          	sw	a0,-36(s0)
   1179c:	fcb42c23          	sw	a1,-40(s0)
   117a0:	fcc42a23          	sw	a2,-44(s0)
    if (n != 0)
   117a4:	fd442783          	lw	a5,-44(s0)
   117a8:	06078e63          	beqz	a5,11824 <rt_strncpy+0x98>
    {
        char *d = dst;
   117ac:	fdc42783          	lw	a5,-36(s0)
   117b0:	fef42623          	sw	a5,-20(s0)
        const char *s = src;
   117b4:	fd842783          	lw	a5,-40(s0)
   117b8:	fef42423          	sw	a5,-24(s0)

        do
        {
            if ((*d++ = *s++) == 0)
   117bc:	fe842703          	lw	a4,-24(s0)
   117c0:	00170793          	addi	a5,a4,1
   117c4:	fef42423          	sw	a5,-24(s0)
   117c8:	fec42783          	lw	a5,-20(s0)
   117cc:	00178693          	addi	a3,a5,1
   117d0:	fed42623          	sw	a3,-20(s0)
   117d4:	00074703          	lbu	a4,0(a4)
   117d8:	00e78023          	sb	a4,0(a5)
   117dc:	0007c783          	lbu	a5,0(a5)
   117e0:	02079863          	bnez	a5,11810 <rt_strncpy+0x84>
            {
                /* NUL pad the remaining n-1 bytes */
                while (--n != 0)
   117e4:	0140006f          	j	117f8 <rt_strncpy+0x6c>
                    *d++ = 0;
   117e8:	fec42783          	lw	a5,-20(s0)
   117ec:	00178713          	addi	a4,a5,1
   117f0:	fee42623          	sw	a4,-20(s0)
   117f4:	00078023          	sb	zero,0(a5)
                while (--n != 0)
   117f8:	fd442783          	lw	a5,-44(s0)
   117fc:	fff78793          	addi	a5,a5,-1
   11800:	fcf42a23          	sw	a5,-44(s0)
   11804:	fd442783          	lw	a5,-44(s0)
   11808:	fe0790e3          	bnez	a5,117e8 <rt_strncpy+0x5c>
                break;
   1180c:	0180006f          	j	11824 <rt_strncpy+0x98>
            }
        } while (--n != 0);
   11810:	fd442783          	lw	a5,-44(s0)
   11814:	fff78793          	addi	a5,a5,-1
   11818:	fcf42a23          	sw	a5,-44(s0)
   1181c:	fd442783          	lw	a5,-44(s0)
   11820:	f8079ee3          	bnez	a5,117bc <rt_strncpy+0x30>
    }

    return (dst);
   11824:	fdc42783          	lw	a5,-36(s0)
}
   11828:	00078513          	mv	a0,a5
   1182c:	02c12403          	lw	s0,44(sp)
   11830:	03010113          	addi	sp,sp,48
   11834:	00008067          	ret

00011838 <rt_strcpy>:
 * @param  src is the string to be copied.
 *
 * @return The address where the copied content is stored.
 */
char *rt_strcpy(char *dst, const char *src)
{
   11838:	fe010113          	addi	sp,sp,-32
   1183c:	00112e23          	sw	ra,28(sp)
   11840:	00812c23          	sw	s0,24(sp)
   11844:	02010413          	addi	s0,sp,32
   11848:	fea42623          	sw	a0,-20(s0)
   1184c:	feb42423          	sw	a1,-24(s0)
    return rt_strncpy(dst, src, (rt_size_t)-1);
   11850:	fff00613          	li	a2,-1
   11854:	fe842583          	lw	a1,-24(s0)
   11858:	fec42503          	lw	a0,-20(s0)
   1185c:	f31ff0ef          	jal	ra,1178c <rt_strncpy>
   11860:	00050793          	mv	a5,a0
}
   11864:	00078513          	mv	a0,a5
   11868:	01c12083          	lw	ra,28(sp)
   1186c:	01812403          	lw	s0,24(sp)
   11870:	02010113          	addi	sp,sp,32
   11874:	00008067          	ret

00011878 <rt_strncmp>:
 *         If the result < 0, cs is smaller than ct.
 *         If the result > 0, cs is greater than ct.
 *         If the result = 0, cs is equal to ct.
 */
rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_size_t count)
{
   11878:	fe010113          	addi	sp,sp,-32
   1187c:	00812e23          	sw	s0,28(sp)
   11880:	00912c23          	sw	s1,24(sp)
   11884:	02010413          	addi	s0,sp,32
   11888:	fea42623          	sw	a0,-20(s0)
   1188c:	feb42423          	sw	a1,-24(s0)
   11890:	fec42223          	sw	a2,-28(s0)
    register signed char __res = 0;
   11894:	00000493          	li	s1,0

    while (count)
   11898:	0500006f          	j	118e8 <rt_strncmp+0x70>
    {
        if ((__res = *cs - *ct++) != 0 || !*cs++)
   1189c:	fec42783          	lw	a5,-20(s0)
   118a0:	0007c703          	lbu	a4,0(a5)
   118a4:	fe842783          	lw	a5,-24(s0)
   118a8:	00178693          	addi	a3,a5,1
   118ac:	fed42423          	sw	a3,-24(s0)
   118b0:	0007c783          	lbu	a5,0(a5)
   118b4:	40f707b3          	sub	a5,a4,a5
   118b8:	0ff7f793          	andi	a5,a5,255
   118bc:	01879493          	slli	s1,a5,0x18
   118c0:	4184d493          	srai	s1,s1,0x18
   118c4:	02049663          	bnez	s1,118f0 <rt_strncmp+0x78>
   118c8:	fec42783          	lw	a5,-20(s0)
   118cc:	00178713          	addi	a4,a5,1
   118d0:	fee42623          	sw	a4,-20(s0)
   118d4:	0007c783          	lbu	a5,0(a5)
   118d8:	00078c63          	beqz	a5,118f0 <rt_strncmp+0x78>
            break;
        count --;
   118dc:	fe442783          	lw	a5,-28(s0)
   118e0:	fff78793          	addi	a5,a5,-1
   118e4:	fef42223          	sw	a5,-28(s0)
    while (count)
   118e8:	fe442783          	lw	a5,-28(s0)
   118ec:	fa0798e3          	bnez	a5,1189c <rt_strncmp+0x24>
    }

    return __res;
   118f0:	00048793          	mv	a5,s1
}
   118f4:	00078513          	mv	a0,a5
   118f8:	01c12403          	lw	s0,28(sp)
   118fc:	01812483          	lw	s1,24(sp)
   11900:	02010113          	addi	sp,sp,32
   11904:	00008067          	ret

00011908 <rt_strcmp>:
 *         If the result < 0, cs is smaller than ct.
 *         If the result > 0, cs is greater than ct.
 *         If the result = 0, cs is equal to ct.
 */
rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
   11908:	fe010113          	addi	sp,sp,-32
   1190c:	00812e23          	sw	s0,28(sp)
   11910:	02010413          	addi	s0,sp,32
   11914:	fea42623          	sw	a0,-20(s0)
   11918:	feb42423          	sw	a1,-24(s0)
    while (*cs && *cs == *ct)
   1191c:	01c0006f          	j	11938 <rt_strcmp+0x30>
    {
        cs++;
   11920:	fec42783          	lw	a5,-20(s0)
   11924:	00178793          	addi	a5,a5,1
   11928:	fef42623          	sw	a5,-20(s0)
        ct++;
   1192c:	fe842783          	lw	a5,-24(s0)
   11930:	00178793          	addi	a5,a5,1
   11934:	fef42423          	sw	a5,-24(s0)
    while (*cs && *cs == *ct)
   11938:	fec42783          	lw	a5,-20(s0)
   1193c:	0007c783          	lbu	a5,0(a5)
   11940:	00078c63          	beqz	a5,11958 <rt_strcmp+0x50>
   11944:	fec42783          	lw	a5,-20(s0)
   11948:	0007c703          	lbu	a4,0(a5)
   1194c:	fe842783          	lw	a5,-24(s0)
   11950:	0007c783          	lbu	a5,0(a5)
   11954:	fcf706e3          	beq	a4,a5,11920 <rt_strcmp+0x18>
    }

    return (*cs - *ct);
   11958:	fec42783          	lw	a5,-20(s0)
   1195c:	0007c783          	lbu	a5,0(a5)
   11960:	00078713          	mv	a4,a5
   11964:	fe842783          	lw	a5,-24(s0)
   11968:	0007c783          	lbu	a5,0(a5)
   1196c:	40f707b3          	sub	a5,a4,a5
}
   11970:	00078513          	mv	a0,a5
   11974:	01c12403          	lw	s0,28(sp)
   11978:	02010113          	addi	sp,sp,32
   1197c:	00008067          	ret

00011980 <rt_strlen>:
 * @param  s is the string
 *
 * @return The length of string.
 */
rt_size_t rt_strlen(const char *s)
{
   11980:	fd010113          	addi	sp,sp,-48
   11984:	02812623          	sw	s0,44(sp)
   11988:	03010413          	addi	s0,sp,48
   1198c:	fca42e23          	sw	a0,-36(s0)
    const char *sc;

    for (sc = s; *sc != '\0'; ++sc) /* nothing */
   11990:	fdc42783          	lw	a5,-36(s0)
   11994:	fef42623          	sw	a5,-20(s0)
   11998:	0100006f          	j	119a8 <rt_strlen+0x28>
   1199c:	fec42783          	lw	a5,-20(s0)
   119a0:	00178793          	addi	a5,a5,1
   119a4:	fef42623          	sw	a5,-20(s0)
   119a8:	fec42783          	lw	a5,-20(s0)
   119ac:	0007c783          	lbu	a5,0(a5)
   119b0:	fe0796e3          	bnez	a5,1199c <rt_strlen+0x1c>
        ;

    return sc - s;
   119b4:	fec42703          	lw	a4,-20(s0)
   119b8:	fdc42783          	lw	a5,-36(s0)
   119bc:	40f707b3          	sub	a5,a4,a5
}
   119c0:	00078513          	mv	a0,a5
   119c4:	02c12403          	lw	s0,44(sp)
   119c8:	03010113          	addi	sp,sp,48
   119cc:	00008067          	ret

000119d0 <rt_strnlen>:
 * @param  maxlen is the max size.
 *
 * @return The length of string.
 */
rt_size_t rt_strnlen(const char *s, rt_ubase_t maxlen)
{
   119d0:	fd010113          	addi	sp,sp,-48
   119d4:	02812623          	sw	s0,44(sp)
   119d8:	03010413          	addi	s0,sp,48
   119dc:	fca42e23          	sw	a0,-36(s0)
   119e0:	fcb42c23          	sw	a1,-40(s0)
    const char *sc;

    for (sc = s; *sc != '\0' && (rt_ubase_t)(sc - s) < maxlen; ++sc) /* nothing */
   119e4:	fdc42783          	lw	a5,-36(s0)
   119e8:	fef42623          	sw	a5,-20(s0)
   119ec:	0100006f          	j	119fc <rt_strnlen+0x2c>
   119f0:	fec42783          	lw	a5,-20(s0)
   119f4:	00178793          	addi	a5,a5,1
   119f8:	fef42623          	sw	a5,-20(s0)
   119fc:	fec42783          	lw	a5,-20(s0)
   11a00:	0007c783          	lbu	a5,0(a5)
   11a04:	00078e63          	beqz	a5,11a20 <rt_strnlen+0x50>
   11a08:	fec42703          	lw	a4,-20(s0)
   11a0c:	fdc42783          	lw	a5,-36(s0)
   11a10:	40f707b3          	sub	a5,a4,a5
   11a14:	00078713          	mv	a4,a5
   11a18:	fd842783          	lw	a5,-40(s0)
   11a1c:	fcf76ae3          	bltu	a4,a5,119f0 <rt_strnlen+0x20>
        ;

    return sc - s;
   11a20:	fec42703          	lw	a4,-20(s0)
   11a24:	fdc42783          	lw	a5,-36(s0)
   11a28:	40f707b3          	sub	a5,a4,a5
}
   11a2c:	00078513          	mv	a0,a5
   11a30:	02c12403          	lw	s0,44(sp)
   11a34:	03010113          	addi	sp,sp,48
   11a38:	00008067          	ret

00011a3c <rt_strdup>:
 * @param  s is the string to be duplicated.
 *
 * @return The string address of the copy.
 */
char *rt_strdup(const char *s)
{
   11a3c:	fd010113          	addi	sp,sp,-48
   11a40:	02112623          	sw	ra,44(sp)
   11a44:	02812423          	sw	s0,40(sp)
   11a48:	03010413          	addi	s0,sp,48
   11a4c:	fca42e23          	sw	a0,-36(s0)
    rt_size_t len = rt_strlen(s) + 1;
   11a50:	fdc42503          	lw	a0,-36(s0)
   11a54:	f2dff0ef          	jal	ra,11980 <rt_strlen>
   11a58:	00050793          	mv	a5,a0
   11a5c:	00178793          	addi	a5,a5,1
   11a60:	fef42623          	sw	a5,-20(s0)
    char *tmp = (char *)rt_malloc(len);
   11a64:	fec42503          	lw	a0,-20(s0)
   11a68:	1a8010ef          	jal	ra,12c10 <rt_malloc>
   11a6c:	fea42423          	sw	a0,-24(s0)

    if (!tmp)
   11a70:	fe842783          	lw	a5,-24(s0)
   11a74:	00079663          	bnez	a5,11a80 <rt_strdup+0x44>
        return RT_NULL;
   11a78:	00000793          	li	a5,0
   11a7c:	0180006f          	j	11a94 <rt_strdup+0x58>

    rt_memcpy(tmp, s, len);
   11a80:	fec42603          	lw	a2,-20(s0)
   11a84:	fdc42583          	lw	a1,-36(s0)
   11a88:	fe842503          	lw	a0,-24(s0)
   11a8c:	889ff0ef          	jal	ra,11314 <rt_memcpy>

    return tmp;
   11a90:	fe842783          	lw	a5,-24(s0)
}
   11a94:	00078513          	mv	a0,a5
   11a98:	02c12083          	lw	ra,44(sp)
   11a9c:	02812403          	lw	s0,40(sp)
   11aa0:	03010113          	addi	sp,sp,48
   11aa4:	00008067          	ret

00011aa8 <rt_show_version>:

/**
 * This function will show the version of rt-thread rtos
 */
void rt_show_version(void)
{
   11aa8:	ff010113          	addi	sp,sp,-16
   11aac:	00112623          	sw	ra,12(sp)
   11ab0:	00812423          	sw	s0,8(sp)
   11ab4:	01010413          	addi	s0,sp,16
    rt_kprintf("\n \\ | /\n");
   11ab8:	0000e517          	auipc	a0,0xe
   11abc:	3b450513          	addi	a0,a0,948 # 1fe6c <__FUNCTION__.2556+0x10>
   11ac0:	641000ef          	jal	ra,12900 <rt_kprintf>
    rt_kprintf("- RT -     Thread Operating System\n");
   11ac4:	0000e517          	auipc	a0,0xe
   11ac8:	3b450513          	addi	a0,a0,948 # 1fe78 <__FUNCTION__.2556+0x1c>
   11acc:	635000ef          	jal	ra,12900 <rt_kprintf>
    rt_kprintf(" / | \\     %d.%d.%d build %s %s\n",
   11ad0:	0000e797          	auipc	a5,0xe
   11ad4:	3cc78793          	addi	a5,a5,972 # 1fe9c <__FUNCTION__.2556+0x40>
   11ad8:	0000e717          	auipc	a4,0xe
   11adc:	3d070713          	addi	a4,a4,976 # 1fea8 <__FUNCTION__.2556+0x4c>
   11ae0:	00000693          	li	a3,0
   11ae4:	00100613          	li	a2,1
   11ae8:	00400593          	li	a1,4
   11aec:	0000e517          	auipc	a0,0xe
   11af0:	3c850513          	addi	a0,a0,968 # 1feb4 <__FUNCTION__.2556+0x58>
   11af4:	60d000ef          	jal	ra,12900 <rt_kprintf>
               RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__, __TIME__);
    rt_kprintf(" 2006 - 2021 Copyright by rt-thread team\n");
   11af8:	0000e517          	auipc	a0,0xe
   11afc:	3e050513          	addi	a0,a0,992 # 1fed8 <__FUNCTION__.2556+0x7c>
   11b00:	601000ef          	jal	ra,12900 <rt_kprintf>
}
   11b04:	00000013          	nop
   11b08:	00c12083          	lw	ra,12(sp)
   11b0c:	00812403          	lw	s0,8(sp)
   11b10:	01010113          	addi	sp,sp,16
   11b14:	00008067          	ret

00011b18 <divide>:
#ifdef RT_PRINTF_LONGLONG
rt_inline int divide(long long *n, int base)
#else
rt_inline int divide(long *n, int base)
#endif /* RT_PRINTF_LONGLONG */
{
   11b18:	fd010113          	addi	sp,sp,-48
   11b1c:	02812623          	sw	s0,44(sp)
   11b20:	03010413          	addi	s0,sp,48
   11b24:	fca42e23          	sw	a0,-36(s0)
   11b28:	fcb42c23          	sw	a1,-40(s0)
    int res;

    /* optimized for processor which does not support divide instructions. */
    if (base == 10)
   11b2c:	fd842703          	lw	a4,-40(s0)
   11b30:	00a00793          	li	a5,10
   11b34:	04f71063          	bne	a4,a5,11b74 <divide+0x5c>
    {
#ifdef RT_PRINTF_LONGLONG
        res = (int)(((unsigned long long)*n) % 10U);
        *n = (long long)(((unsigned long long)*n) / 10U);
#else
        res = (int)(((unsigned long)*n) % 10U);
   11b38:	fdc42783          	lw	a5,-36(s0)
   11b3c:	0007a783          	lw	a5,0(a5)
   11b40:	00078713          	mv	a4,a5
   11b44:	00a00793          	li	a5,10
   11b48:	02f777b3          	remu	a5,a4,a5
   11b4c:	fef42623          	sw	a5,-20(s0)
        *n = (long)(((unsigned long)*n) / 10U);
   11b50:	fdc42783          	lw	a5,-36(s0)
   11b54:	0007a783          	lw	a5,0(a5)
   11b58:	00078713          	mv	a4,a5
   11b5c:	00a00793          	li	a5,10
   11b60:	02f757b3          	divu	a5,a4,a5
   11b64:	00078713          	mv	a4,a5
   11b68:	fdc42783          	lw	a5,-36(s0)
   11b6c:	00e7a023          	sw	a4,0(a5)
   11b70:	02c0006f          	j	11b9c <divide+0x84>
    {
#ifdef RT_PRINTF_LONGLONG
        res = (int)(((unsigned long long)*n) % 16U);
        *n = (long long)(((unsigned long long)*n) / 16U);
#else
        res = (int)(((unsigned long)*n) % 16U);
   11b74:	fdc42783          	lw	a5,-36(s0)
   11b78:	0007a783          	lw	a5,0(a5)
   11b7c:	00f7f793          	andi	a5,a5,15
   11b80:	fef42623          	sw	a5,-20(s0)
        *n = (long)(((unsigned long)*n) / 16U);
   11b84:	fdc42783          	lw	a5,-36(s0)
   11b88:	0007a783          	lw	a5,0(a5)
   11b8c:	0047d793          	srli	a5,a5,0x4
   11b90:	00078713          	mv	a4,a5
   11b94:	fdc42783          	lw	a5,-36(s0)
   11b98:	00e7a023          	sw	a4,0(a5)
#endif
    }

    return res;
   11b9c:	fec42783          	lw	a5,-20(s0)
}
   11ba0:	00078513          	mv	a0,a5
   11ba4:	02c12403          	lw	s0,44(sp)
   11ba8:	03010113          	addi	sp,sp,48
   11bac:	00008067          	ret

00011bb0 <skip_atoi>:

rt_inline int skip_atoi(const char **s)
{
   11bb0:	fe010113          	addi	sp,sp,-32
   11bb4:	00812e23          	sw	s0,28(sp)
   11bb8:	00912c23          	sw	s1,24(sp)
   11bbc:	02010413          	addi	s0,sp,32
   11bc0:	fea42623          	sw	a0,-20(s0)
    register int i = 0;
   11bc4:	00000493          	li	s1,0
    while (_ISDIGIT(**s))
   11bc8:	0380006f          	j	11c00 <skip_atoi+0x50>
        i = i * 10 + *((*s)++) - '0';
   11bcc:	00048793          	mv	a5,s1
   11bd0:	00279793          	slli	a5,a5,0x2
   11bd4:	009787b3          	add	a5,a5,s1
   11bd8:	00179793          	slli	a5,a5,0x1
   11bdc:	00078613          	mv	a2,a5
   11be0:	fec42783          	lw	a5,-20(s0)
   11be4:	0007a783          	lw	a5,0(a5)
   11be8:	00178693          	addi	a3,a5,1
   11bec:	fec42703          	lw	a4,-20(s0)
   11bf0:	00d72023          	sw	a3,0(a4)
   11bf4:	0007c783          	lbu	a5,0(a5)
   11bf8:	00f607b3          	add	a5,a2,a5
   11bfc:	fd078493          	addi	s1,a5,-48
    while (_ISDIGIT(**s))
   11c00:	fec42783          	lw	a5,-20(s0)
   11c04:	0007a783          	lw	a5,0(a5)
   11c08:	0007c783          	lbu	a5,0(a5)
   11c0c:	fd078793          	addi	a5,a5,-48
   11c10:	00078713          	mv	a4,a5
   11c14:	00900793          	li	a5,9
   11c18:	fae7fae3          	bgeu	a5,a4,11bcc <skip_atoi+0x1c>

    return i;
   11c1c:	00048793          	mv	a5,s1
}
   11c20:	00078513          	mv	a0,a5
   11c24:	01c12403          	lw	s0,28(sp)
   11c28:	01812483          	lw	s1,24(sp)
   11c2c:	02010113          	addi	sp,sp,32
   11c30:	00008067          	ret

00011c34 <print_number>:
                          int   s,
#ifdef RT_PRINTF_PRECISION
                          int   precision,
#endif /* RT_PRINTF_PRECISION */
                          int   type)
{
   11c34:	fb010113          	addi	sp,sp,-80
   11c38:	04112623          	sw	ra,76(sp)
   11c3c:	04812423          	sw	s0,72(sp)
   11c40:	04912223          	sw	s1,68(sp)
   11c44:	05212023          	sw	s2,64(sp)
   11c48:	05010413          	addi	s0,sp,80
   11c4c:	fca42623          	sw	a0,-52(s0)
   11c50:	fcb42423          	sw	a1,-56(s0)
   11c54:	fcc42223          	sw	a2,-60(s0)
   11c58:	fcd42023          	sw	a3,-64(s0)
   11c5c:	fae42e23          	sw	a4,-68(s0)
   11c60:	faf42c23          	sw	a5,-72(s0)
   11c64:	fb042a23          	sw	a6,-76(s0)
#ifdef RT_PRINTF_LONGLONG
    char tmp[32];
#else
    char tmp[16];
#endif /* RT_PRINTF_LONGLONG */
    int precision_bak = precision;
   11c68:	fb842783          	lw	a5,-72(s0)
   11c6c:	fef42423          	sw	a5,-24(s0)
    static const char small_digits[] = "0123456789abcdef";
    static const char large_digits[] = "0123456789ABCDEF";
    register int i;
    register int size;

    size = s;
   11c70:	fbc42483          	lw	s1,-68(s0)

    digits = (type & LARGE) ? large_digits : small_digits;
   11c74:	fb442783          	lw	a5,-76(s0)
   11c78:	0407f793          	andi	a5,a5,64
   11c7c:	00078863          	beqz	a5,11c8c <print_number+0x58>
   11c80:	0000e797          	auipc	a5,0xe
   11c84:	47878793          	addi	a5,a5,1144 # 200f8 <large_digits.2613>
   11c88:	00c0006f          	j	11c94 <print_number+0x60>
   11c8c:	0000e797          	auipc	a5,0xe
   11c90:	48078793          	addi	a5,a5,1152 # 2010c <small_digits.2612>
   11c94:	fef42223          	sw	a5,-28(s0)
    if (type & LEFT)
   11c98:	fb442783          	lw	a5,-76(s0)
   11c9c:	0107f793          	andi	a5,a5,16
   11ca0:	00078863          	beqz	a5,11cb0 <print_number+0x7c>
        type &= ~ZEROPAD;
   11ca4:	fb442783          	lw	a5,-76(s0)
   11ca8:	ffe7f793          	andi	a5,a5,-2
   11cac:	faf42a23          	sw	a5,-76(s0)

    c = (type & ZEROPAD) ? '0' : ' ';
   11cb0:	fb442783          	lw	a5,-76(s0)
   11cb4:	0017f793          	andi	a5,a5,1
   11cb8:	00078663          	beqz	a5,11cc4 <print_number+0x90>
   11cbc:	03000793          	li	a5,48
   11cc0:	0080006f          	j	11cc8 <print_number+0x94>
   11cc4:	02000793          	li	a5,32
   11cc8:	fef401a3          	sb	a5,-29(s0)

    /* get sign */
    sign = 0;
   11ccc:	fe0407a3          	sb	zero,-17(s0)
    if (type & SIGN)
   11cd0:	fb442783          	lw	a5,-76(s0)
   11cd4:	0027f793          	andi	a5,a5,2
   11cd8:	04078863          	beqz	a5,11d28 <print_number+0xf4>
    {
        if (num < 0)
   11cdc:	fc442783          	lw	a5,-60(s0)
   11ce0:	0007de63          	bgez	a5,11cfc <print_number+0xc8>
        {
            sign = '-';
   11ce4:	02d00793          	li	a5,45
   11ce8:	fef407a3          	sb	a5,-17(s0)
            num = -num;
   11cec:	fc442783          	lw	a5,-60(s0)
   11cf0:	40f007b3          	neg	a5,a5
   11cf4:	fcf42223          	sw	a5,-60(s0)
   11cf8:	0300006f          	j	11d28 <print_number+0xf4>
        }
        else if (type & PLUS)
   11cfc:	fb442783          	lw	a5,-76(s0)
   11d00:	0047f793          	andi	a5,a5,4
   11d04:	00078863          	beqz	a5,11d14 <print_number+0xe0>
            sign = '+';
   11d08:	02b00793          	li	a5,43
   11d0c:	fef407a3          	sb	a5,-17(s0)
   11d10:	0180006f          	j	11d28 <print_number+0xf4>
        else if (type & SPACE)
   11d14:	fb442783          	lw	a5,-76(s0)
   11d18:	0087f793          	andi	a5,a5,8
   11d1c:	00078663          	beqz	a5,11d28 <print_number+0xf4>
            sign = ' ';
   11d20:	02000793          	li	a5,32
   11d24:	fef407a3          	sb	a5,-17(s0)
        else if (base == 8)
            size--;
    }
#endif /* RT_PRINTF_SPECIAL */

    i = 0;
   11d28:	00000913          	li	s2,0
    if (num == 0)
   11d2c:	fc442783          	lw	a5,-60(s0)
   11d30:	04079c63          	bnez	a5,11d88 <print_number+0x154>
        tmp[i++] = '0';
   11d34:	00090793          	mv	a5,s2
   11d38:	00178913          	addi	s2,a5,1
   11d3c:	ff040713          	addi	a4,s0,-16
   11d40:	00f707b3          	add	a5,a4,a5
   11d44:	03000713          	li	a4,48
   11d48:	fee78023          	sb	a4,-32(a5)
   11d4c:	0440006f          	j	11d90 <print_number+0x15c>
    else
    {
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
   11d50:	fc440793          	addi	a5,s0,-60
   11d54:	fc042583          	lw	a1,-64(s0)
   11d58:	00078513          	mv	a0,a5
   11d5c:	dbdff0ef          	jal	ra,11b18 <divide>
   11d60:	00050793          	mv	a5,a0
   11d64:	00078713          	mv	a4,a5
   11d68:	fe442783          	lw	a5,-28(s0)
   11d6c:	00e78733          	add	a4,a5,a4
   11d70:	00090793          	mv	a5,s2
   11d74:	00178913          	addi	s2,a5,1
   11d78:	00074703          	lbu	a4,0(a4)
   11d7c:	ff040693          	addi	a3,s0,-16
   11d80:	00f687b3          	add	a5,a3,a5
   11d84:	fee78023          	sb	a4,-32(a5)
        while (num != 0)
   11d88:	fc442783          	lw	a5,-60(s0)
   11d8c:	fc0792e3          	bnez	a5,11d50 <print_number+0x11c>
    }

#ifdef RT_PRINTF_PRECISION
    if (i > precision)
   11d90:	fb842783          	lw	a5,-72(s0)
   11d94:	0127d463          	bge	a5,s2,11d9c <print_number+0x168>
        precision = i;
   11d98:	fb242c23          	sw	s2,-72(s0)
    size -= precision;
   11d9c:	fb842783          	lw	a5,-72(s0)
   11da0:	40f484b3          	sub	s1,s1,a5
#else
    size -= i;
#endif /* RT_PRINTF_PRECISION */

    if (!(type & (ZEROPAD | LEFT)))
   11da4:	fb442783          	lw	a5,-76(s0)
   11da8:	0117f793          	andi	a5,a5,17
   11dac:	04079463          	bnez	a5,11df4 <print_number+0x1c0>
    {
        if ((sign) && (size > 0))
   11db0:	fef44783          	lbu	a5,-17(s0)
   11db4:	02078a63          	beqz	a5,11de8 <print_number+0x1b4>
   11db8:	02905863          	blez	s1,11de8 <print_number+0x1b4>
            size--;
   11dbc:	fff48493          	addi	s1,s1,-1

        while (size-- > 0)
   11dc0:	0280006f          	j	11de8 <print_number+0x1b4>
        {
            if (buf < end)
   11dc4:	fcc42703          	lw	a4,-52(s0)
   11dc8:	fc842783          	lw	a5,-56(s0)
   11dcc:	00f77863          	bgeu	a4,a5,11ddc <print_number+0x1a8>
                *buf = ' ';
   11dd0:	fcc42783          	lw	a5,-52(s0)
   11dd4:	02000713          	li	a4,32
   11dd8:	00e78023          	sb	a4,0(a5)
            ++ buf;
   11ddc:	fcc42783          	lw	a5,-52(s0)
   11de0:	00178793          	addi	a5,a5,1
   11de4:	fcf42623          	sw	a5,-52(s0)
        while (size-- > 0)
   11de8:	00048793          	mv	a5,s1
   11dec:	fff78493          	addi	s1,a5,-1
   11df0:	fcf04ae3          	bgtz	a5,11dc4 <print_number+0x190>
        }
    }

    if (sign)
   11df4:	fef44783          	lbu	a5,-17(s0)
   11df8:	02078663          	beqz	a5,11e24 <print_number+0x1f0>
    {
        if (buf < end)
   11dfc:	fcc42703          	lw	a4,-52(s0)
   11e00:	fc842783          	lw	a5,-56(s0)
   11e04:	00f77863          	bgeu	a4,a5,11e14 <print_number+0x1e0>
        {
            *buf = sign;
   11e08:	fcc42783          	lw	a5,-52(s0)
   11e0c:	fef44703          	lbu	a4,-17(s0)
   11e10:	00e78023          	sb	a4,0(a5)
        }
        -- size;
   11e14:	fff48493          	addi	s1,s1,-1
        ++ buf;
   11e18:	fcc42783          	lw	a5,-52(s0)
   11e1c:	00178793          	addi	a5,a5,1
   11e20:	fcf42623          	sw	a5,-52(s0)
        }
    }
#endif /* RT_PRINTF_SPECIAL */

    /* no align to the left */
    if (!(type & LEFT))
   11e24:	fb442783          	lw	a5,-76(s0)
   11e28:	0107f793          	andi	a5,a5,16
   11e2c:	06079063          	bnez	a5,11e8c <print_number+0x258>
    {
        while (size-- > 0)
   11e30:	0280006f          	j	11e58 <print_number+0x224>
        {
            if (buf < end)
   11e34:	fcc42703          	lw	a4,-52(s0)
   11e38:	fc842783          	lw	a5,-56(s0)
   11e3c:	00f77863          	bgeu	a4,a5,11e4c <print_number+0x218>
                *buf = c;
   11e40:	fcc42783          	lw	a5,-52(s0)
   11e44:	fe344703          	lbu	a4,-29(s0)
   11e48:	00e78023          	sb	a4,0(a5)
            ++ buf;
   11e4c:	fcc42783          	lw	a5,-52(s0)
   11e50:	00178793          	addi	a5,a5,1
   11e54:	fcf42623          	sw	a5,-52(s0)
        while (size-- > 0)
   11e58:	00048793          	mv	a5,s1
   11e5c:	fff78493          	addi	s1,a5,-1
   11e60:	fcf04ae3          	bgtz	a5,11e34 <print_number+0x200>
        }
    }

#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
   11e64:	0280006f          	j	11e8c <print_number+0x258>
    {
        if (buf < end)
   11e68:	fcc42703          	lw	a4,-52(s0)
   11e6c:	fc842783          	lw	a5,-56(s0)
   11e70:	00f77863          	bgeu	a4,a5,11e80 <print_number+0x24c>
            *buf = '0';
   11e74:	fcc42783          	lw	a5,-52(s0)
   11e78:	03000713          	li	a4,48
   11e7c:	00e78023          	sb	a4,0(a5)
        ++ buf;
   11e80:	fcc42783          	lw	a5,-52(s0)
   11e84:	00178793          	addi	a5,a5,1
   11e88:	fcf42623          	sw	a5,-52(s0)
    while (i < precision--)
   11e8c:	fb842783          	lw	a5,-72(s0)
   11e90:	fff78713          	addi	a4,a5,-1
   11e94:	fae42c23          	sw	a4,-72(s0)
   11e98:	fcf948e3          	blt	s2,a5,11e68 <print_number+0x234>
    }
#endif /* RT_PRINTF_PRECISION */

    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
   11e9c:	0300006f          	j	11ecc <print_number+0x298>
    {
        if (buf < end)
   11ea0:	fcc42703          	lw	a4,-52(s0)
   11ea4:	fc842783          	lw	a5,-56(s0)
   11ea8:	00f77c63          	bgeu	a4,a5,11ec0 <print_number+0x28c>
            *buf = tmp[i];
   11eac:	ff040793          	addi	a5,s0,-16
   11eb0:	012787b3          	add	a5,a5,s2
   11eb4:	fe07c703          	lbu	a4,-32(a5)
   11eb8:	fcc42783          	lw	a5,-52(s0)
   11ebc:	00e78023          	sb	a4,0(a5)
        ++ buf;
   11ec0:	fcc42783          	lw	a5,-52(s0)
   11ec4:	00178793          	addi	a5,a5,1
   11ec8:	fcf42623          	sw	a5,-52(s0)
    while (i-- > 0 && (precision_bak != 0))
   11ecc:	00090793          	mv	a5,s2
   11ed0:	fff78913          	addi	s2,a5,-1
   11ed4:	02f05a63          	blez	a5,11f08 <print_number+0x2d4>
   11ed8:	fe842783          	lw	a5,-24(s0)
   11edc:	fc0792e3          	bnez	a5,11ea0 <print_number+0x26c>
    }

    while (size-- > 0)
   11ee0:	0280006f          	j	11f08 <print_number+0x2d4>
    {
        if (buf < end)
   11ee4:	fcc42703          	lw	a4,-52(s0)
   11ee8:	fc842783          	lw	a5,-56(s0)
   11eec:	00f77863          	bgeu	a4,a5,11efc <print_number+0x2c8>
            *buf = ' ';
   11ef0:	fcc42783          	lw	a5,-52(s0)
   11ef4:	02000713          	li	a4,32
   11ef8:	00e78023          	sb	a4,0(a5)
        ++ buf;
   11efc:	fcc42783          	lw	a5,-52(s0)
   11f00:	00178793          	addi	a5,a5,1
   11f04:	fcf42623          	sw	a5,-52(s0)
    while (size-- > 0)
   11f08:	00048793          	mv	a5,s1
   11f0c:	fff78493          	addi	s1,a5,-1
   11f10:	fcf04ae3          	bgtz	a5,11ee4 <print_number+0x2b0>
    }

    return buf;
   11f14:	fcc42783          	lw	a5,-52(s0)
}
   11f18:	00078513          	mv	a0,a5
   11f1c:	04c12083          	lw	ra,76(sp)
   11f20:	04812403          	lw	s0,72(sp)
   11f24:	04412483          	lw	s1,68(sp)
   11f28:	04012903          	lw	s2,64(sp)
   11f2c:	05010113          	addi	sp,sp,80
   11f30:	00008067          	ret

00011f34 <rt_vsnprintf>:
 * @param  args is a list of variable parameters.
 *
 * @return The number of characters actually written to buffer.
 */
RT_WEAK int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
{
   11f34:	fb010113          	addi	sp,sp,-80
   11f38:	04112623          	sw	ra,76(sp)
   11f3c:	04812423          	sw	s0,72(sp)
   11f40:	05010413          	addi	s0,sp,80
   11f44:	faa42e23          	sw	a0,-68(s0)
   11f48:	fab42c23          	sw	a1,-72(s0)
   11f4c:	fac42a23          	sw	a2,-76(s0)
   11f50:	fad42823          	sw	a3,-80(s0)

#ifdef RT_PRINTF_PRECISION
    int precision;      /* min. # of digits for integers and max for a string */
#endif /* RT_PRINTF_PRECISION */

    str = buf;
   11f54:	fbc42783          	lw	a5,-68(s0)
   11f58:	fef42023          	sw	a5,-32(s0)
    end = buf + size;
   11f5c:	fbc42703          	lw	a4,-68(s0)
   11f60:	fb842783          	lw	a5,-72(s0)
   11f64:	00f707b3          	add	a5,a4,a5
   11f68:	fcf42e23          	sw	a5,-36(s0)

    /* Make sure end is always >= buf */
    if (end < buf)
   11f6c:	fdc42703          	lw	a4,-36(s0)
   11f70:	fbc42783          	lw	a5,-68(s0)
   11f74:	6af77663          	bgeu	a4,a5,12620 <rt_vsnprintf+0x6ec>
    {
        end  = ((char *) - 1);
   11f78:	fff00793          	li	a5,-1
   11f7c:	fcf42e23          	sw	a5,-36(s0)
        size = end - buf;
   11f80:	fdc42703          	lw	a4,-36(s0)
   11f84:	fbc42783          	lw	a5,-68(s0)
   11f88:	40f707b3          	sub	a5,a4,a5
   11f8c:	faf42c23          	sw	a5,-72(s0)
    }

    for (; *fmt ; ++fmt)
   11f90:	6900006f          	j	12620 <rt_vsnprintf+0x6ec>
    {
        if (*fmt != '%')
   11f94:	fb442783          	lw	a5,-76(s0)
   11f98:	0007c703          	lbu	a4,0(a5)
   11f9c:	02500793          	li	a5,37
   11fa0:	02f70863          	beq	a4,a5,11fd0 <rt_vsnprintf+0x9c>
        {
            if (str < end)
   11fa4:	fe042703          	lw	a4,-32(s0)
   11fa8:	fdc42783          	lw	a5,-36(s0)
   11fac:	00f77a63          	bgeu	a4,a5,11fc0 <rt_vsnprintf+0x8c>
                *str = *fmt;
   11fb0:	fb442783          	lw	a5,-76(s0)
   11fb4:	0007c703          	lbu	a4,0(a5)
   11fb8:	fe042783          	lw	a5,-32(s0)
   11fbc:	00e78023          	sb	a4,0(a5)
            ++ str;
   11fc0:	fe042783          	lw	a5,-32(s0)
   11fc4:	00178793          	addi	a5,a5,1
   11fc8:	fef42023          	sw	a5,-32(s0)
            continue;
   11fcc:	6480006f          	j	12614 <rt_vsnprintf+0x6e0>
        }

        /* process flags */
        flags = 0;
   11fd0:	fc040b23          	sb	zero,-42(s0)

        while (1)
        {
            /* skips the first '%' also */
            ++ fmt;
   11fd4:	fb442783          	lw	a5,-76(s0)
   11fd8:	00178793          	addi	a5,a5,1
   11fdc:	faf42a23          	sw	a5,-76(s0)
            if (*fmt == '-') flags |= LEFT;
   11fe0:	fb442783          	lw	a5,-76(s0)
   11fe4:	0007c703          	lbu	a4,0(a5)
   11fe8:	02d00793          	li	a5,45
   11fec:	00f71a63          	bne	a4,a5,12000 <rt_vsnprintf+0xcc>
   11ff0:	fd644783          	lbu	a5,-42(s0)
   11ff4:	0107e793          	ori	a5,a5,16
   11ff8:	fcf40b23          	sb	a5,-42(s0)
   11ffc:	fd9ff06f          	j	11fd4 <rt_vsnprintf+0xa0>
            else if (*fmt == '+') flags |= PLUS;
   12000:	fb442783          	lw	a5,-76(s0)
   12004:	0007c703          	lbu	a4,0(a5)
   12008:	02b00793          	li	a5,43
   1200c:	00f71a63          	bne	a4,a5,12020 <rt_vsnprintf+0xec>
   12010:	fd644783          	lbu	a5,-42(s0)
   12014:	0047e793          	ori	a5,a5,4
   12018:	fcf40b23          	sb	a5,-42(s0)
   1201c:	fb9ff06f          	j	11fd4 <rt_vsnprintf+0xa0>
            else if (*fmt == ' ') flags |= SPACE;
   12020:	fb442783          	lw	a5,-76(s0)
   12024:	0007c703          	lbu	a4,0(a5)
   12028:	02000793          	li	a5,32
   1202c:	00f71a63          	bne	a4,a5,12040 <rt_vsnprintf+0x10c>
   12030:	fd644783          	lbu	a5,-42(s0)
   12034:	0087e793          	ori	a5,a5,8
   12038:	fcf40b23          	sb	a5,-42(s0)
   1203c:	f99ff06f          	j	11fd4 <rt_vsnprintf+0xa0>
            else if (*fmt == '#') flags |= SPECIAL;
   12040:	fb442783          	lw	a5,-76(s0)
   12044:	0007c703          	lbu	a4,0(a5)
   12048:	02300793          	li	a5,35
   1204c:	00f71a63          	bne	a4,a5,12060 <rt_vsnprintf+0x12c>
   12050:	fd644783          	lbu	a5,-42(s0)
   12054:	0207e793          	ori	a5,a5,32
   12058:	fcf40b23          	sb	a5,-42(s0)
   1205c:	f79ff06f          	j	11fd4 <rt_vsnprintf+0xa0>
            else if (*fmt == '0') flags |= ZEROPAD;
   12060:	fb442783          	lw	a5,-76(s0)
   12064:	0007c703          	lbu	a4,0(a5)
   12068:	03000793          	li	a5,48
   1206c:	00f71a63          	bne	a4,a5,12080 <rt_vsnprintf+0x14c>
   12070:	fd644783          	lbu	a5,-42(s0)
   12074:	0017e793          	ori	a5,a5,1
   12078:	fcf40b23          	sb	a5,-42(s0)
            ++ fmt;
   1207c:	f59ff06f          	j	11fd4 <rt_vsnprintf+0xa0>
            else break;
   12080:	00000013          	nop
        }

        /* get field width */
        field_width = -1;
   12084:	fff00793          	li	a5,-1
   12088:	fcf42823          	sw	a5,-48(s0)
        if (_ISDIGIT(*fmt)) field_width = skip_atoi(&fmt);
   1208c:	fb442783          	lw	a5,-76(s0)
   12090:	0007c783          	lbu	a5,0(a5)
   12094:	fd078793          	addi	a5,a5,-48
   12098:	00078713          	mv	a4,a5
   1209c:	00900793          	li	a5,9
   120a0:	00e7ec63          	bltu	a5,a4,120b8 <rt_vsnprintf+0x184>
   120a4:	fb440793          	addi	a5,s0,-76
   120a8:	00078513          	mv	a0,a5
   120ac:	b05ff0ef          	jal	ra,11bb0 <skip_atoi>
   120b0:	fca42823          	sw	a0,-48(s0)
   120b4:	0540006f          	j	12108 <rt_vsnprintf+0x1d4>
        else if (*fmt == '*')
   120b8:	fb442783          	lw	a5,-76(s0)
   120bc:	0007c703          	lbu	a4,0(a5)
   120c0:	02a00793          	li	a5,42
   120c4:	04f71263          	bne	a4,a5,12108 <rt_vsnprintf+0x1d4>
        {
            ++ fmt;
   120c8:	fb442783          	lw	a5,-76(s0)
   120cc:	00178793          	addi	a5,a5,1
   120d0:	faf42a23          	sw	a5,-76(s0)
            /* it's the next argument */
            field_width = va_arg(args, int);
   120d4:	fb042783          	lw	a5,-80(s0)
   120d8:	00478713          	addi	a4,a5,4
   120dc:	fae42823          	sw	a4,-80(s0)
   120e0:	0007a783          	lw	a5,0(a5)
   120e4:	fcf42823          	sw	a5,-48(s0)
            if (field_width < 0)
   120e8:	fd042783          	lw	a5,-48(s0)
   120ec:	0007de63          	bgez	a5,12108 <rt_vsnprintf+0x1d4>
            {
                field_width = -field_width;
   120f0:	fd042783          	lw	a5,-48(s0)
   120f4:	40f007b3          	neg	a5,a5
   120f8:	fcf42823          	sw	a5,-48(s0)
                flags |= LEFT;
   120fc:	fd644783          	lbu	a5,-42(s0)
   12100:	0107e793          	ori	a5,a5,16
   12104:	fcf40b23          	sb	a5,-42(s0)
            }
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
   12108:	fff00793          	li	a5,-1
   1210c:	fcf42623          	sw	a5,-52(s0)
        if (*fmt == '.')
   12110:	fb442783          	lw	a5,-76(s0)
   12114:	0007c703          	lbu	a4,0(a5)
   12118:	02e00793          	li	a5,46
   1211c:	06f71c63          	bne	a4,a5,12194 <rt_vsnprintf+0x260>
        {
            ++ fmt;
   12120:	fb442783          	lw	a5,-76(s0)
   12124:	00178793          	addi	a5,a5,1
   12128:	faf42a23          	sw	a5,-76(s0)
            if (_ISDIGIT(*fmt)) precision = skip_atoi(&fmt);
   1212c:	fb442783          	lw	a5,-76(s0)
   12130:	0007c783          	lbu	a5,0(a5)
   12134:	fd078793          	addi	a5,a5,-48
   12138:	00078713          	mv	a4,a5
   1213c:	00900793          	li	a5,9
   12140:	00e7ec63          	bltu	a5,a4,12158 <rt_vsnprintf+0x224>
   12144:	fb440793          	addi	a5,s0,-76
   12148:	00078513          	mv	a0,a5
   1214c:	a65ff0ef          	jal	ra,11bb0 <skip_atoi>
   12150:	fca42623          	sw	a0,-52(s0)
   12154:	0340006f          	j	12188 <rt_vsnprintf+0x254>
            else if (*fmt == '*')
   12158:	fb442783          	lw	a5,-76(s0)
   1215c:	0007c703          	lbu	a4,0(a5)
   12160:	02a00793          	li	a5,42
   12164:	02f71263          	bne	a4,a5,12188 <rt_vsnprintf+0x254>
            {
                ++ fmt;
   12168:	fb442783          	lw	a5,-76(s0)
   1216c:	00178793          	addi	a5,a5,1
   12170:	faf42a23          	sw	a5,-76(s0)
                /* it's the next argument */
                precision = va_arg(args, int);
   12174:	fb042783          	lw	a5,-80(s0)
   12178:	00478713          	addi	a4,a5,4
   1217c:	fae42823          	sw	a4,-80(s0)
   12180:	0007a783          	lw	a5,0(a5)
   12184:	fcf42623          	sw	a5,-52(s0)
            }
            if (precision < 0) precision = 0;
   12188:	fcc42783          	lw	a5,-52(s0)
   1218c:	0007d463          	bgez	a5,12194 <rt_vsnprintf+0x260>
   12190:	fc042623          	sw	zero,-52(s0)
        }
#endif /* RT_PRINTF_PRECISION */
        /* get the conversion qualifier */
        qualifier = 0;
   12194:	fc040aa3          	sb	zero,-43(s0)
#ifdef RT_PRINTF_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
#else
        if (*fmt == 'h' || *fmt == 'l')
   12198:	fb442783          	lw	a5,-76(s0)
   1219c:	0007c703          	lbu	a4,0(a5)
   121a0:	06800793          	li	a5,104
   121a4:	00f70a63          	beq	a4,a5,121b8 <rt_vsnprintf+0x284>
   121a8:	fb442783          	lw	a5,-76(s0)
   121ac:	0007c703          	lbu	a4,0(a5)
   121b0:	06c00793          	li	a5,108
   121b4:	00f71e63          	bne	a4,a5,121d0 <rt_vsnprintf+0x29c>
#endif /* RT_PRINTF_LONGLONG */
        {
            qualifier = *fmt;
   121b8:	fb442783          	lw	a5,-76(s0)
   121bc:	0007c783          	lbu	a5,0(a5)
   121c0:	fcf40aa3          	sb	a5,-43(s0)
            ++ fmt;
   121c4:	fb442783          	lw	a5,-76(s0)
   121c8:	00178793          	addi	a5,a5,1
   121cc:	faf42a23          	sw	a5,-76(s0)
            }
#endif /* RT_PRINTF_LONGLONG */
        }

        /* the default base */
        base = 10;
   121d0:	00a00793          	li	a5,10
   121d4:	fcf40ba3          	sb	a5,-41(s0)

        switch (*fmt)
   121d8:	fb442783          	lw	a5,-76(s0)
   121dc:	0007c783          	lbu	a5,0(a5)
   121e0:	02500713          	li	a4,37
   121e4:	2ae78e63          	beq	a5,a4,124a0 <rt_vsnprintf+0x56c>
   121e8:	02500713          	li	a4,37
   121ec:	30e7c863          	blt	a5,a4,124fc <rt_vsnprintf+0x5c8>
   121f0:	07800713          	li	a4,120
   121f4:	30f74463          	blt	a4,a5,124fc <rt_vsnprintf+0x5c8>
   121f8:	05800713          	li	a4,88
   121fc:	30e7c063          	blt	a5,a4,124fc <rt_vsnprintf+0x5c8>
   12200:	fa878793          	addi	a5,a5,-88
   12204:	02000713          	li	a4,32
   12208:	2ef76a63          	bltu	a4,a5,124fc <rt_vsnprintf+0x5c8>
   1220c:	00279713          	slli	a4,a5,0x2
   12210:	0000e797          	auipc	a5,0xe
   12214:	cfc78793          	addi	a5,a5,-772 # 1ff0c <__FUNCTION__.2556+0xb0>
   12218:	00f707b3          	add	a5,a4,a5
   1221c:	0007a703          	lw	a4,0(a5)
   12220:	0000e797          	auipc	a5,0xe
   12224:	cec78793          	addi	a5,a5,-788 # 1ff0c <__FUNCTION__.2556+0xb0>
   12228:	00f707b3          	add	a5,a4,a5
   1222c:	00078067          	jr	a5
        {
        case 'c':
            if (!(flags & LEFT))
   12230:	fd644783          	lbu	a5,-42(s0)
   12234:	0107f793          	andi	a5,a5,16
   12238:	04079063          	bnez	a5,12278 <rt_vsnprintf+0x344>
            {
                while (--field_width > 0)
   1223c:	0280006f          	j	12264 <rt_vsnprintf+0x330>
                {
                    if (str < end) *str = ' ';
   12240:	fe042703          	lw	a4,-32(s0)
   12244:	fdc42783          	lw	a5,-36(s0)
   12248:	00f77863          	bgeu	a4,a5,12258 <rt_vsnprintf+0x324>
   1224c:	fe042783          	lw	a5,-32(s0)
   12250:	02000713          	li	a4,32
   12254:	00e78023          	sb	a4,0(a5)
                    ++ str;
   12258:	fe042783          	lw	a5,-32(s0)
   1225c:	00178793          	addi	a5,a5,1
   12260:	fef42023          	sw	a5,-32(s0)
                while (--field_width > 0)
   12264:	fd042783          	lw	a5,-48(s0)
   12268:	fff78793          	addi	a5,a5,-1
   1226c:	fcf42823          	sw	a5,-48(s0)
   12270:	fd042783          	lw	a5,-48(s0)
   12274:	fcf046e3          	bgtz	a5,12240 <rt_vsnprintf+0x30c>
                }
            }

            /* get character */
            c = (rt_uint8_t)va_arg(args, int);
   12278:	fb042783          	lw	a5,-80(s0)
   1227c:	00478713          	addi	a4,a5,4
   12280:	fae42823          	sw	a4,-80(s0)
   12284:	0007a783          	lw	a5,0(a5)
   12288:	fcf405a3          	sb	a5,-53(s0)
            if (str < end) *str = c;
   1228c:	fe042703          	lw	a4,-32(s0)
   12290:	fdc42783          	lw	a5,-36(s0)
   12294:	00f77863          	bgeu	a4,a5,122a4 <rt_vsnprintf+0x370>
   12298:	fe042783          	lw	a5,-32(s0)
   1229c:	fcb44703          	lbu	a4,-53(s0)
   122a0:	00e78023          	sb	a4,0(a5)
            ++ str;
   122a4:	fe042783          	lw	a5,-32(s0)
   122a8:	00178793          	addi	a5,a5,1
   122ac:	fef42023          	sw	a5,-32(s0)

            /* put width */
            while (--field_width > 0)
   122b0:	0280006f          	j	122d8 <rt_vsnprintf+0x3a4>
            {
                if (str < end) *str = ' ';
   122b4:	fe042703          	lw	a4,-32(s0)
   122b8:	fdc42783          	lw	a5,-36(s0)
   122bc:	00f77863          	bgeu	a4,a5,122cc <rt_vsnprintf+0x398>
   122c0:	fe042783          	lw	a5,-32(s0)
   122c4:	02000713          	li	a4,32
   122c8:	00e78023          	sb	a4,0(a5)
                ++ str;
   122cc:	fe042783          	lw	a5,-32(s0)
   122d0:	00178793          	addi	a5,a5,1
   122d4:	fef42023          	sw	a5,-32(s0)
            while (--field_width > 0)
   122d8:	fd042783          	lw	a5,-48(s0)
   122dc:	fff78793          	addi	a5,a5,-1
   122e0:	fcf42823          	sw	a5,-48(s0)
   122e4:	fd042783          	lw	a5,-48(s0)
   122e8:	fcf046e3          	bgtz	a5,122b4 <rt_vsnprintf+0x380>
            }
            continue;
   122ec:	3280006f          	j	12614 <rt_vsnprintf+0x6e0>

        case 's':
            s = va_arg(args, char *);
   122f0:	fb042783          	lw	a5,-80(s0)
   122f4:	00478713          	addi	a4,a5,4
   122f8:	fae42823          	sw	a4,-80(s0)
   122fc:	0007a783          	lw	a5,0(a5)
   12300:	fcf42c23          	sw	a5,-40(s0)
            if (!s) s = "(NULL)";
   12304:	fd842783          	lw	a5,-40(s0)
   12308:	00079863          	bnez	a5,12318 <rt_vsnprintf+0x3e4>
   1230c:	0000e797          	auipc	a5,0xe
   12310:	bf878793          	addi	a5,a5,-1032 # 1ff04 <__FUNCTION__.2556+0xa8>
   12314:	fcf42c23          	sw	a5,-40(s0)

            for (len = 0; (len != field_width) && (s[len] != '\0'); len++);
   12318:	fe042223          	sw	zero,-28(s0)
   1231c:	0100006f          	j	1232c <rt_vsnprintf+0x3f8>
   12320:	fe442783          	lw	a5,-28(s0)
   12324:	00178793          	addi	a5,a5,1
   12328:	fef42223          	sw	a5,-28(s0)
   1232c:	fe442703          	lw	a4,-28(s0)
   12330:	fd042783          	lw	a5,-48(s0)
   12334:	00f70c63          	beq	a4,a5,1234c <rt_vsnprintf+0x418>
   12338:	fe442783          	lw	a5,-28(s0)
   1233c:	fd842703          	lw	a4,-40(s0)
   12340:	00f707b3          	add	a5,a4,a5
   12344:	0007c783          	lbu	a5,0(a5)
   12348:	fc079ce3          	bnez	a5,12320 <rt_vsnprintf+0x3ec>
#ifdef RT_PRINTF_PRECISION
            if (precision > 0 && len > precision) len = precision;
   1234c:	fcc42783          	lw	a5,-52(s0)
   12350:	00f05c63          	blez	a5,12368 <rt_vsnprintf+0x434>
   12354:	fe442703          	lw	a4,-28(s0)
   12358:	fcc42783          	lw	a5,-52(s0)
   1235c:	00e7d663          	bge	a5,a4,12368 <rt_vsnprintf+0x434>
   12360:	fcc42783          	lw	a5,-52(s0)
   12364:	fef42223          	sw	a5,-28(s0)
#endif /* RT_PRINTF_PRECISION */

            if (!(flags & LEFT))
   12368:	fd644783          	lbu	a5,-42(s0)
   1236c:	0107f793          	andi	a5,a5,16
   12370:	04079063          	bnez	a5,123b0 <rt_vsnprintf+0x47c>
            {
                while (len < field_width--)
   12374:	0280006f          	j	1239c <rt_vsnprintf+0x468>
                {
                    if (str < end) *str = ' ';
   12378:	fe042703          	lw	a4,-32(s0)
   1237c:	fdc42783          	lw	a5,-36(s0)
   12380:	00f77863          	bgeu	a4,a5,12390 <rt_vsnprintf+0x45c>
   12384:	fe042783          	lw	a5,-32(s0)
   12388:	02000713          	li	a4,32
   1238c:	00e78023          	sb	a4,0(a5)
                    ++ str;
   12390:	fe042783          	lw	a5,-32(s0)
   12394:	00178793          	addi	a5,a5,1
   12398:	fef42023          	sw	a5,-32(s0)
                while (len < field_width--)
   1239c:	fd042783          	lw	a5,-48(s0)
   123a0:	fff78713          	addi	a4,a5,-1
   123a4:	fce42823          	sw	a4,-48(s0)
   123a8:	fe442703          	lw	a4,-28(s0)
   123ac:	fcf746e3          	blt	a4,a5,12378 <rt_vsnprintf+0x444>
                }
            }

            for (i = 0; i < len; ++i)
   123b0:	fe042423          	sw	zero,-24(s0)
   123b4:	0440006f          	j	123f8 <rt_vsnprintf+0x4c4>
            {
                if (str < end) *str = *s;
   123b8:	fe042703          	lw	a4,-32(s0)
   123bc:	fdc42783          	lw	a5,-36(s0)
   123c0:	00f77a63          	bgeu	a4,a5,123d4 <rt_vsnprintf+0x4a0>
   123c4:	fd842783          	lw	a5,-40(s0)
   123c8:	0007c703          	lbu	a4,0(a5)
   123cc:	fe042783          	lw	a5,-32(s0)
   123d0:	00e78023          	sb	a4,0(a5)
                ++ str;
   123d4:	fe042783          	lw	a5,-32(s0)
   123d8:	00178793          	addi	a5,a5,1
   123dc:	fef42023          	sw	a5,-32(s0)
                ++ s;
   123e0:	fd842783          	lw	a5,-40(s0)
   123e4:	00178793          	addi	a5,a5,1
   123e8:	fcf42c23          	sw	a5,-40(s0)
            for (i = 0; i < len; ++i)
   123ec:	fe842783          	lw	a5,-24(s0)
   123f0:	00178793          	addi	a5,a5,1
   123f4:	fef42423          	sw	a5,-24(s0)
   123f8:	fe842703          	lw	a4,-24(s0)
   123fc:	fe442783          	lw	a5,-28(s0)
   12400:	faf74ce3          	blt	a4,a5,123b8 <rt_vsnprintf+0x484>
            }

            while (len < field_width--)
   12404:	0280006f          	j	1242c <rt_vsnprintf+0x4f8>
            {
                if (str < end) *str = ' ';
   12408:	fe042703          	lw	a4,-32(s0)
   1240c:	fdc42783          	lw	a5,-36(s0)
   12410:	00f77863          	bgeu	a4,a5,12420 <rt_vsnprintf+0x4ec>
   12414:	fe042783          	lw	a5,-32(s0)
   12418:	02000713          	li	a4,32
   1241c:	00e78023          	sb	a4,0(a5)
                ++ str;
   12420:	fe042783          	lw	a5,-32(s0)
   12424:	00178793          	addi	a5,a5,1
   12428:	fef42023          	sw	a5,-32(s0)
            while (len < field_width--)
   1242c:	fd042783          	lw	a5,-48(s0)
   12430:	fff78713          	addi	a4,a5,-1
   12434:	fce42823          	sw	a4,-48(s0)
   12438:	fe442703          	lw	a4,-28(s0)
   1243c:	fcf746e3          	blt	a4,a5,12408 <rt_vsnprintf+0x4d4>
            }
            continue;
   12440:	1d40006f          	j	12614 <rt_vsnprintf+0x6e0>

        case 'p':
            if (field_width == -1)
   12444:	fd042703          	lw	a4,-48(s0)
   12448:	fff00793          	li	a5,-1
   1244c:	00f71c63          	bne	a4,a5,12464 <rt_vsnprintf+0x530>
            {
                field_width = sizeof(void *) << 1;
   12450:	00800793          	li	a5,8
   12454:	fcf42823          	sw	a5,-48(s0)
                flags |= ZEROPAD;
   12458:	fd644783          	lbu	a5,-42(s0)
   1245c:	0017e793          	ori	a5,a5,1
   12460:	fcf40b23          	sb	a5,-42(s0)
            }
#ifdef RT_PRINTF_PRECISION
            str = print_number(str, end,
                               (long)va_arg(args, void *),
   12464:	fb042783          	lw	a5,-80(s0)
   12468:	00478713          	addi	a4,a5,4
   1246c:	fae42823          	sw	a4,-80(s0)
   12470:	0007a783          	lw	a5,0(a5)
            str = print_number(str, end,
   12474:	00078613          	mv	a2,a5
   12478:	fd644783          	lbu	a5,-42(s0)
   1247c:	00078813          	mv	a6,a5
   12480:	fcc42783          	lw	a5,-52(s0)
   12484:	fd042703          	lw	a4,-48(s0)
   12488:	01000693          	li	a3,16
   1248c:	fdc42583          	lw	a1,-36(s0)
   12490:	fe042503          	lw	a0,-32(s0)
   12494:	fa0ff0ef          	jal	ra,11c34 <print_number>
   12498:	fea42023          	sw	a0,-32(s0)
#else
            str = print_number(str, end,
                               (long)va_arg(args, void *),
                               16, field_width, flags);
#endif /* RT_PRINTF_PRECISION */
            continue;
   1249c:	1780006f          	j	12614 <rt_vsnprintf+0x6e0>

        case '%':
            if (str < end) *str = '%';
   124a0:	fe042703          	lw	a4,-32(s0)
   124a4:	fdc42783          	lw	a5,-36(s0)
   124a8:	00f77863          	bgeu	a4,a5,124b8 <rt_vsnprintf+0x584>
   124ac:	fe042783          	lw	a5,-32(s0)
   124b0:	02500713          	li	a4,37
   124b4:	00e78023          	sb	a4,0(a5)
            ++ str;
   124b8:	fe042783          	lw	a5,-32(s0)
   124bc:	00178793          	addi	a5,a5,1
   124c0:	fef42023          	sw	a5,-32(s0)
            continue;
   124c4:	1500006f          	j	12614 <rt_vsnprintf+0x6e0>

        /* integer number formats - set up the flags and "break" */
        case 'o':
            base = 8;
   124c8:	00800793          	li	a5,8
   124cc:	fcf40ba3          	sb	a5,-41(s0)
            break;
   124d0:	09c0006f          	j	1256c <rt_vsnprintf+0x638>

        case 'X':
            flags |= LARGE;
   124d4:	fd644783          	lbu	a5,-42(s0)
   124d8:	0407e793          	ori	a5,a5,64
   124dc:	fcf40b23          	sb	a5,-42(s0)
        case 'x':
            base = 16;
   124e0:	01000793          	li	a5,16
   124e4:	fcf40ba3          	sb	a5,-41(s0)
            break;
   124e8:	0840006f          	j	1256c <rt_vsnprintf+0x638>

        case 'd':
        case 'i':
            flags |= SIGN;
   124ec:	fd644783          	lbu	a5,-42(s0)
   124f0:	0027e793          	ori	a5,a5,2
   124f4:	fcf40b23          	sb	a5,-42(s0)
        case 'u':
            break;
   124f8:	0700006f          	j	12568 <rt_vsnprintf+0x634>

        default:
            if (str < end) *str = '%';
   124fc:	fe042703          	lw	a4,-32(s0)
   12500:	fdc42783          	lw	a5,-36(s0)
   12504:	00f77863          	bgeu	a4,a5,12514 <rt_vsnprintf+0x5e0>
   12508:	fe042783          	lw	a5,-32(s0)
   1250c:	02500713          	li	a4,37
   12510:	00e78023          	sb	a4,0(a5)
            ++ str;
   12514:	fe042783          	lw	a5,-32(s0)
   12518:	00178793          	addi	a5,a5,1
   1251c:	fef42023          	sw	a5,-32(s0)

            if (*fmt)
   12520:	fb442783          	lw	a5,-76(s0)
   12524:	0007c783          	lbu	a5,0(a5)
   12528:	02078863          	beqz	a5,12558 <rt_vsnprintf+0x624>
            {
                if (str < end) *str = *fmt;
   1252c:	fe042703          	lw	a4,-32(s0)
   12530:	fdc42783          	lw	a5,-36(s0)
   12534:	00f77a63          	bgeu	a4,a5,12548 <rt_vsnprintf+0x614>
   12538:	fb442783          	lw	a5,-76(s0)
   1253c:	0007c703          	lbu	a4,0(a5)
   12540:	fe042783          	lw	a5,-32(s0)
   12544:	00e78023          	sb	a4,0(a5)
                ++ str;
   12548:	fe042783          	lw	a5,-32(s0)
   1254c:	00178793          	addi	a5,a5,1
   12550:	fef42023          	sw	a5,-32(s0)
            }
            else
            {
                -- fmt;
            }
            continue;
   12554:	0c00006f          	j	12614 <rt_vsnprintf+0x6e0>
                -- fmt;
   12558:	fb442783          	lw	a5,-76(s0)
   1255c:	fff78793          	addi	a5,a5,-1
   12560:	faf42a23          	sw	a5,-76(s0)
            continue;
   12564:	0b00006f          	j	12614 <rt_vsnprintf+0x6e0>
            break;
   12568:	00000013          	nop

#ifdef RT_PRINTF_LONGLONG
        if (qualifier == 'L') num = va_arg(args, long long);
        else if (qualifier == 'l')
#else
        if (qualifier == 'l')
   1256c:	fd544703          	lbu	a4,-43(s0)
   12570:	06c00793          	li	a5,108
   12574:	00f71e63          	bne	a4,a5,12590 <rt_vsnprintf+0x65c>
#endif /* RT_PRINTF_LONGLONG */
        {
            num = va_arg(args, rt_uint32_t);
   12578:	fb042783          	lw	a5,-80(s0)
   1257c:	00478713          	addi	a4,a5,4
   12580:	fae42823          	sw	a4,-80(s0)
   12584:	0007a783          	lw	a5,0(a5)
   12588:	fef42623          	sw	a5,-20(s0)
   1258c:	0600006f          	j	125ec <rt_vsnprintf+0x6b8>
            if (flags & SIGN) num = (rt_int32_t)num;
        }
        else if (qualifier == 'h')
   12590:	fd544703          	lbu	a4,-43(s0)
   12594:	06800793          	li	a5,104
   12598:	04f71063          	bne	a4,a5,125d8 <rt_vsnprintf+0x6a4>
        {
            num = (rt_uint16_t)va_arg(args, rt_int32_t);
   1259c:	fb042783          	lw	a5,-80(s0)
   125a0:	00478713          	addi	a4,a5,4
   125a4:	fae42823          	sw	a4,-80(s0)
   125a8:	0007a783          	lw	a5,0(a5)
   125ac:	01079793          	slli	a5,a5,0x10
   125b0:	0107d793          	srli	a5,a5,0x10
   125b4:	fef42623          	sw	a5,-20(s0)
            if (flags & SIGN) num = (rt_int16_t)num;
   125b8:	fd644783          	lbu	a5,-42(s0)
   125bc:	0027f793          	andi	a5,a5,2
   125c0:	02078663          	beqz	a5,125ec <rt_vsnprintf+0x6b8>
   125c4:	fec42783          	lw	a5,-20(s0)
   125c8:	01079793          	slli	a5,a5,0x10
   125cc:	4107d793          	srai	a5,a5,0x10
   125d0:	fef42623          	sw	a5,-20(s0)
   125d4:	0180006f          	j	125ec <rt_vsnprintf+0x6b8>
        }
        else
        {
            num = va_arg(args, rt_uint32_t);
   125d8:	fb042783          	lw	a5,-80(s0)
   125dc:	00478713          	addi	a4,a5,4
   125e0:	fae42823          	sw	a4,-80(s0)
   125e4:	0007a783          	lw	a5,0(a5)
   125e8:	fef42623          	sw	a5,-20(s0)
            if (flags & SIGN) num = (rt_int32_t)num;
        }
#ifdef RT_PRINTF_PRECISION
        str = print_number(str, end, num, base, field_width, precision, flags);
   125ec:	fec42603          	lw	a2,-20(s0)
   125f0:	fd744683          	lbu	a3,-41(s0)
   125f4:	fd644783          	lbu	a5,-42(s0)
   125f8:	00078813          	mv	a6,a5
   125fc:	fcc42783          	lw	a5,-52(s0)
   12600:	fd042703          	lw	a4,-48(s0)
   12604:	fdc42583          	lw	a1,-36(s0)
   12608:	fe042503          	lw	a0,-32(s0)
   1260c:	e28ff0ef          	jal	ra,11c34 <print_number>
   12610:	fea42023          	sw	a0,-32(s0)
    for (; *fmt ; ++fmt)
   12614:	fb442783          	lw	a5,-76(s0)
   12618:	00178793          	addi	a5,a5,1
   1261c:	faf42a23          	sw	a5,-76(s0)
   12620:	fb442783          	lw	a5,-76(s0)
   12624:	0007c783          	lbu	a5,0(a5)
   12628:	960796e3          	bnez	a5,11f94 <rt_vsnprintf+0x60>
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif /* RT_PRINTF_PRECISION */
    }

    if (size > 0)
   1262c:	fb842783          	lw	a5,-72(s0)
   12630:	02078463          	beqz	a5,12658 <rt_vsnprintf+0x724>
    {
        if (str < end) *str = '\0';
   12634:	fe042703          	lw	a4,-32(s0)
   12638:	fdc42783          	lw	a5,-36(s0)
   1263c:	00f77863          	bgeu	a4,a5,1264c <rt_vsnprintf+0x718>
   12640:	fe042783          	lw	a5,-32(s0)
   12644:	00078023          	sb	zero,0(a5)
   12648:	0100006f          	j	12658 <rt_vsnprintf+0x724>
        else
        {
            end[-1] = '\0';
   1264c:	fdc42783          	lw	a5,-36(s0)
   12650:	fff78793          	addi	a5,a5,-1
   12654:	00078023          	sb	zero,0(a5)
    }

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
   12658:	fe042703          	lw	a4,-32(s0)
   1265c:	fbc42783          	lw	a5,-68(s0)
   12660:	40f707b3          	sub	a5,a4,a5
}
   12664:	00078513          	mv	a0,a5
   12668:	04c12083          	lw	ra,76(sp)
   1266c:	04812403          	lw	s0,72(sp)
   12670:	05010113          	addi	sp,sp,80
   12674:	00008067          	ret

00012678 <rt_snprintf>:
 * @param  fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_snprintf(char *buf, rt_size_t size, const char *fmt, ...)
{
   12678:	fb010113          	addi	sp,sp,-80
   1267c:	02112623          	sw	ra,44(sp)
   12680:	02812423          	sw	s0,40(sp)
   12684:	03010413          	addi	s0,sp,48
   12688:	fca42e23          	sw	a0,-36(s0)
   1268c:	fcb42c23          	sw	a1,-40(s0)
   12690:	fcc42a23          	sw	a2,-44(s0)
   12694:	00d42623          	sw	a3,12(s0)
   12698:	00e42823          	sw	a4,16(s0)
   1269c:	00f42a23          	sw	a5,20(s0)
   126a0:	01042c23          	sw	a6,24(s0)
   126a4:	01142e23          	sw	a7,28(s0)
    rt_int32_t n;
    va_list args;

    va_start(args, fmt);
   126a8:	02040793          	addi	a5,s0,32
   126ac:	fcf42823          	sw	a5,-48(s0)
   126b0:	fd042783          	lw	a5,-48(s0)
   126b4:	fec78793          	addi	a5,a5,-20
   126b8:	fef42423          	sw	a5,-24(s0)
    n = rt_vsnprintf(buf, size, fmt, args);
   126bc:	fe842783          	lw	a5,-24(s0)
   126c0:	00078693          	mv	a3,a5
   126c4:	fd442603          	lw	a2,-44(s0)
   126c8:	fd842583          	lw	a1,-40(s0)
   126cc:	fdc42503          	lw	a0,-36(s0)
   126d0:	865ff0ef          	jal	ra,11f34 <rt_vsnprintf>
   126d4:	fea42623          	sw	a0,-20(s0)
    va_end(args);

    return n;
   126d8:	fec42783          	lw	a5,-20(s0)
}
   126dc:	00078513          	mv	a0,a5
   126e0:	02c12083          	lw	ra,44(sp)
   126e4:	02812403          	lw	s0,40(sp)
   126e8:	05010113          	addi	sp,sp,80
   126ec:	00008067          	ret

000126f0 <rt_vsprintf>:
 * @param  arg_ptr is a list of variable parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
{
   126f0:	fe010113          	addi	sp,sp,-32
   126f4:	00112e23          	sw	ra,28(sp)
   126f8:	00812c23          	sw	s0,24(sp)
   126fc:	02010413          	addi	s0,sp,32
   12700:	fea42623          	sw	a0,-20(s0)
   12704:	feb42423          	sw	a1,-24(s0)
   12708:	fec42223          	sw	a2,-28(s0)
    return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
   1270c:	fe442683          	lw	a3,-28(s0)
   12710:	fe842603          	lw	a2,-24(s0)
   12714:	fff00593          	li	a1,-1
   12718:	fec42503          	lw	a0,-20(s0)
   1271c:	819ff0ef          	jal	ra,11f34 <rt_vsnprintf>
   12720:	00050793          	mv	a5,a0
}
   12724:	00078513          	mv	a0,a5
   12728:	01c12083          	lw	ra,28(sp)
   1272c:	01812403          	lw	s0,24(sp)
   12730:	02010113          	addi	sp,sp,32
   12734:	00008067          	ret

00012738 <rt_sprintf>:
 * @param  format is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_sprintf(char *buf, const char *format, ...)
{
   12738:	fb010113          	addi	sp,sp,-80
   1273c:	02112623          	sw	ra,44(sp)
   12740:	02812423          	sw	s0,40(sp)
   12744:	03010413          	addi	s0,sp,48
   12748:	fca42e23          	sw	a0,-36(s0)
   1274c:	fcb42c23          	sw	a1,-40(s0)
   12750:	00c42423          	sw	a2,8(s0)
   12754:	00d42623          	sw	a3,12(s0)
   12758:	00e42823          	sw	a4,16(s0)
   1275c:	00f42a23          	sw	a5,20(s0)
   12760:	01042c23          	sw	a6,24(s0)
   12764:	01142e23          	sw	a7,28(s0)
    rt_int32_t n;
    va_list arg_ptr;

    va_start(arg_ptr, format);
   12768:	02040793          	addi	a5,s0,32
   1276c:	fcf42a23          	sw	a5,-44(s0)
   12770:	fd442783          	lw	a5,-44(s0)
   12774:	fe878793          	addi	a5,a5,-24
   12778:	fef42423          	sw	a5,-24(s0)
    n = rt_vsprintf(buf, format, arg_ptr);
   1277c:	fe842783          	lw	a5,-24(s0)
   12780:	00078613          	mv	a2,a5
   12784:	fd842583          	lw	a1,-40(s0)
   12788:	fdc42503          	lw	a0,-36(s0)
   1278c:	f65ff0ef          	jal	ra,126f0 <rt_vsprintf>
   12790:	fea42623          	sw	a0,-20(s0)
    va_end(arg_ptr);

    return n;
   12794:	fec42783          	lw	a5,-20(s0)
}
   12798:	00078513          	mv	a0,a5
   1279c:	02c12083          	lw	ra,44(sp)
   127a0:	02812403          	lw	s0,40(sp)
   127a4:	05010113          	addi	sp,sp,80
   127a8:	00008067          	ret

000127ac <rt_console_get_device>:
 * This function returns the device using in console.
 *
 * @return Returns the console device pointer or RT_NULL.
 */
rt_device_t rt_console_get_device(void)
{
   127ac:	ff010113          	addi	sp,sp,-16
   127b0:	00812623          	sw	s0,12(sp)
   127b4:	01010413          	addi	s0,sp,16
    return _console_device;
   127b8:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   127bc:	0007a783          	lw	a5,0(a5)
}
   127c0:	00078513          	mv	a0,a5
   127c4:	00c12403          	lw	s0,12(sp)
   127c8:	01010113          	addi	sp,sp,16
   127cc:	00008067          	ret

000127d0 <rt_console_set_device>:
 * @param  name is the name of new console device.
 *
 * @return the old console device handler on successful, or RT_NULL on failure.
 */
rt_device_t rt_console_set_device(const char *name)
{
   127d0:	fd010113          	addi	sp,sp,-48
   127d4:	02112623          	sw	ra,44(sp)
   127d8:	02812423          	sw	s0,40(sp)
   127dc:	03010413          	addi	s0,sp,48
   127e0:	fca42e23          	sw	a0,-36(s0)
    rt_device_t new_device, old_device;

    /* save old device */
    old_device = _console_device;
   127e4:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   127e8:	0007a783          	lw	a5,0(a5)
   127ec:	fef42623          	sw	a5,-20(s0)

    /* find new console device */
    new_device = rt_device_find(name);
   127f0:	fdc42503          	lw	a0,-36(s0)
   127f4:	680070ef          	jal	ra,19e74 <rt_device_find>
   127f8:	fea42423          	sw	a0,-24(s0)

    /* check whether it's a same device */
    if (new_device == old_device) return RT_NULL;
   127fc:	fe842703          	lw	a4,-24(s0)
   12800:	fec42783          	lw	a5,-20(s0)
   12804:	00f71663          	bne	a4,a5,12810 <rt_console_set_device+0x40>
   12808:	00000793          	li	a5,0
   1280c:	0440006f          	j	12850 <rt_console_set_device+0x80>

    if (new_device != RT_NULL)
   12810:	fe842783          	lw	a5,-24(s0)
   12814:	02078c63          	beqz	a5,1284c <rt_console_set_device+0x7c>
    {
        if (_console_device != RT_NULL)
   12818:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   1281c:	0007a783          	lw	a5,0(a5)
   12820:	00078a63          	beqz	a5,12834 <rt_console_set_device+0x64>
        {
            /* close old console device */
            rt_device_close(_console_device);
   12824:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   12828:	0007a783          	lw	a5,0(a5)
   1282c:	00078513          	mv	a0,a5
   12830:	265070ef          	jal	ra,1a294 <rt_device_close>
        }

        /* set new console device */
        rt_device_open(new_device, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM);
   12834:	04300593          	li	a1,67
   12838:	fe842503          	lw	a0,-24(s0)
   1283c:	079070ef          	jal	ra,1a0b4 <rt_device_open>
        _console_device = new_device;
   12840:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   12844:	fe842703          	lw	a4,-24(s0)
   12848:	00e7a023          	sw	a4,0(a5)
    }

    return old_device;
   1284c:	fec42783          	lw	a5,-20(s0)
}
   12850:	00078513          	mv	a0,a5
   12854:	02c12083          	lw	ra,44(sp)
   12858:	02812403          	lw	s0,40(sp)
   1285c:	03010113          	addi	sp,sp,48
   12860:	00008067          	ret
RTM_EXPORT(rt_console_set_device);
#endif /* RT_USING_DEVICE */

RT_WEAK void rt_hw_console_output(const char *str)
{
   12864:	fe010113          	addi	sp,sp,-32
   12868:	00812e23          	sw	s0,28(sp)
   1286c:	02010413          	addi	s0,sp,32
   12870:	fea42623          	sw	a0,-20(s0)
    /* empty console output */
}
   12874:	00000013          	nop
   12878:	01c12403          	lw	s0,28(sp)
   1287c:	02010113          	addi	sp,sp,32
   12880:	00008067          	ret

00012884 <rt_kputs>:
 * This function will put string to the console.
 *
 * @param str is the string output to the console.
 */
void rt_kputs(const char *str)
{
   12884:	fe010113          	addi	sp,sp,-32
   12888:	00112e23          	sw	ra,28(sp)
   1288c:	00812c23          	sw	s0,24(sp)
   12890:	00912a23          	sw	s1,20(sp)
   12894:	02010413          	addi	s0,sp,32
   12898:	fea42623          	sw	a0,-20(s0)
    if (!str) return;
   1289c:	fec42783          	lw	a5,-20(s0)
   128a0:	04078463          	beqz	a5,128e8 <rt_kputs+0x64>

#ifdef RT_USING_DEVICE
    if (_console_device == RT_NULL)
   128a4:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   128a8:	0007a783          	lw	a5,0(a5)
   128ac:	00079863          	bnez	a5,128bc <rt_kputs+0x38>
    {
        rt_hw_console_output(str);
   128b0:	fec42503          	lw	a0,-20(s0)
   128b4:	acdfd0ef          	jal	ra,10380 <rt_hw_console_output>
   128b8:	0340006f          	j	128ec <rt_kputs+0x68>
    }
    else
    {
        rt_device_write(_console_device, 0, str, rt_strlen(str));
   128bc:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   128c0:	0007a483          	lw	s1,0(a5)
   128c4:	fec42503          	lw	a0,-20(s0)
   128c8:	8b8ff0ef          	jal	ra,11980 <rt_strlen>
   128cc:	00050793          	mv	a5,a0
   128d0:	00078693          	mv	a3,a5
   128d4:	fec42603          	lw	a2,-20(s0)
   128d8:	00000593          	li	a1,0
   128dc:	00048513          	mv	a0,s1
   128e0:	395070ef          	jal	ra,1a474 <rt_device_write>
   128e4:	0080006f          	j	128ec <rt_kputs+0x68>
    if (!str) return;
   128e8:	00000013          	nop
    }
#else
    rt_hw_console_output(str);
#endif /* RT_USING_DEVICE */
}
   128ec:	01c12083          	lw	ra,28(sp)
   128f0:	01812403          	lw	s0,24(sp)
   128f4:	01412483          	lw	s1,20(sp)
   128f8:	02010113          	addi	sp,sp,32
   128fc:	00008067          	ret

00012900 <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
RT_WEAK int rt_kprintf(const char *fmt, ...)
{
   12900:	fb010113          	addi	sp,sp,-80
   12904:	02112623          	sw	ra,44(sp)
   12908:	02812423          	sw	s0,40(sp)
   1290c:	03010413          	addi	s0,sp,48
   12910:	fca42e23          	sw	a0,-36(s0)
   12914:	00b42223          	sw	a1,4(s0)
   12918:	00c42423          	sw	a2,8(s0)
   1291c:	00d42623          	sw	a3,12(s0)
   12920:	00e42823          	sw	a4,16(s0)
   12924:	00f42a23          	sw	a5,20(s0)
   12928:	01042c23          	sw	a6,24(s0)
   1292c:	01142e23          	sw	a7,28(s0)
    va_list args;
    rt_size_t length;
    static char rt_log_buf[RT_CONSOLEBUF_SIZE];

    va_start(args, fmt);
   12930:	02040793          	addi	a5,s0,32
   12934:	fcf42c23          	sw	a5,-40(s0)
   12938:	fd842783          	lw	a5,-40(s0)
   1293c:	fe478793          	addi	a5,a5,-28
   12940:	fef42423          	sw	a5,-24(s0)
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
   12944:	fe842783          	lw	a5,-24(s0)
   12948:	00078693          	mv	a3,a5
   1294c:	fdc42603          	lw	a2,-36(s0)
   12950:	07f00593          	li	a1,127
   12954:	88818513          	addi	a0,gp,-1912 # 223e8 <rt_log_buf.2725>
   12958:	ddcff0ef          	jal	ra,11f34 <rt_vsnprintf>
   1295c:	00050793          	mv	a5,a0
   12960:	fef42623          	sw	a5,-20(s0)
    if (length > RT_CONSOLEBUF_SIZE - 1)
   12964:	fec42703          	lw	a4,-20(s0)
   12968:	07f00793          	li	a5,127
   1296c:	00e7f663          	bgeu	a5,a4,12978 <rt_kprintf+0x78>
        length = RT_CONSOLEBUF_SIZE - 1;
   12970:	07f00793          	li	a5,127
   12974:	fef42623          	sw	a5,-20(s0)
#ifdef RT_USING_DEVICE
    if (_console_device == RT_NULL)
   12978:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   1297c:	0007a783          	lw	a5,0(a5)
   12980:	00079863          	bnez	a5,12990 <rt_kprintf+0x90>
    {
        rt_hw_console_output(rt_log_buf);
   12984:	88818513          	addi	a0,gp,-1912 # 223e8 <rt_log_buf.2725>
   12988:	9f9fd0ef          	jal	ra,10380 <rt_hw_console_output>
   1298c:	0200006f          	j	129ac <rt_kprintf+0xac>
    }
    else
    {
        rt_device_write(_console_device, 0, rt_log_buf, length);
   12990:	85418793          	addi	a5,gp,-1964 # 223b4 <_console_device>
   12994:	0007a783          	lw	a5,0(a5)
   12998:	fec42683          	lw	a3,-20(s0)
   1299c:	88818613          	addi	a2,gp,-1912 # 223e8 <rt_log_buf.2725>
   129a0:	00000593          	li	a1,0
   129a4:	00078513          	mv	a0,a5
   129a8:	2cd070ef          	jal	ra,1a474 <rt_device_write>
#else
    rt_hw_console_output(rt_log_buf);
#endif /* RT_USING_DEVICE */
    va_end(args);

    return length;
   129ac:	fec42783          	lw	a5,-20(s0)
}
   129b0:	00078513          	mv	a0,a5
   129b4:	02c12083          	lw	ra,44(sp)
   129b8:	02812403          	lw	s0,40(sp)
   129bc:	05010113          	addi	sp,sp,80
   129c0:	00008067          	ret

000129c4 <rt_malloc_sethook>:
 *        block is allocated from heap memory.
 *
 * @param hook the hook function.
 */
void rt_malloc_sethook(void (*hook)(void *ptr, rt_size_t size))
{
   129c4:	fe010113          	addi	sp,sp,-32
   129c8:	00812e23          	sw	s0,28(sp)
   129cc:	02010413          	addi	s0,sp,32
   129d0:	fea42623          	sw	a0,-20(s0)
    rt_malloc_hook = hook;
   129d4:	85818793          	addi	a5,gp,-1960 # 223b8 <rt_malloc_hook>
   129d8:	fec42703          	lw	a4,-20(s0)
   129dc:	00e7a023          	sw	a4,0(a5)
}
   129e0:	00000013          	nop
   129e4:	01c12403          	lw	s0,28(sp)
   129e8:	02010113          	addi	sp,sp,32
   129ec:	00008067          	ret

000129f0 <rt_free_sethook>:
 *        block is released to heap memory.
 *
 * @param hook the hook function
 */
void rt_free_sethook(void (*hook)(void *ptr))
{
   129f0:	fe010113          	addi	sp,sp,-32
   129f4:	00812e23          	sw	s0,28(sp)
   129f8:	02010413          	addi	s0,sp,32
   129fc:	fea42623          	sw	a0,-20(s0)
    rt_free_hook = hook;
   12a00:	85c18793          	addi	a5,gp,-1956 # 223bc <rt_free_hook>
   12a04:	fec42703          	lw	a4,-20(s0)
   12a08:	00e7a023          	sw	a4,0(a5)
}
   12a0c:	00000013          	nop
   12a10:	01c12403          	lw	s0,28(sp)
   12a14:	02010113          	addi	sp,sp,32
   12a18:	00008067          	ret

00012a1c <_heap_lock_init>:
#elif defined(RT_USING_MUTEX)
static struct rt_mutex _lock;
#endif

rt_inline void _heap_lock_init(void)
{
   12a1c:	ff010113          	addi	sp,sp,-16
   12a20:	00112623          	sw	ra,12(sp)
   12a24:	00812423          	sw	s0,8(sp)
   12a28:	01010413          	addi	s0,sp,16
#if defined(RT_USING_HEAP_ISR)
#elif defined(RT_USING_MUTEX)
    rt_mutex_init(&_lock, "heap", RT_IPC_FLAG_PRIO);
   12a2c:	00100613          	li	a2,1
   12a30:	0000d597          	auipc	a1,0xd
   12a34:	56058593          	addi	a1,a1,1376 # 1ff90 <__FUNCTION__.2556+0x134>
   12a38:	86018513          	addi	a0,gp,-1952 # 223c0 <_lock>
   12a3c:	234020ef          	jal	ra,14c70 <rt_mutex_init>
#endif
}
   12a40:	00000013          	nop
   12a44:	00c12083          	lw	ra,12(sp)
   12a48:	00812403          	lw	s0,8(sp)
   12a4c:	01010113          	addi	sp,sp,16
   12a50:	00008067          	ret

00012a54 <_heap_lock>:

rt_inline rt_base_t _heap_lock(void)
{
   12a54:	ff010113          	addi	sp,sp,-16
   12a58:	00112623          	sw	ra,12(sp)
   12a5c:	00812423          	sw	s0,8(sp)
   12a60:	01010413          	addi	s0,sp,16
#if defined(RT_USING_HEAP_ISR)
    return rt_hw_interrupt_disable();
#elif defined(RT_USING_MUTEX)
    if (rt_thread_self())
   12a64:	26d000ef          	jal	ra,134d0 <rt_thread_self>
   12a68:	00050793          	mv	a5,a0
   12a6c:	00078c63          	beqz	a5,12a84 <_heap_lock+0x30>
        return rt_mutex_take(&_lock, RT_WAITING_FOREVER);
   12a70:	fff00593          	li	a1,-1
   12a74:	86018513          	addi	a0,gp,-1952 # 223c0 <_lock>
   12a78:	558020ef          	jal	ra,14fd0 <rt_mutex_take>
   12a7c:	00050793          	mv	a5,a0
   12a80:	0080006f          	j	12a88 <_heap_lock+0x34>
    else
        return RT_EOK;
   12a84:	00000793          	li	a5,0
#else
    rt_enter_critical();
    return RT_EOK;
#endif
}
   12a88:	00078513          	mv	a0,a5
   12a8c:	00c12083          	lw	ra,12(sp)
   12a90:	00812403          	lw	s0,8(sp)
   12a94:	01010113          	addi	sp,sp,16
   12a98:	00008067          	ret

00012a9c <_heap_unlock>:

rt_inline void _heap_unlock(rt_base_t level)
{
   12a9c:	fe010113          	addi	sp,sp,-32
   12aa0:	00112e23          	sw	ra,28(sp)
   12aa4:	00812c23          	sw	s0,24(sp)
   12aa8:	02010413          	addi	s0,sp,32
   12aac:	fea42623          	sw	a0,-20(s0)
#if defined(RT_USING_HEAP_ISR)
    rt_hw_interrupt_enable(level);
#elif defined(RT_USING_MUTEX)
    RT_ASSERT(level == RT_EOK);
   12ab0:	fec42783          	lw	a5,-20(s0)
   12ab4:	00078e63          	beqz	a5,12ad0 <_heap_unlock+0x34>
   12ab8:	55100613          	li	a2,1361
   12abc:	0000d597          	auipc	a1,0xd
   12ac0:	67858593          	addi	a1,a1,1656 # 20134 <__FUNCTION__.2750>
   12ac4:	0000d517          	auipc	a0,0xd
   12ac8:	4d450513          	addi	a0,a0,1236 # 1ff98 <__FUNCTION__.2556+0x13c>
   12acc:	578000ef          	jal	ra,13044 <rt_assert_handler>
    if (rt_thread_self())
   12ad0:	201000ef          	jal	ra,134d0 <rt_thread_self>
   12ad4:	00050793          	mv	a5,a0
   12ad8:	00078663          	beqz	a5,12ae4 <_heap_unlock+0x48>
        rt_mutex_release(&_lock);
   12adc:	86018513          	addi	a0,gp,-1952 # 223c0 <_lock>
   12ae0:	04d020ef          	jal	ra,1532c <rt_mutex_release>
#else
    rt_exit_critical();
#endif
}
   12ae4:	00000013          	nop
   12ae8:	01c12083          	lw	ra,28(sp)
   12aec:	01812403          	lw	s0,24(sp)
   12af0:	02010113          	addi	sp,sp,32
   12af4:	00008067          	ret

00012af8 <_smem_info>:

#if defined(RT_USING_SMALL_MEM_AS_HEAP)
static rt_smem_t system_heap;
rt_inline void _smem_info(rt_uint32_t *total,
    rt_uint32_t *used, rt_uint32_t *max_used)
{
   12af8:	fe010113          	addi	sp,sp,-32
   12afc:	00812e23          	sw	s0,28(sp)
   12b00:	02010413          	addi	s0,sp,32
   12b04:	fea42623          	sw	a0,-20(s0)
   12b08:	feb42423          	sw	a1,-24(s0)
   12b0c:	fec42223          	sw	a2,-28(s0)
    if (total)
   12b10:	fec42783          	lw	a5,-20(s0)
   12b14:	00078c63          	beqz	a5,12b2c <_smem_info+0x34>
        *total = system_heap->total;
   12b18:	88418793          	addi	a5,gp,-1916 # 223e4 <system_heap>
   12b1c:	0007a783          	lw	a5,0(a5)
   12b20:	01c7a703          	lw	a4,28(a5)
   12b24:	fec42783          	lw	a5,-20(s0)
   12b28:	00e7a023          	sw	a4,0(a5)
    if (used)
   12b2c:	fe842783          	lw	a5,-24(s0)
   12b30:	00078c63          	beqz	a5,12b48 <_smem_info+0x50>
        *used = system_heap->used;
   12b34:	88418793          	addi	a5,gp,-1916 # 223e4 <system_heap>
   12b38:	0007a783          	lw	a5,0(a5)
   12b3c:	0207a703          	lw	a4,32(a5)
   12b40:	fe842783          	lw	a5,-24(s0)
   12b44:	00e7a023          	sw	a4,0(a5)
    if (max_used)
   12b48:	fe442783          	lw	a5,-28(s0)
   12b4c:	00078c63          	beqz	a5,12b64 <_smem_info+0x6c>
        *max_used = system_heap->max;
   12b50:	88418793          	addi	a5,gp,-1916 # 223e4 <system_heap>
   12b54:	0007a783          	lw	a5,0(a5)
   12b58:	0247a703          	lw	a4,36(a5)
   12b5c:	fe442783          	lw	a5,-28(s0)
   12b60:	00e7a023          	sw	a4,0(a5)
}
   12b64:	00000013          	nop
   12b68:	01c12403          	lw	s0,28(sp)
   12b6c:	02010113          	addi	sp,sp,32
   12b70:	00008067          	ret

00012b74 <rt_system_heap_init>:
 * @param begin_addr the beginning address of system page.
 *
 * @param end_addr the end address of system page.
 */
RT_WEAK void rt_system_heap_init(void *begin_addr, void *end_addr)
{
   12b74:	fd010113          	addi	sp,sp,-48
   12b78:	02112623          	sw	ra,44(sp)
   12b7c:	02812423          	sw	s0,40(sp)
   12b80:	03010413          	addi	s0,sp,48
   12b84:	fca42e23          	sw	a0,-36(s0)
   12b88:	fcb42c23          	sw	a1,-40(s0)
    rt_ubase_t begin_align = RT_ALIGN((rt_ubase_t)begin_addr, RT_ALIGN_SIZE);
   12b8c:	fdc42783          	lw	a5,-36(s0)
   12b90:	00378793          	addi	a5,a5,3
   12b94:	ffc7f793          	andi	a5,a5,-4
   12b98:	fef42623          	sw	a5,-20(s0)
    rt_ubase_t end_align   = RT_ALIGN_DOWN((rt_ubase_t)end_addr, RT_ALIGN_SIZE);
   12b9c:	fd842783          	lw	a5,-40(s0)
   12ba0:	ffc7f793          	andi	a5,a5,-4
   12ba4:	fef42423          	sw	a5,-24(s0)

    RT_ASSERT(end_align > begin_align);
   12ba8:	fe842703          	lw	a4,-24(s0)
   12bac:	fec42783          	lw	a5,-20(s0)
   12bb0:	00e7ee63          	bltu	a5,a4,12bcc <rt_system_heap_init+0x58>
   12bb4:	5a700613          	li	a2,1447
   12bb8:	0000d597          	auipc	a1,0xd
   12bbc:	56858593          	addi	a1,a1,1384 # 20120 <__FUNCTION__.2763>
   12bc0:	0000d517          	auipc	a0,0xd
   12bc4:	3e850513          	addi	a0,a0,1000 # 1ffa8 <__FUNCTION__.2556+0x14c>
   12bc8:	47c000ef          	jal	ra,13044 <rt_assert_handler>

    /* Initialize system memory heap */
    _MEM_INIT("heap", begin_addr, end_align - begin_align);
   12bcc:	fe842703          	lw	a4,-24(s0)
   12bd0:	fec42783          	lw	a5,-20(s0)
   12bd4:	40f707b3          	sub	a5,a4,a5
   12bd8:	00078613          	mv	a2,a5
   12bdc:	fdc42583          	lw	a1,-36(s0)
   12be0:	0000d517          	auipc	a0,0xd
   12be4:	3b050513          	addi	a0,a0,944 # 1ff90 <__FUNCTION__.2556+0x134>
   12be8:	328060ef          	jal	ra,18f10 <rt_smem_init>
   12bec:	00050713          	mv	a4,a0
   12bf0:	88418793          	addi	a5,gp,-1916 # 223e4 <system_heap>
   12bf4:	00e7a023          	sw	a4,0(a5)
    /* Initialize multi thread contention lock */
    _heap_lock_init();
   12bf8:	e25ff0ef          	jal	ra,12a1c <_heap_lock_init>
}
   12bfc:	00000013          	nop
   12c00:	02c12083          	lw	ra,44(sp)
   12c04:	02812403          	lw	s0,40(sp)
   12c08:	03010113          	addi	sp,sp,48
   12c0c:	00008067          	ret

00012c10 <rt_malloc>:
 * @param size is the minimum size of the requested block in bytes.
 *
 * @return the pointer to allocated memory or NULL if no free memory was found.
 */
RT_WEAK void *rt_malloc(rt_size_t size)
{
   12c10:	fd010113          	addi	sp,sp,-48
   12c14:	02112623          	sw	ra,44(sp)
   12c18:	02812423          	sw	s0,40(sp)
   12c1c:	03010413          	addi	s0,sp,48
   12c20:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;
    void *ptr;

    /* Enter critical zone */
    level = _heap_lock();
   12c24:	e31ff0ef          	jal	ra,12a54 <_heap_lock>
   12c28:	fea42623          	sw	a0,-20(s0)
    /* allocate memory block from system heap */
    ptr = _MEM_MALLOC(size);
   12c2c:	88418793          	addi	a5,gp,-1916 # 223e4 <system_heap>
   12c30:	0007a783          	lw	a5,0(a5)
   12c34:	fdc42583          	lw	a1,-36(s0)
   12c38:	00078513          	mv	a0,a5
   12c3c:	568060ef          	jal	ra,191a4 <rt_smem_alloc>
   12c40:	fea42423          	sw	a0,-24(s0)
    /* Exit critical zone */
    _heap_unlock(level);
   12c44:	fec42503          	lw	a0,-20(s0)
   12c48:	e55ff0ef          	jal	ra,12a9c <_heap_unlock>
    /* call 'rt_malloc' hook */
    RT_OBJECT_HOOK_CALL(rt_malloc_hook, (ptr, size));
   12c4c:	85818793          	addi	a5,gp,-1960 # 223b8 <rt_malloc_hook>
   12c50:	0007a783          	lw	a5,0(a5)
   12c54:	00078c63          	beqz	a5,12c6c <rt_malloc+0x5c>
   12c58:	85818793          	addi	a5,gp,-1960 # 223b8 <rt_malloc_hook>
   12c5c:	0007a783          	lw	a5,0(a5)
   12c60:	fdc42583          	lw	a1,-36(s0)
   12c64:	fe842503          	lw	a0,-24(s0)
   12c68:	000780e7          	jalr	a5
    return ptr;
   12c6c:	fe842783          	lw	a5,-24(s0)
}
   12c70:	00078513          	mv	a0,a5
   12c74:	02c12083          	lw	ra,44(sp)
   12c78:	02812403          	lw	s0,40(sp)
   12c7c:	03010113          	addi	sp,sp,48
   12c80:	00008067          	ret

00012c84 <rt_realloc>:
 * @param newsize is the required new size.
 *
 * @return the changed memory block address.
 */
RT_WEAK void *rt_realloc(void *rmem, rt_size_t newsize)
{
   12c84:	fd010113          	addi	sp,sp,-48
   12c88:	02112623          	sw	ra,44(sp)
   12c8c:	02812423          	sw	s0,40(sp)
   12c90:	03010413          	addi	s0,sp,48
   12c94:	fca42e23          	sw	a0,-36(s0)
   12c98:	fcb42c23          	sw	a1,-40(s0)
    rt_base_t level;
    void *nptr;

    /* Enter critical zone */
    level = _heap_lock();
   12c9c:	db9ff0ef          	jal	ra,12a54 <_heap_lock>
   12ca0:	fea42623          	sw	a0,-20(s0)
    /* Change the size of previously allocated memory block */
    nptr = _MEM_REALLOC(rmem, newsize);
   12ca4:	88418793          	addi	a5,gp,-1916 # 223e4 <system_heap>
   12ca8:	0007a783          	lw	a5,0(a5)
   12cac:	fd842603          	lw	a2,-40(s0)
   12cb0:	fdc42583          	lw	a1,-36(s0)
   12cb4:	00078513          	mv	a0,a5
   12cb8:	101060ef          	jal	ra,195b8 <rt_smem_realloc>
   12cbc:	fea42423          	sw	a0,-24(s0)
    /* Exit critical zone */
    _heap_unlock(level);
   12cc0:	fec42503          	lw	a0,-20(s0)
   12cc4:	dd9ff0ef          	jal	ra,12a9c <_heap_unlock>
    return nptr;
   12cc8:	fe842783          	lw	a5,-24(s0)
}
   12ccc:	00078513          	mv	a0,a5
   12cd0:	02c12083          	lw	ra,44(sp)
   12cd4:	02812403          	lw	s0,40(sp)
   12cd8:	03010113          	addi	sp,sp,48
   12cdc:	00008067          	ret

00012ce0 <rt_calloc>:
 * @param  size is the size of one object to allocate.
 *
 * @return pointer to allocated memory / NULL pointer if there is an error.
 */
RT_WEAK void *rt_calloc(rt_size_t count, rt_size_t size)
{
   12ce0:	fd010113          	addi	sp,sp,-48
   12ce4:	02112623          	sw	ra,44(sp)
   12ce8:	02812423          	sw	s0,40(sp)
   12cec:	03010413          	addi	s0,sp,48
   12cf0:	fca42e23          	sw	a0,-36(s0)
   12cf4:	fcb42c23          	sw	a1,-40(s0)
    void *p;

    /* allocate 'count' objects of size 'size' */
    p = rt_malloc(count * size);
   12cf8:	fdc42703          	lw	a4,-36(s0)
   12cfc:	fd842783          	lw	a5,-40(s0)
   12d00:	02f707b3          	mul	a5,a4,a5
   12d04:	00078513          	mv	a0,a5
   12d08:	f09ff0ef          	jal	ra,12c10 <rt_malloc>
   12d0c:	fea42623          	sw	a0,-20(s0)
    /* zero the memory */
    if (p)
   12d10:	fec42783          	lw	a5,-20(s0)
   12d14:	02078063          	beqz	a5,12d34 <rt_calloc+0x54>
    {
        rt_memset(p, 0, count * size);
   12d18:	fdc42703          	lw	a4,-36(s0)
   12d1c:	fd842783          	lw	a5,-40(s0)
   12d20:	02f707b3          	mul	a5,a4,a5
   12d24:	00078613          	mv	a2,a5
   12d28:	00000593          	li	a1,0
   12d2c:	fec42503          	lw	a0,-20(s0)
   12d30:	c8cfe0ef          	jal	ra,111bc <rt_memset>
    }
    return p;
   12d34:	fec42783          	lw	a5,-20(s0)
}
   12d38:	00078513          	mv	a0,a5
   12d3c:	02c12083          	lw	ra,44(sp)
   12d40:	02812403          	lw	s0,40(sp)
   12d44:	03010113          	addi	sp,sp,48
   12d48:	00008067          	ret

00012d4c <rt_free>:
 *        rt_malloc. The released memory block is taken back to system heap.
 *
 * @param rmem the address of memory which will be released.
 */
RT_WEAK void rt_free(void *rmem)
{
   12d4c:	fd010113          	addi	sp,sp,-48
   12d50:	02112623          	sw	ra,44(sp)
   12d54:	02812423          	sw	s0,40(sp)
   12d58:	03010413          	addi	s0,sp,48
   12d5c:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;

    /* call 'rt_free' hook */
    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));
   12d60:	85c18793          	addi	a5,gp,-1956 # 223bc <rt_free_hook>
   12d64:	0007a783          	lw	a5,0(a5)
   12d68:	00078a63          	beqz	a5,12d7c <rt_free+0x30>
   12d6c:	85c18793          	addi	a5,gp,-1956 # 223bc <rt_free_hook>
   12d70:	0007a783          	lw	a5,0(a5)
   12d74:	fdc42503          	lw	a0,-36(s0)
   12d78:	000780e7          	jalr	a5
    /* Enter critical zone */
    level = _heap_lock();
   12d7c:	cd9ff0ef          	jal	ra,12a54 <_heap_lock>
   12d80:	fea42623          	sw	a0,-20(s0)
    _MEM_FREE(rmem);
   12d84:	fdc42503          	lw	a0,-36(s0)
   12d88:	345060ef          	jal	ra,198cc <rt_smem_free>
    /* Exit critical zone */
    _heap_unlock(level);
   12d8c:	fec42503          	lw	a0,-20(s0)
   12d90:	d0dff0ef          	jal	ra,12a9c <_heap_unlock>
}
   12d94:	00000013          	nop
   12d98:	02c12083          	lw	ra,44(sp)
   12d9c:	02812403          	lw	s0,40(sp)
   12da0:	03010113          	addi	sp,sp,48
   12da4:	00008067          	ret

00012da8 <rt_memory_info>:
* @param max_used is a pointer to get the maximum memory used.
*/
RT_WEAK void rt_memory_info(rt_uint32_t *total,
                            rt_uint32_t *used,
                            rt_uint32_t *max_used)
{
   12da8:	fd010113          	addi	sp,sp,-48
   12dac:	02112623          	sw	ra,44(sp)
   12db0:	02812423          	sw	s0,40(sp)
   12db4:	03010413          	addi	s0,sp,48
   12db8:	fca42e23          	sw	a0,-36(s0)
   12dbc:	fcb42c23          	sw	a1,-40(s0)
   12dc0:	fcc42a23          	sw	a2,-44(s0)
    rt_base_t level;

    /* Enter critical zone */
    level = _heap_lock();
   12dc4:	c91ff0ef          	jal	ra,12a54 <_heap_lock>
   12dc8:	fea42623          	sw	a0,-20(s0)
    _MEM_INFO(total, used, max_used);
   12dcc:	fd442603          	lw	a2,-44(s0)
   12dd0:	fd842583          	lw	a1,-40(s0)
   12dd4:	fdc42503          	lw	a0,-36(s0)
   12dd8:	d21ff0ef          	jal	ra,12af8 <_smem_info>
    /* Exit critical zone */
    _heap_unlock(level);
   12ddc:	fec42503          	lw	a0,-20(s0)
   12de0:	cbdff0ef          	jal	ra,12a9c <_heap_unlock>
}
   12de4:	00000013          	nop
   12de8:	02c12083          	lw	ra,44(sp)
   12dec:	02812403          	lw	s0,40(sp)
   12df0:	03010113          	addi	sp,sp,48
   12df4:	00008067          	ret

00012df8 <rt_malloc_align>:
 *
 * @return The memory block address was returned successfully, otherwise it was
 *         returned empty RT_NULL.
 */
RT_WEAK void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
   12df8:	fd010113          	addi	sp,sp,-48
   12dfc:	02112623          	sw	ra,44(sp)
   12e00:	02812423          	sw	s0,40(sp)
   12e04:	03010413          	addi	s0,sp,48
   12e08:	fca42e23          	sw	a0,-36(s0)
   12e0c:	fcb42c23          	sw	a1,-40(s0)
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
   12e10:	00400793          	li	a5,4
   12e14:	fef42223          	sw	a5,-28(s0)
    uintptr_size -= 1;
   12e18:	fe442783          	lw	a5,-28(s0)
   12e1c:	fff78793          	addi	a5,a5,-1
   12e20:	fef42223          	sw	a5,-28(s0)

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
   12e24:	fe442703          	lw	a4,-28(s0)
   12e28:	fd842783          	lw	a5,-40(s0)
   12e2c:	00f707b3          	add	a5,a4,a5
   12e30:	fe442703          	lw	a4,-28(s0)
   12e34:	fff74713          	not	a4,a4
   12e38:	00e7f7b3          	and	a5,a5,a4
   12e3c:	fcf42c23          	sw	a5,-40(s0)

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
   12e40:	fe442703          	lw	a4,-28(s0)
   12e44:	fdc42783          	lw	a5,-36(s0)
   12e48:	00f707b3          	add	a5,a4,a5
   12e4c:	fe442703          	lw	a4,-28(s0)
   12e50:	fff74713          	not	a4,a4
   12e54:	00e7f7b3          	and	a5,a5,a4
   12e58:	fd842703          	lw	a4,-40(s0)
   12e5c:	00f707b3          	add	a5,a4,a5
   12e60:	fef42023          	sw	a5,-32(s0)
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
   12e64:	fe042503          	lw	a0,-32(s0)
   12e68:	da9ff0ef          	jal	ra,12c10 <rt_malloc>
   12e6c:	fea42623          	sw	a0,-20(s0)
    if (ptr != RT_NULL)
   12e70:	fec42783          	lw	a5,-20(s0)
   12e74:	06078463          	beqz	a5,12edc <rt_malloc_align+0xe4>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
   12e78:	fd842783          	lw	a5,-40(s0)
   12e7c:	fff78713          	addi	a4,a5,-1
   12e80:	fec42783          	lw	a5,-20(s0)
   12e84:	00f777b3          	and	a5,a4,a5
   12e88:	00079c63          	bnez	a5,12ea0 <rt_malloc_align+0xa8>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
   12e8c:	fec42703          	lw	a4,-20(s0)
   12e90:	fd842783          	lw	a5,-40(s0)
   12e94:	00f707b3          	add	a5,a4,a5
   12e98:	fef42423          	sw	a5,-24(s0)
   12e9c:	0240006f          	j	12ec0 <rt_malloc_align+0xc8>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
   12ea0:	fec42703          	lw	a4,-20(s0)
   12ea4:	fd842783          	lw	a5,-40(s0)
   12ea8:	00f707b3          	add	a5,a4,a5
   12eac:	fff78713          	addi	a4,a5,-1
   12eb0:	fd842783          	lw	a5,-40(s0)
   12eb4:	40f007b3          	neg	a5,a5
   12eb8:	00f777b3          	and	a5,a4,a5
   12ebc:	fef42423          	sw	a5,-24(s0)
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
   12ec0:	fe842783          	lw	a5,-24(s0)
   12ec4:	ffc78793          	addi	a5,a5,-4
   12ec8:	00078713          	mv	a4,a5
   12ecc:	fec42783          	lw	a5,-20(s0)
   12ed0:	00f72023          	sw	a5,0(a4)

        ptr = align_ptr;
   12ed4:	fe842783          	lw	a5,-24(s0)
   12ed8:	fef42623          	sw	a5,-20(s0)
    }

    return ptr;
   12edc:	fec42783          	lw	a5,-20(s0)
}
   12ee0:	00078513          	mv	a0,a5
   12ee4:	02c12083          	lw	ra,44(sp)
   12ee8:	02812403          	lw	s0,40(sp)
   12eec:	03010113          	addi	sp,sp,48
   12ef0:	00008067          	ret

00012ef4 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr is the memory block pointer.
 */
RT_WEAK void rt_free_align(void *ptr)
{
   12ef4:	fd010113          	addi	sp,sp,-48
   12ef8:	02112623          	sw	ra,44(sp)
   12efc:	02812423          	sw	s0,40(sp)
   12f00:	03010413          	addi	s0,sp,48
   12f04:	fca42e23          	sw	a0,-36(s0)
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
   12f08:	fdc42783          	lw	a5,-36(s0)
   12f0c:	ffc78793          	addi	a5,a5,-4
   12f10:	0007a783          	lw	a5,0(a5)
   12f14:	fef42623          	sw	a5,-20(s0)
    rt_free(real_ptr);
   12f18:	fec42503          	lw	a0,-20(s0)
   12f1c:	e31ff0ef          	jal	ra,12d4c <rt_free>
}
   12f20:	00000013          	nop
   12f24:	02c12083          	lw	ra,44(sp)
   12f28:	02812403          	lw	s0,40(sp)
   12f2c:	03010113          	addi	sp,sp,48
   12f30:	00008067          	ret

00012f34 <__rt_ffs>:
 *
 * @return Return the index of the first bit set. If value is 0, then this function
 *         shall return 0.
 */
int __rt_ffs(int value)
{
   12f34:	fe010113          	addi	sp,sp,-32
   12f38:	00812e23          	sw	s0,28(sp)
   12f3c:	02010413          	addi	s0,sp,32
   12f40:	fea42623          	sw	a0,-20(s0)
    if (value == 0) return 0;
   12f44:	fec42783          	lw	a5,-20(s0)
   12f48:	00079663          	bnez	a5,12f54 <__rt_ffs+0x20>
   12f4c:	00000793          	li	a5,0
   12f50:	0b80006f          	j	13008 <__rt_ffs+0xd4>

    if (value & 0xff)
   12f54:	fec42783          	lw	a5,-20(s0)
   12f58:	0ff7f793          	andi	a5,a5,255
   12f5c:	02078263          	beqz	a5,12f80 <__rt_ffs+0x4c>
        return __lowest_bit_bitmap[value & 0xff] + 1;
   12f60:	fec42783          	lw	a5,-20(s0)
   12f64:	0ff7f793          	andi	a5,a5,255
   12f68:	0000d717          	auipc	a4,0xd
   12f6c:	05870713          	addi	a4,a4,88 # 1ffc0 <__lowest_bit_bitmap>
   12f70:	00f707b3          	add	a5,a4,a5
   12f74:	0007c783          	lbu	a5,0(a5)
   12f78:	00178793          	addi	a5,a5,1
   12f7c:	08c0006f          	j	13008 <__rt_ffs+0xd4>

    if (value & 0xff00)
   12f80:	fec42703          	lw	a4,-20(s0)
   12f84:	000107b7          	lui	a5,0x10
   12f88:	f0078793          	addi	a5,a5,-256 # ff00 <__load-0x100>
   12f8c:	00f777b3          	and	a5,a4,a5
   12f90:	02078463          	beqz	a5,12fb8 <__rt_ffs+0x84>
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
   12f94:	fec42783          	lw	a5,-20(s0)
   12f98:	4087d793          	srai	a5,a5,0x8
   12f9c:	0ff7f793          	andi	a5,a5,255
   12fa0:	0000d717          	auipc	a4,0xd
   12fa4:	02070713          	addi	a4,a4,32 # 1ffc0 <__lowest_bit_bitmap>
   12fa8:	00f707b3          	add	a5,a4,a5
   12fac:	0007c783          	lbu	a5,0(a5)
   12fb0:	00978793          	addi	a5,a5,9
   12fb4:	0540006f          	j	13008 <__rt_ffs+0xd4>

    if (value & 0xff0000)
   12fb8:	fec42703          	lw	a4,-20(s0)
   12fbc:	00ff07b7          	lui	a5,0xff0
   12fc0:	00f777b3          	and	a5,a4,a5
   12fc4:	02078463          	beqz	a5,12fec <__rt_ffs+0xb8>
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
   12fc8:	fec42783          	lw	a5,-20(s0)
   12fcc:	4107d793          	srai	a5,a5,0x10
   12fd0:	0ff7f793          	andi	a5,a5,255
   12fd4:	0000d717          	auipc	a4,0xd
   12fd8:	fec70713          	addi	a4,a4,-20 # 1ffc0 <__lowest_bit_bitmap>
   12fdc:	00f707b3          	add	a5,a4,a5
   12fe0:	0007c783          	lbu	a5,0(a5) # ff0000 <__global_pointer$+0xfcd4a0>
   12fe4:	01178793          	addi	a5,a5,17
   12fe8:	0200006f          	j	13008 <__rt_ffs+0xd4>

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
   12fec:	fec42783          	lw	a5,-20(s0)
   12ff0:	0187d793          	srli	a5,a5,0x18
   12ff4:	0000d717          	auipc	a4,0xd
   12ff8:	fcc70713          	addi	a4,a4,-52 # 1ffc0 <__lowest_bit_bitmap>
   12ffc:	00f707b3          	add	a5,a4,a5
   13000:	0007c783          	lbu	a5,0(a5)
   13004:	01978793          	addi	a5,a5,25
}
   13008:	00078513          	mv	a0,a5
   1300c:	01c12403          	lw	s0,28(sp)
   13010:	02010113          	addi	sp,sp,32
   13014:	00008067          	ret

00013018 <rt_assert_set_hook>:
 * This function will set a hook function to RT_ASSERT(EX). It will run when the expression is false.
 *
 * @param hook is the hook function.
 */
void rt_assert_set_hook(void (*hook)(const char *ex, const char *func, rt_size_t line))
{
   13018:	fe010113          	addi	sp,sp,-32
   1301c:	00812e23          	sw	s0,28(sp)
   13020:	02010413          	addi	s0,sp,32
   13024:	fea42623          	sw	a0,-20(s0)
    rt_assert_hook = hook;
   13028:	dec18793          	addi	a5,gp,-532 # 2294c <rt_assert_hook>
   1302c:	fec42703          	lw	a4,-20(s0)
   13030:	00e7a023          	sw	a4,0(a5)
}
   13034:	00000013          	nop
   13038:	01c12403          	lw	s0,28(sp)
   1303c:	02010113          	addi	sp,sp,32
   13040:	00008067          	ret

00013044 <rt_assert_handler>:
 * @param func is the function name when assertion.
 *
 * @param line is the file line number when assertion.
 */
void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
   13044:	fd010113          	addi	sp,sp,-48
   13048:	02112623          	sw	ra,44(sp)
   1304c:	02812423          	sw	s0,40(sp)
   13050:	03010413          	addi	s0,sp,48
   13054:	fca42e23          	sw	a0,-36(s0)
   13058:	fcb42c23          	sw	a1,-40(s0)
   1305c:	fcc42a23          	sw	a2,-44(s0)
    volatile char dummy = 0;
   13060:	fe0407a3          	sb	zero,-17(s0)

    if (rt_assert_hook == RT_NULL)
   13064:	dec18793          	addi	a5,gp,-532 # 2294c <rt_assert_hook>
   13068:	0007a783          	lw	a5,0(a5)
   1306c:	02079863          	bnez	a5,1309c <rt_assert_handler+0x58>
            dlmodule_exit(-1);
        }
        else
#endif /*RT_USING_MODULE*/
        {
            rt_kprintf("(%s) assertion failed at function:%s, line number:%d \n", ex_string, func, line);
   13070:	fd442683          	lw	a3,-44(s0)
   13074:	fd842603          	lw	a2,-40(s0)
   13078:	fdc42583          	lw	a1,-36(s0)
   1307c:	0000d517          	auipc	a0,0xd
   13080:	04450513          	addi	a0,a0,68 # 200c0 <__lowest_bit_bitmap+0x100>
   13084:	87dff0ef          	jal	ra,12900 <rt_kprintf>
            while (dummy == 0);
   13088:	00000013          	nop
   1308c:	fef44783          	lbu	a5,-17(s0)
   13090:	0ff7f793          	andi	a5,a5,255
   13094:	fe078ce3          	beqz	a5,1308c <rt_assert_handler+0x48>
    }
    else
    {
        rt_assert_hook(ex_string, func, line);
    }
}
   13098:	01c0006f          	j	130b4 <rt_assert_handler+0x70>
        rt_assert_hook(ex_string, func, line);
   1309c:	dec18793          	addi	a5,gp,-532 # 2294c <rt_assert_hook>
   130a0:	0007a783          	lw	a5,0(a5)
   130a4:	fd442603          	lw	a2,-44(s0)
   130a8:	fd842583          	lw	a1,-40(s0)
   130ac:	fdc42503          	lw	a0,-36(s0)
   130b0:	000780e7          	jalr	a5
}
   130b4:	00000013          	nop
   130b8:	02c12083          	lw	ra,44(sp)
   130bc:	02812403          	lw	s0,40(sp)
   130c0:	03010113          	addi	sp,sp,48
   130c4:	00008067          	ret

000130c8 <rt_list_init>:
{
   130c8:	fe010113          	addi	sp,sp,-32
   130cc:	00812e23          	sw	s0,28(sp)
   130d0:	02010413          	addi	s0,sp,32
   130d4:	fea42623          	sw	a0,-20(s0)
    l->next = l->prev = l;
   130d8:	fec42783          	lw	a5,-20(s0)
   130dc:	fec42703          	lw	a4,-20(s0)
   130e0:	00e7a223          	sw	a4,4(a5)
   130e4:	fec42783          	lw	a5,-20(s0)
   130e8:	0047a703          	lw	a4,4(a5)
   130ec:	fec42783          	lw	a5,-20(s0)
   130f0:	00e7a023          	sw	a4,0(a5)
}
   130f4:	00000013          	nop
   130f8:	01c12403          	lw	s0,28(sp)
   130fc:	02010113          	addi	sp,sp,32
   13100:	00008067          	ret

00013104 <rt_list_remove>:
{
   13104:	fe010113          	addi	sp,sp,-32
   13108:	00812e23          	sw	s0,28(sp)
   1310c:	02010413          	addi	s0,sp,32
   13110:	fea42623          	sw	a0,-20(s0)
    n->next->prev = n->prev;
   13114:	fec42783          	lw	a5,-20(s0)
   13118:	0007a783          	lw	a5,0(a5)
   1311c:	fec42703          	lw	a4,-20(s0)
   13120:	00472703          	lw	a4,4(a4)
   13124:	00e7a223          	sw	a4,4(a5)
    n->prev->next = n->next;
   13128:	fec42783          	lw	a5,-20(s0)
   1312c:	0047a783          	lw	a5,4(a5)
   13130:	fec42703          	lw	a4,-20(s0)
   13134:	00072703          	lw	a4,0(a4)
   13138:	00e7a023          	sw	a4,0(a5)
    n->next = n->prev = n;
   1313c:	fec42783          	lw	a5,-20(s0)
   13140:	fec42703          	lw	a4,-20(s0)
   13144:	00e7a223          	sw	a4,4(a5)
   13148:	fec42783          	lw	a5,-20(s0)
   1314c:	0047a703          	lw	a4,4(a5)
   13150:	fec42783          	lw	a5,-20(s0)
   13154:	00e7a023          	sw	a4,0(a5)
}
   13158:	00000013          	nop
   1315c:	01c12403          	lw	s0,28(sp)
   13160:	02010113          	addi	sp,sp,32
   13164:	00008067          	ret

00013168 <rt_thread_suspend_sethook>:
 * @note    The hook function must be simple and never be blocked or suspend.
 *
 * @param   hook is the specified hook function.
 */
void rt_thread_suspend_sethook(void (*hook)(rt_thread_t thread))
{
   13168:	fe010113          	addi	sp,sp,-32
   1316c:	00812e23          	sw	s0,28(sp)
   13170:	02010413          	addi	s0,sp,32
   13174:	fea42623          	sw	a0,-20(s0)
    rt_thread_suspend_hook = hook;
   13178:	90818793          	addi	a5,gp,-1784 # 22468 <rt_thread_suspend_hook>
   1317c:	fec42703          	lw	a4,-20(s0)
   13180:	00e7a023          	sw	a4,0(a5)
}
   13184:	00000013          	nop
   13188:	01c12403          	lw	s0,28(sp)
   1318c:	02010113          	addi	sp,sp,32
   13190:	00008067          	ret

00013194 <rt_thread_resume_sethook>:
 * @note    The hook function must be simple and never be blocked or suspend.
 *
 * @param   hook is the specified hook function.
 */
void rt_thread_resume_sethook(void (*hook)(rt_thread_t thread))
{
   13194:	fe010113          	addi	sp,sp,-32
   13198:	00812e23          	sw	s0,28(sp)
   1319c:	02010413          	addi	s0,sp,32
   131a0:	fea42623          	sw	a0,-20(s0)
    rt_thread_resume_hook = hook;
   131a4:	90c18793          	addi	a5,gp,-1780 # 2246c <rt_thread_resume_hook>
   131a8:	fec42703          	lw	a4,-20(s0)
   131ac:	00e7a023          	sw	a4,0(a5)
}
   131b0:	00000013          	nop
   131b4:	01c12403          	lw	s0,28(sp)
   131b8:	02010113          	addi	sp,sp,32
   131bc:	00008067          	ret

000131c0 <rt_thread_inited_sethook>:
 * @brief   This function sets a hook function when a thread is initialized.
 *
 * @param   hook is the specified hook function.
 */
void rt_thread_inited_sethook(void (*hook)(rt_thread_t thread))
{
   131c0:	fe010113          	addi	sp,sp,-32
   131c4:	00812e23          	sw	s0,28(sp)
   131c8:	02010413          	addi	s0,sp,32
   131cc:	fea42623          	sw	a0,-20(s0)
    rt_thread_inited_hook = hook;
   131d0:	91018793          	addi	a5,gp,-1776 # 22470 <rt_thread_inited_hook>
   131d4:	fec42703          	lw	a4,-20(s0)
   131d8:	00e7a023          	sw	a4,0(a5)
}
   131dc:	00000013          	nop
   131e0:	01c12403          	lw	s0,28(sp)
   131e4:	02010113          	addi	sp,sp,32
   131e8:	00008067          	ret

000131ec <_thread_exit>:

#endif /* RT_USING_HOOK */

static void _thread_exit(void)
{
   131ec:	fe010113          	addi	sp,sp,-32
   131f0:	00112e23          	sw	ra,28(sp)
   131f4:	00812c23          	sw	s0,24(sp)
   131f8:	00912a23          	sw	s1,20(sp)
   131fc:	02010413          	addi	s0,sp,32
    struct rt_thread *thread;
    register rt_base_t level;

    /* get current thread */
    thread = rt_thread_self();
   13200:	2d0000ef          	jal	ra,134d0 <rt_thread_self>
   13204:	fea42623          	sw	a0,-20(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   13208:	441080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1320c:	00050493          	mv	s1,a0

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
   13210:	fec42503          	lw	a0,-20(s0)
   13214:	00d050ef          	jal	ra,18a20 <rt_schedule_remove_thread>

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
   13218:	fec42783          	lw	a5,-20(s0)
   1321c:	04c78793          	addi	a5,a5,76
   13220:	00078513          	mv	a0,a5
   13224:	0c9070ef          	jal	ra,1aaec <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
   13228:	fec42783          	lw	a5,-20(s0)
   1322c:	00400713          	li	a4,4
   13230:	02e78a23          	sb	a4,52(a5)

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
   13234:	fec42503          	lw	a0,-20(s0)
   13238:	7f4080ef          	jal	ra,1ba2c <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1323c:	00048513          	mv	a0,s1
   13240:	411080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* switch to next task */
    rt_schedule();
   13244:	444050ef          	jal	ra,18688 <rt_schedule>
}
   13248:	00000013          	nop
   1324c:	01c12083          	lw	ra,28(sp)
   13250:	01812403          	lw	s0,24(sp)
   13254:	01412483          	lw	s1,20(sp)
   13258:	02010113          	addi	sp,sp,32
   1325c:	00008067          	ret

00013260 <_thread_init>:
                             void             *parameter,
                             void             *stack_start,
                             rt_uint32_t       stack_size,
                             rt_uint8_t        priority,
                             rt_uint32_t       tick)
{
   13260:	fd010113          	addi	sp,sp,-48
   13264:	02112623          	sw	ra,44(sp)
   13268:	02812423          	sw	s0,40(sp)
   1326c:	03010413          	addi	s0,sp,48
   13270:	fea42623          	sw	a0,-20(s0)
   13274:	feb42423          	sw	a1,-24(s0)
   13278:	fec42223          	sw	a2,-28(s0)
   1327c:	fed42023          	sw	a3,-32(s0)
   13280:	fce42e23          	sw	a4,-36(s0)
   13284:	fcf42c23          	sw	a5,-40(s0)
   13288:	00080793          	mv	a5,a6
   1328c:	fd142823          	sw	a7,-48(s0)
   13290:	fcf40ba3          	sb	a5,-41(s0)
    /* init thread list */
    rt_list_init(&(thread->tlist));
   13294:	fec42783          	lw	a5,-20(s0)
   13298:	01478793          	addi	a5,a5,20
   1329c:	00078513          	mv	a0,a5
   132a0:	e29ff0ef          	jal	ra,130c8 <rt_list_init>

    thread->entry = (void *)entry;
   132a4:	fec42783          	lw	a5,-20(s0)
   132a8:	fe442703          	lw	a4,-28(s0)
   132ac:	02e7a023          	sw	a4,32(a5)
    thread->parameter = parameter;
   132b0:	fec42783          	lw	a5,-20(s0)
   132b4:	fe042703          	lw	a4,-32(s0)
   132b8:	02e7a223          	sw	a4,36(a5)

    /* stack init */
    thread->stack_addr = stack_start;
   132bc:	fec42783          	lw	a5,-20(s0)
   132c0:	fdc42703          	lw	a4,-36(s0)
   132c4:	02e7a423          	sw	a4,40(a5)
    thread->stack_size = stack_size;
   132c8:	fec42783          	lw	a5,-20(s0)
   132cc:	fd842703          	lw	a4,-40(s0)
   132d0:	02e7a623          	sw	a4,44(a5)

    /* init thread stack */
    rt_memset(thread->stack_addr, '#', thread->stack_size);
   132d4:	fec42783          	lw	a5,-20(s0)
   132d8:	0287a703          	lw	a4,40(a5)
   132dc:	fec42783          	lw	a5,-20(s0)
   132e0:	02c7a783          	lw	a5,44(a5)
   132e4:	00078613          	mv	a2,a5
   132e8:	02300593          	li	a1,35
   132ec:	00070513          	mv	a0,a4
   132f0:	ecdfd0ef          	jal	ra,111bc <rt_memset>
#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr),
                                          (void *)_thread_exit);
#else
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
   132f4:	fec42783          	lw	a5,-20(s0)
   132f8:	0207a503          	lw	a0,32(a5)
   132fc:	fec42783          	lw	a5,-20(s0)
   13300:	0247a583          	lw	a1,36(a5)
                                          (rt_uint8_t *)((char *)thread->stack_addr + thread->stack_size - sizeof(rt_ubase_t)),
   13304:	fec42783          	lw	a5,-20(s0)
   13308:	0287a703          	lw	a4,40(a5)
   1330c:	fec42783          	lw	a5,-20(s0)
   13310:	02c7a783          	lw	a5,44(a5)
   13314:	ffc78793          	addi	a5,a5,-4
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
   13318:	00f707b3          	add	a5,a4,a5
   1331c:	00000697          	auipc	a3,0x0
   13320:	ed068693          	addi	a3,a3,-304 # 131ec <_thread_exit>
   13324:	00078613          	mv	a2,a5
   13328:	19d080ef          	jal	ra,1bcc4 <rt_hw_stack_init>
   1332c:	00050713          	mv	a4,a0
   13330:	fec42783          	lw	a5,-20(s0)
   13334:	00e7ae23          	sw	a4,28(a5)
                                          (void *)_thread_exit);
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */

    /* priority init */
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
   13338:	fd744703          	lbu	a4,-41(s0)
   1333c:	01f00793          	li	a5,31
   13340:	00e7fe63          	bgeu	a5,a4,1335c <_thread_init+0xfc>
   13344:	08c00613          	li	a2,140
   13348:	0000d597          	auipc	a1,0xd
   1334c:	f9c58593          	addi	a1,a1,-100 # 202e4 <__FUNCTION__.2476>
   13350:	0000d517          	auipc	a0,0xd
   13354:	df450513          	addi	a0,a0,-524 # 20144 <__FUNCTION__.2750+0x10>
   13358:	cedff0ef          	jal	ra,13044 <rt_assert_handler>
    thread->init_priority    = priority;
   1335c:	fec42783          	lw	a5,-20(s0)
   13360:	fd744703          	lbu	a4,-41(s0)
   13364:	02e78b23          	sb	a4,54(a5)
    thread->current_priority = priority;
   13368:	fec42783          	lw	a5,-20(s0)
   1336c:	fd744703          	lbu	a4,-41(s0)
   13370:	02e78aa3          	sb	a4,53(a5)

    thread->number_mask = 0;
   13374:	fec42783          	lw	a5,-20(s0)
   13378:	0207ac23          	sw	zero,56(a5)
    thread->number = 0;
    thread->high_mask = 0;
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    /* tick init */
    thread->init_tick      = tick;
   1337c:	fec42783          	lw	a5,-20(s0)
   13380:	fd042703          	lw	a4,-48(s0)
   13384:	04e7a223          	sw	a4,68(a5)
    thread->remaining_tick = tick;
   13388:	fec42783          	lw	a5,-20(s0)
   1338c:	fd042703          	lw	a4,-48(s0)
   13390:	04e7a423          	sw	a4,72(a5)

    /* error and flags */
    thread->error = RT_EOK;
   13394:	fec42783          	lw	a5,-20(s0)
   13398:	0207a823          	sw	zero,48(a5)
    thread->stat  = RT_THREAD_INIT;
   1339c:	fec42783          	lw	a5,-20(s0)
   133a0:	02078a23          	sb	zero,52(a5)
    thread->cpus_lock_nest = 0;
    thread->critical_lock_nest = 0;
#endif /* RT_USING_SMP */

    /* initialize cleanup function and user data */
    thread->cleanup   = 0;
   133a4:	fec42783          	lw	a5,-20(s0)
   133a8:	0607ac23          	sw	zero,120(a5)
    thread->user_data = 0;
   133ac:	fec42783          	lw	a5,-20(s0)
   133b0:	0607ae23          	sw	zero,124(a5)

    /* initialize thread timer */
    rt_timer_init(&(thread->thread_timer),
   133b4:	fec42783          	lw	a5,-20(s0)
   133b8:	04c78513          	addi	a0,a5,76
                  thread->name,
   133bc:	fec42583          	lw	a1,-20(s0)
    rt_timer_init(&(thread->thread_timer),
   133c0:	00000793          	li	a5,0
   133c4:	00000713          	li	a4,0
   133c8:	fec42683          	lw	a3,-20(s0)
   133cc:	00001617          	auipc	a2,0x1
   133d0:	c1c60613          	addi	a2,a2,-996 # 13fe8 <rt_thread_timeout>
   133d4:	68c070ef          	jal	ra,1aa60 <rt_timer_init>

#ifdef RT_USING_CPU_USAGE
    thread->duration_tick = 0;
#endif

    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));
   133d8:	91018793          	addi	a5,gp,-1776 # 22470 <rt_thread_inited_hook>
   133dc:	0007a783          	lw	a5,0(a5)
   133e0:	00078a63          	beqz	a5,133f4 <_thread_init+0x194>
   133e4:	91018793          	addi	a5,gp,-1776 # 22470 <rt_thread_inited_hook>
   133e8:	0007a783          	lw	a5,0(a5)
   133ec:	fec42503          	lw	a0,-20(s0)
   133f0:	000780e7          	jalr	a5

    return RT_EOK;
   133f4:	00000793          	li	a5,0
}
   133f8:	00078513          	mv	a0,a5
   133fc:	02c12083          	lw	ra,44(sp)
   13400:	02812403          	lw	s0,40(sp)
   13404:	03010113          	addi	sp,sp,48
   13408:	00008067          	ret

0001340c <rt_thread_init>:
                        void             *parameter,
                        void             *stack_start,
                        rt_uint32_t       stack_size,
                        rt_uint8_t        priority,
                        rt_uint32_t       tick)
{
   1340c:	fd010113          	addi	sp,sp,-48
   13410:	02112623          	sw	ra,44(sp)
   13414:	02812423          	sw	s0,40(sp)
   13418:	03010413          	addi	s0,sp,48
   1341c:	fea42623          	sw	a0,-20(s0)
   13420:	feb42423          	sw	a1,-24(s0)
   13424:	fec42223          	sw	a2,-28(s0)
   13428:	fed42023          	sw	a3,-32(s0)
   1342c:	fce42e23          	sw	a4,-36(s0)
   13430:	fcf42c23          	sw	a5,-40(s0)
   13434:	00080793          	mv	a5,a6
   13438:	fd142823          	sw	a7,-48(s0)
   1343c:	fcf40ba3          	sb	a5,-41(s0)
    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   13440:	fec42783          	lw	a5,-20(s0)
   13444:	00079e63          	bnez	a5,13460 <rt_thread_init+0x54>
   13448:	0f500613          	li	a2,245
   1344c:	0000d597          	auipc	a1,0xd
   13450:	ea858593          	addi	a1,a1,-344 # 202f4 <__FUNCTION__.2488>
   13454:	0000d517          	auipc	a0,0xd
   13458:	d1450513          	addi	a0,a0,-748 # 20168 <__FUNCTION__.2750+0x34>
   1345c:	be9ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(stack_start != RT_NULL);
   13460:	fdc42783          	lw	a5,-36(s0)
   13464:	00079e63          	bnez	a5,13480 <rt_thread_init+0x74>
   13468:	0f600613          	li	a2,246
   1346c:	0000d597          	auipc	a1,0xd
   13470:	e8858593          	addi	a1,a1,-376 # 202f4 <__FUNCTION__.2488>
   13474:	0000d517          	auipc	a0,0xd
   13478:	d0850513          	addi	a0,a0,-760 # 2017c <__FUNCTION__.2750+0x48>
   1347c:	bc9ff0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize thread object */
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
   13480:	fe842603          	lw	a2,-24(s0)
   13484:	00100593          	li	a1,1
   13488:	fec42503          	lw	a0,-20(s0)
   1348c:	e34fd0ef          	jal	ra,10ac0 <rt_object_init>

    return _thread_init(thread,
   13490:	fd744783          	lbu	a5,-41(s0)
   13494:	fd042883          	lw	a7,-48(s0)
   13498:	00078813          	mv	a6,a5
   1349c:	fd842783          	lw	a5,-40(s0)
   134a0:	fdc42703          	lw	a4,-36(s0)
   134a4:	fe042683          	lw	a3,-32(s0)
   134a8:	fe442603          	lw	a2,-28(s0)
   134ac:	fe842583          	lw	a1,-24(s0)
   134b0:	fec42503          	lw	a0,-20(s0)
   134b4:	dadff0ef          	jal	ra,13260 <_thread_init>
   134b8:	00050793          	mv	a5,a0
                        parameter,
                        stack_start,
                        stack_size,
                        priority,
                        tick);
}
   134bc:	00078513          	mv	a0,a5
   134c0:	02c12083          	lw	ra,44(sp)
   134c4:	02812403          	lw	s0,40(sp)
   134c8:	03010113          	addi	sp,sp,48
   134cc:	00008067          	ret

000134d0 <rt_thread_self>:
 * @brief   This function will return self thread object.
 *
 * @return  The self thread object.
 */
rt_thread_t rt_thread_self(void)
{
   134d0:	ff010113          	addi	sp,sp,-16
   134d4:	00812623          	sw	s0,12(sp)
   134d8:	01010413          	addi	s0,sp,16
    rt_hw_local_irq_enable(lock);
    return self;
#else
    extern rt_thread_t rt_current_thread;

    return rt_current_thread;
   134dc:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   134e0:	0007a783          	lw	a5,0(a5)
#endif /* RT_USING_SMP */
}
   134e4:	00078513          	mv	a0,a5
   134e8:	00c12403          	lw	s0,12(sp)
   134ec:	01010113          	addi	sp,sp,16
   134f0:	00008067          	ret

000134f4 <rt_thread_startup>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_startup(rt_thread_t thread)
{
   134f4:	fe010113          	addi	sp,sp,-32
   134f8:	00112e23          	sw	ra,28(sp)
   134fc:	00812c23          	sw	s0,24(sp)
   13500:	02010413          	addi	s0,sp,32
   13504:	fea42623          	sw	a0,-20(s0)
    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   13508:	fec42783          	lw	a5,-20(s0)
   1350c:	00079e63          	bnez	a5,13528 <rt_thread_startup+0x34>
   13510:	12800613          	li	a2,296
   13514:	0000d597          	auipc	a1,0xd
   13518:	df058593          	addi	a1,a1,-528 # 20304 <__FUNCTION__.2497>
   1351c:	0000d517          	auipc	a0,0xd
   13520:	c4c50513          	addi	a0,a0,-948 # 20168 <__FUNCTION__.2750+0x34>
   13524:	b21ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
   13528:	fec42783          	lw	a5,-20(s0)
   1352c:	0347c783          	lbu	a5,52(a5)
   13530:	0077f793          	andi	a5,a5,7
   13534:	00078e63          	beqz	a5,13550 <rt_thread_startup+0x5c>
   13538:	12900613          	li	a2,297
   1353c:	0000d597          	auipc	a1,0xd
   13540:	dc858593          	addi	a1,a1,-568 # 20304 <__FUNCTION__.2497>
   13544:	0000d517          	auipc	a0,0xd
   13548:	c5050513          	addi	a0,a0,-944 # 20194 <__FUNCTION__.2750+0x60>
   1354c:	af9ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   13550:	fec42503          	lw	a0,-20(s0)
   13554:	9d5fd0ef          	jal	ra,10f28 <rt_object_get_type>
   13558:	00050793          	mv	a5,a0
   1355c:	00078713          	mv	a4,a5
   13560:	00100793          	li	a5,1
   13564:	00f70e63          	beq	a4,a5,13580 <rt_thread_startup+0x8c>
   13568:	12a00613          	li	a2,298
   1356c:	0000d597          	auipc	a1,0xd
   13570:	d9858593          	addi	a1,a1,-616 # 20304 <__FUNCTION__.2497>
   13574:	0000d517          	auipc	a0,0xd
   13578:	c5850513          	addi	a0,a0,-936 # 201cc <__FUNCTION__.2750+0x98>
   1357c:	ac9ff0ef          	jal	ra,13044 <rt_assert_handler>

    /* set current priority to initialize priority */
    thread->current_priority = thread->init_priority;
   13580:	fec42783          	lw	a5,-20(s0)
   13584:	0367c703          	lbu	a4,54(a5)
   13588:	fec42783          	lw	a5,-20(s0)
   1358c:	02e78aa3          	sb	a4,53(a5)
#if RT_THREAD_PRIORITY_MAX > 32
    thread->number      = thread->current_priority >> 3;            /* 5bit */
    thread->number_mask = 1L << thread->number;
    thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
#else
    thread->number_mask = 1L << thread->current_priority;
   13590:	fec42783          	lw	a5,-20(s0)
   13594:	0357c783          	lbu	a5,53(a5)
   13598:	00078713          	mv	a4,a5
   1359c:	00100793          	li	a5,1
   135a0:	00e797b3          	sll	a5,a5,a4
   135a4:	00078713          	mv	a4,a5
   135a8:	fec42783          	lw	a5,-20(s0)
   135ac:	02e7ac23          	sw	a4,56(a5)
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
                                   thread->name, thread->init_priority));
    /* change thread stat */
    thread->stat = RT_THREAD_SUSPEND;
   135b0:	fec42783          	lw	a5,-20(s0)
   135b4:	00200713          	li	a4,2
   135b8:	02e78a23          	sb	a4,52(a5)
    /* then resume it */
    rt_thread_resume(thread);
   135bc:	fec42503          	lw	a0,-20(s0)
   135c0:	135000ef          	jal	ra,13ef4 <rt_thread_resume>
    if (rt_thread_self() != RT_NULL)
   135c4:	f0dff0ef          	jal	ra,134d0 <rt_thread_self>
   135c8:	00050793          	mv	a5,a0
   135cc:	00078463          	beqz	a5,135d4 <rt_thread_startup+0xe0>
    {
        /* do a scheduling */
        rt_schedule();
   135d0:	0b8050ef          	jal	ra,18688 <rt_schedule>
    }

    return RT_EOK;
   135d4:	00000793          	li	a5,0
}
   135d8:	00078513          	mv	a0,a5
   135dc:	01c12083          	lw	ra,28(sp)
   135e0:	01812403          	lw	s0,24(sp)
   135e4:	02010113          	addi	sp,sp,32
   135e8:	00008067          	ret

000135ec <rt_thread_detach>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_detach(rt_thread_t thread)
{
   135ec:	fd010113          	addi	sp,sp,-48
   135f0:	02112623          	sw	ra,44(sp)
   135f4:	02812423          	sw	s0,40(sp)
   135f8:	03010413          	addi	s0,sp,48
   135fc:	fca42e23          	sw	a0,-36(s0)
    rt_base_t lock;

    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   13600:	fdc42783          	lw	a5,-36(s0)
   13604:	00079e63          	bnez	a5,13620 <rt_thread_detach+0x34>
   13608:	15600613          	li	a2,342
   1360c:	0000d597          	auipc	a1,0xd
   13610:	d0c58593          	addi	a1,a1,-756 # 20318 <__FUNCTION__.2502>
   13614:	0000d517          	auipc	a0,0xd
   13618:	b5450513          	addi	a0,a0,-1196 # 20168 <__FUNCTION__.2750+0x34>
   1361c:	a29ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   13620:	fdc42503          	lw	a0,-36(s0)
   13624:	905fd0ef          	jal	ra,10f28 <rt_object_get_type>
   13628:	00050793          	mv	a5,a0
   1362c:	00078713          	mv	a4,a5
   13630:	00100793          	li	a5,1
   13634:	00f70e63          	beq	a4,a5,13650 <rt_thread_detach+0x64>
   13638:	15700613          	li	a2,343
   1363c:	0000d597          	auipc	a1,0xd
   13640:	cdc58593          	addi	a1,a1,-804 # 20318 <__FUNCTION__.2502>
   13644:	0000d517          	auipc	a0,0xd
   13648:	b8850513          	addi	a0,a0,-1144 # 201cc <__FUNCTION__.2750+0x98>
   1364c:	9f9ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
   13650:	fdc42503          	lw	a0,-36(s0)
   13654:	86dfd0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   13658:	00050793          	mv	a5,a0
   1365c:	00079e63          	bnez	a5,13678 <rt_thread_detach+0x8c>
   13660:	15800613          	li	a2,344
   13664:	0000d597          	auipc	a1,0xd
   13668:	cb458593          	addi	a1,a1,-844 # 20318 <__FUNCTION__.2502>
   1366c:	0000d517          	auipc	a0,0xd
   13670:	ba450513          	addi	a0,a0,-1116 # 20210 <__FUNCTION__.2750+0xdc>
   13674:	9d1ff0ef          	jal	ra,13044 <rt_assert_handler>

    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
   13678:	fdc42783          	lw	a5,-36(s0)
   1367c:	0347c783          	lbu	a5,52(a5)
   13680:	0077f713          	andi	a4,a5,7
   13684:	00400793          	li	a5,4
   13688:	00f71663          	bne	a4,a5,13694 <rt_thread_detach+0xa8>
        return RT_EOK;
   1368c:	00000793          	li	a5,0
   13690:	0540006f          	j	136e4 <rt_thread_detach+0xf8>

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
   13694:	fdc42783          	lw	a5,-36(s0)
   13698:	0347c783          	lbu	a5,52(a5)
   1369c:	0077f793          	andi	a5,a5,7
   136a0:	00078663          	beqz	a5,136ac <rt_thread_detach+0xc0>
    {
        /* remove from schedule */
        rt_schedule_remove_thread(thread);
   136a4:	fdc42503          	lw	a0,-36(s0)
   136a8:	378050ef          	jal	ra,18a20 <rt_schedule_remove_thread>
    }

    /* disable interrupt */
    lock = rt_hw_interrupt_disable();
   136ac:	79c080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   136b0:	fea42623          	sw	a0,-20(s0)

    /* release thread timer */
    rt_timer_detach(&(thread->thread_timer));
   136b4:	fdc42783          	lw	a5,-36(s0)
   136b8:	04c78793          	addi	a5,a5,76
   136bc:	00078513          	mv	a0,a5
   136c0:	42c070ef          	jal	ra,1aaec <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
   136c4:	fdc42783          	lw	a5,-36(s0)
   136c8:	00400713          	li	a4,4
   136cc:	02e78a23          	sb	a4,52(a5)

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
   136d0:	fdc42503          	lw	a0,-36(s0)
   136d4:	358080ef          	jal	ra,1ba2c <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(lock);
   136d8:	fec42503          	lw	a0,-20(s0)
   136dc:	774080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   136e0:	00000793          	li	a5,0
}
   136e4:	00078513          	mv	a0,a5
   136e8:	02c12083          	lw	ra,44(sp)
   136ec:	02812403          	lw	s0,40(sp)
   136f0:	03010113          	addi	sp,sp,48
   136f4:	00008067          	ret

000136f8 <rt_thread_create>:
                             void (*entry)(void *parameter),
                             void       *parameter,
                             rt_uint32_t stack_size,
                             rt_uint8_t  priority,
                             rt_uint32_t tick)
{
   136f8:	fc010113          	addi	sp,sp,-64
   136fc:	02112e23          	sw	ra,60(sp)
   13700:	02812c23          	sw	s0,56(sp)
   13704:	04010413          	addi	s0,sp,64
   13708:	fca42e23          	sw	a0,-36(s0)
   1370c:	fcb42c23          	sw	a1,-40(s0)
   13710:	fcc42a23          	sw	a2,-44(s0)
   13714:	fcd42823          	sw	a3,-48(s0)
   13718:	fcf42423          	sw	a5,-56(s0)
   1371c:	00070793          	mv	a5,a4
   13720:	fcf407a3          	sb	a5,-49(s0)
    struct rt_thread *thread;
    void *stack_start;

    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
   13724:	fdc42583          	lw	a1,-36(s0)
   13728:	00100513          	li	a0,1
   1372c:	d70fd0ef          	jal	ra,10c9c <rt_object_allocate>
   13730:	fea42623          	sw	a0,-20(s0)
                                                    name);
    if (thread == RT_NULL)
   13734:	fec42783          	lw	a5,-20(s0)
   13738:	00079663          	bnez	a5,13744 <rt_thread_create+0x4c>
        return RT_NULL;
   1373c:	00000793          	li	a5,0
   13740:	0540006f          	j	13794 <rt_thread_create+0x9c>

    stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
   13744:	fd042503          	lw	a0,-48(s0)
   13748:	cc8ff0ef          	jal	ra,12c10 <rt_malloc>
   1374c:	fea42423          	sw	a0,-24(s0)
    if (stack_start == RT_NULL)
   13750:	fe842783          	lw	a5,-24(s0)
   13754:	00079a63          	bnez	a5,13768 <rt_thread_create+0x70>
    {
        /* allocate stack failure */
        rt_object_delete((rt_object_t)thread);
   13758:	fec42503          	lw	a0,-20(s0)
   1375c:	e9cfd0ef          	jal	ra,10df8 <rt_object_delete>

        return RT_NULL;
   13760:	00000793          	li	a5,0
   13764:	0300006f          	j	13794 <rt_thread_create+0x9c>
    }

    _thread_init(thread,
   13768:	fcf44783          	lbu	a5,-49(s0)
   1376c:	fc842883          	lw	a7,-56(s0)
   13770:	00078813          	mv	a6,a5
   13774:	fd042783          	lw	a5,-48(s0)
   13778:	fe842703          	lw	a4,-24(s0)
   1377c:	fd442683          	lw	a3,-44(s0)
   13780:	fd842603          	lw	a2,-40(s0)
   13784:	fdc42583          	lw	a1,-36(s0)
   13788:	fec42503          	lw	a0,-20(s0)
   1378c:	ad5ff0ef          	jal	ra,13260 <_thread_init>
                    stack_start,
                    stack_size,
                    priority,
                    tick);

    return thread;
   13790:	fec42783          	lw	a5,-20(s0)
}
   13794:	00078513          	mv	a0,a5
   13798:	03c12083          	lw	ra,60(sp)
   1379c:	03812403          	lw	s0,56(sp)
   137a0:	04010113          	addi	sp,sp,64
   137a4:	00008067          	ret

000137a8 <rt_thread_delete>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_delete(rt_thread_t thread)
{
   137a8:	fd010113          	addi	sp,sp,-48
   137ac:	02112623          	sw	ra,44(sp)
   137b0:	02812423          	sw	s0,40(sp)
   137b4:	03010413          	addi	s0,sp,48
   137b8:	fca42e23          	sw	a0,-36(s0)
    rt_base_t lock;

    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   137bc:	fdc42783          	lw	a5,-36(s0)
   137c0:	00079e63          	bnez	a5,137dc <rt_thread_delete+0x34>
   137c4:	1bd00613          	li	a2,445
   137c8:	0000d597          	auipc	a1,0xd
   137cc:	b6458593          	addi	a1,a1,-1180 # 2032c <__FUNCTION__.2518>
   137d0:	0000d517          	auipc	a0,0xd
   137d4:	99850513          	addi	a0,a0,-1640 # 20168 <__FUNCTION__.2750+0x34>
   137d8:	86dff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   137dc:	fdc42503          	lw	a0,-36(s0)
   137e0:	f48fd0ef          	jal	ra,10f28 <rt_object_get_type>
   137e4:	00050793          	mv	a5,a0
   137e8:	00078713          	mv	a4,a5
   137ec:	00100793          	li	a5,1
   137f0:	00f70e63          	beq	a4,a5,1380c <rt_thread_delete+0x64>
   137f4:	1be00613          	li	a2,446
   137f8:	0000d597          	auipc	a1,0xd
   137fc:	b3458593          	addi	a1,a1,-1228 # 2032c <__FUNCTION__.2518>
   13800:	0000d517          	auipc	a0,0xd
   13804:	9cc50513          	addi	a0,a0,-1588 # 201cc <__FUNCTION__.2750+0x98>
   13808:	83dff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
   1380c:	fdc42503          	lw	a0,-36(s0)
   13810:	eb0fd0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   13814:	00050793          	mv	a5,a0
   13818:	00078e63          	beqz	a5,13834 <rt_thread_delete+0x8c>
   1381c:	1bf00613          	li	a2,447
   13820:	0000d597          	auipc	a1,0xd
   13824:	b0c58593          	addi	a1,a1,-1268 # 2032c <__FUNCTION__.2518>
   13828:	0000d517          	auipc	a0,0xd
   1382c:	a1850513          	addi	a0,a0,-1512 # 20240 <__FUNCTION__.2750+0x10c>
   13830:	815ff0ef          	jal	ra,13044 <rt_assert_handler>

    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
   13834:	fdc42783          	lw	a5,-36(s0)
   13838:	0347c783          	lbu	a5,52(a5)
   1383c:	0077f713          	andi	a4,a5,7
   13840:	00400793          	li	a5,4
   13844:	00f71663          	bne	a4,a5,13850 <rt_thread_delete+0xa8>
        return RT_EOK;
   13848:	00000793          	li	a5,0
   1384c:	0540006f          	j	138a0 <rt_thread_delete+0xf8>

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
   13850:	fdc42783          	lw	a5,-36(s0)
   13854:	0347c783          	lbu	a5,52(a5)
   13858:	0077f793          	andi	a5,a5,7
   1385c:	00078663          	beqz	a5,13868 <rt_thread_delete+0xc0>
    {
        /* remove from schedule */
        rt_schedule_remove_thread(thread);
   13860:	fdc42503          	lw	a0,-36(s0)
   13864:	1bc050ef          	jal	ra,18a20 <rt_schedule_remove_thread>
    }

    /* disable interrupt */
    lock = rt_hw_interrupt_disable();
   13868:	5e0080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1386c:	fea42623          	sw	a0,-20(s0)

    /* release thread timer */
    rt_timer_detach(&(thread->thread_timer));
   13870:	fdc42783          	lw	a5,-36(s0)
   13874:	04c78793          	addi	a5,a5,76
   13878:	00078513          	mv	a0,a5
   1387c:	270070ef          	jal	ra,1aaec <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
   13880:	fdc42783          	lw	a5,-36(s0)
   13884:	00400713          	li	a4,4
   13888:	02e78a23          	sb	a4,52(a5)

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
   1388c:	fdc42503          	lw	a0,-36(s0)
   13890:	19c080ef          	jal	ra,1ba2c <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(lock);
   13894:	fec42503          	lw	a0,-20(s0)
   13898:	5b8080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   1389c:	00000793          	li	a5,0
}
   138a0:	00078513          	mv	a0,a5
   138a4:	02c12083          	lw	ra,44(sp)
   138a8:	02812403          	lw	s0,40(sp)
   138ac:	03010113          	addi	sp,sp,48
   138b0:	00008067          	ret

000138b4 <rt_thread_yield>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_yield(void)
{
   138b4:	fe010113          	addi	sp,sp,-32
   138b8:	00112e23          	sw	ra,28(sp)
   138bc:	00812c23          	sw	s0,24(sp)
   138c0:	02010413          	addi	s0,sp,32
    struct rt_thread *thread;
    rt_base_t lock;

    thread = rt_thread_self();
   138c4:	c0dff0ef          	jal	ra,134d0 <rt_thread_self>
   138c8:	fea42623          	sw	a0,-20(s0)
    lock = rt_hw_interrupt_disable();
   138cc:	57c080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   138d0:	fea42423          	sw	a0,-24(s0)
    thread->remaining_tick = thread->init_tick;
   138d4:	fec42783          	lw	a5,-20(s0)
   138d8:	0447a703          	lw	a4,68(a5)
   138dc:	fec42783          	lw	a5,-20(s0)
   138e0:	04e7a423          	sw	a4,72(a5)
    thread->stat |= RT_THREAD_STAT_YIELD;
   138e4:	fec42783          	lw	a5,-20(s0)
   138e8:	0347c783          	lbu	a5,52(a5)
   138ec:	0087e793          	ori	a5,a5,8
   138f0:	0ff7f713          	andi	a4,a5,255
   138f4:	fec42783          	lw	a5,-20(s0)
   138f8:	02e78a23          	sb	a4,52(a5)
    rt_schedule();
   138fc:	58d040ef          	jal	ra,18688 <rt_schedule>
    rt_hw_interrupt_enable(lock);
   13900:	fe842503          	lw	a0,-24(s0)
   13904:	54c080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   13908:	00000793          	li	a5,0
}
   1390c:	00078513          	mv	a0,a5
   13910:	01c12083          	lw	ra,28(sp)
   13914:	01812403          	lw	s0,24(sp)
   13918:	02010113          	addi	sp,sp,32
   1391c:	00008067          	ret

00013920 <rt_thread_sleep>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_sleep(rt_tick_t tick)
{
   13920:	fd010113          	addi	sp,sp,-48
   13924:	02112623          	sw	ra,44(sp)
   13928:	02812423          	sw	s0,40(sp)
   1392c:	02912223          	sw	s1,36(sp)
   13930:	03010413          	addi	s0,sp,48
   13934:	fca42e23          	sw	a0,-36(s0)
    register rt_base_t temp;
    struct rt_thread *thread;

    /* set to current thread */
    thread = rt_thread_self();
   13938:	b99ff0ef          	jal	ra,134d0 <rt_thread_self>
   1393c:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(thread != RT_NULL);
   13940:	fec42783          	lw	a5,-20(s0)
   13944:	00079e63          	bnez	a5,13960 <rt_thread_sleep+0x40>
   13948:	20600613          	li	a2,518
   1394c:	0000d597          	auipc	a1,0xd
   13950:	9f458593          	addi	a1,a1,-1548 # 20340 <__FUNCTION__.2529>
   13954:	0000d517          	auipc	a0,0xd
   13958:	81450513          	addi	a0,a0,-2028 # 20168 <__FUNCTION__.2750+0x34>
   1395c:	ee8ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   13960:	fec42503          	lw	a0,-20(s0)
   13964:	dc4fd0ef          	jal	ra,10f28 <rt_object_get_type>
   13968:	00050793          	mv	a5,a0
   1396c:	00078713          	mv	a4,a5
   13970:	00100793          	li	a5,1
   13974:	00f70e63          	beq	a4,a5,13990 <rt_thread_sleep+0x70>
   13978:	20700613          	li	a2,519
   1397c:	0000d597          	auipc	a1,0xd
   13980:	9c458593          	addi	a1,a1,-1596 # 20340 <__FUNCTION__.2529>
   13984:	0000d517          	auipc	a0,0xd
   13988:	84850513          	addi	a0,a0,-1976 # 201cc <__FUNCTION__.2750+0x98>
   1398c:	eb8ff0ef          	jal	ra,13044 <rt_assert_handler>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   13990:	4b8080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   13994:	00050493          	mv	s1,a0

    /* suspend thread */
    rt_thread_suspend(thread);
   13998:	fec42503          	lw	a0,-20(s0)
   1399c:	400000ef          	jal	ra,13d9c <rt_thread_suspend>

    /* reset the timeout of thread timer and start it */
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
   139a0:	fec42783          	lw	a5,-20(s0)
   139a4:	04c78793          	addi	a5,a5,76
   139a8:	fdc40713          	addi	a4,s0,-36
   139ac:	00070613          	mv	a2,a4
   139b0:	00000593          	li	a1,0
   139b4:	00078513          	mv	a0,a5
   139b8:	025070ef          	jal	ra,1b1dc <rt_timer_control>
    rt_timer_start(&(thread->thread_timer));
   139bc:	fec42783          	lw	a5,-20(s0)
   139c0:	04c78793          	addi	a5,a5,76
   139c4:	00078513          	mv	a0,a5
   139c8:	380070ef          	jal	ra,1ad48 <rt_timer_start>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   139cc:	00048513          	mv	a0,s1
   139d0:	480080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    rt_schedule();
   139d4:	4b5040ef          	jal	ra,18688 <rt_schedule>

    /* clear error number of this thread to RT_EOK */
    if (thread->error == -RT_ETIMEOUT)
   139d8:	fec42783          	lw	a5,-20(s0)
   139dc:	0307a703          	lw	a4,48(a5)
   139e0:	ffe00793          	li	a5,-2
   139e4:	00f71663          	bne	a4,a5,139f0 <rt_thread_sleep+0xd0>
        thread->error = RT_EOK;
   139e8:	fec42783          	lw	a5,-20(s0)
   139ec:	0207a823          	sw	zero,48(a5)

    return RT_EOK;
   139f0:	00000793          	li	a5,0
}
   139f4:	00078513          	mv	a0,a5
   139f8:	02c12083          	lw	ra,44(sp)
   139fc:	02812403          	lw	s0,40(sp)
   13a00:	02412483          	lw	s1,36(sp)
   13a04:	03010113          	addi	sp,sp,48
   13a08:	00008067          	ret

00013a0c <rt_thread_delay>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_delay(rt_tick_t tick)
{
   13a0c:	fe010113          	addi	sp,sp,-32
   13a10:	00112e23          	sw	ra,28(sp)
   13a14:	00812c23          	sw	s0,24(sp)
   13a18:	02010413          	addi	s0,sp,32
   13a1c:	fea42623          	sw	a0,-20(s0)
    return rt_thread_sleep(tick);
   13a20:	fec42503          	lw	a0,-20(s0)
   13a24:	efdff0ef          	jal	ra,13920 <rt_thread_sleep>
   13a28:	00050793          	mv	a5,a0
}
   13a2c:	00078513          	mv	a0,a5
   13a30:	01c12083          	lw	ra,28(sp)
   13a34:	01812403          	lw	s0,24(sp)
   13a38:	02010113          	addi	sp,sp,32
   13a3c:	00008067          	ret

00013a40 <rt_thread_delay_until>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_delay_until(rt_tick_t *tick, rt_tick_t inc_tick)
{
   13a40:	fd010113          	addi	sp,sp,-48
   13a44:	02112623          	sw	ra,44(sp)
   13a48:	02812423          	sw	s0,40(sp)
   13a4c:	02912223          	sw	s1,36(sp)
   13a50:	03010413          	addi	s0,sp,48
   13a54:	fca42e23          	sw	a0,-36(s0)
   13a58:	fcb42c23          	sw	a1,-40(s0)
    register rt_base_t level;
    struct rt_thread *thread;
    rt_tick_t cur_tick;

    RT_ASSERT(tick != RT_NULL);
   13a5c:	fdc42783          	lw	a5,-36(s0)
   13a60:	00079e63          	bnez	a5,13a7c <rt_thread_delay_until+0x3c>
   13a64:	23d00613          	li	a2,573
   13a68:	0000d597          	auipc	a1,0xd
   13a6c:	8e858593          	addi	a1,a1,-1816 # 20350 <__FUNCTION__.2540>
   13a70:	0000d517          	auipc	a0,0xd
   13a74:	80c50513          	addi	a0,a0,-2036 # 2027c <__FUNCTION__.2750+0x148>
   13a78:	dccff0ef          	jal	ra,13044 <rt_assert_handler>

    /* set to current thread */
    thread = rt_thread_self();
   13a7c:	a55ff0ef          	jal	ra,134d0 <rt_thread_self>
   13a80:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(thread != RT_NULL);
   13a84:	fec42783          	lw	a5,-20(s0)
   13a88:	00079e63          	bnez	a5,13aa4 <rt_thread_delay_until+0x64>
   13a8c:	24100613          	li	a2,577
   13a90:	0000d597          	auipc	a1,0xd
   13a94:	8c058593          	addi	a1,a1,-1856 # 20350 <__FUNCTION__.2540>
   13a98:	0000c517          	auipc	a0,0xc
   13a9c:	6d050513          	addi	a0,a0,1744 # 20168 <__FUNCTION__.2750+0x34>
   13aa0:	da4ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   13aa4:	fec42503          	lw	a0,-20(s0)
   13aa8:	c80fd0ef          	jal	ra,10f28 <rt_object_get_type>
   13aac:	00050793          	mv	a5,a0
   13ab0:	00078713          	mv	a4,a5
   13ab4:	00100793          	li	a5,1
   13ab8:	00f70e63          	beq	a4,a5,13ad4 <rt_thread_delay_until+0x94>
   13abc:	24200613          	li	a2,578
   13ac0:	0000d597          	auipc	a1,0xd
   13ac4:	89058593          	addi	a1,a1,-1904 # 20350 <__FUNCTION__.2540>
   13ac8:	0000c517          	auipc	a0,0xc
   13acc:	70450513          	addi	a0,a0,1796 # 201cc <__FUNCTION__.2750+0x98>
   13ad0:	d74ff0ef          	jal	ra,13044 <rt_assert_handler>

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   13ad4:	374080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   13ad8:	00050493          	mv	s1,a0

    cur_tick = rt_tick_get();
   13adc:	61c040ef          	jal	ra,180f8 <rt_tick_get>
   13ae0:	fea42423          	sw	a0,-24(s0)
    if (cur_tick - *tick < inc_tick)
   13ae4:	fdc42783          	lw	a5,-36(s0)
   13ae8:	0007a783          	lw	a5,0(a5)
   13aec:	fe842703          	lw	a4,-24(s0)
   13af0:	40f707b3          	sub	a5,a4,a5
   13af4:	fd842703          	lw	a4,-40(s0)
   13af8:	08e7f663          	bgeu	a5,a4,13b84 <rt_thread_delay_until+0x144>
    {
        rt_tick_t left_tick;

        *tick += inc_tick;
   13afc:	fdc42783          	lw	a5,-36(s0)
   13b00:	0007a703          	lw	a4,0(a5)
   13b04:	fd842783          	lw	a5,-40(s0)
   13b08:	00f70733          	add	a4,a4,a5
   13b0c:	fdc42783          	lw	a5,-36(s0)
   13b10:	00e7a023          	sw	a4,0(a5)
        left_tick = *tick - cur_tick;
   13b14:	fdc42783          	lw	a5,-36(s0)
   13b18:	0007a703          	lw	a4,0(a5)
   13b1c:	fe842783          	lw	a5,-24(s0)
   13b20:	40f707b3          	sub	a5,a4,a5
   13b24:	fef42223          	sw	a5,-28(s0)

        /* suspend thread */
        rt_thread_suspend(thread);
   13b28:	fec42503          	lw	a0,-20(s0)
   13b2c:	270000ef          	jal	ra,13d9c <rt_thread_suspend>

        /* reset the timeout of thread timer and start it */
        rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &left_tick);
   13b30:	fec42783          	lw	a5,-20(s0)
   13b34:	04c78793          	addi	a5,a5,76
   13b38:	fe440713          	addi	a4,s0,-28
   13b3c:	00070613          	mv	a2,a4
   13b40:	00000593          	li	a1,0
   13b44:	00078513          	mv	a0,a5
   13b48:	694070ef          	jal	ra,1b1dc <rt_timer_control>
        rt_timer_start(&(thread->thread_timer));
   13b4c:	fec42783          	lw	a5,-20(s0)
   13b50:	04c78793          	addi	a5,a5,76
   13b54:	00078513          	mv	a0,a5
   13b58:	1f0070ef          	jal	ra,1ad48 <rt_timer_start>

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   13b5c:	00048513          	mv	a0,s1
   13b60:	2f0080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   13b64:	325040ef          	jal	ra,18688 <rt_schedule>

        /* clear error number of this thread to RT_EOK */
        if (thread->error == -RT_ETIMEOUT)
   13b68:	fec42783          	lw	a5,-20(s0)
   13b6c:	0307a703          	lw	a4,48(a5)
   13b70:	ffe00793          	li	a5,-2
   13b74:	02f71263          	bne	a4,a5,13b98 <rt_thread_delay_until+0x158>
        {
            thread->error = RT_EOK;
   13b78:	fec42783          	lw	a5,-20(s0)
   13b7c:	0207a823          	sw	zero,48(a5)
   13b80:	0180006f          	j	13b98 <rt_thread_delay_until+0x158>
        }
    }
    else
    {
        *tick = cur_tick;
   13b84:	fdc42783          	lw	a5,-36(s0)
   13b88:	fe842703          	lw	a4,-24(s0)
   13b8c:	00e7a023          	sw	a4,0(a5)
        rt_hw_interrupt_enable(level);
   13b90:	00048513          	mv	a0,s1
   13b94:	2bc080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
    }

    return RT_EOK;
   13b98:	00000793          	li	a5,0
}
   13b9c:	00078513          	mv	a0,a5
   13ba0:	02c12083          	lw	ra,44(sp)
   13ba4:	02812403          	lw	s0,40(sp)
   13ba8:	02412483          	lw	s1,36(sp)
   13bac:	03010113          	addi	sp,sp,48
   13bb0:	00008067          	ret

00013bb4 <rt_thread_mdelay>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
   13bb4:	fd010113          	addi	sp,sp,-48
   13bb8:	02112623          	sw	ra,44(sp)
   13bbc:	02812423          	sw	s0,40(sp)
   13bc0:	03010413          	addi	s0,sp,48
   13bc4:	fca42e23          	sw	a0,-36(s0)
    rt_tick_t tick;

    tick = rt_tick_from_millisecond(ms);
   13bc8:	fdc42503          	lw	a0,-36(s0)
   13bcc:	640040ef          	jal	ra,1820c <rt_tick_from_millisecond>
   13bd0:	fea42623          	sw	a0,-20(s0)

    return rt_thread_sleep(tick);
   13bd4:	fec42503          	lw	a0,-20(s0)
   13bd8:	d49ff0ef          	jal	ra,13920 <rt_thread_sleep>
   13bdc:	00050793          	mv	a5,a0
}
   13be0:	00078513          	mv	a0,a5
   13be4:	02c12083          	lw	ra,44(sp)
   13be8:	02812403          	lw	s0,40(sp)
   13bec:	03010113          	addi	sp,sp,48
   13bf0:	00008067          	ret

00013bf4 <rt_thread_control>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_control(rt_thread_t thread, int cmd, void *arg)
{
   13bf4:	fd010113          	addi	sp,sp,-48
   13bf8:	02112623          	sw	ra,44(sp)
   13bfc:	02812423          	sw	s0,40(sp)
   13c00:	02912223          	sw	s1,36(sp)
   13c04:	03010413          	addi	s0,sp,48
   13c08:	fca42e23          	sw	a0,-36(s0)
   13c0c:	fcb42c23          	sw	a1,-40(s0)
   13c10:	fcc42a23          	sw	a2,-44(s0)
    register rt_base_t temp;

    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   13c14:	fdc42783          	lw	a5,-36(s0)
   13c18:	00079e63          	bnez	a5,13c34 <rt_thread_control+0x40>
   13c1c:	29600613          	li	a2,662
   13c20:	0000c597          	auipc	a1,0xc
   13c24:	74858593          	addi	a1,a1,1864 # 20368 <__FUNCTION__.2552>
   13c28:	0000c517          	auipc	a0,0xc
   13c2c:	54050513          	addi	a0,a0,1344 # 20168 <__FUNCTION__.2750+0x34>
   13c30:	c14ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   13c34:	fdc42503          	lw	a0,-36(s0)
   13c38:	af0fd0ef          	jal	ra,10f28 <rt_object_get_type>
   13c3c:	00050793          	mv	a5,a0
   13c40:	00078713          	mv	a4,a5
   13c44:	00100793          	li	a5,1
   13c48:	00f70e63          	beq	a4,a5,13c64 <rt_thread_control+0x70>
   13c4c:	29700613          	li	a2,663
   13c50:	0000c597          	auipc	a1,0xc
   13c54:	71858593          	addi	a1,a1,1816 # 20368 <__FUNCTION__.2552>
   13c58:	0000c517          	auipc	a0,0xc
   13c5c:	57450513          	addi	a0,a0,1396 # 201cc <__FUNCTION__.2750+0x98>
   13c60:	be4ff0ef          	jal	ra,13044 <rt_assert_handler>

    switch (cmd)
   13c64:	fd842703          	lw	a4,-40(s0)
   13c68:	00200793          	li	a5,2
   13c6c:	02f70463          	beq	a4,a5,13c94 <rt_thread_control+0xa0>
   13c70:	fd842703          	lw	a4,-40(s0)
   13c74:	00200793          	li	a5,2
   13c78:	10e7c263          	blt	a5,a4,13d7c <rt_thread_control+0x188>
   13c7c:	fd842783          	lw	a5,-40(s0)
   13c80:	0a078863          	beqz	a5,13d30 <rt_thread_control+0x13c>
   13c84:	fd842703          	lw	a4,-40(s0)
   13c88:	00100793          	li	a5,1
   13c8c:	0af70a63          	beq	a4,a5,13d40 <rt_thread_control+0x14c>
            break;
        }
    #endif /* RT_USING_SMP */

        default:
            break;
   13c90:	0ec0006f          	j	13d7c <rt_thread_control+0x188>
            temp = rt_hw_interrupt_disable();
   13c94:	1b4080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   13c98:	00050493          	mv	s1,a0
            if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
   13c9c:	fdc42783          	lw	a5,-36(s0)
   13ca0:	0347c783          	lbu	a5,52(a5)
   13ca4:	0077f713          	andi	a4,a5,7
   13ca8:	00100793          	li	a5,1
   13cac:	04f71463          	bne	a4,a5,13cf4 <rt_thread_control+0x100>
                rt_schedule_remove_thread(thread);
   13cb0:	fdc42503          	lw	a0,-36(s0)
   13cb4:	56d040ef          	jal	ra,18a20 <rt_schedule_remove_thread>
                thread->current_priority = *(rt_uint8_t *)arg;
   13cb8:	fd442783          	lw	a5,-44(s0)
   13cbc:	0007c703          	lbu	a4,0(a5)
   13cc0:	fdc42783          	lw	a5,-36(s0)
   13cc4:	02e78aa3          	sb	a4,53(a5)
                thread->number_mask = 1 << thread->current_priority;
   13cc8:	fdc42783          	lw	a5,-36(s0)
   13ccc:	0357c783          	lbu	a5,53(a5)
   13cd0:	00078713          	mv	a4,a5
   13cd4:	00100793          	li	a5,1
   13cd8:	00e797b3          	sll	a5,a5,a4
   13cdc:	00078713          	mv	a4,a5
   13ce0:	fdc42783          	lw	a5,-36(s0)
   13ce4:	02e7ac23          	sw	a4,56(a5)
                rt_schedule_insert_thread(thread);
   13ce8:	fdc42503          	lw	a0,-36(s0)
   13cec:	415040ef          	jal	ra,18900 <rt_schedule_insert_thread>
   13cf0:	0340006f          	j	13d24 <rt_thread_control+0x130>
                thread->current_priority = *(rt_uint8_t *)arg;
   13cf4:	fd442783          	lw	a5,-44(s0)
   13cf8:	0007c703          	lbu	a4,0(a5)
   13cfc:	fdc42783          	lw	a5,-36(s0)
   13d00:	02e78aa3          	sb	a4,53(a5)
                thread->number_mask = 1 << thread->current_priority;
   13d04:	fdc42783          	lw	a5,-36(s0)
   13d08:	0357c783          	lbu	a5,53(a5)
   13d0c:	00078713          	mv	a4,a5
   13d10:	00100793          	li	a5,1
   13d14:	00e797b3          	sll	a5,a5,a4
   13d18:	00078713          	mv	a4,a5
   13d1c:	fdc42783          	lw	a5,-36(s0)
   13d20:	02e7ac23          	sw	a4,56(a5)
            rt_hw_interrupt_enable(temp);
   13d24:	00048513          	mv	a0,s1
   13d28:	128080ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
            break;
   13d2c:	0540006f          	j	13d80 <rt_thread_control+0x18c>
            return rt_thread_startup(thread);
   13d30:	fdc42503          	lw	a0,-36(s0)
   13d34:	fc0ff0ef          	jal	ra,134f4 <rt_thread_startup>
   13d38:	00050793          	mv	a5,a0
   13d3c:	0480006f          	j	13d84 <rt_thread_control+0x190>
            if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
   13d40:	fdc42503          	lw	a0,-36(s0)
   13d44:	97cfd0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   13d48:	00050713          	mv	a4,a0
   13d4c:	00100793          	li	a5,1
   13d50:	00f71a63          	bne	a4,a5,13d64 <rt_thread_control+0x170>
                rt_err = rt_thread_detach(thread);
   13d54:	fdc42503          	lw	a0,-36(s0)
   13d58:	895ff0ef          	jal	ra,135ec <rt_thread_detach>
   13d5c:	fea42623          	sw	a0,-20(s0)
   13d60:	0100006f          	j	13d70 <rt_thread_control+0x17c>
                rt_err = rt_thread_delete(thread);
   13d64:	fdc42503          	lw	a0,-36(s0)
   13d68:	a41ff0ef          	jal	ra,137a8 <rt_thread_delete>
   13d6c:	fea42623          	sw	a0,-20(s0)
            rt_schedule();
   13d70:	119040ef          	jal	ra,18688 <rt_schedule>
            return rt_err;
   13d74:	fec42783          	lw	a5,-20(s0)
   13d78:	00c0006f          	j	13d84 <rt_thread_control+0x190>
            break;
   13d7c:	00000013          	nop
    }

    return RT_EOK;
   13d80:	00000793          	li	a5,0
}
   13d84:	00078513          	mv	a0,a5
   13d88:	02c12083          	lw	ra,44(sp)
   13d8c:	02812403          	lw	s0,40(sp)
   13d90:	02412483          	lw	s1,36(sp)
   13d94:	03010113          	addi	sp,sp,48
   13d98:	00008067          	ret

00013d9c <rt_thread_suspend>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_suspend(rt_thread_t thread)
{
   13d9c:	fe010113          	addi	sp,sp,-32
   13da0:	00112e23          	sw	ra,28(sp)
   13da4:	00812c23          	sw	s0,24(sp)
   13da8:	00912a23          	sw	s1,20(sp)
   13dac:	01212823          	sw	s2,16(sp)
   13db0:	02010413          	addi	s0,sp,32
   13db4:	fea42623          	sw	a0,-20(s0)
    register rt_base_t stat;
    register rt_base_t temp;

    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   13db8:	fec42783          	lw	a5,-20(s0)
   13dbc:	00079e63          	bnez	a5,13dd8 <rt_thread_suspend+0x3c>
   13dc0:	30900613          	li	a2,777
   13dc4:	0000c597          	auipc	a1,0xc
   13dc8:	5b858593          	addi	a1,a1,1464 # 2037c <__FUNCTION__.2564>
   13dcc:	0000c517          	auipc	a0,0xc
   13dd0:	39c50513          	addi	a0,a0,924 # 20168 <__FUNCTION__.2750+0x34>
   13dd4:	a70ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   13dd8:	fec42503          	lw	a0,-20(s0)
   13ddc:	94cfd0ef          	jal	ra,10f28 <rt_object_get_type>
   13de0:	00050793          	mv	a5,a0
   13de4:	00078713          	mv	a4,a5
   13de8:	00100793          	li	a5,1
   13dec:	00f70e63          	beq	a4,a5,13e08 <rt_thread_suspend+0x6c>
   13df0:	30a00613          	li	a2,778
   13df4:	0000c597          	auipc	a1,0xc
   13df8:	58858593          	addi	a1,a1,1416 # 2037c <__FUNCTION__.2564>
   13dfc:	0000c517          	auipc	a0,0xc
   13e00:	3d050513          	addi	a0,a0,976 # 201cc <__FUNCTION__.2750+0x98>
   13e04:	a40ff0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));

    stat = thread->stat & RT_THREAD_STAT_MASK;
   13e08:	fec42783          	lw	a5,-20(s0)
   13e0c:	0347c783          	lbu	a5,52(a5)
   13e10:	0077f493          	andi	s1,a5,7
    if ((stat != RT_THREAD_READY) && (stat != RT_THREAD_RUNNING))
   13e14:	00100793          	li	a5,1
   13e18:	00f48a63          	beq	s1,a5,13e2c <rt_thread_suspend+0x90>
   13e1c:	00300793          	li	a5,3
   13e20:	00f48663          	beq	s1,a5,13e2c <rt_thread_suspend+0x90>
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n",
                                       thread->stat));
        return -RT_ERROR;
   13e24:	fff00793          	li	a5,-1
   13e28:	0b00006f          	j	13ed8 <rt_thread_suspend+0x13c>
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   13e2c:	01c080ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   13e30:	00050913          	mv	s2,a0
    if (stat == RT_THREAD_RUNNING)
   13e34:	00300793          	li	a5,3
   13e38:	02f49663          	bne	s1,a5,13e64 <rt_thread_suspend+0xc8>
    {
        /* not suspend running status thread on other core */
        RT_ASSERT(thread == rt_thread_self());
   13e3c:	e94ff0ef          	jal	ra,134d0 <rt_thread_self>
   13e40:	00050713          	mv	a4,a0
   13e44:	fec42783          	lw	a5,-20(s0)
   13e48:	00e78e63          	beq	a5,a4,13e64 <rt_thread_suspend+0xc8>
   13e4c:	31b00613          	li	a2,795
   13e50:	0000c597          	auipc	a1,0xc
   13e54:	52c58593          	addi	a1,a1,1324 # 2037c <__FUNCTION__.2564>
   13e58:	0000c517          	auipc	a0,0xc
   13e5c:	43450513          	addi	a0,a0,1076 # 2028c <__FUNCTION__.2750+0x158>
   13e60:	9e4ff0ef          	jal	ra,13044 <rt_assert_handler>
    }

    /* change thread stat */
    rt_schedule_remove_thread(thread);
   13e64:	fec42503          	lw	a0,-20(s0)
   13e68:	3b9040ef          	jal	ra,18a20 <rt_schedule_remove_thread>
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
   13e6c:	fec42783          	lw	a5,-20(s0)
   13e70:	0347c783          	lbu	a5,52(a5)
   13e74:	01879793          	slli	a5,a5,0x18
   13e78:	4187d793          	srai	a5,a5,0x18
   13e7c:	ff87f793          	andi	a5,a5,-8
   13e80:	01879793          	slli	a5,a5,0x18
   13e84:	4187d793          	srai	a5,a5,0x18
   13e88:	0027e793          	ori	a5,a5,2
   13e8c:	01879793          	slli	a5,a5,0x18
   13e90:	4187d793          	srai	a5,a5,0x18
   13e94:	0ff7f713          	andi	a4,a5,255
   13e98:	fec42783          	lw	a5,-20(s0)
   13e9c:	02e78a23          	sb	a4,52(a5)

    /* stop thread timer anyway */
    rt_timer_stop(&(thread->thread_timer));
   13ea0:	fec42783          	lw	a5,-20(s0)
   13ea4:	04c78793          	addi	a5,a5,76
   13ea8:	00078513          	mv	a0,a5
   13eac:	240070ef          	jal	ra,1b0ec <rt_timer_stop>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   13eb0:	00090513          	mv	a0,s2
   13eb4:	79d070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
   13eb8:	90818793          	addi	a5,gp,-1784 # 22468 <rt_thread_suspend_hook>
   13ebc:	0007a783          	lw	a5,0(a5)
   13ec0:	00078a63          	beqz	a5,13ed4 <rt_thread_suspend+0x138>
   13ec4:	90818793          	addi	a5,gp,-1784 # 22468 <rt_thread_suspend_hook>
   13ec8:	0007a783          	lw	a5,0(a5)
   13ecc:	fec42503          	lw	a0,-20(s0)
   13ed0:	000780e7          	jalr	a5
    return RT_EOK;
   13ed4:	00000793          	li	a5,0
}
   13ed8:	00078513          	mv	a0,a5
   13edc:	01c12083          	lw	ra,28(sp)
   13ee0:	01812403          	lw	s0,24(sp)
   13ee4:	01412483          	lw	s1,20(sp)
   13ee8:	01012903          	lw	s2,16(sp)
   13eec:	02010113          	addi	sp,sp,32
   13ef0:	00008067          	ret

00013ef4 <rt_thread_resume>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_resume(rt_thread_t thread)
{
   13ef4:	fe010113          	addi	sp,sp,-32
   13ef8:	00112e23          	sw	ra,28(sp)
   13efc:	00812c23          	sw	s0,24(sp)
   13f00:	00912a23          	sw	s1,20(sp)
   13f04:	02010413          	addi	s0,sp,32
   13f08:	fea42623          	sw	a0,-20(s0)
    register rt_base_t temp;

    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   13f0c:	fec42783          	lw	a5,-20(s0)
   13f10:	00079e63          	bnez	a5,13f2c <rt_thread_resume+0x38>
   13f14:	33a00613          	li	a2,826
   13f18:	0000c597          	auipc	a1,0xc
   13f1c:	47858593          	addi	a1,a1,1144 # 20390 <__FUNCTION__.2569>
   13f20:	0000c517          	auipc	a0,0xc
   13f24:	24850513          	addi	a0,a0,584 # 20168 <__FUNCTION__.2750+0x34>
   13f28:	91cff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   13f2c:	fec42503          	lw	a0,-20(s0)
   13f30:	ff9fc0ef          	jal	ra,10f28 <rt_object_get_type>
   13f34:	00050793          	mv	a5,a0
   13f38:	00078713          	mv	a4,a5
   13f3c:	00100793          	li	a5,1
   13f40:	00f70e63          	beq	a4,a5,13f5c <rt_thread_resume+0x68>
   13f44:	33b00613          	li	a2,827
   13f48:	0000c597          	auipc	a1,0xc
   13f4c:	44858593          	addi	a1,a1,1096 # 20390 <__FUNCTION__.2569>
   13f50:	0000c517          	auipc	a0,0xc
   13f54:	27c50513          	addi	a0,a0,636 # 201cc <__FUNCTION__.2750+0x98>
   13f58:	8ecff0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
   13f5c:	fec42783          	lw	a5,-20(s0)
   13f60:	0347c783          	lbu	a5,52(a5)
   13f64:	0077f713          	andi	a4,a5,7
   13f68:	00200793          	li	a5,2
   13f6c:	00f70663          	beq	a4,a5,13f78 <rt_thread_resume+0x84>
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
                                       thread->stat));

        return -RT_ERROR;
   13f70:	fff00793          	li	a5,-1
   13f74:	05c0006f          	j	13fd0 <rt_thread_resume+0xdc>
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   13f78:	6d1070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   13f7c:	00050493          	mv	s1,a0

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
   13f80:	fec42783          	lw	a5,-20(s0)
   13f84:	01478793          	addi	a5,a5,20
   13f88:	00078513          	mv	a0,a5
   13f8c:	978ff0ef          	jal	ra,13104 <rt_list_remove>

    rt_timer_stop(&thread->thread_timer);
   13f90:	fec42783          	lw	a5,-20(s0)
   13f94:	04c78793          	addi	a5,a5,76
   13f98:	00078513          	mv	a0,a5
   13f9c:	150070ef          	jal	ra,1b0ec <rt_timer_stop>

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
   13fa0:	fec42503          	lw	a0,-20(s0)
   13fa4:	15d040ef          	jal	ra,18900 <rt_schedule_insert_thread>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   13fa8:	00048513          	mv	a0,s1
   13fac:	6a5070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
   13fb0:	90c18793          	addi	a5,gp,-1780 # 2246c <rt_thread_resume_hook>
   13fb4:	0007a783          	lw	a5,0(a5)
   13fb8:	00078a63          	beqz	a5,13fcc <rt_thread_resume+0xd8>
   13fbc:	90c18793          	addi	a5,gp,-1780 # 2246c <rt_thread_resume_hook>
   13fc0:	0007a783          	lw	a5,0(a5)
   13fc4:	fec42503          	lw	a0,-20(s0)
   13fc8:	000780e7          	jalr	a5
    return RT_EOK;
   13fcc:	00000793          	li	a5,0
}
   13fd0:	00078513          	mv	a0,a5
   13fd4:	01c12083          	lw	ra,28(sp)
   13fd8:	01812403          	lw	s0,24(sp)
   13fdc:	01412483          	lw	s1,20(sp)
   13fe0:	02010113          	addi	sp,sp,32
   13fe4:	00008067          	ret

00013fe8 <rt_thread_timeout>:
 *          when thread is timeout to wait some resource.
 *
 * @param   parameter is the parameter of thread timeout function
 */
void rt_thread_timeout(void *parameter)
{
   13fe8:	fd010113          	addi	sp,sp,-48
   13fec:	02112623          	sw	ra,44(sp)
   13ff0:	02812423          	sw	s0,40(sp)
   13ff4:	02912223          	sw	s1,36(sp)
   13ff8:	03010413          	addi	s0,sp,48
   13ffc:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;
    register rt_base_t temp;

    thread = (struct rt_thread *)parameter;
   14000:	fdc42783          	lw	a5,-36(s0)
   14004:	fef42623          	sw	a5,-20(s0)

    /* thread check */
    RT_ASSERT(thread != RT_NULL);
   14008:	fec42783          	lw	a5,-20(s0)
   1400c:	00079e63          	bnez	a5,14028 <rt_thread_timeout+0x40>
   14010:	36800613          	li	a2,872
   14014:	0000c597          	auipc	a1,0xc
   14018:	39058593          	addi	a1,a1,912 # 203a4 <__FUNCTION__.2575>
   1401c:	0000c517          	auipc	a0,0xc
   14020:	14c50513          	addi	a0,a0,332 # 20168 <__FUNCTION__.2750+0x34>
   14024:	820ff0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
   14028:	fec42783          	lw	a5,-20(s0)
   1402c:	0347c783          	lbu	a5,52(a5)
   14030:	0077f713          	andi	a4,a5,7
   14034:	00200793          	li	a5,2
   14038:	00f70e63          	beq	a4,a5,14054 <rt_thread_timeout+0x6c>
   1403c:	36900613          	li	a2,873
   14040:	0000c597          	auipc	a1,0xc
   14044:	36458593          	addi	a1,a1,868 # 203a4 <__FUNCTION__.2575>
   14048:	0000c517          	auipc	a0,0xc
   1404c:	26050513          	addi	a0,a0,608 # 202a8 <__FUNCTION__.2750+0x174>
   14050:	ff5fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
   14054:	fec42503          	lw	a0,-20(s0)
   14058:	ed1fc0ef          	jal	ra,10f28 <rt_object_get_type>
   1405c:	00050793          	mv	a5,a0
   14060:	00078713          	mv	a4,a5
   14064:	00100793          	li	a5,1
   14068:	00f70e63          	beq	a4,a5,14084 <rt_thread_timeout+0x9c>
   1406c:	36a00613          	li	a2,874
   14070:	0000c597          	auipc	a1,0xc
   14074:	33458593          	addi	a1,a1,820 # 203a4 <__FUNCTION__.2575>
   14078:	0000c517          	auipc	a0,0xc
   1407c:	15450513          	addi	a0,a0,340 # 201cc <__FUNCTION__.2750+0x98>
   14080:	fc5fe0ef          	jal	ra,13044 <rt_assert_handler>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   14084:	5c5070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14088:	00050493          	mv	s1,a0

    /* set error number */
    thread->error = -RT_ETIMEOUT;
   1408c:	fec42783          	lw	a5,-20(s0)
   14090:	ffe00713          	li	a4,-2
   14094:	02e7a823          	sw	a4,48(a5)

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
   14098:	fec42783          	lw	a5,-20(s0)
   1409c:	01478793          	addi	a5,a5,20
   140a0:	00078513          	mv	a0,a5
   140a4:	860ff0ef          	jal	ra,13104 <rt_list_remove>

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
   140a8:	fec42503          	lw	a0,-20(s0)
   140ac:	055040ef          	jal	ra,18900 <rt_schedule_insert_thread>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   140b0:	00048513          	mv	a0,s1
   140b4:	59d070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* do schedule */
    rt_schedule();
   140b8:	5d0040ef          	jal	ra,18688 <rt_schedule>
}
   140bc:	00000013          	nop
   140c0:	02c12083          	lw	ra,44(sp)
   140c4:	02812403          	lw	s0,40(sp)
   140c8:	02412483          	lw	s1,36(sp)
   140cc:	03010113          	addi	sp,sp,48
   140d0:	00008067          	ret

000140d4 <rt_thread_find>:
 *
 * @return  If the return value is a rt_thread structure pointer, the function is successfully executed.
 *          If the return value is RT_NULL, it means this operation failed.
 */
rt_thread_t rt_thread_find(char *name)
{
   140d4:	fe010113          	addi	sp,sp,-32
   140d8:	00112e23          	sw	ra,28(sp)
   140dc:	00812c23          	sw	s0,24(sp)
   140e0:	02010413          	addi	s0,sp,32
   140e4:	fea42623          	sw	a0,-20(s0)
    return (rt_thread_t)rt_object_find(name, RT_Object_Class_Thread);
   140e8:	00100593          	li	a1,1
   140ec:	fec42503          	lw	a0,-20(s0)
   140f0:	e91fc0ef          	jal	ra,10f80 <rt_object_find>
   140f4:	00050793          	mv	a5,a0
}
   140f8:	00078513          	mv	a0,a5
   140fc:	01c12083          	lw	ra,28(sp)
   14100:	01812403          	lw	s0,24(sp)
   14104:	02010113          	addi	sp,sp,32
   14108:	00008067          	ret

0001410c <rt_list_init>:
{
   1410c:	fe010113          	addi	sp,sp,-32
   14110:	00812e23          	sw	s0,28(sp)
   14114:	02010413          	addi	s0,sp,32
   14118:	fea42623          	sw	a0,-20(s0)
    l->next = l->prev = l;
   1411c:	fec42783          	lw	a5,-20(s0)
   14120:	fec42703          	lw	a4,-20(s0)
   14124:	00e7a223          	sw	a4,4(a5)
   14128:	fec42783          	lw	a5,-20(s0)
   1412c:	0047a703          	lw	a4,4(a5)
   14130:	fec42783          	lw	a5,-20(s0)
   14134:	00e7a023          	sw	a4,0(a5)
}
   14138:	00000013          	nop
   1413c:	01c12403          	lw	s0,28(sp)
   14140:	02010113          	addi	sp,sp,32
   14144:	00008067          	ret

00014148 <rt_list_insert_before>:
{
   14148:	fe010113          	addi	sp,sp,-32
   1414c:	00812e23          	sw	s0,28(sp)
   14150:	02010413          	addi	s0,sp,32
   14154:	fea42623          	sw	a0,-20(s0)
   14158:	feb42423          	sw	a1,-24(s0)
    l->prev->next = n;
   1415c:	fec42783          	lw	a5,-20(s0)
   14160:	0047a783          	lw	a5,4(a5)
   14164:	fe842703          	lw	a4,-24(s0)
   14168:	00e7a023          	sw	a4,0(a5)
    n->prev = l->prev;
   1416c:	fec42783          	lw	a5,-20(s0)
   14170:	0047a703          	lw	a4,4(a5)
   14174:	fe842783          	lw	a5,-24(s0)
   14178:	00e7a223          	sw	a4,4(a5)
    l->prev = n;
   1417c:	fec42783          	lw	a5,-20(s0)
   14180:	fe842703          	lw	a4,-24(s0)
   14184:	00e7a223          	sw	a4,4(a5)
    n->next = l;
   14188:	fe842783          	lw	a5,-24(s0)
   1418c:	fec42703          	lw	a4,-20(s0)
   14190:	00e7a023          	sw	a4,0(a5)
}
   14194:	00000013          	nop
   14198:	01c12403          	lw	s0,28(sp)
   1419c:	02010113          	addi	sp,sp,32
   141a0:	00008067          	ret

000141a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
   141a4:	fe010113          	addi	sp,sp,-32
   141a8:	00812e23          	sw	s0,28(sp)
   141ac:	02010413          	addi	s0,sp,32
   141b0:	fea42623          	sw	a0,-20(s0)
    return l->next == l;
   141b4:	fec42783          	lw	a5,-20(s0)
   141b8:	0007a783          	lw	a5,0(a5)
   141bc:	fec42703          	lw	a4,-20(s0)
   141c0:	40f707b3          	sub	a5,a4,a5
   141c4:	0017b793          	seqz	a5,a5
   141c8:	0ff7f793          	andi	a5,a5,255
}
   141cc:	00078513          	mv	a0,a5
   141d0:	01c12403          	lw	s0,28(sp)
   141d4:	02010113          	addi	sp,sp,32
   141d8:	00008067          	ret

000141dc <_ipc_object_init>:
 *           When the return value is any other values, it means the initialization failed.
 *
 * @warning  This function can be called from all IPC initialization and creation.
 */
rt_inline rt_err_t _ipc_object_init(struct rt_ipc_object *ipc)
{
   141dc:	fe010113          	addi	sp,sp,-32
   141e0:	00112e23          	sw	ra,28(sp)
   141e4:	00812c23          	sw	s0,24(sp)
   141e8:	02010413          	addi	s0,sp,32
   141ec:	fea42623          	sw	a0,-20(s0)
    /* initialize ipc object */
    rt_list_init(&(ipc->suspend_thread));
   141f0:	fec42783          	lw	a5,-20(s0)
   141f4:	01478793          	addi	a5,a5,20
   141f8:	00078513          	mv	a0,a5
   141fc:	f11ff0ef          	jal	ra,1410c <rt_list_init>

    return RT_EOK;
   14200:	00000793          	li	a5,0
}
   14204:	00078513          	mv	a0,a5
   14208:	01c12083          	lw	ra,28(sp)
   1420c:	01812403          	lw	s0,24(sp)
   14210:	02010113          	addi	sp,sp,32
   14214:	00008067          	ret

00014218 <_ipc_list_suspend>:
 *           rt_mb_recv(),   rt_mq_recv(),     rt_mq_send_wait()
 */
rt_inline rt_err_t _ipc_list_suspend(rt_list_t        *list,
                                     struct rt_thread *thread,
                                     rt_uint8_t        flag)
{
   14218:	fd010113          	addi	sp,sp,-48
   1421c:	02112623          	sw	ra,44(sp)
   14220:	02812423          	sw	s0,40(sp)
   14224:	03010413          	addi	s0,sp,48
   14228:	fca42e23          	sw	a0,-36(s0)
   1422c:	fcb42c23          	sw	a1,-40(s0)
   14230:	00060793          	mv	a5,a2
   14234:	fcf40ba3          	sb	a5,-41(s0)
    /* suspend thread */
    rt_thread_suspend(thread);
   14238:	fd842503          	lw	a0,-40(s0)
   1423c:	b61ff0ef          	jal	ra,13d9c <rt_thread_suspend>

    switch (flag)
   14240:	fd744783          	lbu	a5,-41(s0)
   14244:	00078863          	beqz	a5,14254 <_ipc_list_suspend+0x3c>
   14248:	00100713          	li	a4,1
   1424c:	02e78063          	beq	a5,a4,1426c <_ipc_list_suspend+0x54>
   14250:	0a80006f          	j	142f8 <_ipc_list_suspend+0xe0>
    {
    case RT_IPC_FLAG_FIFO:
        rt_list_insert_before(list, &(thread->tlist));
   14254:	fd842783          	lw	a5,-40(s0)
   14258:	01478793          	addi	a5,a5,20
   1425c:	00078593          	mv	a1,a5
   14260:	fdc42503          	lw	a0,-36(s0)
   14264:	ee5ff0ef          	jal	ra,14148 <rt_list_insert_before>
        break; /* RT_IPC_FLAG_FIFO */
   14268:	0b00006f          	j	14318 <_ipc_list_suspend+0x100>
        {
            struct rt_list_node *n;
            struct rt_thread *sthread;

            /* find a suitable position */
            for (n = list->next; n != list; n = n->next)
   1426c:	fdc42783          	lw	a5,-36(s0)
   14270:	0007a783          	lw	a5,0(a5)
   14274:	fef42623          	sw	a5,-20(s0)
   14278:	0500006f          	j	142c8 <_ipc_list_suspend+0xb0>
            {
                sthread = rt_list_entry(n, struct rt_thread, tlist);
   1427c:	fec42783          	lw	a5,-20(s0)
   14280:	fec78793          	addi	a5,a5,-20
   14284:	fef42423          	sw	a5,-24(s0)

                /* find out */
                if (thread->current_priority < sthread->current_priority)
   14288:	fd842783          	lw	a5,-40(s0)
   1428c:	0357c703          	lbu	a4,53(a5)
   14290:	fe842783          	lw	a5,-24(s0)
   14294:	0357c783          	lbu	a5,53(a5)
   14298:	02f77263          	bgeu	a4,a5,142bc <_ipc_list_suspend+0xa4>
                {
                    /* insert this thread before the sthread */
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
   1429c:	fe842783          	lw	a5,-24(s0)
   142a0:	01478713          	addi	a4,a5,20
   142a4:	fd842783          	lw	a5,-40(s0)
   142a8:	01478793          	addi	a5,a5,20
   142ac:	00078593          	mv	a1,a5
   142b0:	00070513          	mv	a0,a4
   142b4:	e95ff0ef          	jal	ra,14148 <rt_list_insert_before>
                    break;
   142b8:	01c0006f          	j	142d4 <_ipc_list_suspend+0xbc>
            for (n = list->next; n != list; n = n->next)
   142bc:	fec42783          	lw	a5,-20(s0)
   142c0:	0007a783          	lw	a5,0(a5)
   142c4:	fef42623          	sw	a5,-20(s0)
   142c8:	fec42703          	lw	a4,-20(s0)
   142cc:	fdc42783          	lw	a5,-36(s0)
   142d0:	faf716e3          	bne	a4,a5,1427c <_ipc_list_suspend+0x64>

            /*
             * not found a suitable position,
             * append to the end of suspend_thread list
             */
            if (n == list)
   142d4:	fec42703          	lw	a4,-20(s0)
   142d8:	fdc42783          	lw	a5,-36(s0)
   142dc:	02f71c63          	bne	a4,a5,14314 <_ipc_list_suspend+0xfc>
                rt_list_insert_before(list, &(thread->tlist));
   142e0:	fd842783          	lw	a5,-40(s0)
   142e4:	01478793          	addi	a5,a5,20
   142e8:	00078593          	mv	a1,a5
   142ec:	fdc42503          	lw	a0,-36(s0)
   142f0:	e59ff0ef          	jal	ra,14148 <rt_list_insert_before>
        }
        break;/* RT_IPC_FLAG_PRIO */
   142f4:	0200006f          	j	14314 <_ipc_list_suspend+0xfc>

    default:
        RT_ASSERT(0);
   142f8:	09700613          	li	a2,151
   142fc:	0000c597          	auipc	a1,0xc
   14300:	5b858593          	addi	a1,a1,1464 # 208b4 <__FUNCTION__.2458>
   14304:	0000c517          	auipc	a0,0xc
   14308:	0b450513          	addi	a0,a0,180 # 203b8 <__FUNCTION__.2575+0x14>
   1430c:	d39fe0ef          	jal	ra,13044 <rt_assert_handler>
        break;
   14310:	0080006f          	j	14318 <_ipc_list_suspend+0x100>
        break;/* RT_IPC_FLAG_PRIO */
   14314:	00000013          	nop
    }

    return RT_EOK;
   14318:	00000793          	li	a5,0
}
   1431c:	00078513          	mv	a0,a5
   14320:	02c12083          	lw	ra,44(sp)
   14324:	02812403          	lw	s0,40(sp)
   14328:	03010113          	addi	sp,sp,48
   1432c:	00008067          	ret

00014330 <_ipc_list_resume>:
 * @warning  This function is generally called by the following functions:
 *           rt_sem_release(),    rt_mutex_release(),    rt_mb_send_wait(),    rt_mq_send_wait(),
 *           rt_mb_urgent(),      rt_mb_recv(),          rt_mq_urgent(),       rt_mq_recv(),
 */
rt_inline rt_err_t _ipc_list_resume(rt_list_t *list)
{
   14330:	fd010113          	addi	sp,sp,-48
   14334:	02112623          	sw	ra,44(sp)
   14338:	02812423          	sw	s0,40(sp)
   1433c:	03010413          	addi	s0,sp,48
   14340:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;

    /* get thread entry */
    thread = rt_list_entry(list->next, struct rt_thread, tlist);
   14344:	fdc42783          	lw	a5,-36(s0)
   14348:	0007a783          	lw	a5,0(a5)
   1434c:	fec78793          	addi	a5,a5,-20
   14350:	fef42623          	sw	a5,-20(s0)

    RT_DEBUG_LOG(RT_DEBUG_IPC, ("resume thread:%s\n", thread->name));

    /* resume it */
    rt_thread_resume(thread);
   14354:	fec42503          	lw	a0,-20(s0)
   14358:	b9dff0ef          	jal	ra,13ef4 <rt_thread_resume>

    return RT_EOK;
   1435c:	00000793          	li	a5,0
}
   14360:	00078513          	mv	a0,a5
   14364:	02c12083          	lw	ra,44(sp)
   14368:	02812403          	lw	s0,40(sp)
   1436c:	03010113          	addi	sp,sp,48
   14370:	00008067          	ret

00014374 <_ipc_list_resume_all>:
 * @return   Return the operation status. When the return value is RT_EOK, the function is successfully executed.
 *           When the return value is any other values, it means this operation failed.
 *
 */
rt_inline rt_err_t _ipc_list_resume_all(rt_list_t *list)
{
   14374:	fd010113          	addi	sp,sp,-48
   14378:	02112623          	sw	ra,44(sp)
   1437c:	02812423          	sw	s0,40(sp)
   14380:	02912223          	sw	s1,36(sp)
   14384:	03010413          	addi	s0,sp,48
   14388:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;
    register rt_ubase_t temp;

    /* wakeup all suspended threads */
    while (!rt_list_isempty(list))
   1438c:	0400006f          	j	143cc <_ipc_list_resume_all+0x58>
    {
        /* disable interrupt */
        temp = rt_hw_interrupt_disable();
   14390:	2b9070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14394:	00050793          	mv	a5,a0
   14398:	00078493          	mv	s1,a5

        /* get next suspended thread */
        thread = rt_list_entry(list->next, struct rt_thread, tlist);
   1439c:	fdc42783          	lw	a5,-36(s0)
   143a0:	0007a783          	lw	a5,0(a5)
   143a4:	fec78793          	addi	a5,a5,-20
   143a8:	fef42623          	sw	a5,-20(s0)
        /* set error code to RT_ERROR */
        thread->error = -RT_ERROR;
   143ac:	fec42783          	lw	a5,-20(s0)
   143b0:	fff00713          	li	a4,-1
   143b4:	02e7a823          	sw	a4,48(a5)
        /*
         * resume thread
         * In rt_thread_resume function, it will remove current thread from
         * suspended list
         */
        rt_thread_resume(thread);
   143b8:	fec42503          	lw	a0,-20(s0)
   143bc:	b39ff0ef          	jal	ra,13ef4 <rt_thread_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   143c0:	00048793          	mv	a5,s1
   143c4:	00078513          	mv	a0,a5
   143c8:	289070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
    while (!rt_list_isempty(list))
   143cc:	fdc42503          	lw	a0,-36(s0)
   143d0:	dd5ff0ef          	jal	ra,141a4 <rt_list_isempty>
   143d4:	00050793          	mv	a5,a0
   143d8:	fa078ce3          	beqz	a5,14390 <_ipc_list_resume_all+0x1c>
    }

    return RT_EOK;
   143dc:	00000793          	li	a5,0
}
   143e0:	00078513          	mv	a0,a5
   143e4:	02c12083          	lw	ra,44(sp)
   143e8:	02812403          	lw	s0,40(sp)
   143ec:	02412483          	lw	s1,36(sp)
   143f0:	03010113          	addi	sp,sp,48
   143f4:	00008067          	ret

000143f8 <rt_sem_init>:
 */
rt_err_t rt_sem_init(rt_sem_t    sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
   143f8:	fe010113          	addi	sp,sp,-32
   143fc:	00112e23          	sw	ra,28(sp)
   14400:	00812c23          	sw	s0,24(sp)
   14404:	02010413          	addi	s0,sp,32
   14408:	fea42623          	sw	a0,-20(s0)
   1440c:	feb42423          	sw	a1,-24(s0)
   14410:	fec42223          	sw	a2,-28(s0)
   14414:	00068793          	mv	a5,a3
   14418:	fef401a3          	sb	a5,-29(s0)
    RT_ASSERT(sem != RT_NULL);
   1441c:	fec42783          	lw	a5,-20(s0)
   14420:	00079e63          	bnez	a5,1443c <rt_sem_init+0x44>
   14424:	12000613          	li	a2,288
   14428:	0000c597          	auipc	a1,0xc
   1442c:	44458593          	addi	a1,a1,1092 # 2086c <__FUNCTION__.2477>
   14430:	0000c517          	auipc	a0,0xc
   14434:	f8c50513          	addi	a0,a0,-116 # 203bc <__FUNCTION__.2575+0x18>
   14438:	c0dfe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(value < 0x10000U);
   1443c:	fe442703          	lw	a4,-28(s0)
   14440:	000107b7          	lui	a5,0x10
   14444:	00f76e63          	bltu	a4,a5,14460 <rt_sem_init+0x68>
   14448:	12100613          	li	a2,289
   1444c:	0000c597          	auipc	a1,0xc
   14450:	42058593          	addi	a1,a1,1056 # 2086c <__FUNCTION__.2477>
   14454:	0000c517          	auipc	a0,0xc
   14458:	f7850513          	addi	a0,a0,-136 # 203cc <__FUNCTION__.2575+0x28>
   1445c:	be9fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   14460:	fe344783          	lbu	a5,-29(s0)
   14464:	02078463          	beqz	a5,1448c <rt_sem_init+0x94>
   14468:	fe344703          	lbu	a4,-29(s0)
   1446c:	00100793          	li	a5,1
   14470:	00f70e63          	beq	a4,a5,1448c <rt_sem_init+0x94>
   14474:	12200613          	li	a2,290
   14478:	0000c597          	auipc	a1,0xc
   1447c:	3f458593          	addi	a1,a1,1012 # 2086c <__FUNCTION__.2477>
   14480:	0000c517          	auipc	a0,0xc
   14484:	f6050513          	addi	a0,a0,-160 # 203e0 <__FUNCTION__.2575+0x3c>
   14488:	bbdfe0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize object */
    rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
   1448c:	fec42783          	lw	a5,-20(s0)
   14490:	fe842603          	lw	a2,-24(s0)
   14494:	00200593          	li	a1,2
   14498:	00078513          	mv	a0,a5
   1449c:	e24fc0ef          	jal	ra,10ac0 <rt_object_init>

    /* initialize ipc object */
    _ipc_object_init(&(sem->parent));
   144a0:	fec42783          	lw	a5,-20(s0)
   144a4:	00078513          	mv	a0,a5
   144a8:	d35ff0ef          	jal	ra,141dc <_ipc_object_init>

    /* set initial value */
    sem->value = (rt_uint16_t)value;
   144ac:	fe442783          	lw	a5,-28(s0)
   144b0:	01079713          	slli	a4,a5,0x10
   144b4:	01075713          	srli	a4,a4,0x10
   144b8:	fec42783          	lw	a5,-20(s0)
   144bc:	00e79e23          	sh	a4,28(a5) # 1001c <_bonfire_init+0x1c>

    /* set parent */
    sem->parent.parent.flag = flag;
   144c0:	fec42783          	lw	a5,-20(s0)
   144c4:	fe344703          	lbu	a4,-29(s0)
   144c8:	00e784a3          	sb	a4,9(a5)

    return RT_EOK;
   144cc:	00000793          	li	a5,0
}
   144d0:	00078513          	mv	a0,a5
   144d4:	01c12083          	lw	ra,28(sp)
   144d8:	01812403          	lw	s0,24(sp)
   144dc:	02010113          	addi	sp,sp,32
   144e0:	00008067          	ret

000144e4 <rt_sem_detach>:
 * @warning  This function can ONLY detach a static semaphore initialized by the rt_sem_init() function.
 *           If the semaphore is created by the rt_sem_create() function, you MUST NOT USE this function to detach it,
 *           ONLY USE the rt_sem_delete() function to complete the deletion.
 */
rt_err_t rt_sem_detach(rt_sem_t sem)
{
   144e4:	fe010113          	addi	sp,sp,-32
   144e8:	00112e23          	sw	ra,28(sp)
   144ec:	00812c23          	sw	s0,24(sp)
   144f0:	02010413          	addi	s0,sp,32
   144f4:	fea42623          	sw	a0,-20(s0)
    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
   144f8:	fec42783          	lw	a5,-20(s0)
   144fc:	00079e63          	bnez	a5,14518 <rt_sem_detach+0x34>
   14500:	14a00613          	li	a2,330
   14504:	0000c597          	auipc	a1,0xc
   14508:	37458593          	addi	a1,a1,884 # 20878 <__FUNCTION__.2481>
   1450c:	0000c517          	auipc	a0,0xc
   14510:	eb050513          	addi	a0,a0,-336 # 203bc <__FUNCTION__.2575+0x18>
   14514:	b31fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
   14518:	fec42783          	lw	a5,-20(s0)
   1451c:	00078513          	mv	a0,a5
   14520:	a09fc0ef          	jal	ra,10f28 <rt_object_get_type>
   14524:	00050793          	mv	a5,a0
   14528:	00078713          	mv	a4,a5
   1452c:	00200793          	li	a5,2
   14530:	00f70e63          	beq	a4,a5,1454c <rt_sem_detach+0x68>
   14534:	14b00613          	li	a2,331
   14538:	0000c597          	auipc	a1,0xc
   1453c:	34058593          	addi	a1,a1,832 # 20878 <__FUNCTION__.2481>
   14540:	0000c517          	auipc	a0,0xc
   14544:	edc50513          	addi	a0,a0,-292 # 2041c <__FUNCTION__.2575+0x78>
   14548:	afdfe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&sem->parent.parent));
   1454c:	fec42783          	lw	a5,-20(s0)
   14550:	00078513          	mv	a0,a5
   14554:	96dfc0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   14558:	00050793          	mv	a5,a0
   1455c:	00079e63          	bnez	a5,14578 <rt_sem_detach+0x94>
   14560:	14c00613          	li	a2,332
   14564:	0000c597          	auipc	a1,0xc
   14568:	31458593          	addi	a1,a1,788 # 20878 <__FUNCTION__.2481>
   1456c:	0000c517          	auipc	a0,0xc
   14570:	ef850513          	addi	a0,a0,-264 # 20464 <__FUNCTION__.2575+0xc0>
   14574:	ad1fe0ef          	jal	ra,13044 <rt_assert_handler>

    /* wakeup all suspended threads */
    _ipc_list_resume_all(&(sem->parent.suspend_thread));
   14578:	fec42783          	lw	a5,-20(s0)
   1457c:	01478793          	addi	a5,a5,20
   14580:	00078513          	mv	a0,a5
   14584:	df1ff0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* detach semaphore object */
    rt_object_detach(&(sem->parent.parent));
   14588:	fec42783          	lw	a5,-20(s0)
   1458c:	00078513          	mv	a0,a5
   14590:	e78fc0ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   14594:	00000793          	li	a5,0
}
   14598:	00078513          	mv	a0,a5
   1459c:	01c12083          	lw	ra,28(sp)
   145a0:	01812403          	lw	s0,24(sp)
   145a4:	02010113          	addi	sp,sp,32
   145a8:	00008067          	ret

000145ac <rt_sem_create>:
 * @return   Return a pointer to the semaphore object. When the return value is RT_NULL, it means the creation failed.
 *
 * @warning  This function can NOT be called in interrupt context. You can use macor RT_DEBUG_NOT_IN_INTERRUPT to check it.
 */
rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
   145ac:	fd010113          	addi	sp,sp,-48
   145b0:	02112623          	sw	ra,44(sp)
   145b4:	02812423          	sw	s0,40(sp)
   145b8:	03010413          	addi	s0,sp,48
   145bc:	fca42e23          	sw	a0,-36(s0)
   145c0:	fcb42c23          	sw	a1,-40(s0)
   145c4:	00060793          	mv	a5,a2
   145c8:	fcf40ba3          	sb	a5,-41(s0)
    rt_sem_t sem;

    RT_ASSERT(value < 0x10000U);
   145cc:	fd842703          	lw	a4,-40(s0)
   145d0:	000107b7          	lui	a5,0x10
   145d4:	00f76e63          	bltu	a4,a5,145f0 <rt_sem_create+0x44>
   145d8:	17d00613          	li	a2,381
   145dc:	0000c597          	auipc	a1,0xc
   145e0:	2ac58593          	addi	a1,a1,684 # 20888 <__FUNCTION__.2488>
   145e4:	0000c517          	auipc	a0,0xc
   145e8:	de850513          	addi	a0,a0,-536 # 203cc <__FUNCTION__.2575+0x28>
   145ec:	a59fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   145f0:	fd744783          	lbu	a5,-41(s0)
   145f4:	02078463          	beqz	a5,1461c <rt_sem_create+0x70>
   145f8:	fd744703          	lbu	a4,-41(s0)
   145fc:	00100793          	li	a5,1
   14600:	00f70e63          	beq	a4,a5,1461c <rt_sem_create+0x70>
   14604:	17e00613          	li	a2,382
   14608:	0000c597          	auipc	a1,0xc
   1460c:	28058593          	addi	a1,a1,640 # 20888 <__FUNCTION__.2488>
   14610:	0000c517          	auipc	a0,0xc
   14614:	dd050513          	addi	a0,a0,-560 # 203e0 <__FUNCTION__.2575+0x3c>
   14618:	a2dfe0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   1461c:	02d070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14620:	fea42623          	sw	a0,-20(s0)
   14624:	6f4040ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   14628:	00050793          	mv	a5,a0
   1462c:	02078863          	beqz	a5,1465c <rt_sem_create+0xb0>
   14630:	0000c597          	auipc	a1,0xc
   14634:	25858593          	addi	a1,a1,600 # 20888 <__FUNCTION__.2488>
   14638:	0000c517          	auipc	a0,0xc
   1463c:	e5c50513          	addi	a0,a0,-420 # 20494 <__FUNCTION__.2575+0xf0>
   14640:	ac0fe0ef          	jal	ra,12900 <rt_kprintf>
   14644:	18000613          	li	a2,384
   14648:	0000c597          	auipc	a1,0xc
   1464c:	24058593          	addi	a1,a1,576 # 20888 <__FUNCTION__.2488>
   14650:	0000c517          	auipc	a0,0xc
   14654:	d6850513          	addi	a0,a0,-664 # 203b8 <__FUNCTION__.2575+0x14>
   14658:	9edfe0ef          	jal	ra,13044 <rt_assert_handler>
   1465c:	fec42503          	lw	a0,-20(s0)
   14660:	7f0070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* allocate object */
    sem = (rt_sem_t)rt_object_allocate(RT_Object_Class_Semaphore, name);
   14664:	fdc42583          	lw	a1,-36(s0)
   14668:	00200513          	li	a0,2
   1466c:	e30fc0ef          	jal	ra,10c9c <rt_object_allocate>
   14670:	fea42423          	sw	a0,-24(s0)
    if (sem == RT_NULL)
   14674:	fe842783          	lw	a5,-24(s0)
   14678:	00079663          	bnez	a5,14684 <rt_sem_create+0xd8>
        return sem;
   1467c:	fe842783          	lw	a5,-24(s0)
   14680:	0340006f          	j	146b4 <rt_sem_create+0x108>

    /* initialize ipc object */
    _ipc_object_init(&(sem->parent));
   14684:	fe842783          	lw	a5,-24(s0)
   14688:	00078513          	mv	a0,a5
   1468c:	b51ff0ef          	jal	ra,141dc <_ipc_object_init>

    /* set initial value */
    sem->value = value;
   14690:	fd842783          	lw	a5,-40(s0)
   14694:	01079713          	slli	a4,a5,0x10
   14698:	01075713          	srli	a4,a4,0x10
   1469c:	fe842783          	lw	a5,-24(s0)
   146a0:	00e79e23          	sh	a4,28(a5) # 1001c <_bonfire_init+0x1c>

    /* set parent */
    sem->parent.parent.flag = flag;
   146a4:	fe842783          	lw	a5,-24(s0)
   146a8:	fd744703          	lbu	a4,-41(s0)
   146ac:	00e784a3          	sb	a4,9(a5)

    return sem;
   146b0:	fe842783          	lw	a5,-24(s0)
}
   146b4:	00078513          	mv	a0,a5
   146b8:	02c12083          	lw	ra,44(sp)
   146bc:	02812403          	lw	s0,40(sp)
   146c0:	03010113          	addi	sp,sp,48
   146c4:	00008067          	ret

000146c8 <rt_sem_delete>:
 * @warning  This function can ONLY delete a semaphore initialized by the rt_sem_create() function.
 *           If the semaphore is initialized by the rt_sem_init() function, you MUST NOT USE this function to delete it,
 *           ONLY USE the rt_sem_detach() function to complete the detachment.
 */
rt_err_t rt_sem_delete(rt_sem_t sem)
{
   146c8:	fd010113          	addi	sp,sp,-48
   146cc:	02112623          	sw	ra,44(sp)
   146d0:	02812423          	sw	s0,40(sp)
   146d4:	03010413          	addi	s0,sp,48
   146d8:	fca42e23          	sw	a0,-36(s0)
    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
   146dc:	fdc42783          	lw	a5,-36(s0)
   146e0:	00079e63          	bnez	a5,146fc <rt_sem_delete+0x34>
   146e4:	1aa00613          	li	a2,426
   146e8:	0000c597          	auipc	a1,0xc
   146ec:	1b058593          	addi	a1,a1,432 # 20898 <__FUNCTION__.2493>
   146f0:	0000c517          	auipc	a0,0xc
   146f4:	ccc50513          	addi	a0,a0,-820 # 203bc <__FUNCTION__.2575+0x18>
   146f8:	94dfe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
   146fc:	fdc42783          	lw	a5,-36(s0)
   14700:	00078513          	mv	a0,a5
   14704:	825fc0ef          	jal	ra,10f28 <rt_object_get_type>
   14708:	00050793          	mv	a5,a0
   1470c:	00078713          	mv	a4,a5
   14710:	00200793          	li	a5,2
   14714:	00f70e63          	beq	a4,a5,14730 <rt_sem_delete+0x68>
   14718:	1ab00613          	li	a2,427
   1471c:	0000c597          	auipc	a1,0xc
   14720:	17c58593          	addi	a1,a1,380 # 20898 <__FUNCTION__.2493>
   14724:	0000c517          	auipc	a0,0xc
   14728:	cf850513          	addi	a0,a0,-776 # 2041c <__FUNCTION__.2575+0x78>
   1472c:	919fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&sem->parent.parent) == RT_FALSE);
   14730:	fdc42783          	lw	a5,-36(s0)
   14734:	00078513          	mv	a0,a5
   14738:	f88fc0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   1473c:	00050793          	mv	a5,a0
   14740:	00078e63          	beqz	a5,1475c <rt_sem_delete+0x94>
   14744:	1ac00613          	li	a2,428
   14748:	0000c597          	auipc	a1,0xc
   1474c:	15058593          	addi	a1,a1,336 # 20898 <__FUNCTION__.2493>
   14750:	0000c517          	auipc	a0,0xc
   14754:	d6c50513          	addi	a0,a0,-660 # 204bc <__FUNCTION__.2575+0x118>
   14758:	8edfe0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   1475c:	6ec070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14760:	fea42623          	sw	a0,-20(s0)
   14764:	5b4040ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   14768:	00050793          	mv	a5,a0
   1476c:	02078863          	beqz	a5,1479c <rt_sem_delete+0xd4>
   14770:	0000c597          	auipc	a1,0xc
   14774:	12858593          	addi	a1,a1,296 # 20898 <__FUNCTION__.2493>
   14778:	0000c517          	auipc	a0,0xc
   1477c:	d1c50513          	addi	a0,a0,-740 # 20494 <__FUNCTION__.2575+0xf0>
   14780:	980fe0ef          	jal	ra,12900 <rt_kprintf>
   14784:	1ae00613          	li	a2,430
   14788:	0000c597          	auipc	a1,0xc
   1478c:	11058593          	addi	a1,a1,272 # 20898 <__FUNCTION__.2493>
   14790:	0000c517          	auipc	a0,0xc
   14794:	c2850513          	addi	a0,a0,-984 # 203b8 <__FUNCTION__.2575+0x14>
   14798:	8adfe0ef          	jal	ra,13044 <rt_assert_handler>
   1479c:	fec42503          	lw	a0,-20(s0)
   147a0:	6b0070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* wakeup all suspended threads */
    _ipc_list_resume_all(&(sem->parent.suspend_thread));
   147a4:	fdc42783          	lw	a5,-36(s0)
   147a8:	01478793          	addi	a5,a5,20
   147ac:	00078513          	mv	a0,a5
   147b0:	bc5ff0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* delete semaphore object */
    rt_object_delete(&(sem->parent.parent));
   147b4:	fdc42783          	lw	a5,-36(s0)
   147b8:	00078513          	mv	a0,a5
   147bc:	e3cfc0ef          	jal	ra,10df8 <rt_object_delete>

    return RT_EOK;
   147c0:	00000793          	li	a5,0
}
   147c4:	00078513          	mv	a0,a5
   147c8:	02c12083          	lw	ra,44(sp)
   147cc:	02812403          	lw	s0,40(sp)
   147d0:	03010113          	addi	sp,sp,48
   147d4:	00008067          	ret

000147d8 <rt_sem_take>:
 *           If the return value is any other values, it means that the semaphore take failed.
 *
 * @warning  This function can ONLY be called in the thread context. It MUST NOT BE called in interrupt context.
 */
rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
   147d8:	fd010113          	addi	sp,sp,-48
   147dc:	02112623          	sw	ra,44(sp)
   147e0:	02812423          	sw	s0,40(sp)
   147e4:	02912223          	sw	s1,36(sp)
   147e8:	03010413          	addi	s0,sp,48
   147ec:	fca42e23          	sw	a0,-36(s0)
   147f0:	fcb42c23          	sw	a1,-40(s0)
    register rt_base_t temp;
    struct rt_thread *thread;

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
   147f4:	fdc42783          	lw	a5,-36(s0)
   147f8:	00079e63          	bnez	a5,14814 <rt_sem_take+0x3c>
   147fc:	1d900613          	li	a2,473
   14800:	0000c597          	auipc	a1,0xc
   14804:	0a858593          	addi	a1,a1,168 # 208a8 <__FUNCTION__.2501>
   14808:	0000c517          	auipc	a0,0xc
   1480c:	bb450513          	addi	a0,a0,-1100 # 203bc <__FUNCTION__.2575+0x18>
   14810:	835fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
   14814:	fdc42783          	lw	a5,-36(s0)
   14818:	00078513          	mv	a0,a5
   1481c:	f0cfc0ef          	jal	ra,10f28 <rt_object_get_type>
   14820:	00050793          	mv	a5,a0
   14824:	00078713          	mv	a4,a5
   14828:	00200793          	li	a5,2
   1482c:	00f70e63          	beq	a4,a5,14848 <rt_sem_take+0x70>
   14830:	1da00613          	li	a2,474
   14834:	0000c597          	auipc	a1,0xc
   14838:	07458593          	addi	a1,a1,116 # 208a8 <__FUNCTION__.2501>
   1483c:	0000c517          	auipc	a0,0xc
   14840:	be050513          	addi	a0,a0,-1056 # 2041c <__FUNCTION__.2575+0x78>
   14844:	801fe0ef          	jal	ra,13044 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));
   14848:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   1484c:	0007a783          	lw	a5,0(a5)
   14850:	00078c63          	beqz	a5,14868 <rt_sem_take+0x90>
   14854:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   14858:	0007a703          	lw	a4,0(a5)
   1485c:	fdc42783          	lw	a5,-36(s0)
   14860:	00078513          	mv	a0,a5
   14864:	000700e7          	jalr	a4

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   14868:	5e0070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1486c:	00050493          	mv	s1,a0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (sem->value > 0)
   14870:	fdc42783          	lw	a5,-36(s0)
   14874:	01c7d783          	lhu	a5,28(a5)
   14878:	02078663          	beqz	a5,148a4 <rt_sem_take+0xcc>
    {
        /* semaphore is available */
        sem->value --;
   1487c:	fdc42783          	lw	a5,-36(s0)
   14880:	01c7d783          	lhu	a5,28(a5)
   14884:	fff78793          	addi	a5,a5,-1
   14888:	01079713          	slli	a4,a5,0x10
   1488c:	01075713          	srli	a4,a4,0x10
   14890:	fdc42783          	lw	a5,-36(s0)
   14894:	00e79e23          	sh	a4,28(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   14898:	00048513          	mv	a0,s1
   1489c:	5b4070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   148a0:	1340006f          	j	149d4 <rt_sem_take+0x1fc>
    }
    else
    {
        /* no waiting, return with timeout */
        if (time == 0)
   148a4:	fd842783          	lw	a5,-40(s0)
   148a8:	00079a63          	bnez	a5,148bc <rt_sem_take+0xe4>
        {
            rt_hw_interrupt_enable(temp);
   148ac:	00048513          	mv	a0,s1
   148b0:	5a0070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            return -RT_ETIMEOUT;
   148b4:	ffe00793          	li	a5,-2
   148b8:	1400006f          	j	149f8 <rt_sem_take+0x220>
        }
        else
        {
            /* current context checking */
            RT_DEBUG_IN_THREAD_CONTEXT;
   148bc:	58c070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   148c0:	fea42623          	sw	a0,-20(s0)
   148c4:	c0dfe0ef          	jal	ra,134d0 <rt_thread_self>
   148c8:	00050793          	mv	a5,a0
   148cc:	02079863          	bnez	a5,148fc <rt_sem_take+0x124>
   148d0:	0000c597          	auipc	a1,0xc
   148d4:	fd858593          	addi	a1,a1,-40 # 208a8 <__FUNCTION__.2501>
   148d8:	0000c517          	auipc	a0,0xc
   148dc:	c2050513          	addi	a0,a0,-992 # 204f8 <__FUNCTION__.2575+0x154>
   148e0:	820fe0ef          	jal	ra,12900 <rt_kprintf>
   148e4:	1fa00613          	li	a2,506
   148e8:	0000c597          	auipc	a1,0xc
   148ec:	fc058593          	addi	a1,a1,-64 # 208a8 <__FUNCTION__.2501>
   148f0:	0000c517          	auipc	a0,0xc
   148f4:	ac850513          	addi	a0,a0,-1336 # 203b8 <__FUNCTION__.2575+0x14>
   148f8:	f4cfe0ef          	jal	ra,13044 <rt_assert_handler>
   148fc:	54c070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14900:	fea42423          	sw	a0,-24(s0)
   14904:	414040ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   14908:	00050793          	mv	a5,a0
   1490c:	02078863          	beqz	a5,1493c <rt_sem_take+0x164>
   14910:	0000c597          	auipc	a1,0xc
   14914:	f9858593          	addi	a1,a1,-104 # 208a8 <__FUNCTION__.2501>
   14918:	0000c517          	auipc	a0,0xc
   1491c:	b7c50513          	addi	a0,a0,-1156 # 20494 <__FUNCTION__.2575+0xf0>
   14920:	fe1fd0ef          	jal	ra,12900 <rt_kprintf>
   14924:	1fa00613          	li	a2,506
   14928:	0000c597          	auipc	a1,0xc
   1492c:	f8058593          	addi	a1,a1,-128 # 208a8 <__FUNCTION__.2501>
   14930:	0000c517          	auipc	a0,0xc
   14934:	a8850513          	addi	a0,a0,-1400 # 203b8 <__FUNCTION__.2575+0x14>
   14938:	f0cfe0ef          	jal	ra,13044 <rt_assert_handler>
   1493c:	fe842503          	lw	a0,-24(s0)
   14940:	510070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   14944:	fec42503          	lw	a0,-20(s0)
   14948:	508070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            /* semaphore is unavailable, push to suspend list */
            /* get current thread */
            thread = rt_thread_self();
   1494c:	b85fe0ef          	jal	ra,134d0 <rt_thread_self>
   14950:	fea42223          	sw	a0,-28(s0)

            /* reset thread error number */
            thread->error = RT_EOK;
   14954:	fe442783          	lw	a5,-28(s0)
   14958:	0207a823          	sw	zero,48(a5)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
                                        thread->name));

            /* suspend thread */
            _ipc_list_suspend(&(sem->parent.suspend_thread),
   1495c:	fdc42783          	lw	a5,-36(s0)
   14960:	01478713          	addi	a4,a5,20
   14964:	fdc42783          	lw	a5,-36(s0)
   14968:	0097c783          	lbu	a5,9(a5)
   1496c:	00078613          	mv	a2,a5
   14970:	fe442583          	lw	a1,-28(s0)
   14974:	00070513          	mv	a0,a4
   14978:	8a1ff0ef          	jal	ra,14218 <_ipc_list_suspend>
                                thread,
                                sem->parent.parent.flag);

            /* has waiting time, start thread timer */
            if (time > 0)
   1497c:	fd842783          	lw	a5,-40(s0)
   14980:	02f05863          	blez	a5,149b0 <rt_sem_take+0x1d8>
            {
                RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n",
                                            thread->name));

                /* reset the timeout of thread timer and start it */
                rt_timer_control(&(thread->thread_timer),
   14984:	fe442783          	lw	a5,-28(s0)
   14988:	04c78793          	addi	a5,a5,76
   1498c:	fd840713          	addi	a4,s0,-40
   14990:	00070613          	mv	a2,a4
   14994:	00000593          	li	a1,0
   14998:	00078513          	mv	a0,a5
   1499c:	041060ef          	jal	ra,1b1dc <rt_timer_control>
                                 RT_TIMER_CTRL_SET_TIME,
                                 &time);
                rt_timer_start(&(thread->thread_timer));
   149a0:	fe442783          	lw	a5,-28(s0)
   149a4:	04c78793          	addi	a5,a5,76
   149a8:	00078513          	mv	a0,a5
   149ac:	39c060ef          	jal	ra,1ad48 <rt_timer_start>
            }

            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
   149b0:	00048513          	mv	a0,s1
   149b4:	49c070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
   149b8:	4d1030ef          	jal	ra,18688 <rt_schedule>

            if (thread->error != RT_EOK)
   149bc:	fe442783          	lw	a5,-28(s0)
   149c0:	0307a783          	lw	a5,48(a5)
   149c4:	00078863          	beqz	a5,149d4 <rt_sem_take+0x1fc>
            {
                return thread->error;
   149c8:	fe442783          	lw	a5,-28(s0)
   149cc:	0307a783          	lw	a5,48(a5)
   149d0:	0280006f          	j	149f8 <rt_sem_take+0x220>
            }
        }
    }

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));
   149d4:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   149d8:	0007a783          	lw	a5,0(a5)
   149dc:	00078c63          	beqz	a5,149f4 <rt_sem_take+0x21c>
   149e0:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   149e4:	0007a703          	lw	a4,0(a5)
   149e8:	fdc42783          	lw	a5,-36(s0)
   149ec:	00078513          	mv	a0,a5
   149f0:	000700e7          	jalr	a4

    return RT_EOK;
   149f4:	00000793          	li	a5,0
}
   149f8:	00078513          	mv	a0,a5
   149fc:	02c12083          	lw	ra,44(sp)
   14a00:	02812403          	lw	s0,40(sp)
   14a04:	02412483          	lw	s1,36(sp)
   14a08:	03010113          	addi	sp,sp,48
   14a0c:	00008067          	ret

00014a10 <rt_sem_trytake>:
 *
 * @return   Return the operation status. ONLY When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the semaphore take failed.
 */
rt_err_t rt_sem_trytake(rt_sem_t sem)
{
   14a10:	fe010113          	addi	sp,sp,-32
   14a14:	00112e23          	sw	ra,28(sp)
   14a18:	00812c23          	sw	s0,24(sp)
   14a1c:	02010413          	addi	s0,sp,32
   14a20:	fea42623          	sw	a0,-20(s0)
    return rt_sem_take(sem, RT_WAITING_NO);
   14a24:	00000593          	li	a1,0
   14a28:	fec42503          	lw	a0,-20(s0)
   14a2c:	dadff0ef          	jal	ra,147d8 <rt_sem_take>
   14a30:	00050793          	mv	a5,a0
}
   14a34:	00078513          	mv	a0,a5
   14a38:	01c12083          	lw	ra,28(sp)
   14a3c:	01812403          	lw	s0,24(sp)
   14a40:	02010113          	addi	sp,sp,32
   14a44:	00008067          	ret

00014a48 <rt_sem_release>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the semaphore release failed.
 */
rt_err_t rt_sem_release(rt_sem_t sem)
{
   14a48:	fe010113          	addi	sp,sp,-32
   14a4c:	00112e23          	sw	ra,28(sp)
   14a50:	00812c23          	sw	s0,24(sp)
   14a54:	00912a23          	sw	s1,20(sp)
   14a58:	01212823          	sw	s2,16(sp)
   14a5c:	02010413          	addi	s0,sp,32
   14a60:	fea42623          	sw	a0,-20(s0)
    register rt_base_t temp;
    register rt_bool_t need_schedule;

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
   14a64:	fec42783          	lw	a5,-20(s0)
   14a68:	00079e63          	bnez	a5,14a84 <rt_sem_release+0x3c>
   14a6c:	25300613          	li	a2,595
   14a70:	0000c597          	auipc	a1,0xc
   14a74:	e5858593          	addi	a1,a1,-424 # 208c8 <__FUNCTION__.2512>
   14a78:	0000c517          	auipc	a0,0xc
   14a7c:	94450513          	addi	a0,a0,-1724 # 203bc <__FUNCTION__.2575+0x18>
   14a80:	dc4fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
   14a84:	fec42783          	lw	a5,-20(s0)
   14a88:	00078513          	mv	a0,a5
   14a8c:	c9cfc0ef          	jal	ra,10f28 <rt_object_get_type>
   14a90:	00050793          	mv	a5,a0
   14a94:	00078713          	mv	a4,a5
   14a98:	00200793          	li	a5,2
   14a9c:	00f70e63          	beq	a4,a5,14ab8 <rt_sem_release+0x70>
   14aa0:	25400613          	li	a2,596
   14aa4:	0000c597          	auipc	a1,0xc
   14aa8:	e2458593          	addi	a1,a1,-476 # 208c8 <__FUNCTION__.2512>
   14aac:	0000c517          	auipc	a0,0xc
   14ab0:	97050513          	addi	a0,a0,-1680 # 2041c <__FUNCTION__.2575+0x78>
   14ab4:	d90fe0ef          	jal	ra,13044 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));
   14ab8:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   14abc:	0007a783          	lw	a5,0(a5)
   14ac0:	00078c63          	beqz	a5,14ad8 <rt_sem_release+0x90>
   14ac4:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   14ac8:	0007a703          	lw	a4,0(a5)
   14acc:	fec42783          	lw	a5,-20(s0)
   14ad0:	00078513          	mv	a0,a5
   14ad4:	000700e7          	jalr	a4

    need_schedule = RT_FALSE;
   14ad8:	00000493          	li	s1,0

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   14adc:	36c070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14ae0:	00050913          	mv	s2,a0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (!rt_list_isempty(&sem->parent.suspend_thread))
   14ae4:	fec42783          	lw	a5,-20(s0)
   14ae8:	01478793          	addi	a5,a5,20
   14aec:	00078513          	mv	a0,a5
   14af0:	eb4ff0ef          	jal	ra,141a4 <rt_list_isempty>
   14af4:	00050793          	mv	a5,a0
   14af8:	00079e63          	bnez	a5,14b14 <rt_sem_release+0xcc>
    {
        /* resume the suspended thread */
        _ipc_list_resume(&(sem->parent.suspend_thread));
   14afc:	fec42783          	lw	a5,-20(s0)
   14b00:	01478793          	addi	a5,a5,20
   14b04:	00078513          	mv	a0,a5
   14b08:	829ff0ef          	jal	ra,14330 <_ipc_list_resume>
        need_schedule = RT_TRUE;
   14b0c:	00100493          	li	s1,1
   14b10:	0480006f          	j	14b58 <rt_sem_release+0x110>
    }
    else
    {
        if(sem->value < RT_SEM_VALUE_MAX)
   14b14:	fec42783          	lw	a5,-20(s0)
   14b18:	01c7d703          	lhu	a4,28(a5)
   14b1c:	000107b7          	lui	a5,0x10
   14b20:	fff78793          	addi	a5,a5,-1 # ffff <__load-0x1>
   14b24:	02f70263          	beq	a4,a5,14b48 <rt_sem_release+0x100>
        {
            sem->value ++; /* increase value */
   14b28:	fec42783          	lw	a5,-20(s0)
   14b2c:	01c7d783          	lhu	a5,28(a5)
   14b30:	00178793          	addi	a5,a5,1
   14b34:	01079713          	slli	a4,a5,0x10
   14b38:	01075713          	srli	a4,a4,0x10
   14b3c:	fec42783          	lw	a5,-20(s0)
   14b40:	00e79e23          	sh	a4,28(a5)
   14b44:	0140006f          	j	14b58 <rt_sem_release+0x110>
        }
        else
        {
            rt_hw_interrupt_enable(temp); /* enable interrupt */
   14b48:	00090513          	mv	a0,s2
   14b4c:	304070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
            return -RT_EFULL; /* value overflowed */
   14b50:	ffd00793          	li	a5,-3
   14b54:	01c0006f          	j	14b70 <rt_sem_release+0x128>
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   14b58:	00090513          	mv	a0,s2
   14b5c:	2f4070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* resume a thread, re-schedule */
    if (need_schedule == RT_TRUE)
   14b60:	00100793          	li	a5,1
   14b64:	00f49463          	bne	s1,a5,14b6c <rt_sem_release+0x124>
        rt_schedule();
   14b68:	321030ef          	jal	ra,18688 <rt_schedule>

    return RT_EOK;
   14b6c:	00000793          	li	a5,0
}
   14b70:	00078513          	mv	a0,a5
   14b74:	01c12083          	lw	ra,28(sp)
   14b78:	01812403          	lw	s0,24(sp)
   14b7c:	01412483          	lw	s1,20(sp)
   14b80:	01012903          	lw	s2,16(sp)
   14b84:	02010113          	addi	sp,sp,32
   14b88:	00008067          	ret

00014b8c <rt_sem_control>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that this function failed to execute.
 */
rt_err_t rt_sem_control(rt_sem_t sem, int cmd, void *arg)
{
   14b8c:	fd010113          	addi	sp,sp,-48
   14b90:	02112623          	sw	ra,44(sp)
   14b94:	02812423          	sw	s0,40(sp)
   14b98:	03010413          	addi	s0,sp,48
   14b9c:	fca42e23          	sw	a0,-36(s0)
   14ba0:	fcb42c23          	sw	a1,-40(s0)
   14ba4:	fcc42a23          	sw	a2,-44(s0)
    rt_ubase_t level;

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
   14ba8:	fdc42783          	lw	a5,-36(s0)
   14bac:	00079e63          	bnez	a5,14bc8 <rt_sem_control+0x3c>
   14bb0:	29400613          	li	a2,660
   14bb4:	0000c597          	auipc	a1,0xc
   14bb8:	d2458593          	addi	a1,a1,-732 # 208d8 <__FUNCTION__.2519>
   14bbc:	0000c517          	auipc	a0,0xc
   14bc0:	80050513          	addi	a0,a0,-2048 # 203bc <__FUNCTION__.2575+0x18>
   14bc4:	c80fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
   14bc8:	fdc42783          	lw	a5,-36(s0)
   14bcc:	00078513          	mv	a0,a5
   14bd0:	b58fc0ef          	jal	ra,10f28 <rt_object_get_type>
   14bd4:	00050793          	mv	a5,a0
   14bd8:	00078713          	mv	a4,a5
   14bdc:	00200793          	li	a5,2
   14be0:	00f70e63          	beq	a4,a5,14bfc <rt_sem_control+0x70>
   14be4:	29500613          	li	a2,661
   14be8:	0000c597          	auipc	a1,0xc
   14bec:	cf058593          	addi	a1,a1,-784 # 208d8 <__FUNCTION__.2519>
   14bf0:	0000c517          	auipc	a0,0xc
   14bf4:	82c50513          	addi	a0,a0,-2004 # 2041c <__FUNCTION__.2575+0x78>
   14bf8:	c4cfe0ef          	jal	ra,13044 <rt_assert_handler>

    if (cmd == RT_IPC_CMD_RESET)
   14bfc:	fd842703          	lw	a4,-40(s0)
   14c00:	00100793          	li	a5,1
   14c04:	04f71a63          	bne	a4,a5,14c58 <rt_sem_control+0xcc>
    {
        rt_ubase_t value;

        /* get value */
        value = (rt_ubase_t)arg;
   14c08:	fd442783          	lw	a5,-44(s0)
   14c0c:	fef42623          	sw	a5,-20(s0)
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
   14c10:	238070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14c14:	00050793          	mv	a5,a0
   14c18:	fef42423          	sw	a5,-24(s0)

        /* resume all waiting thread */
        _ipc_list_resume_all(&sem->parent.suspend_thread);
   14c1c:	fdc42783          	lw	a5,-36(s0)
   14c20:	01478793          	addi	a5,a5,20
   14c24:	00078513          	mv	a0,a5
   14c28:	f4cff0ef          	jal	ra,14374 <_ipc_list_resume_all>

        /* set new value */
        sem->value = (rt_uint16_t)value;
   14c2c:	fec42783          	lw	a5,-20(s0)
   14c30:	01079713          	slli	a4,a5,0x10
   14c34:	01075713          	srli	a4,a4,0x10
   14c38:	fdc42783          	lw	a5,-36(s0)
   14c3c:	00e79e23          	sh	a4,28(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   14c40:	fe842783          	lw	a5,-24(s0)
   14c44:	00078513          	mv	a0,a5
   14c48:	208070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   14c4c:	23d030ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   14c50:	00000793          	li	a5,0
   14c54:	0080006f          	j	14c5c <rt_sem_control+0xd0>
    }

    return -RT_ERROR;
   14c58:	fff00793          	li	a5,-1
}
   14c5c:	00078513          	mv	a0,a5
   14c60:	02c12083          	lw	ra,44(sp)
   14c64:	02812403          	lw	s0,40(sp)
   14c68:	03010113          	addi	sp,sp,48
   14c6c:	00008067          	ret

00014c70 <rt_mutex_init>:
 *           If the return value is any other values, it represents the initialization failed.
 *
 * @warning  This function can ONLY be called from threads.
 */
rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
   14c70:	fe010113          	addi	sp,sp,-32
   14c74:	00112e23          	sw	ra,28(sp)
   14c78:	00812c23          	sw	s0,24(sp)
   14c7c:	02010413          	addi	s0,sp,32
   14c80:	fea42623          	sw	a0,-20(s0)
   14c84:	feb42423          	sw	a1,-24(s0)
   14c88:	00060793          	mv	a5,a2
   14c8c:	fef403a3          	sb	a5,-25(s0)
    (void)flag;

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
   14c90:	fec42783          	lw	a5,-20(s0)
   14c94:	00079e63          	bnez	a5,14cb0 <rt_mutex_init+0x40>
   14c98:	2da00613          	li	a2,730
   14c9c:	0000c597          	auipc	a1,0xc
   14ca0:	c4c58593          	addi	a1,a1,-948 # 208e8 <__FUNCTION__.2526>
   14ca4:	0000c517          	auipc	a0,0xc
   14ca8:	88c50513          	addi	a0,a0,-1908 # 20530 <__FUNCTION__.2575+0x18c>
   14cac:	b98fe0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize object */
    rt_object_init(&(mutex->parent.parent), RT_Object_Class_Mutex, name);
   14cb0:	fec42783          	lw	a5,-20(s0)
   14cb4:	fe842603          	lw	a2,-24(s0)
   14cb8:	00300593          	li	a1,3
   14cbc:	00078513          	mv	a0,a5
   14cc0:	e01fb0ef          	jal	ra,10ac0 <rt_object_init>

    /* initialize ipc object */
    _ipc_object_init(&(mutex->parent));
   14cc4:	fec42783          	lw	a5,-20(s0)
   14cc8:	00078513          	mv	a0,a5
   14ccc:	d10ff0ef          	jal	ra,141dc <_ipc_object_init>

    mutex->value = 1;
   14cd0:	fec42783          	lw	a5,-20(s0)
   14cd4:	00100713          	li	a4,1
   14cd8:	00e79e23          	sh	a4,28(a5)
    mutex->owner = RT_NULL;
   14cdc:	fec42783          	lw	a5,-20(s0)
   14ce0:	0207a023          	sw	zero,32(a5)
    mutex->original_priority = 0xFF;
   14ce4:	fec42783          	lw	a5,-20(s0)
   14ce8:	fff00713          	li	a4,-1
   14cec:	00e78f23          	sb	a4,30(a5)
    mutex->hold  = 0;
   14cf0:	fec42783          	lw	a5,-20(s0)
   14cf4:	00078fa3          	sb	zero,31(a5)

    /* flag can only be RT_IPC_FLAG_PRIO. RT_IPC_FLAG_FIFO cannot solve the unbounded priority inversion problem */
    mutex->parent.parent.flag = RT_IPC_FLAG_PRIO;
   14cf8:	fec42783          	lw	a5,-20(s0)
   14cfc:	00100713          	li	a4,1
   14d00:	00e784a3          	sb	a4,9(a5)

    return RT_EOK;
   14d04:	00000793          	li	a5,0
}
   14d08:	00078513          	mv	a0,a5
   14d0c:	01c12083          	lw	ra,28(sp)
   14d10:	01812403          	lw	s0,24(sp)
   14d14:	02010113          	addi	sp,sp,32
   14d18:	00008067          	ret

00014d1c <rt_mutex_detach>:
 * @warning  This function can ONLY detach a static mutex initialized by the rt_mutex_init() function.
 *           If the mutex is created by the rt_mutex_create() function, you MUST NOT USE this function to detach it,
 *           ONLY USE the rt_mutex_delete() function to complete the deletion.
 */
rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
   14d1c:	fe010113          	addi	sp,sp,-32
   14d20:	00112e23          	sw	ra,28(sp)
   14d24:	00812c23          	sw	s0,24(sp)
   14d28:	02010413          	addi	s0,sp,32
   14d2c:	fea42623          	sw	a0,-20(s0)
    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
   14d30:	fec42783          	lw	a5,-20(s0)
   14d34:	00079e63          	bnez	a5,14d50 <rt_mutex_detach+0x34>
   14d38:	30400613          	li	a2,772
   14d3c:	0000c597          	auipc	a1,0xc
   14d40:	bbc58593          	addi	a1,a1,-1092 # 208f8 <__FUNCTION__.2530>
   14d44:	0000b517          	auipc	a0,0xb
   14d48:	7ec50513          	addi	a0,a0,2028 # 20530 <__FUNCTION__.2575+0x18c>
   14d4c:	af8fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
   14d50:	fec42783          	lw	a5,-20(s0)
   14d54:	00078513          	mv	a0,a5
   14d58:	9d0fc0ef          	jal	ra,10f28 <rt_object_get_type>
   14d5c:	00050793          	mv	a5,a0
   14d60:	00078713          	mv	a4,a5
   14d64:	00300793          	li	a5,3
   14d68:	00f70e63          	beq	a4,a5,14d84 <rt_mutex_detach+0x68>
   14d6c:	30500613          	li	a2,773
   14d70:	0000c597          	auipc	a1,0xc
   14d74:	b8858593          	addi	a1,a1,-1144 # 208f8 <__FUNCTION__.2530>
   14d78:	0000b517          	auipc	a0,0xb
   14d7c:	7cc50513          	addi	a0,a0,1996 # 20544 <__FUNCTION__.2575+0x1a0>
   14d80:	ac4fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&mutex->parent.parent));
   14d84:	fec42783          	lw	a5,-20(s0)
   14d88:	00078513          	mv	a0,a5
   14d8c:	934fc0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   14d90:	00050793          	mv	a5,a0
   14d94:	00079e63          	bnez	a5,14db0 <rt_mutex_detach+0x94>
   14d98:	30600613          	li	a2,774
   14d9c:	0000c597          	auipc	a1,0xc
   14da0:	b5c58593          	addi	a1,a1,-1188 # 208f8 <__FUNCTION__.2530>
   14da4:	0000b517          	auipc	a0,0xb
   14da8:	7e450513          	addi	a0,a0,2020 # 20588 <__FUNCTION__.2575+0x1e4>
   14dac:	a98fe0ef          	jal	ra,13044 <rt_assert_handler>

    /* wakeup all suspended threads */
    _ipc_list_resume_all(&(mutex->parent.suspend_thread));
   14db0:	fec42783          	lw	a5,-20(s0)
   14db4:	01478793          	addi	a5,a5,20
   14db8:	00078513          	mv	a0,a5
   14dbc:	db8ff0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* detach mutex object */
    rt_object_detach(&(mutex->parent.parent));
   14dc0:	fec42783          	lw	a5,-20(s0)
   14dc4:	00078513          	mv	a0,a5
   14dc8:	e41fb0ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   14dcc:	00000793          	li	a5,0
}
   14dd0:	00078513          	mv	a0,a5
   14dd4:	01c12083          	lw	ra,28(sp)
   14dd8:	01812403          	lw	s0,24(sp)
   14ddc:	02010113          	addi	sp,sp,32
   14de0:	00008067          	ret

00014de4 <rt_mutex_create>:
 * @return   Return a pointer to the mutex object. When the return value is RT_NULL, it means the creation failed.
 *
 * @warning  This function can ONLY be called from threads.
 */
rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
   14de4:	fd010113          	addi	sp,sp,-48
   14de8:	02112623          	sw	ra,44(sp)
   14dec:	02812423          	sw	s0,40(sp)
   14df0:	03010413          	addi	s0,sp,48
   14df4:	fca42e23          	sw	a0,-36(s0)
   14df8:	00058793          	mv	a5,a1
   14dfc:	fcf40da3          	sb	a5,-37(s0)
    struct rt_mutex *mutex;
    (void)flag;

    RT_DEBUG_NOT_IN_INTERRUPT;
   14e00:	048070ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14e04:	fea42623          	sw	a0,-20(s0)
   14e08:	711030ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   14e0c:	00050793          	mv	a5,a0
   14e10:	02078863          	beqz	a5,14e40 <rt_mutex_create+0x5c>
   14e14:	0000c597          	auipc	a1,0xc
   14e18:	af458593          	addi	a1,a1,-1292 # 20908 <__FUNCTION__.2537>
   14e1c:	0000b517          	auipc	a0,0xb
   14e20:	67850513          	addi	a0,a0,1656 # 20494 <__FUNCTION__.2575+0xf0>
   14e24:	addfd0ef          	jal	ra,12900 <rt_kprintf>
   14e28:	32b00613          	li	a2,811
   14e2c:	0000c597          	auipc	a1,0xc
   14e30:	adc58593          	addi	a1,a1,-1316 # 20908 <__FUNCTION__.2537>
   14e34:	0000b517          	auipc	a0,0xb
   14e38:	58450513          	addi	a0,a0,1412 # 203b8 <__FUNCTION__.2575+0x14>
   14e3c:	a08fe0ef          	jal	ra,13044 <rt_assert_handler>
   14e40:	fec42503          	lw	a0,-20(s0)
   14e44:	00c070ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* allocate object */
    mutex = (rt_mutex_t)rt_object_allocate(RT_Object_Class_Mutex, name);
   14e48:	fdc42583          	lw	a1,-36(s0)
   14e4c:	00300513          	li	a0,3
   14e50:	e4dfb0ef          	jal	ra,10c9c <rt_object_allocate>
   14e54:	fea42423          	sw	a0,-24(s0)
    if (mutex == RT_NULL)
   14e58:	fe842783          	lw	a5,-24(s0)
   14e5c:	00079663          	bnez	a5,14e68 <rt_mutex_create+0x84>
        return mutex;
   14e60:	fe842783          	lw	a5,-24(s0)
   14e64:	0480006f          	j	14eac <rt_mutex_create+0xc8>

    /* initialize ipc object */
    _ipc_object_init(&(mutex->parent));
   14e68:	fe842783          	lw	a5,-24(s0)
   14e6c:	00078513          	mv	a0,a5
   14e70:	b6cff0ef          	jal	ra,141dc <_ipc_object_init>

    mutex->value              = 1;
   14e74:	fe842783          	lw	a5,-24(s0)
   14e78:	00100713          	li	a4,1
   14e7c:	00e79e23          	sh	a4,28(a5)
    mutex->owner              = RT_NULL;
   14e80:	fe842783          	lw	a5,-24(s0)
   14e84:	0207a023          	sw	zero,32(a5)
    mutex->original_priority  = 0xFF;
   14e88:	fe842783          	lw	a5,-24(s0)
   14e8c:	fff00713          	li	a4,-1
   14e90:	00e78f23          	sb	a4,30(a5)
    mutex->hold               = 0;
   14e94:	fe842783          	lw	a5,-24(s0)
   14e98:	00078fa3          	sb	zero,31(a5)

    /* flag can only be RT_IPC_FLAG_PRIO. RT_IPC_FLAG_FIFO cannot solve the unbounded priority inversion problem */
    mutex->parent.parent.flag = RT_IPC_FLAG_PRIO;
   14e9c:	fe842783          	lw	a5,-24(s0)
   14ea0:	00100713          	li	a4,1
   14ea4:	00e784a3          	sb	a4,9(a5)

    return mutex;
   14ea8:	fe842783          	lw	a5,-24(s0)
}
   14eac:	00078513          	mv	a0,a5
   14eb0:	02c12083          	lw	ra,44(sp)
   14eb4:	02812403          	lw	s0,40(sp)
   14eb8:	03010113          	addi	sp,sp,48
   14ebc:	00008067          	ret

00014ec0 <rt_mutex_delete>:
 * @warning  This function can ONLY delete a mutex initialized by the rt_mutex_create() function.
 *           If the mutex is initialized by the rt_mutex_init() function, you MUST NOT USE this function to delete it,
 *           ONLY USE the rt_mutex_detach() function to complete the detachment.
 */
rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
   14ec0:	fd010113          	addi	sp,sp,-48
   14ec4:	02112623          	sw	ra,44(sp)
   14ec8:	02812423          	sw	s0,40(sp)
   14ecc:	03010413          	addi	s0,sp,48
   14ed0:	fca42e23          	sw	a0,-36(s0)
    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
   14ed4:	fdc42783          	lw	a5,-36(s0)
   14ed8:	00079e63          	bnez	a5,14ef4 <rt_mutex_delete+0x34>
   14edc:	35700613          	li	a2,855
   14ee0:	0000c597          	auipc	a1,0xc
   14ee4:	a3858593          	addi	a1,a1,-1480 # 20918 <__FUNCTION__.2541>
   14ee8:	0000b517          	auipc	a0,0xb
   14eec:	64850513          	addi	a0,a0,1608 # 20530 <__FUNCTION__.2575+0x18c>
   14ef0:	954fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
   14ef4:	fdc42783          	lw	a5,-36(s0)
   14ef8:	00078513          	mv	a0,a5
   14efc:	82cfc0ef          	jal	ra,10f28 <rt_object_get_type>
   14f00:	00050793          	mv	a5,a0
   14f04:	00078713          	mv	a4,a5
   14f08:	00300793          	li	a5,3
   14f0c:	00f70e63          	beq	a4,a5,14f28 <rt_mutex_delete+0x68>
   14f10:	35800613          	li	a2,856
   14f14:	0000c597          	auipc	a1,0xc
   14f18:	a0458593          	addi	a1,a1,-1532 # 20918 <__FUNCTION__.2541>
   14f1c:	0000b517          	auipc	a0,0xb
   14f20:	62850513          	addi	a0,a0,1576 # 20544 <__FUNCTION__.2575+0x1a0>
   14f24:	920fe0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&mutex->parent.parent) == RT_FALSE);
   14f28:	fdc42783          	lw	a5,-36(s0)
   14f2c:	00078513          	mv	a0,a5
   14f30:	f91fb0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   14f34:	00050793          	mv	a5,a0
   14f38:	00078e63          	beqz	a5,14f54 <rt_mutex_delete+0x94>
   14f3c:	35900613          	li	a2,857
   14f40:	0000c597          	auipc	a1,0xc
   14f44:	9d858593          	addi	a1,a1,-1576 # 20918 <__FUNCTION__.2541>
   14f48:	0000b517          	auipc	a0,0xb
   14f4c:	67450513          	addi	a0,a0,1652 # 205bc <__FUNCTION__.2575+0x218>
   14f50:	8f4fe0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   14f54:	6f5060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14f58:	fea42623          	sw	a0,-20(s0)
   14f5c:	5bd030ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   14f60:	00050793          	mv	a5,a0
   14f64:	02078863          	beqz	a5,14f94 <rt_mutex_delete+0xd4>
   14f68:	0000c597          	auipc	a1,0xc
   14f6c:	9b058593          	addi	a1,a1,-1616 # 20918 <__FUNCTION__.2541>
   14f70:	0000b517          	auipc	a0,0xb
   14f74:	52450513          	addi	a0,a0,1316 # 20494 <__FUNCTION__.2575+0xf0>
   14f78:	989fd0ef          	jal	ra,12900 <rt_kprintf>
   14f7c:	35b00613          	li	a2,859
   14f80:	0000c597          	auipc	a1,0xc
   14f84:	99858593          	addi	a1,a1,-1640 # 20918 <__FUNCTION__.2541>
   14f88:	0000b517          	auipc	a0,0xb
   14f8c:	43050513          	addi	a0,a0,1072 # 203b8 <__FUNCTION__.2575+0x14>
   14f90:	8b4fe0ef          	jal	ra,13044 <rt_assert_handler>
   14f94:	fec42503          	lw	a0,-20(s0)
   14f98:	6b9060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* wakeup all suspended threads */
    _ipc_list_resume_all(&(mutex->parent.suspend_thread));
   14f9c:	fdc42783          	lw	a5,-36(s0)
   14fa0:	01478793          	addi	a5,a5,20
   14fa4:	00078513          	mv	a0,a5
   14fa8:	bccff0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* delete mutex object */
    rt_object_delete(&(mutex->parent.parent));
   14fac:	fdc42783          	lw	a5,-36(s0)
   14fb0:	00078513          	mv	a0,a5
   14fb4:	e45fb0ef          	jal	ra,10df8 <rt_object_delete>

    return RT_EOK;
   14fb8:	00000793          	li	a5,0
}
   14fbc:	00078513          	mv	a0,a5
   14fc0:	02c12083          	lw	ra,44(sp)
   14fc4:	02812403          	lw	s0,40(sp)
   14fc8:	03010113          	addi	sp,sp,48
   14fcc:	00008067          	ret

00014fd0 <rt_mutex_take>:
 *           If the return value is any other values, it means that the mutex take failed.
 *
 * @warning  This function can ONLY be called in the thread context. It MUST NOT BE called in interrupt context.
 */
rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
   14fd0:	fd010113          	addi	sp,sp,-48
   14fd4:	02112623          	sw	ra,44(sp)
   14fd8:	02812423          	sw	s0,40(sp)
   14fdc:	02912223          	sw	s1,36(sp)
   14fe0:	03010413          	addi	s0,sp,48
   14fe4:	fca42e23          	sw	a0,-36(s0)
   14fe8:	fcb42c23          	sw	a1,-40(s0)
    register rt_base_t temp;
    struct rt_thread *thread;

    /* this function must not be used in interrupt even if time = 0 */
    RT_DEBUG_IN_THREAD_CONTEXT;
   14fec:	65d060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   14ff0:	fea42623          	sw	a0,-20(s0)
   14ff4:	cdcfe0ef          	jal	ra,134d0 <rt_thread_self>
   14ff8:	00050793          	mv	a5,a0
   14ffc:	02079863          	bnez	a5,1502c <rt_mutex_take+0x5c>
   15000:	0000c597          	auipc	a1,0xc
   15004:	92858593          	addi	a1,a1,-1752 # 20928 <__FUNCTION__.2550>
   15008:	0000b517          	auipc	a0,0xb
   1500c:	4f050513          	addi	a0,a0,1264 # 204f8 <__FUNCTION__.2575+0x154>
   15010:	8f1fd0ef          	jal	ra,12900 <rt_kprintf>
   15014:	38600613          	li	a2,902
   15018:	0000c597          	auipc	a1,0xc
   1501c:	91058593          	addi	a1,a1,-1776 # 20928 <__FUNCTION__.2550>
   15020:	0000b517          	auipc	a0,0xb
   15024:	39850513          	addi	a0,a0,920 # 203b8 <__FUNCTION__.2575+0x14>
   15028:	81cfe0ef          	jal	ra,13044 <rt_assert_handler>
   1502c:	61d060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15030:	fea42423          	sw	a0,-24(s0)
   15034:	4e5030ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   15038:	00050793          	mv	a5,a0
   1503c:	02078863          	beqz	a5,1506c <rt_mutex_take+0x9c>
   15040:	0000c597          	auipc	a1,0xc
   15044:	8e858593          	addi	a1,a1,-1816 # 20928 <__FUNCTION__.2550>
   15048:	0000b517          	auipc	a0,0xb
   1504c:	44c50513          	addi	a0,a0,1100 # 20494 <__FUNCTION__.2575+0xf0>
   15050:	8b1fd0ef          	jal	ra,12900 <rt_kprintf>
   15054:	38600613          	li	a2,902
   15058:	0000c597          	auipc	a1,0xc
   1505c:	8d058593          	addi	a1,a1,-1840 # 20928 <__FUNCTION__.2550>
   15060:	0000b517          	auipc	a0,0xb
   15064:	35850513          	addi	a0,a0,856 # 203b8 <__FUNCTION__.2575+0x14>
   15068:	fddfd0ef          	jal	ra,13044 <rt_assert_handler>
   1506c:	fe842503          	lw	a0,-24(s0)
   15070:	5e1060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   15074:	fec42503          	lw	a0,-20(s0)
   15078:	5d9060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
   1507c:	fdc42783          	lw	a5,-36(s0)
   15080:	00079e63          	bnez	a5,1509c <rt_mutex_take+0xcc>
   15084:	38900613          	li	a2,905
   15088:	0000c597          	auipc	a1,0xc
   1508c:	8a058593          	addi	a1,a1,-1888 # 20928 <__FUNCTION__.2550>
   15090:	0000b517          	auipc	a0,0xb
   15094:	4a050513          	addi	a0,a0,1184 # 20530 <__FUNCTION__.2575+0x18c>
   15098:	fadfd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
   1509c:	fdc42783          	lw	a5,-36(s0)
   150a0:	00078513          	mv	a0,a5
   150a4:	e85fb0ef          	jal	ra,10f28 <rt_object_get_type>
   150a8:	00050793          	mv	a5,a0
   150ac:	00078713          	mv	a4,a5
   150b0:	00300793          	li	a5,3
   150b4:	00f70e63          	beq	a4,a5,150d0 <rt_mutex_take+0x100>
   150b8:	38a00613          	li	a2,906
   150bc:	0000c597          	auipc	a1,0xc
   150c0:	86c58593          	addi	a1,a1,-1940 # 20928 <__FUNCTION__.2550>
   150c4:	0000b517          	auipc	a0,0xb
   150c8:	48050513          	addi	a0,a0,1152 # 20544 <__FUNCTION__.2575+0x1a0>
   150cc:	f79fd0ef          	jal	ra,13044 <rt_assert_handler>

    /* get current thread */
    thread = rt_thread_self();
   150d0:	c00fe0ef          	jal	ra,134d0 <rt_thread_self>
   150d4:	fea42223          	sw	a0,-28(s0)

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   150d8:	571060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   150dc:	00050493          	mv	s1,a0

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mutex->parent.parent)));
   150e0:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   150e4:	0007a783          	lw	a5,0(a5)
   150e8:	00078c63          	beqz	a5,15100 <rt_mutex_take+0x130>
   150ec:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   150f0:	0007a703          	lw	a4,0(a5)
   150f4:	fdc42783          	lw	a5,-36(s0)
   150f8:	00078513          	mv	a0,a5
   150fc:	000700e7          	jalr	a4
    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_take: current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    /* reset thread error */
    thread->error = RT_EOK;
   15100:	fe442783          	lw	a5,-28(s0)
   15104:	0207a823          	sw	zero,48(a5)

    if (mutex->owner == thread)
   15108:	fdc42783          	lw	a5,-36(s0)
   1510c:	0207a783          	lw	a5,32(a5)
   15110:	fe442703          	lw	a4,-28(s0)
   15114:	04f71063          	bne	a4,a5,15154 <rt_mutex_take+0x184>
    {
        if(mutex->hold < RT_MUTEX_HOLD_MAX)
   15118:	fdc42783          	lw	a5,-36(s0)
   1511c:	01f7c703          	lbu	a4,31(a5)
   15120:	0ff00793          	li	a5,255
   15124:	02f70063          	beq	a4,a5,15144 <rt_mutex_take+0x174>
        {
            /* it's the same thread */
            mutex->hold ++;
   15128:	fdc42783          	lw	a5,-36(s0)
   1512c:	01f7c783          	lbu	a5,31(a5)
   15130:	00178793          	addi	a5,a5,1
   15134:	0ff7f713          	andi	a4,a5,255
   15138:	fdc42783          	lw	a5,-36(s0)
   1513c:	00e78fa3          	sb	a4,31(a5)
   15140:	1700006f          	j	152b0 <rt_mutex_take+0x2e0>
        }
        else
        {
            rt_hw_interrupt_enable(temp); /* enable interrupt */
   15144:	00048513          	mv	a0,s1
   15148:	509060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
            return -RT_EFULL; /* value overflowed */
   1514c:	ffd00793          	li	a5,-3
   15150:	18c0006f          	j	152dc <rt_mutex_take+0x30c>
__again:
#endif /* RT_USING_SIGNALS */
        /* The value of mutex is 1 in initial status. Therefore, if the
         * value is great than 0, it indicates the mutex is avaible.
         */
        if (mutex->value > 0)
   15154:	fdc42783          	lw	a5,-36(s0)
   15158:	01c7d783          	lhu	a5,28(a5)
   1515c:	06078c63          	beqz	a5,151d4 <rt_mutex_take+0x204>
        {
            /* mutex is available */
            mutex->value --;
   15160:	fdc42783          	lw	a5,-36(s0)
   15164:	01c7d783          	lhu	a5,28(a5)
   15168:	fff78793          	addi	a5,a5,-1
   1516c:	01079713          	slli	a4,a5,0x10
   15170:	01075713          	srli	a4,a4,0x10
   15174:	fdc42783          	lw	a5,-36(s0)
   15178:	00e79e23          	sh	a4,28(a5)

            /* set mutex owner and original priority */
            mutex->owner             = thread;
   1517c:	fdc42783          	lw	a5,-36(s0)
   15180:	fe442703          	lw	a4,-28(s0)
   15184:	02e7a023          	sw	a4,32(a5)
            mutex->original_priority = thread->current_priority;
   15188:	fe442783          	lw	a5,-28(s0)
   1518c:	0357c703          	lbu	a4,53(a5)
   15190:	fdc42783          	lw	a5,-36(s0)
   15194:	00e78f23          	sb	a4,30(a5)
            if(mutex->hold < RT_MUTEX_HOLD_MAX)
   15198:	fdc42783          	lw	a5,-36(s0)
   1519c:	01f7c703          	lbu	a4,31(a5)
   151a0:	0ff00793          	li	a5,255
   151a4:	02f70063          	beq	a4,a5,151c4 <rt_mutex_take+0x1f4>
            {
                mutex->hold ++;
   151a8:	fdc42783          	lw	a5,-36(s0)
   151ac:	01f7c783          	lbu	a5,31(a5)
   151b0:	00178793          	addi	a5,a5,1
   151b4:	0ff7f713          	andi	a4,a5,255
   151b8:	fdc42783          	lw	a5,-36(s0)
   151bc:	00e78fa3          	sb	a4,31(a5)
   151c0:	0f00006f          	j	152b0 <rt_mutex_take+0x2e0>
            }
            else
            {
                rt_hw_interrupt_enable(temp); /* enable interrupt */
   151c4:	00048513          	mv	a0,s1
   151c8:	489060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
   151cc:	ffd00793          	li	a5,-3
   151d0:	10c0006f          	j	152dc <rt_mutex_take+0x30c>
            }
        }
        else
        {
            /* no waiting, return with timeout */
            if (time == 0)
   151d4:	fd842783          	lw	a5,-40(s0)
   151d8:	02079063          	bnez	a5,151f8 <rt_mutex_take+0x228>
            {
                /* set error as timeout */
                thread->error = -RT_ETIMEOUT;
   151dc:	fe442783          	lw	a5,-28(s0)
   151e0:	ffe00713          	li	a4,-2
   151e4:	02e7a823          	sw	a4,48(a5)

                /* enable interrupt */
                rt_hw_interrupt_enable(temp);
   151e8:	00048513          	mv	a0,s1
   151ec:	465060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                return -RT_ETIMEOUT;
   151f0:	ffe00793          	li	a5,-2
   151f4:	0e80006f          	j	152dc <rt_mutex_take+0x30c>
                /* mutex is unavailable, push to suspend list */
                RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_take: suspend thread: %s\n",
                                            thread->name));

                /* change the owner thread priority of mutex */
                if (thread->current_priority < mutex->owner->current_priority)
   151f8:	fe442783          	lw	a5,-28(s0)
   151fc:	0357c703          	lbu	a4,53(a5)
   15200:	fdc42783          	lw	a5,-36(s0)
   15204:	0207a783          	lw	a5,32(a5)
   15208:	0357c783          	lbu	a5,53(a5)
   1520c:	02f77263          	bgeu	a4,a5,15230 <rt_mutex_take+0x260>
                {
                    /* change the owner thread priority */
                    rt_thread_control(mutex->owner,
   15210:	fdc42783          	lw	a5,-36(s0)
   15214:	0207a703          	lw	a4,32(a5)
                                      RT_THREAD_CTRL_CHANGE_PRIORITY,
                                      &thread->current_priority);
   15218:	fe442783          	lw	a5,-28(s0)
   1521c:	03578793          	addi	a5,a5,53
                    rt_thread_control(mutex->owner,
   15220:	00078613          	mv	a2,a5
   15224:	00200593          	li	a1,2
   15228:	00070513          	mv	a0,a4
   1522c:	9c9fe0ef          	jal	ra,13bf4 <rt_thread_control>
                }

                /* suspend current thread */
                _ipc_list_suspend(&(mutex->parent.suspend_thread),
   15230:	fdc42783          	lw	a5,-36(s0)
   15234:	01478713          	addi	a4,a5,20
   15238:	fdc42783          	lw	a5,-36(s0)
   1523c:	0097c783          	lbu	a5,9(a5)
   15240:	00078613          	mv	a2,a5
   15244:	fe442583          	lw	a1,-28(s0)
   15248:	00070513          	mv	a0,a4
   1524c:	fcdfe0ef          	jal	ra,14218 <_ipc_list_suspend>
                                    thread,
                                    mutex->parent.parent.flag);

                /* has waiting time, start thread timer */
                if (time > 0)
   15250:	fd842783          	lw	a5,-40(s0)
   15254:	02f05863          	blez	a5,15284 <rt_mutex_take+0x2b4>
                    RT_DEBUG_LOG(RT_DEBUG_IPC,
                                 ("mutex_take: start the timer of thread:%s\n",
                                  thread->name));

                    /* reset the timeout of thread timer and start it */
                    rt_timer_control(&(thread->thread_timer),
   15258:	fe442783          	lw	a5,-28(s0)
   1525c:	04c78793          	addi	a5,a5,76
   15260:	fd840713          	addi	a4,s0,-40
   15264:	00070613          	mv	a2,a4
   15268:	00000593          	li	a1,0
   1526c:	00078513          	mv	a0,a5
   15270:	76d050ef          	jal	ra,1b1dc <rt_timer_control>
                                     RT_TIMER_CTRL_SET_TIME,
                                     &time);
                    rt_timer_start(&(thread->thread_timer));
   15274:	fe442783          	lw	a5,-28(s0)
   15278:	04c78793          	addi	a5,a5,76
   1527c:	00078513          	mv	a0,a5
   15280:	2c9050ef          	jal	ra,1ad48 <rt_timer_start>
                }

                /* enable interrupt */
                rt_hw_interrupt_enable(temp);
   15284:	00048513          	mv	a0,s1
   15288:	3c9060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                /* do schedule */
                rt_schedule();
   1528c:	3fc030ef          	jal	ra,18688 <rt_schedule>

                if (thread->error != RT_EOK)
   15290:	fe442783          	lw	a5,-28(s0)
   15294:	0307a783          	lw	a5,48(a5)
   15298:	00078863          	beqz	a5,152a8 <rt_mutex_take+0x2d8>
                    /* interrupt by signal, try it again */
                    if (thread->error == -RT_EINTR) goto __again;
#endif /* RT_USING_SIGNALS */

                    /* return error */
                    return thread->error;
   1529c:	fe442783          	lw	a5,-28(s0)
   152a0:	0307a783          	lw	a5,48(a5)
   152a4:	0380006f          	j	152dc <rt_mutex_take+0x30c>
                }
                else
                {
                    /* the mutex is taken successfully. */
                    /* disable interrupt */
                    temp = rt_hw_interrupt_disable();
   152a8:	3a1060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   152ac:	00050493          	mv	s1,a0
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   152b0:	00048513          	mv	a0,s1
   152b4:	39d060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mutex->parent.parent)));
   152b8:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   152bc:	0007a783          	lw	a5,0(a5)
   152c0:	00078c63          	beqz	a5,152d8 <rt_mutex_take+0x308>
   152c4:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   152c8:	0007a703          	lw	a4,0(a5)
   152cc:	fdc42783          	lw	a5,-36(s0)
   152d0:	00078513          	mv	a0,a5
   152d4:	000700e7          	jalr	a4

    return RT_EOK;
   152d8:	00000793          	li	a5,0
}
   152dc:	00078513          	mv	a0,a5
   152e0:	02c12083          	lw	ra,44(sp)
   152e4:	02812403          	lw	s0,40(sp)
   152e8:	02412483          	lw	s1,36(sp)
   152ec:	03010113          	addi	sp,sp,48
   152f0:	00008067          	ret

000152f4 <rt_mutex_trytake>:
 *
 * @return   Return the operation status. ONLY When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mutex take failed.
 */
rt_err_t rt_mutex_trytake(rt_mutex_t mutex)
{
   152f4:	fe010113          	addi	sp,sp,-32
   152f8:	00112e23          	sw	ra,28(sp)
   152fc:	00812c23          	sw	s0,24(sp)
   15300:	02010413          	addi	s0,sp,32
   15304:	fea42623          	sw	a0,-20(s0)
    return rt_mutex_take(mutex, RT_WAITING_NO);
   15308:	00000593          	li	a1,0
   1530c:	fec42503          	lw	a0,-20(s0)
   15310:	cc1ff0ef          	jal	ra,14fd0 <rt_mutex_take>
   15314:	00050793          	mv	a5,a0
}
   15318:	00078513          	mv	a0,a5
   1531c:	01c12083          	lw	ra,28(sp)
   15320:	01812403          	lw	s0,24(sp)
   15324:	02010113          	addi	sp,sp,32
   15328:	00008067          	ret

0001532c <rt_mutex_release>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mutex release failed.
 */
rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
   1532c:	fd010113          	addi	sp,sp,-48
   15330:	02112623          	sw	ra,44(sp)
   15334:	02812423          	sw	s0,40(sp)
   15338:	02912223          	sw	s1,36(sp)
   1533c:	03010413          	addi	s0,sp,48
   15340:	fca42e23          	sw	a0,-36(s0)
    register rt_base_t temp;
    struct rt_thread *thread;
    rt_bool_t need_schedule;

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
   15344:	fdc42783          	lw	a5,-36(s0)
   15348:	00079e63          	bnez	a5,15364 <rt_mutex_release+0x38>
   1534c:	43e00613          	li	a2,1086
   15350:	0000b597          	auipc	a1,0xb
   15354:	5e858593          	addi	a1,a1,1512 # 20938 <__FUNCTION__.2561>
   15358:	0000b517          	auipc	a0,0xb
   1535c:	1d850513          	addi	a0,a0,472 # 20530 <__FUNCTION__.2575+0x18c>
   15360:	ce5fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
   15364:	fdc42783          	lw	a5,-36(s0)
   15368:	00078513          	mv	a0,a5
   1536c:	bbdfb0ef          	jal	ra,10f28 <rt_object_get_type>
   15370:	00050793          	mv	a5,a0
   15374:	00078713          	mv	a4,a5
   15378:	00300793          	li	a5,3
   1537c:	00f70e63          	beq	a4,a5,15398 <rt_mutex_release+0x6c>
   15380:	43f00613          	li	a2,1087
   15384:	0000b597          	auipc	a1,0xb
   15388:	5b458593          	addi	a1,a1,1460 # 20938 <__FUNCTION__.2561>
   1538c:	0000b517          	auipc	a0,0xb
   15390:	1b850513          	addi	a0,a0,440 # 20544 <__FUNCTION__.2575+0x1a0>
   15394:	cb1fd0ef          	jal	ra,13044 <rt_assert_handler>

    need_schedule = RT_FALSE;
   15398:	fe042623          	sw	zero,-20(s0)

    /* only thread could release mutex because we need test the ownership */
    RT_DEBUG_IN_THREAD_CONTEXT;
   1539c:	2ad060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   153a0:	fea42423          	sw	a0,-24(s0)
   153a4:	92cfe0ef          	jal	ra,134d0 <rt_thread_self>
   153a8:	00050793          	mv	a5,a0
   153ac:	02079863          	bnez	a5,153dc <rt_mutex_release+0xb0>
   153b0:	0000b597          	auipc	a1,0xb
   153b4:	58858593          	addi	a1,a1,1416 # 20938 <__FUNCTION__.2561>
   153b8:	0000b517          	auipc	a0,0xb
   153bc:	14050513          	addi	a0,a0,320 # 204f8 <__FUNCTION__.2575+0x154>
   153c0:	d40fd0ef          	jal	ra,12900 <rt_kprintf>
   153c4:	44400613          	li	a2,1092
   153c8:	0000b597          	auipc	a1,0xb
   153cc:	57058593          	addi	a1,a1,1392 # 20938 <__FUNCTION__.2561>
   153d0:	0000b517          	auipc	a0,0xb
   153d4:	fe850513          	addi	a0,a0,-24 # 203b8 <__FUNCTION__.2575+0x14>
   153d8:	c6dfd0ef          	jal	ra,13044 <rt_assert_handler>
   153dc:	26d060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   153e0:	fea42223          	sw	a0,-28(s0)
   153e4:	135030ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   153e8:	00050793          	mv	a5,a0
   153ec:	02078863          	beqz	a5,1541c <rt_mutex_release+0xf0>
   153f0:	0000b597          	auipc	a1,0xb
   153f4:	54858593          	addi	a1,a1,1352 # 20938 <__FUNCTION__.2561>
   153f8:	0000b517          	auipc	a0,0xb
   153fc:	09c50513          	addi	a0,a0,156 # 20494 <__FUNCTION__.2575+0xf0>
   15400:	d00fd0ef          	jal	ra,12900 <rt_kprintf>
   15404:	44400613          	li	a2,1092
   15408:	0000b597          	auipc	a1,0xb
   1540c:	53058593          	addi	a1,a1,1328 # 20938 <__FUNCTION__.2561>
   15410:	0000b517          	auipc	a0,0xb
   15414:	fa850513          	addi	a0,a0,-88 # 203b8 <__FUNCTION__.2575+0x14>
   15418:	c2dfd0ef          	jal	ra,13044 <rt_assert_handler>
   1541c:	fe442503          	lw	a0,-28(s0)
   15420:	231060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   15424:	fe842503          	lw	a0,-24(s0)
   15428:	229060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* get current thread */
    thread = rt_thread_self();
   1542c:	8a4fe0ef          	jal	ra,134d0 <rt_thread_self>
   15430:	fea42023          	sw	a0,-32(s0)

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   15434:	215060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15438:	00050493          	mv	s1,a0

    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_release:current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mutex->parent.parent)));
   1543c:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   15440:	0007a783          	lw	a5,0(a5)
   15444:	00078c63          	beqz	a5,1545c <rt_mutex_release+0x130>
   15448:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   1544c:	0007a703          	lw	a4,0(a5)
   15450:	fdc42783          	lw	a5,-36(s0)
   15454:	00078513          	mv	a0,a5
   15458:	000700e7          	jalr	a4

    /* mutex only can be released by owner */
    if (thread != mutex->owner)
   1545c:	fdc42783          	lw	a5,-36(s0)
   15460:	0207a783          	lw	a5,32(a5)
   15464:	fe042703          	lw	a4,-32(s0)
   15468:	02f70063          	beq	a4,a5,15488 <rt_mutex_release+0x15c>
    {
        thread->error = -RT_ERROR;
   1546c:	fe042783          	lw	a5,-32(s0)
   15470:	fff00713          	li	a4,-1
   15474:	02e7a823          	sw	a4,48(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   15478:	00048513          	mv	a0,s1
   1547c:	1d5060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        return -RT_ERROR;
   15480:	fff00793          	li	a5,-1
   15484:	16c0006f          	j	155f0 <rt_mutex_release+0x2c4>
    }

    /* decrease hold */
    mutex->hold --;
   15488:	fdc42783          	lw	a5,-36(s0)
   1548c:	01f7c783          	lbu	a5,31(a5)
   15490:	fff78793          	addi	a5,a5,-1
   15494:	0ff7f713          	andi	a4,a5,255
   15498:	fdc42783          	lw	a5,-36(s0)
   1549c:	00e78fa3          	sb	a4,31(a5)
    /* if no hold */
    if (mutex->hold == 0)
   154a0:	fdc42783          	lw	a5,-36(s0)
   154a4:	01f7c783          	lbu	a5,31(a5)
   154a8:	12079663          	bnez	a5,155d4 <rt_mutex_release+0x2a8>
    {
        /* change the owner thread to original priority */
        if (mutex->original_priority != mutex->owner->current_priority)
   154ac:	fdc42783          	lw	a5,-36(s0)
   154b0:	01e7c703          	lbu	a4,30(a5)
   154b4:	fdc42783          	lw	a5,-36(s0)
   154b8:	0207a783          	lw	a5,32(a5)
   154bc:	0357c783          	lbu	a5,53(a5)
   154c0:	02f70263          	beq	a4,a5,154e4 <rt_mutex_release+0x1b8>
        {
            rt_thread_control(mutex->owner,
   154c4:	fdc42783          	lw	a5,-36(s0)
   154c8:	0207a703          	lw	a4,32(a5)
                              RT_THREAD_CTRL_CHANGE_PRIORITY,
                              &(mutex->original_priority));
   154cc:	fdc42783          	lw	a5,-36(s0)
   154d0:	01e78793          	addi	a5,a5,30
            rt_thread_control(mutex->owner,
   154d4:	00078613          	mv	a2,a5
   154d8:	00200593          	li	a1,2
   154dc:	00070513          	mv	a0,a4
   154e0:	f14fe0ef          	jal	ra,13bf4 <rt_thread_control>
        }

        /* wakeup suspended thread */
        if (!rt_list_isempty(&mutex->parent.suspend_thread))
   154e4:	fdc42783          	lw	a5,-36(s0)
   154e8:	01478793          	addi	a5,a5,20
   154ec:	00078513          	mv	a0,a5
   154f0:	cb5fe0ef          	jal	ra,141a4 <rt_list_isempty>
   154f4:	00050793          	mv	a5,a0
   154f8:	08079263          	bnez	a5,1557c <rt_mutex_release+0x250>
        {
            /* get suspended thread */
            thread = rt_list_entry(mutex->parent.suspend_thread.next,
   154fc:	fdc42783          	lw	a5,-36(s0)
   15500:	0147a783          	lw	a5,20(a5)
   15504:	fec78793          	addi	a5,a5,-20
   15508:	fef42023          	sw	a5,-32(s0)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_release: resume thread: %s\n",
                                        thread->name));

            /* set new owner and priority */
            mutex->owner             = thread;
   1550c:	fdc42783          	lw	a5,-36(s0)
   15510:	fe042703          	lw	a4,-32(s0)
   15514:	02e7a023          	sw	a4,32(a5)
            mutex->original_priority = thread->current_priority;
   15518:	fe042783          	lw	a5,-32(s0)
   1551c:	0357c703          	lbu	a4,53(a5)
   15520:	fdc42783          	lw	a5,-36(s0)
   15524:	00e78f23          	sb	a4,30(a5)

            if(mutex->hold < RT_MUTEX_HOLD_MAX)
   15528:	fdc42783          	lw	a5,-36(s0)
   1552c:	01f7c703          	lbu	a4,31(a5)
   15530:	0ff00793          	li	a5,255
   15534:	02f70c63          	beq	a4,a5,1556c <rt_mutex_release+0x240>
            {
                mutex->hold ++;
   15538:	fdc42783          	lw	a5,-36(s0)
   1553c:	01f7c783          	lbu	a5,31(a5)
   15540:	00178793          	addi	a5,a5,1
   15544:	0ff7f713          	andi	a4,a5,255
   15548:	fdc42783          	lw	a5,-36(s0)
   1554c:	00e78fa3          	sb	a4,31(a5)
                rt_hw_interrupt_enable(temp); /* enable interrupt */
                return -RT_EFULL; /* value overflowed */
            }

            /* resume thread */
            _ipc_list_resume(&(mutex->parent.suspend_thread));
   15550:	fdc42783          	lw	a5,-36(s0)
   15554:	01478793          	addi	a5,a5,20
   15558:	00078513          	mv	a0,a5
   1555c:	dd5fe0ef          	jal	ra,14330 <_ipc_list_resume>

            need_schedule = RT_TRUE;
   15560:	00100793          	li	a5,1
   15564:	fef42623          	sw	a5,-20(s0)
   15568:	06c0006f          	j	155d4 <rt_mutex_release+0x2a8>
                rt_hw_interrupt_enable(temp); /* enable interrupt */
   1556c:	00048513          	mv	a0,s1
   15570:	0e1060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
   15574:	ffd00793          	li	a5,-3
   15578:	0780006f          	j	155f0 <rt_mutex_release+0x2c4>
        }
        else
        {
            if(mutex->value < RT_MUTEX_VALUE_MAX)
   1557c:	fdc42783          	lw	a5,-36(s0)
   15580:	01c7d703          	lhu	a4,28(a5)
   15584:	000107b7          	lui	a5,0x10
   15588:	fff78793          	addi	a5,a5,-1 # ffff <__load-0x1>
   1558c:	02f70c63          	beq	a4,a5,155c4 <rt_mutex_release+0x298>
            {
                /* increase value */
                mutex->value ++;
   15590:	fdc42783          	lw	a5,-36(s0)
   15594:	01c7d783          	lhu	a5,28(a5)
   15598:	00178793          	addi	a5,a5,1
   1559c:	01079713          	slli	a4,a5,0x10
   155a0:	01075713          	srli	a4,a4,0x10
   155a4:	fdc42783          	lw	a5,-36(s0)
   155a8:	00e79e23          	sh	a4,28(a5)
                rt_hw_interrupt_enable(temp); /* enable interrupt */
                return -RT_EFULL; /* value overflowed */
            }

            /* clear owner */
            mutex->owner             = RT_NULL;
   155ac:	fdc42783          	lw	a5,-36(s0)
   155b0:	0207a023          	sw	zero,32(a5)
            mutex->original_priority = 0xff;
   155b4:	fdc42783          	lw	a5,-36(s0)
   155b8:	fff00713          	li	a4,-1
   155bc:	00e78f23          	sb	a4,30(a5)
   155c0:	0140006f          	j	155d4 <rt_mutex_release+0x2a8>
                rt_hw_interrupt_enable(temp); /* enable interrupt */
   155c4:	00048513          	mv	a0,s1
   155c8:	089060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
   155cc:	ffd00793          	li	a5,-3
   155d0:	0200006f          	j	155f0 <rt_mutex_release+0x2c4>
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   155d4:	00048513          	mv	a0,s1
   155d8:	079060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* perform a schedule */
    if (need_schedule == RT_TRUE)
   155dc:	fec42703          	lw	a4,-20(s0)
   155e0:	00100793          	li	a5,1
   155e4:	00f71463          	bne	a4,a5,155ec <rt_mutex_release+0x2c0>
        rt_schedule();
   155e8:	0a0030ef          	jal	ra,18688 <rt_schedule>

    return RT_EOK;
   155ec:	00000793          	li	a5,0
}
   155f0:	00078513          	mv	a0,a5
   155f4:	02c12083          	lw	ra,44(sp)
   155f8:	02812403          	lw	s0,40(sp)
   155fc:	02412483          	lw	s1,36(sp)
   15600:	03010113          	addi	sp,sp,48
   15604:	00008067          	ret

00015608 <rt_mutex_control>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that this function failed to execute.
 */
rt_err_t rt_mutex_control(rt_mutex_t mutex, int cmd, void *arg)
{
   15608:	fe010113          	addi	sp,sp,-32
   1560c:	00112e23          	sw	ra,28(sp)
   15610:	00812c23          	sw	s0,24(sp)
   15614:	02010413          	addi	s0,sp,32
   15618:	fea42623          	sw	a0,-20(s0)
   1561c:	feb42423          	sw	a1,-24(s0)
   15620:	fec42223          	sw	a2,-28(s0)
    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
   15624:	fec42783          	lw	a5,-20(s0)
   15628:	00079e63          	bnez	a5,15644 <rt_mutex_control+0x3c>
   1562c:	4b800613          	li	a2,1208
   15630:	0000b597          	auipc	a1,0xb
   15634:	31c58593          	addi	a1,a1,796 # 2094c <__FUNCTION__.2569>
   15638:	0000b517          	auipc	a0,0xb
   1563c:	ef850513          	addi	a0,a0,-264 # 20530 <__FUNCTION__.2575+0x18c>
   15640:	a05fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
   15644:	fec42783          	lw	a5,-20(s0)
   15648:	00078513          	mv	a0,a5
   1564c:	8ddfb0ef          	jal	ra,10f28 <rt_object_get_type>
   15650:	00050793          	mv	a5,a0
   15654:	00078713          	mv	a4,a5
   15658:	00300793          	li	a5,3
   1565c:	00f70e63          	beq	a4,a5,15678 <rt_mutex_control+0x70>
   15660:	4b900613          	li	a2,1209
   15664:	0000b597          	auipc	a1,0xb
   15668:	2e858593          	addi	a1,a1,744 # 2094c <__FUNCTION__.2569>
   1566c:	0000b517          	auipc	a0,0xb
   15670:	ed850513          	addi	a0,a0,-296 # 20544 <__FUNCTION__.2575+0x1a0>
   15674:	9d1fd0ef          	jal	ra,13044 <rt_assert_handler>

    return -RT_ERROR;
   15678:	fff00793          	li	a5,-1
}
   1567c:	00078513          	mv	a0,a5
   15680:	01c12083          	lw	ra,28(sp)
   15684:	01812403          	lw	s0,24(sp)
   15688:	02010113          	addi	sp,sp,32
   1568c:	00008067          	ret

00015690 <rt_event_init>:
 *           If the return value is any other values, it represents the initialization failed.
 *
 * @warning  This function can ONLY be called from threads.
 */
rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
   15690:	fe010113          	addi	sp,sp,-32
   15694:	00112e23          	sw	ra,28(sp)
   15698:	00812c23          	sw	s0,24(sp)
   1569c:	02010413          	addi	s0,sp,32
   156a0:	fea42623          	sw	a0,-20(s0)
   156a4:	feb42423          	sw	a1,-24(s0)
   156a8:	00060793          	mv	a5,a2
   156ac:	fef403a3          	sb	a5,-25(s0)
    /* parameter check */
    RT_ASSERT(event != RT_NULL);
   156b0:	fec42783          	lw	a5,-20(s0)
   156b4:	00079e63          	bnez	a5,156d0 <rt_event_init+0x40>
   156b8:	4ee00613          	li	a2,1262
   156bc:	0000b597          	auipc	a1,0xb
   156c0:	2a458593          	addi	a1,a1,676 # 20960 <__FUNCTION__.2575>
   156c4:	0000b517          	auipc	a0,0xb
   156c8:	f3850513          	addi	a0,a0,-200 # 205fc <__FUNCTION__.2575+0x258>
   156cc:	979fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   156d0:	fe744783          	lbu	a5,-25(s0)
   156d4:	02078463          	beqz	a5,156fc <rt_event_init+0x6c>
   156d8:	fe744703          	lbu	a4,-25(s0)
   156dc:	00100793          	li	a5,1
   156e0:	00f70e63          	beq	a4,a5,156fc <rt_event_init+0x6c>
   156e4:	4ef00613          	li	a2,1263
   156e8:	0000b597          	auipc	a1,0xb
   156ec:	27858593          	addi	a1,a1,632 # 20960 <__FUNCTION__.2575>
   156f0:	0000b517          	auipc	a0,0xb
   156f4:	cf050513          	addi	a0,a0,-784 # 203e0 <__FUNCTION__.2575+0x3c>
   156f8:	94dfd0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize object */
    rt_object_init(&(event->parent.parent), RT_Object_Class_Event, name);
   156fc:	fec42783          	lw	a5,-20(s0)
   15700:	fe842603          	lw	a2,-24(s0)
   15704:	00400593          	li	a1,4
   15708:	00078513          	mv	a0,a5
   1570c:	bb4fb0ef          	jal	ra,10ac0 <rt_object_init>

    /* set parent flag */
    event->parent.parent.flag = flag;
   15710:	fec42783          	lw	a5,-20(s0)
   15714:	fe744703          	lbu	a4,-25(s0)
   15718:	00e784a3          	sb	a4,9(a5)

    /* initialize ipc object */
    _ipc_object_init(&(event->parent));
   1571c:	fec42783          	lw	a5,-20(s0)
   15720:	00078513          	mv	a0,a5
   15724:	ab9fe0ef          	jal	ra,141dc <_ipc_object_init>

    /* initialize event */
    event->set = 0;
   15728:	fec42783          	lw	a5,-20(s0)
   1572c:	0007ae23          	sw	zero,28(a5)

    return RT_EOK;
   15730:	00000793          	li	a5,0
}
   15734:	00078513          	mv	a0,a5
   15738:	01c12083          	lw	ra,28(sp)
   1573c:	01812403          	lw	s0,24(sp)
   15740:	02010113          	addi	sp,sp,32
   15744:	00008067          	ret

00015748 <rt_event_detach>:
 * @warning  This function can ONLY detach a static event initialized by the rt_event_init() function.
 *           If the event is created by the rt_event_create() function, you MUST NOT USE this function to detach it,
 *           ONLY USE the rt_event_delete() function to complete the deletion.
 */
rt_err_t rt_event_detach(rt_event_t event)
{
   15748:	fe010113          	addi	sp,sp,-32
   1574c:	00112e23          	sw	ra,28(sp)
   15750:	00812c23          	sw	s0,24(sp)
   15754:	02010413          	addi	s0,sp,32
   15758:	fea42623          	sw	a0,-20(s0)
    /* parameter check */
    RT_ASSERT(event != RT_NULL);
   1575c:	fec42783          	lw	a5,-20(s0)
   15760:	00079e63          	bnez	a5,1577c <rt_event_detach+0x34>
   15764:	51700613          	li	a2,1303
   15768:	0000b597          	auipc	a1,0xb
   1576c:	20858593          	addi	a1,a1,520 # 20970 <__FUNCTION__.2579>
   15770:	0000b517          	auipc	a0,0xb
   15774:	e8c50513          	addi	a0,a0,-372 # 205fc <__FUNCTION__.2575+0x258>
   15778:	8cdfd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
   1577c:	fec42783          	lw	a5,-20(s0)
   15780:	00078513          	mv	a0,a5
   15784:	fa4fb0ef          	jal	ra,10f28 <rt_object_get_type>
   15788:	00050793          	mv	a5,a0
   1578c:	00078713          	mv	a4,a5
   15790:	00400793          	li	a5,4
   15794:	00f70e63          	beq	a4,a5,157b0 <rt_event_detach+0x68>
   15798:	51800613          	li	a2,1304
   1579c:	0000b597          	auipc	a1,0xb
   157a0:	1d458593          	addi	a1,a1,468 # 20970 <__FUNCTION__.2579>
   157a4:	0000b517          	auipc	a0,0xb
   157a8:	e6c50513          	addi	a0,a0,-404 # 20610 <__FUNCTION__.2575+0x26c>
   157ac:	899fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&event->parent.parent));
   157b0:	fec42783          	lw	a5,-20(s0)
   157b4:	00078513          	mv	a0,a5
   157b8:	f08fb0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   157bc:	00050793          	mv	a5,a0
   157c0:	00079e63          	bnez	a5,157dc <rt_event_detach+0x94>
   157c4:	51900613          	li	a2,1305
   157c8:	0000b597          	auipc	a1,0xb
   157cc:	1a858593          	addi	a1,a1,424 # 20970 <__FUNCTION__.2579>
   157d0:	0000b517          	auipc	a0,0xb
   157d4:	e8450513          	addi	a0,a0,-380 # 20654 <__FUNCTION__.2575+0x2b0>
   157d8:	86dfd0ef          	jal	ra,13044 <rt_assert_handler>

    /* resume all suspended thread */
    _ipc_list_resume_all(&(event->parent.suspend_thread));
   157dc:	fec42783          	lw	a5,-20(s0)
   157e0:	01478793          	addi	a5,a5,20
   157e4:	00078513          	mv	a0,a5
   157e8:	b8dfe0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* detach event object */
    rt_object_detach(&(event->parent.parent));
   157ec:	fec42783          	lw	a5,-20(s0)
   157f0:	00078513          	mv	a0,a5
   157f4:	c14fb0ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   157f8:	00000793          	li	a5,0
}
   157fc:	00078513          	mv	a0,a5
   15800:	01c12083          	lw	ra,28(sp)
   15804:	01812403          	lw	s0,24(sp)
   15808:	02010113          	addi	sp,sp,32
   1580c:	00008067          	ret

00015810 <rt_event_create>:
 * @return   Return a pointer to the event object. When the return value is RT_NULL, it means the creation failed.
 *
 * @warning  This function can ONLY be called from threads.
 */
rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
   15810:	fd010113          	addi	sp,sp,-48
   15814:	02112623          	sw	ra,44(sp)
   15818:	02812423          	sw	s0,40(sp)
   1581c:	03010413          	addi	s0,sp,48
   15820:	fca42e23          	sw	a0,-36(s0)
   15824:	00058793          	mv	a5,a1
   15828:	fcf40da3          	sb	a5,-37(s0)
    rt_event_t event;

    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   1582c:	fdb44783          	lbu	a5,-37(s0)
   15830:	02078463          	beqz	a5,15858 <rt_event_create+0x48>
   15834:	fdb44703          	lbu	a4,-37(s0)
   15838:	00100793          	li	a5,1
   1583c:	00f70e63          	beq	a4,a5,15858 <rt_event_create+0x48>
   15840:	54600613          	li	a2,1350
   15844:	0000b597          	auipc	a1,0xb
   15848:	13c58593          	addi	a1,a1,316 # 20980 <__FUNCTION__.2585>
   1584c:	0000b517          	auipc	a0,0xb
   15850:	b9450513          	addi	a0,a0,-1132 # 203e0 <__FUNCTION__.2575+0x3c>
   15854:	ff0fd0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   15858:	5f0060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1585c:	fea42623          	sw	a0,-20(s0)
   15860:	4b8030ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   15864:	00050793          	mv	a5,a0
   15868:	02078863          	beqz	a5,15898 <rt_event_create+0x88>
   1586c:	0000b597          	auipc	a1,0xb
   15870:	11458593          	addi	a1,a1,276 # 20980 <__FUNCTION__.2585>
   15874:	0000b517          	auipc	a0,0xb
   15878:	c2050513          	addi	a0,a0,-992 # 20494 <__FUNCTION__.2575+0xf0>
   1587c:	884fd0ef          	jal	ra,12900 <rt_kprintf>
   15880:	54800613          	li	a2,1352
   15884:	0000b597          	auipc	a1,0xb
   15888:	0fc58593          	addi	a1,a1,252 # 20980 <__FUNCTION__.2585>
   1588c:	0000b517          	auipc	a0,0xb
   15890:	b2c50513          	addi	a0,a0,-1236 # 203b8 <__FUNCTION__.2575+0x14>
   15894:	fb0fd0ef          	jal	ra,13044 <rt_assert_handler>
   15898:	fec42503          	lw	a0,-20(s0)
   1589c:	5b4060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* allocate object */
    event = (rt_event_t)rt_object_allocate(RT_Object_Class_Event, name);
   158a0:	fdc42583          	lw	a1,-36(s0)
   158a4:	00400513          	li	a0,4
   158a8:	bf4fb0ef          	jal	ra,10c9c <rt_object_allocate>
   158ac:	fea42423          	sw	a0,-24(s0)
    if (event == RT_NULL)
   158b0:	fe842783          	lw	a5,-24(s0)
   158b4:	00079663          	bnez	a5,158c0 <rt_event_create+0xb0>
        return event;
   158b8:	fe842783          	lw	a5,-24(s0)
   158bc:	0280006f          	j	158e4 <rt_event_create+0xd4>

    /* set parent */
    event->parent.parent.flag = flag;
   158c0:	fe842783          	lw	a5,-24(s0)
   158c4:	fdb44703          	lbu	a4,-37(s0)
   158c8:	00e784a3          	sb	a4,9(a5)

    /* initialize ipc object */
    _ipc_object_init(&(event->parent));
   158cc:	fe842783          	lw	a5,-24(s0)
   158d0:	00078513          	mv	a0,a5
   158d4:	909fe0ef          	jal	ra,141dc <_ipc_object_init>

    /* initialize event */
    event->set = 0;
   158d8:	fe842783          	lw	a5,-24(s0)
   158dc:	0007ae23          	sw	zero,28(a5)

    return event;
   158e0:	fe842783          	lw	a5,-24(s0)
}
   158e4:	00078513          	mv	a0,a5
   158e8:	02c12083          	lw	ra,44(sp)
   158ec:	02812403          	lw	s0,40(sp)
   158f0:	03010113          	addi	sp,sp,48
   158f4:	00008067          	ret

000158f8 <rt_event_delete>:
 * @warning  This function can ONLY delete an event initialized by the rt_event_create() function.
 *           If the event is initialized by the rt_event_init() function, you MUST NOT USE this function to delete it,
 *           ONLY USE the rt_event_detach() function to complete the detachment.
 */
rt_err_t rt_event_delete(rt_event_t event)
{
   158f8:	fd010113          	addi	sp,sp,-48
   158fc:	02112623          	sw	ra,44(sp)
   15900:	02812423          	sw	s0,40(sp)
   15904:	03010413          	addi	s0,sp,48
   15908:	fca42e23          	sw	a0,-36(s0)
    /* parameter check */
    RT_ASSERT(event != RT_NULL);
   1590c:	fdc42783          	lw	a5,-36(s0)
   15910:	00079e63          	bnez	a5,1592c <rt_event_delete+0x34>
   15914:	57200613          	li	a2,1394
   15918:	0000b597          	auipc	a1,0xb
   1591c:	07858593          	addi	a1,a1,120 # 20990 <__FUNCTION__.2590>
   15920:	0000b517          	auipc	a0,0xb
   15924:	cdc50513          	addi	a0,a0,-804 # 205fc <__FUNCTION__.2575+0x258>
   15928:	f1cfd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
   1592c:	fdc42783          	lw	a5,-36(s0)
   15930:	00078513          	mv	a0,a5
   15934:	df4fb0ef          	jal	ra,10f28 <rt_object_get_type>
   15938:	00050793          	mv	a5,a0
   1593c:	00078713          	mv	a4,a5
   15940:	00400793          	li	a5,4
   15944:	00f70e63          	beq	a4,a5,15960 <rt_event_delete+0x68>
   15948:	57300613          	li	a2,1395
   1594c:	0000b597          	auipc	a1,0xb
   15950:	04458593          	addi	a1,a1,68 # 20990 <__FUNCTION__.2590>
   15954:	0000b517          	auipc	a0,0xb
   15958:	cbc50513          	addi	a0,a0,-836 # 20610 <__FUNCTION__.2575+0x26c>
   1595c:	ee8fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&event->parent.parent) == RT_FALSE);
   15960:	fdc42783          	lw	a5,-36(s0)
   15964:	00078513          	mv	a0,a5
   15968:	d58fb0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   1596c:	00050793          	mv	a5,a0
   15970:	00078e63          	beqz	a5,1598c <rt_event_delete+0x94>
   15974:	57400613          	li	a2,1396
   15978:	0000b597          	auipc	a1,0xb
   1597c:	01858593          	addi	a1,a1,24 # 20990 <__FUNCTION__.2590>
   15980:	0000b517          	auipc	a0,0xb
   15984:	d0850513          	addi	a0,a0,-760 # 20688 <__FUNCTION__.2575+0x2e4>
   15988:	ebcfd0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   1598c:	4bc060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15990:	fea42623          	sw	a0,-20(s0)
   15994:	384030ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   15998:	00050793          	mv	a5,a0
   1599c:	02078863          	beqz	a5,159cc <rt_event_delete+0xd4>
   159a0:	0000b597          	auipc	a1,0xb
   159a4:	ff058593          	addi	a1,a1,-16 # 20990 <__FUNCTION__.2590>
   159a8:	0000b517          	auipc	a0,0xb
   159ac:	aec50513          	addi	a0,a0,-1300 # 20494 <__FUNCTION__.2575+0xf0>
   159b0:	f51fc0ef          	jal	ra,12900 <rt_kprintf>
   159b4:	57600613          	li	a2,1398
   159b8:	0000b597          	auipc	a1,0xb
   159bc:	fd858593          	addi	a1,a1,-40 # 20990 <__FUNCTION__.2590>
   159c0:	0000b517          	auipc	a0,0xb
   159c4:	9f850513          	addi	a0,a0,-1544 # 203b8 <__FUNCTION__.2575+0x14>
   159c8:	e7cfd0ef          	jal	ra,13044 <rt_assert_handler>
   159cc:	fec42503          	lw	a0,-20(s0)
   159d0:	480060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* resume all suspended thread */
    _ipc_list_resume_all(&(event->parent.suspend_thread));
   159d4:	fdc42783          	lw	a5,-36(s0)
   159d8:	01478793          	addi	a5,a5,20
   159dc:	00078513          	mv	a0,a5
   159e0:	995fe0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* delete event object */
    rt_object_delete(&(event->parent.parent));
   159e4:	fdc42783          	lw	a5,-36(s0)
   159e8:	00078513          	mv	a0,a5
   159ec:	c0cfb0ef          	jal	ra,10df8 <rt_object_delete>

    return RT_EOK;
   159f0:	00000793          	li	a5,0
}
   159f4:	00078513          	mv	a0,a5
   159f8:	02c12083          	lw	ra,44(sp)
   159fc:	02812403          	lw	s0,40(sp)
   15a00:	03010113          	addi	sp,sp,48
   15a04:	00008067          	ret

00015a08 <rt_event_send>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the event detach failed.
 */
rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
   15a08:	fd010113          	addi	sp,sp,-48
   15a0c:	02112623          	sw	ra,44(sp)
   15a10:	02812423          	sw	s0,40(sp)
   15a14:	02912223          	sw	s1,36(sp)
   15a18:	03010413          	addi	s0,sp,48
   15a1c:	fca42e23          	sw	a0,-36(s0)
   15a20:	fcb42c23          	sw	a1,-40(s0)
    register rt_ubase_t level;
    register rt_base_t status;
    rt_bool_t need_schedule;

    /* parameter check */
    RT_ASSERT(event != RT_NULL);
   15a24:	fdc42783          	lw	a5,-36(s0)
   15a28:	00079e63          	bnez	a5,15a44 <rt_event_send+0x3c>
   15a2c:	59e00613          	li	a2,1438
   15a30:	0000b597          	auipc	a1,0xb
   15a34:	f7058593          	addi	a1,a1,-144 # 209a0 <__FUNCTION__.2601>
   15a38:	0000b517          	auipc	a0,0xb
   15a3c:	bc450513          	addi	a0,a0,-1084 # 205fc <__FUNCTION__.2575+0x258>
   15a40:	e04fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
   15a44:	fdc42783          	lw	a5,-36(s0)
   15a48:	00078513          	mv	a0,a5
   15a4c:	cdcfb0ef          	jal	ra,10f28 <rt_object_get_type>
   15a50:	00050793          	mv	a5,a0
   15a54:	00078713          	mv	a4,a5
   15a58:	00400793          	li	a5,4
   15a5c:	00f70e63          	beq	a4,a5,15a78 <rt_event_send+0x70>
   15a60:	59f00613          	li	a2,1439
   15a64:	0000b597          	auipc	a1,0xb
   15a68:	f3c58593          	addi	a1,a1,-196 # 209a0 <__FUNCTION__.2601>
   15a6c:	0000b517          	auipc	a0,0xb
   15a70:	ba450513          	addi	a0,a0,-1116 # 20610 <__FUNCTION__.2575+0x26c>
   15a74:	dd0fd0ef          	jal	ra,13044 <rt_assert_handler>

    if (set == 0)
   15a78:	fd842783          	lw	a5,-40(s0)
   15a7c:	00079663          	bnez	a5,15a88 <rt_event_send+0x80>
        return -RT_ERROR;
   15a80:	fff00793          	li	a5,-1
   15a84:	19c0006f          	j	15c20 <rt_event_send+0x218>

    need_schedule = RT_FALSE;
   15a88:	fe042423          	sw	zero,-24(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   15a8c:	3bc060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15a90:	00050793          	mv	a5,a0
   15a94:	00078493          	mv	s1,a5

    /* set event */
    event->set |= set;
   15a98:	fdc42783          	lw	a5,-36(s0)
   15a9c:	01c7a703          	lw	a4,28(a5)
   15aa0:	fd842783          	lw	a5,-40(s0)
   15aa4:	00f76733          	or	a4,a4,a5
   15aa8:	fdc42783          	lw	a5,-36(s0)
   15aac:	00e7ae23          	sw	a4,28(a5)

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(event->parent.parent)));
   15ab0:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   15ab4:	0007a783          	lw	a5,0(a5)
   15ab8:	00078c63          	beqz	a5,15ad0 <rt_event_send+0xc8>
   15abc:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   15ac0:	0007a703          	lw	a4,0(a5)
   15ac4:	fdc42783          	lw	a5,-36(s0)
   15ac8:	00078513          	mv	a0,a5
   15acc:	000700e7          	jalr	a4

    if (!rt_list_isempty(&event->parent.suspend_thread))
   15ad0:	fdc42783          	lw	a5,-36(s0)
   15ad4:	01478793          	addi	a5,a5,20
   15ad8:	00078513          	mv	a0,a5
   15adc:	ec8fe0ef          	jal	ra,141a4 <rt_list_isempty>
   15ae0:	00050793          	mv	a5,a0
   15ae4:	10079e63          	bnez	a5,15c00 <rt_event_send+0x1f8>
    {
        /* search thread list to resume thread */
        n = event->parent.suspend_thread.next;
   15ae8:	fdc42783          	lw	a5,-36(s0)
   15aec:	0147a783          	lw	a5,20(a5)
   15af0:	fef42623          	sw	a5,-20(s0)
        while (n != &(event->parent.suspend_thread))
   15af4:	0fc0006f          	j	15bf0 <rt_event_send+0x1e8>
        {
            /* get thread */
            thread = rt_list_entry(n, struct rt_thread, tlist);
   15af8:	fec42783          	lw	a5,-20(s0)
   15afc:	fec78793          	addi	a5,a5,-20
   15b00:	fef42223          	sw	a5,-28(s0)

            status = -RT_ERROR;
   15b04:	fff00093          	li	ra,-1
            if (thread->event_info & RT_EVENT_FLAG_AND)
   15b08:	fe442783          	lw	a5,-28(s0)
   15b0c:	0407c783          	lbu	a5,64(a5)
   15b10:	0017f793          	andi	a5,a5,1
   15b14:	02078663          	beqz	a5,15b40 <rt_event_send+0x138>
            {
                if ((thread->event_set & event->set) == thread->event_set)
   15b18:	fe442783          	lw	a5,-28(s0)
   15b1c:	03c7a703          	lw	a4,60(a5)
   15b20:	fdc42783          	lw	a5,-36(s0)
   15b24:	01c7a783          	lw	a5,28(a5)
   15b28:	00f77733          	and	a4,a4,a5
   15b2c:	fe442783          	lw	a5,-28(s0)
   15b30:	03c7a783          	lw	a5,60(a5)
   15b34:	06f71663          	bne	a4,a5,15ba0 <rt_event_send+0x198>
                {
                    /* received an AND event */
                    status = RT_EOK;
   15b38:	00000093          	li	ra,0
   15b3c:	0640006f          	j	15ba0 <rt_event_send+0x198>
                }
            }
            else if (thread->event_info & RT_EVENT_FLAG_OR)
   15b40:	fe442783          	lw	a5,-28(s0)
   15b44:	0407c783          	lbu	a5,64(a5)
   15b48:	0027f793          	andi	a5,a5,2
   15b4c:	04078063          	beqz	a5,15b8c <rt_event_send+0x184>
            {
                if (thread->event_set & event->set)
   15b50:	fe442783          	lw	a5,-28(s0)
   15b54:	03c7a703          	lw	a4,60(a5)
   15b58:	fdc42783          	lw	a5,-36(s0)
   15b5c:	01c7a783          	lw	a5,28(a5)
   15b60:	00f777b3          	and	a5,a4,a5
   15b64:	02078e63          	beqz	a5,15ba0 <rt_event_send+0x198>
                {
                    /* save the received event set */
                    thread->event_set = thread->event_set & event->set;
   15b68:	fe442783          	lw	a5,-28(s0)
   15b6c:	03c7a703          	lw	a4,60(a5)
   15b70:	fdc42783          	lw	a5,-36(s0)
   15b74:	01c7a783          	lw	a5,28(a5)
   15b78:	00f77733          	and	a4,a4,a5
   15b7c:	fe442783          	lw	a5,-28(s0)
   15b80:	02e7ae23          	sw	a4,60(a5)

                    /* received an OR event */
                    status = RT_EOK;
   15b84:	00000093          	li	ra,0
   15b88:	0180006f          	j	15ba0 <rt_event_send+0x198>
                }
            }
            else
            {
                /* enable interrupt */
                rt_hw_interrupt_enable(level);
   15b8c:	00048793          	mv	a5,s1
   15b90:	00078513          	mv	a0,a5
   15b94:	2bc060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                return -RT_EINVAL;
   15b98:	ff600793          	li	a5,-10
   15b9c:	0840006f          	j	15c20 <rt_event_send+0x218>
            }

            /* move node to the next */
            n = n->next;
   15ba0:	fec42783          	lw	a5,-20(s0)
   15ba4:	0007a783          	lw	a5,0(a5)
   15ba8:	fef42623          	sw	a5,-20(s0)

            /* condition is satisfied, resume thread */
            if (status == RT_EOK)
   15bac:	04009263          	bnez	ra,15bf0 <rt_event_send+0x1e8>
            {
                /* clear event */
                if (thread->event_info & RT_EVENT_FLAG_CLEAR)
   15bb0:	fe442783          	lw	a5,-28(s0)
   15bb4:	0407c783          	lbu	a5,64(a5)
   15bb8:	0047f793          	andi	a5,a5,4
   15bbc:	02078263          	beqz	a5,15be0 <rt_event_send+0x1d8>
                    event->set &= ~thread->event_set;
   15bc0:	fdc42783          	lw	a5,-36(s0)
   15bc4:	01c7a703          	lw	a4,28(a5)
   15bc8:	fe442783          	lw	a5,-28(s0)
   15bcc:	03c7a783          	lw	a5,60(a5)
   15bd0:	fff7c793          	not	a5,a5
   15bd4:	00f77733          	and	a4,a4,a5
   15bd8:	fdc42783          	lw	a5,-36(s0)
   15bdc:	00e7ae23          	sw	a4,28(a5)

                /* resume thread, and thread list breaks out */
                rt_thread_resume(thread);
   15be0:	fe442503          	lw	a0,-28(s0)
   15be4:	b10fe0ef          	jal	ra,13ef4 <rt_thread_resume>

                /* need do a scheduling */
                need_schedule = RT_TRUE;
   15be8:	00100793          	li	a5,1
   15bec:	fef42423          	sw	a5,-24(s0)
        while (n != &(event->parent.suspend_thread))
   15bf0:	fdc42783          	lw	a5,-36(s0)
   15bf4:	01478793          	addi	a5,a5,20
   15bf8:	fec42703          	lw	a4,-20(s0)
   15bfc:	eef71ee3          	bne	a4,a5,15af8 <rt_event_send+0xf0>
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   15c00:	00048793          	mv	a5,s1
   15c04:	00078513          	mv	a0,a5
   15c08:	248060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* do a schedule */
    if (need_schedule == RT_TRUE)
   15c0c:	fe842703          	lw	a4,-24(s0)
   15c10:	00100793          	li	a5,1
   15c14:	00f71463          	bne	a4,a5,15c1c <rt_event_send+0x214>
        rt_schedule();
   15c18:	271020ef          	jal	ra,18688 <rt_schedule>

    return RT_EOK;
   15c1c:	00000793          	li	a5,0
}
   15c20:	00078513          	mv	a0,a5
   15c24:	02c12083          	lw	ra,44(sp)
   15c28:	02812403          	lw	s0,40(sp)
   15c2c:	02412483          	lw	s1,36(sp)
   15c30:	03010113          	addi	sp,sp,48
   15c34:	00008067          	ret

00015c38 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   option,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
   15c38:	fc010113          	addi	sp,sp,-64
   15c3c:	02112e23          	sw	ra,60(sp)
   15c40:	02812c23          	sw	s0,56(sp)
   15c44:	02912a23          	sw	s1,52(sp)
   15c48:	03212823          	sw	s2,48(sp)
   15c4c:	04010413          	addi	s0,sp,64
   15c50:	fca42e23          	sw	a0,-36(s0)
   15c54:	fcb42c23          	sw	a1,-40(s0)
   15c58:	00060793          	mv	a5,a2
   15c5c:	fcd42823          	sw	a3,-48(s0)
   15c60:	fce42623          	sw	a4,-52(s0)
   15c64:	fcf40ba3          	sb	a5,-41(s0)
    struct rt_thread *thread;
    register rt_ubase_t level;
    register rt_base_t status;

    RT_DEBUG_IN_THREAD_CONTEXT;
   15c68:	1e0060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15c6c:	fea42623          	sw	a0,-20(s0)
   15c70:	861fd0ef          	jal	ra,134d0 <rt_thread_self>
   15c74:	00050793          	mv	a5,a0
   15c78:	02079863          	bnez	a5,15ca8 <rt_event_recv+0x70>
   15c7c:	0000b597          	auipc	a1,0xb
   15c80:	d3458593          	addi	a1,a1,-716 # 209b0 <__FUNCTION__.2616>
   15c84:	0000b517          	auipc	a0,0xb
   15c88:	87450513          	addi	a0,a0,-1932 # 204f8 <__FUNCTION__.2575+0x154>
   15c8c:	c75fc0ef          	jal	ra,12900 <rt_kprintf>
   15c90:	61c00613          	li	a2,1564
   15c94:	0000b597          	auipc	a1,0xb
   15c98:	d1c58593          	addi	a1,a1,-740 # 209b0 <__FUNCTION__.2616>
   15c9c:	0000a517          	auipc	a0,0xa
   15ca0:	71c50513          	addi	a0,a0,1820 # 203b8 <__FUNCTION__.2575+0x14>
   15ca4:	ba0fd0ef          	jal	ra,13044 <rt_assert_handler>
   15ca8:	1a0060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15cac:	fea42423          	sw	a0,-24(s0)
   15cb0:	068030ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   15cb4:	00050793          	mv	a5,a0
   15cb8:	02078863          	beqz	a5,15ce8 <rt_event_recv+0xb0>
   15cbc:	0000b597          	auipc	a1,0xb
   15cc0:	cf458593          	addi	a1,a1,-780 # 209b0 <__FUNCTION__.2616>
   15cc4:	0000a517          	auipc	a0,0xa
   15cc8:	7d050513          	addi	a0,a0,2000 # 20494 <__FUNCTION__.2575+0xf0>
   15ccc:	c35fc0ef          	jal	ra,12900 <rt_kprintf>
   15cd0:	61c00613          	li	a2,1564
   15cd4:	0000b597          	auipc	a1,0xb
   15cd8:	cdc58593          	addi	a1,a1,-804 # 209b0 <__FUNCTION__.2616>
   15cdc:	0000a517          	auipc	a0,0xa
   15ce0:	6dc50513          	addi	a0,a0,1756 # 203b8 <__FUNCTION__.2575+0x14>
   15ce4:	b60fd0ef          	jal	ra,13044 <rt_assert_handler>
   15ce8:	fe842503          	lw	a0,-24(s0)
   15cec:	164060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   15cf0:	fec42503          	lw	a0,-20(s0)
   15cf4:	15c060ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* parameter check */
    RT_ASSERT(event != RT_NULL);
   15cf8:	fdc42783          	lw	a5,-36(s0)
   15cfc:	00079e63          	bnez	a5,15d18 <rt_event_recv+0xe0>
   15d00:	61f00613          	li	a2,1567
   15d04:	0000b597          	auipc	a1,0xb
   15d08:	cac58593          	addi	a1,a1,-852 # 209b0 <__FUNCTION__.2616>
   15d0c:	0000b517          	auipc	a0,0xb
   15d10:	8f050513          	addi	a0,a0,-1808 # 205fc <__FUNCTION__.2575+0x258>
   15d14:	b30fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
   15d18:	fdc42783          	lw	a5,-36(s0)
   15d1c:	00078513          	mv	a0,a5
   15d20:	a08fb0ef          	jal	ra,10f28 <rt_object_get_type>
   15d24:	00050793          	mv	a5,a0
   15d28:	00078713          	mv	a4,a5
   15d2c:	00400793          	li	a5,4
   15d30:	00f70e63          	beq	a4,a5,15d4c <rt_event_recv+0x114>
   15d34:	62000613          	li	a2,1568
   15d38:	0000b597          	auipc	a1,0xb
   15d3c:	c7858593          	addi	a1,a1,-904 # 209b0 <__FUNCTION__.2616>
   15d40:	0000b517          	auipc	a0,0xb
   15d44:	8d050513          	addi	a0,a0,-1840 # 20610 <__FUNCTION__.2575+0x26c>
   15d48:	afcfd0ef          	jal	ra,13044 <rt_assert_handler>

    if (set == 0)
   15d4c:	fd842783          	lw	a5,-40(s0)
   15d50:	00079663          	bnez	a5,15d5c <rt_event_recv+0x124>
        return -RT_ERROR;
   15d54:	fff00793          	li	a5,-1
   15d58:	2380006f          	j	15f90 <rt_event_recv+0x358>

    /* initialize status */
    status = -RT_ERROR;
   15d5c:	fff00493          	li	s1,-1
    /* get current thread */
    thread = rt_thread_self();
   15d60:	f70fd0ef          	jal	ra,134d0 <rt_thread_self>
   15d64:	fea42223          	sw	a0,-28(s0)
    /* reset thread error */
    thread->error = RT_EOK;
   15d68:	fe442783          	lw	a5,-28(s0)
   15d6c:	0207a823          	sw	zero,48(a5)

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(event->parent.parent)));
   15d70:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   15d74:	0007a783          	lw	a5,0(a5)
   15d78:	00078c63          	beqz	a5,15d90 <rt_event_recv+0x158>
   15d7c:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   15d80:	0007a703          	lw	a4,0(a5)
   15d84:	fdc42783          	lw	a5,-36(s0)
   15d88:	00078513          	mv	a0,a5
   15d8c:	000700e7          	jalr	a4

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   15d90:	0b8060ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15d94:	00050793          	mv	a5,a0
   15d98:	00078913          	mv	s2,a5

    /* check event set */
    if (option & RT_EVENT_FLAG_AND)
   15d9c:	fd744783          	lbu	a5,-41(s0)
   15da0:	0017f793          	andi	a5,a5,1
   15da4:	02078263          	beqz	a5,15dc8 <rt_event_recv+0x190>
    {
        if ((event->set & set) == set)
   15da8:	fdc42783          	lw	a5,-36(s0)
   15dac:	01c7a703          	lw	a4,28(a5)
   15db0:	fd842783          	lw	a5,-40(s0)
   15db4:	00f777b3          	and	a5,a4,a5
   15db8:	fd842703          	lw	a4,-40(s0)
   15dbc:	04f71663          	bne	a4,a5,15e08 <rt_event_recv+0x1d0>
            status = RT_EOK;
   15dc0:	00000493          	li	s1,0
   15dc4:	0440006f          	j	15e08 <rt_event_recv+0x1d0>
    }
    else if (option & RT_EVENT_FLAG_OR)
   15dc8:	fd744783          	lbu	a5,-41(s0)
   15dcc:	0027f793          	andi	a5,a5,2
   15dd0:	02078063          	beqz	a5,15df0 <rt_event_recv+0x1b8>
    {
        if (event->set & set)
   15dd4:	fdc42783          	lw	a5,-36(s0)
   15dd8:	01c7a703          	lw	a4,28(a5)
   15ddc:	fd842783          	lw	a5,-40(s0)
   15de0:	00f777b3          	and	a5,a4,a5
   15de4:	02078263          	beqz	a5,15e08 <rt_event_recv+0x1d0>
            status = RT_EOK;
   15de8:	00000493          	li	s1,0
   15dec:	01c0006f          	j	15e08 <rt_event_recv+0x1d0>
    }
    else
    {
        /* either RT_EVENT_FLAG_AND or RT_EVENT_FLAG_OR should be set */
        RT_ASSERT(0);
   15df0:	63f00613          	li	a2,1599
   15df4:	0000b597          	auipc	a1,0xb
   15df8:	bbc58593          	addi	a1,a1,-1092 # 209b0 <__FUNCTION__.2616>
   15dfc:	0000a517          	auipc	a0,0xa
   15e00:	5bc50513          	addi	a0,a0,1468 # 203b8 <__FUNCTION__.2575+0x14>
   15e04:	a40fd0ef          	jal	ra,13044 <rt_assert_handler>
    }

    if (status == RT_EOK)
   15e08:	06049a63          	bnez	s1,15e7c <rt_event_recv+0x244>
    {
        /* set received event */
        if (recved)
   15e0c:	fcc42783          	lw	a5,-52(s0)
   15e10:	00078e63          	beqz	a5,15e2c <rt_event_recv+0x1f4>
            *recved = (event->set & set);
   15e14:	fdc42783          	lw	a5,-36(s0)
   15e18:	01c7a703          	lw	a4,28(a5)
   15e1c:	fd842783          	lw	a5,-40(s0)
   15e20:	00f77733          	and	a4,a4,a5
   15e24:	fcc42783          	lw	a5,-52(s0)
   15e28:	00e7a023          	sw	a4,0(a5)

        /* fill thread event info */
        thread->event_set = (event->set & set);
   15e2c:	fdc42783          	lw	a5,-36(s0)
   15e30:	01c7a703          	lw	a4,28(a5)
   15e34:	fd842783          	lw	a5,-40(s0)
   15e38:	00f77733          	and	a4,a4,a5
   15e3c:	fe442783          	lw	a5,-28(s0)
   15e40:	02e7ae23          	sw	a4,60(a5)
        thread->event_info = option;
   15e44:	fe442783          	lw	a5,-28(s0)
   15e48:	fd744703          	lbu	a4,-41(s0)
   15e4c:	04e78023          	sb	a4,64(a5)

        /* received event */
        if (option & RT_EVENT_FLAG_CLEAR)
   15e50:	fd744783          	lbu	a5,-41(s0)
   15e54:	0047f793          	andi	a5,a5,4
   15e58:	10078263          	beqz	a5,15f5c <rt_event_recv+0x324>
            event->set &= ~set;
   15e5c:	fdc42783          	lw	a5,-36(s0)
   15e60:	01c7a703          	lw	a4,28(a5)
   15e64:	fd842783          	lw	a5,-40(s0)
   15e68:	fff7c793          	not	a5,a5
   15e6c:	00f77733          	and	a4,a4,a5
   15e70:	fdc42783          	lw	a5,-36(s0)
   15e74:	00e7ae23          	sw	a4,28(a5)
   15e78:	0e40006f          	j	15f5c <rt_event_recv+0x324>
    }
    else if (timeout == 0)
   15e7c:	fd042783          	lw	a5,-48(s0)
   15e80:	02079263          	bnez	a5,15ea4 <rt_event_recv+0x26c>
    {
        /* no waiting */
        thread->error = -RT_ETIMEOUT;
   15e84:	fe442783          	lw	a5,-28(s0)
   15e88:	ffe00713          	li	a4,-2
   15e8c:	02e7a823          	sw	a4,48(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   15e90:	00090793          	mv	a5,s2
   15e94:	00078513          	mv	a0,a5
   15e98:	7b9050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        return -RT_ETIMEOUT;
   15e9c:	ffe00793          	li	a5,-2
   15ea0:	0f00006f          	j	15f90 <rt_event_recv+0x358>
    }
    else
    {
        /* fill thread event info */
        thread->event_set  = set;
   15ea4:	fe442783          	lw	a5,-28(s0)
   15ea8:	fd842703          	lw	a4,-40(s0)
   15eac:	02e7ae23          	sw	a4,60(a5)
        thread->event_info = option;
   15eb0:	fe442783          	lw	a5,-28(s0)
   15eb4:	fd744703          	lbu	a4,-41(s0)
   15eb8:	04e78023          	sb	a4,64(a5)

        /* put thread to suspended thread list */
        _ipc_list_suspend(&(event->parent.suspend_thread),
   15ebc:	fdc42783          	lw	a5,-36(s0)
   15ec0:	01478713          	addi	a4,a5,20
   15ec4:	fdc42783          	lw	a5,-36(s0)
   15ec8:	0097c783          	lbu	a5,9(a5)
   15ecc:	00078613          	mv	a2,a5
   15ed0:	fe442583          	lw	a1,-28(s0)
   15ed4:	00070513          	mv	a0,a4
   15ed8:	b40fe0ef          	jal	ra,14218 <_ipc_list_suspend>
                            thread,
                            event->parent.parent.flag);

        /* if there is a waiting timeout, active thread timer */
        if (timeout > 0)
   15edc:	fd042783          	lw	a5,-48(s0)
   15ee0:	02f05863          	blez	a5,15f10 <rt_event_recv+0x2d8>
        {
            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
   15ee4:	fe442783          	lw	a5,-28(s0)
   15ee8:	04c78793          	addi	a5,a5,76
   15eec:	fd040713          	addi	a4,s0,-48
   15ef0:	00070613          	mv	a2,a4
   15ef4:	00000593          	li	a1,0
   15ef8:	00078513          	mv	a0,a5
   15efc:	2e0050ef          	jal	ra,1b1dc <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
   15f00:	fe442783          	lw	a5,-28(s0)
   15f04:	04c78793          	addi	a5,a5,76
   15f08:	00078513          	mv	a0,a5
   15f0c:	63d040ef          	jal	ra,1ad48 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   15f10:	00090793          	mv	a5,s2
   15f14:	00078513          	mv	a0,a5
   15f18:	739050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        /* do a schedule */
        rt_schedule();
   15f1c:	76c020ef          	jal	ra,18688 <rt_schedule>

        if (thread->error != RT_EOK)
   15f20:	fe442783          	lw	a5,-28(s0)
   15f24:	0307a783          	lw	a5,48(a5)
   15f28:	00078863          	beqz	a5,15f38 <rt_event_recv+0x300>
        {
            /* return error */
            return thread->error;
   15f2c:	fe442783          	lw	a5,-28(s0)
   15f30:	0307a783          	lw	a5,48(a5)
   15f34:	05c0006f          	j	15f90 <rt_event_recv+0x358>
        }

        /* received an event, disable interrupt to protect */
        level = rt_hw_interrupt_disable();
   15f38:	711050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   15f3c:	00050793          	mv	a5,a0
   15f40:	00078913          	mv	s2,a5

        /* set received event */
        if (recved)
   15f44:	fcc42783          	lw	a5,-52(s0)
   15f48:	00078a63          	beqz	a5,15f5c <rt_event_recv+0x324>
            *recved = thread->event_set;
   15f4c:	fe442783          	lw	a5,-28(s0)
   15f50:	03c7a703          	lw	a4,60(a5)
   15f54:	fcc42783          	lw	a5,-52(s0)
   15f58:	00e7a023          	sw	a4,0(a5)
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   15f5c:	00090793          	mv	a5,s2
   15f60:	00078513          	mv	a0,a5
   15f64:	6ed050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(event->parent.parent)));
   15f68:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   15f6c:	0007a783          	lw	a5,0(a5)
   15f70:	00078c63          	beqz	a5,15f88 <rt_event_recv+0x350>
   15f74:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   15f78:	0007a703          	lw	a4,0(a5)
   15f7c:	fdc42783          	lw	a5,-36(s0)
   15f80:	00078513          	mv	a0,a5
   15f84:	000700e7          	jalr	a4

    return thread->error;
   15f88:	fe442783          	lw	a5,-28(s0)
   15f8c:	0307a783          	lw	a5,48(a5)
}
   15f90:	00078513          	mv	a0,a5
   15f94:	03c12083          	lw	ra,60(sp)
   15f98:	03812403          	lw	s0,56(sp)
   15f9c:	03412483          	lw	s1,52(sp)
   15fa0:	03012903          	lw	s2,48(sp)
   15fa4:	04010113          	addi	sp,sp,64
   15fa8:	00008067          	ret

00015fac <rt_event_control>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that this function failed to execute.
 */
rt_err_t rt_event_control(rt_event_t event, int cmd, void *arg)
{
   15fac:	fd010113          	addi	sp,sp,-48
   15fb0:	02112623          	sw	ra,44(sp)
   15fb4:	02812423          	sw	s0,40(sp)
   15fb8:	03010413          	addi	s0,sp,48
   15fbc:	fca42e23          	sw	a0,-36(s0)
   15fc0:	fcb42c23          	sw	a1,-40(s0)
   15fc4:	fcc42a23          	sw	a2,-44(s0)
    rt_ubase_t level;

    /* parameter check */
    RT_ASSERT(event != RT_NULL);
   15fc8:	fdc42783          	lw	a5,-36(s0)
   15fcc:	00079e63          	bnez	a5,15fe8 <rt_event_control+0x3c>
   15fd0:	6a000613          	li	a2,1696
   15fd4:	0000b597          	auipc	a1,0xb
   15fd8:	9ec58593          	addi	a1,a1,-1556 # 209c0 <__FUNCTION__.2624>
   15fdc:	0000a517          	auipc	a0,0xa
   15fe0:	62050513          	addi	a0,a0,1568 # 205fc <__FUNCTION__.2575+0x258>
   15fe4:	860fd0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
   15fe8:	fdc42783          	lw	a5,-36(s0)
   15fec:	00078513          	mv	a0,a5
   15ff0:	f39fa0ef          	jal	ra,10f28 <rt_object_get_type>
   15ff4:	00050793          	mv	a5,a0
   15ff8:	00078713          	mv	a4,a5
   15ffc:	00400793          	li	a5,4
   16000:	00f70e63          	beq	a4,a5,1601c <rt_event_control+0x70>
   16004:	6a100613          	li	a2,1697
   16008:	0000b597          	auipc	a1,0xb
   1600c:	9b858593          	addi	a1,a1,-1608 # 209c0 <__FUNCTION__.2624>
   16010:	0000a517          	auipc	a0,0xa
   16014:	60050513          	addi	a0,a0,1536 # 20610 <__FUNCTION__.2575+0x26c>
   16018:	82cfd0ef          	jal	ra,13044 <rt_assert_handler>

    if (cmd == RT_IPC_CMD_RESET)
   1601c:	fd842703          	lw	a4,-40(s0)
   16020:	00100793          	li	a5,1
   16024:	04f71063          	bne	a4,a5,16064 <rt_event_control+0xb8>
    {
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
   16028:	621050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1602c:	00050793          	mv	a5,a0
   16030:	fef42623          	sw	a5,-20(s0)

        /* resume all waiting thread */
        _ipc_list_resume_all(&event->parent.suspend_thread);
   16034:	fdc42783          	lw	a5,-36(s0)
   16038:	01478793          	addi	a5,a5,20
   1603c:	00078513          	mv	a0,a5
   16040:	b34fe0ef          	jal	ra,14374 <_ipc_list_resume_all>

        /* initialize event set */
        event->set = 0;
   16044:	fdc42783          	lw	a5,-36(s0)
   16048:	0007ae23          	sw	zero,28(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   1604c:	fec42783          	lw	a5,-20(s0)
   16050:	00078513          	mv	a0,a5
   16054:	5fd050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   16058:	630020ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   1605c:	00000793          	li	a5,0
   16060:	0080006f          	j	16068 <rt_event_control+0xbc>
    }

    return -RT_ERROR;
   16064:	fff00793          	li	a5,-1
}
   16068:	00078513          	mv	a0,a5
   1606c:	02c12083          	lw	ra,44(sp)
   16070:	02812403          	lw	s0,40(sp)
   16074:	03010113          	addi	sp,sp,48
   16078:	00008067          	ret

0001607c <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
   1607c:	fd010113          	addi	sp,sp,-48
   16080:	02112623          	sw	ra,44(sp)
   16084:	02812423          	sw	s0,40(sp)
   16088:	03010413          	addi	s0,sp,48
   1608c:	fea42623          	sw	a0,-20(s0)
   16090:	feb42423          	sw	a1,-24(s0)
   16094:	fec42223          	sw	a2,-28(s0)
   16098:	fed42023          	sw	a3,-32(s0)
   1609c:	00070793          	mv	a5,a4
   160a0:	fcf40fa3          	sb	a5,-33(s0)
    RT_ASSERT(mb != RT_NULL);
   160a4:	fec42783          	lw	a5,-20(s0)
   160a8:	00079e63          	bnez	a5,160c4 <rt_mb_init+0x48>
   160ac:	6ee00613          	li	a2,1774
   160b0:	0000b597          	auipc	a1,0xb
   160b4:	92458593          	addi	a1,a1,-1756 # 209d4 <__FUNCTION__.2632>
   160b8:	0000a517          	auipc	a0,0xa
   160bc:	61050513          	addi	a0,a0,1552 # 206c8 <__FUNCTION__.2575+0x324>
   160c0:	f85fc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   160c4:	fdf44783          	lbu	a5,-33(s0)
   160c8:	02078463          	beqz	a5,160f0 <rt_mb_init+0x74>
   160cc:	fdf44703          	lbu	a4,-33(s0)
   160d0:	00100793          	li	a5,1
   160d4:	00f70e63          	beq	a4,a5,160f0 <rt_mb_init+0x74>
   160d8:	6ef00613          	li	a2,1775
   160dc:	0000b597          	auipc	a1,0xb
   160e0:	8f858593          	addi	a1,a1,-1800 # 209d4 <__FUNCTION__.2632>
   160e4:	0000a517          	auipc	a0,0xa
   160e8:	2fc50513          	addi	a0,a0,764 # 203e0 <__FUNCTION__.2575+0x3c>
   160ec:	f59fc0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize object */
    rt_object_init(&(mb->parent.parent), RT_Object_Class_MailBox, name);
   160f0:	fec42783          	lw	a5,-20(s0)
   160f4:	fe842603          	lw	a2,-24(s0)
   160f8:	00500593          	li	a1,5
   160fc:	00078513          	mv	a0,a5
   16100:	9c1fa0ef          	jal	ra,10ac0 <rt_object_init>

    /* set parent flag */
    mb->parent.parent.flag = flag;
   16104:	fec42783          	lw	a5,-20(s0)
   16108:	fdf44703          	lbu	a4,-33(s0)
   1610c:	00e784a3          	sb	a4,9(a5)

    /* initialize ipc object */
    _ipc_object_init(&(mb->parent));
   16110:	fec42783          	lw	a5,-20(s0)
   16114:	00078513          	mv	a0,a5
   16118:	8c4fe0ef          	jal	ra,141dc <_ipc_object_init>

    /* initialize mailbox */
    mb->msg_pool   = (rt_ubase_t *)msgpool;
   1611c:	fec42783          	lw	a5,-20(s0)
   16120:	fe442703          	lw	a4,-28(s0)
   16124:	00e7ae23          	sw	a4,28(a5)
    mb->size       = size;
   16128:	fe042783          	lw	a5,-32(s0)
   1612c:	01079713          	slli	a4,a5,0x10
   16130:	01075713          	srli	a4,a4,0x10
   16134:	fec42783          	lw	a5,-20(s0)
   16138:	02e79023          	sh	a4,32(a5)
    mb->entry      = 0;
   1613c:	fec42783          	lw	a5,-20(s0)
   16140:	02079123          	sh	zero,34(a5)
    mb->in_offset  = 0;
   16144:	fec42783          	lw	a5,-20(s0)
   16148:	02079223          	sh	zero,36(a5)
    mb->out_offset = 0;
   1614c:	fec42783          	lw	a5,-20(s0)
   16150:	02079323          	sh	zero,38(a5)

    /* initialize an additional list of sender suspend thread */
    rt_list_init(&(mb->suspend_sender_thread));
   16154:	fec42783          	lw	a5,-20(s0)
   16158:	02878793          	addi	a5,a5,40
   1615c:	00078513          	mv	a0,a5
   16160:	fadfd0ef          	jal	ra,1410c <rt_list_init>

    return RT_EOK;
   16164:	00000793          	li	a5,0
}
   16168:	00078513          	mv	a0,a5
   1616c:	02c12083          	lw	ra,44(sp)
   16170:	02812403          	lw	s0,40(sp)
   16174:	03010113          	addi	sp,sp,48
   16178:	00008067          	ret

0001617c <rt_mb_detach>:
 * @warning  This function can ONLY detach a static mailbox initialized by the rt_mb_init() function.
 *           If the mailbox is created by the rt_mb_create() function, you MUST NOT USE this function to detach it,
 *           ONLY USE the rt_mb_delete() function to complete the deletion.
 */
rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
   1617c:	fe010113          	addi	sp,sp,-32
   16180:	00112e23          	sw	ra,28(sp)
   16184:	00812c23          	sw	s0,24(sp)
   16188:	02010413          	addi	s0,sp,32
   1618c:	fea42623          	sw	a0,-20(s0)
    /* parameter check */
    RT_ASSERT(mb != RT_NULL);
   16190:	fec42783          	lw	a5,-20(s0)
   16194:	00079e63          	bnez	a5,161b0 <rt_mb_detach+0x34>
   16198:	71e00613          	li	a2,1822
   1619c:	0000b597          	auipc	a1,0xb
   161a0:	84458593          	addi	a1,a1,-1980 # 209e0 <__FUNCTION__.2636>
   161a4:	0000a517          	auipc	a0,0xa
   161a8:	52450513          	addi	a0,a0,1316 # 206c8 <__FUNCTION__.2575+0x324>
   161ac:	e99fc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
   161b0:	fec42783          	lw	a5,-20(s0)
   161b4:	00078513          	mv	a0,a5
   161b8:	d71fa0ef          	jal	ra,10f28 <rt_object_get_type>
   161bc:	00050793          	mv	a5,a0
   161c0:	00078713          	mv	a4,a5
   161c4:	00500793          	li	a5,5
   161c8:	00f70e63          	beq	a4,a5,161e4 <rt_mb_detach+0x68>
   161cc:	71f00613          	li	a2,1823
   161d0:	0000b597          	auipc	a1,0xb
   161d4:	81058593          	addi	a1,a1,-2032 # 209e0 <__FUNCTION__.2636>
   161d8:	0000a517          	auipc	a0,0xa
   161dc:	50050513          	addi	a0,a0,1280 # 206d8 <__FUNCTION__.2575+0x334>
   161e0:	e65fc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&mb->parent.parent));
   161e4:	fec42783          	lw	a5,-20(s0)
   161e8:	00078513          	mv	a0,a5
   161ec:	cd5fa0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   161f0:	00050793          	mv	a5,a0
   161f4:	00079e63          	bnez	a5,16210 <rt_mb_detach+0x94>
   161f8:	72000613          	li	a2,1824
   161fc:	0000a597          	auipc	a1,0xa
   16200:	7e458593          	addi	a1,a1,2020 # 209e0 <__FUNCTION__.2636>
   16204:	0000a517          	auipc	a0,0xa
   16208:	51850513          	addi	a0,a0,1304 # 2071c <__FUNCTION__.2575+0x378>
   1620c:	e39fc0ef          	jal	ra,13044 <rt_assert_handler>

    /* resume all suspended thread */
    _ipc_list_resume_all(&(mb->parent.suspend_thread));
   16210:	fec42783          	lw	a5,-20(s0)
   16214:	01478793          	addi	a5,a5,20
   16218:	00078513          	mv	a0,a5
   1621c:	958fe0ef          	jal	ra,14374 <_ipc_list_resume_all>
    /* also resume all mailbox private suspended thread */
    _ipc_list_resume_all(&(mb->suspend_sender_thread));
   16220:	fec42783          	lw	a5,-20(s0)
   16224:	02878793          	addi	a5,a5,40
   16228:	00078513          	mv	a0,a5
   1622c:	948fe0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* detach mailbox object */
    rt_object_detach(&(mb->parent.parent));
   16230:	fec42783          	lw	a5,-20(s0)
   16234:	00078513          	mv	a0,a5
   16238:	9d1fa0ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   1623c:	00000793          	li	a5,0
}
   16240:	00078513          	mv	a0,a5
   16244:	01c12083          	lw	ra,28(sp)
   16248:	01812403          	lw	s0,24(sp)
   1624c:	02010113          	addi	sp,sp,32
   16250:	00008067          	ret

00016254 <rt_mb_create>:
 * @return   Return a pointer to the mailbox object. When the return value is RT_NULL, it means the creation failed.
 *
 * @warning  This function can ONLY be called from threads.
 */
rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
   16254:	fd010113          	addi	sp,sp,-48
   16258:	02112623          	sw	ra,44(sp)
   1625c:	02812423          	sw	s0,40(sp)
   16260:	03010413          	addi	s0,sp,48
   16264:	fca42e23          	sw	a0,-36(s0)
   16268:	fcb42c23          	sw	a1,-40(s0)
   1626c:	00060793          	mv	a5,a2
   16270:	fcf40ba3          	sb	a5,-41(s0)
    rt_mailbox_t mb;

    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   16274:	fd744783          	lbu	a5,-41(s0)
   16278:	02078463          	beqz	a5,162a0 <rt_mb_create+0x4c>
   1627c:	fd744703          	lbu	a4,-41(s0)
   16280:	00100793          	li	a5,1
   16284:	00f70e63          	beq	a4,a5,162a0 <rt_mb_create+0x4c>
   16288:	75200613          	li	a2,1874
   1628c:	0000a597          	auipc	a1,0xa
   16290:	76458593          	addi	a1,a1,1892 # 209f0 <__FUNCTION__.2643>
   16294:	0000a517          	auipc	a0,0xa
   16298:	14c50513          	addi	a0,a0,332 # 203e0 <__FUNCTION__.2575+0x3c>
   1629c:	da9fc0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   162a0:	3a9050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   162a4:	fea42623          	sw	a0,-20(s0)
   162a8:	271020ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   162ac:	00050793          	mv	a5,a0
   162b0:	02078863          	beqz	a5,162e0 <rt_mb_create+0x8c>
   162b4:	0000a597          	auipc	a1,0xa
   162b8:	73c58593          	addi	a1,a1,1852 # 209f0 <__FUNCTION__.2643>
   162bc:	0000a517          	auipc	a0,0xa
   162c0:	1d850513          	addi	a0,a0,472 # 20494 <__FUNCTION__.2575+0xf0>
   162c4:	e3cfc0ef          	jal	ra,12900 <rt_kprintf>
   162c8:	75400613          	li	a2,1876
   162cc:	0000a597          	auipc	a1,0xa
   162d0:	72458593          	addi	a1,a1,1828 # 209f0 <__FUNCTION__.2643>
   162d4:	0000a517          	auipc	a0,0xa
   162d8:	0e450513          	addi	a0,a0,228 # 203b8 <__FUNCTION__.2575+0x14>
   162dc:	d69fc0ef          	jal	ra,13044 <rt_assert_handler>
   162e0:	fec42503          	lw	a0,-20(s0)
   162e4:	36d050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* allocate object */
    mb = (rt_mailbox_t)rt_object_allocate(RT_Object_Class_MailBox, name);
   162e8:	fdc42583          	lw	a1,-36(s0)
   162ec:	00500513          	li	a0,5
   162f0:	9adfa0ef          	jal	ra,10c9c <rt_object_allocate>
   162f4:	fea42423          	sw	a0,-24(s0)
    if (mb == RT_NULL)
   162f8:	fe842783          	lw	a5,-24(s0)
   162fc:	00079663          	bnez	a5,16308 <rt_mb_create+0xb4>
        return mb;
   16300:	fe842783          	lw	a5,-24(s0)
   16304:	09c0006f          	j	163a0 <rt_mb_create+0x14c>

    /* set parent */
    mb->parent.parent.flag = flag;
   16308:	fe842783          	lw	a5,-24(s0)
   1630c:	fd744703          	lbu	a4,-41(s0)
   16310:	00e784a3          	sb	a4,9(a5)

    /* initialize ipc object */
    _ipc_object_init(&(mb->parent));
   16314:	fe842783          	lw	a5,-24(s0)
   16318:	00078513          	mv	a0,a5
   1631c:	ec1fd0ef          	jal	ra,141dc <_ipc_object_init>

    /* initialize mailbox */
    mb->size     = size;
   16320:	fd842783          	lw	a5,-40(s0)
   16324:	01079713          	slli	a4,a5,0x10
   16328:	01075713          	srli	a4,a4,0x10
   1632c:	fe842783          	lw	a5,-24(s0)
   16330:	02e79023          	sh	a4,32(a5)
    mb->msg_pool = (rt_ubase_t *)RT_KERNEL_MALLOC(mb->size * sizeof(rt_ubase_t));
   16334:	fe842783          	lw	a5,-24(s0)
   16338:	0207d783          	lhu	a5,32(a5)
   1633c:	00279793          	slli	a5,a5,0x2
   16340:	00078513          	mv	a0,a5
   16344:	8cdfc0ef          	jal	ra,12c10 <rt_malloc>
   16348:	00050713          	mv	a4,a0
   1634c:	fe842783          	lw	a5,-24(s0)
   16350:	00e7ae23          	sw	a4,28(a5)
    if (mb->msg_pool == RT_NULL)
   16354:	fe842783          	lw	a5,-24(s0)
   16358:	01c7a783          	lw	a5,28(a5)
   1635c:	00079c63          	bnez	a5,16374 <rt_mb_create+0x120>
    {
        /* delete mailbox object */
        rt_object_delete(&(mb->parent.parent));
   16360:	fe842783          	lw	a5,-24(s0)
   16364:	00078513          	mv	a0,a5
   16368:	a91fa0ef          	jal	ra,10df8 <rt_object_delete>

        return RT_NULL;
   1636c:	00000793          	li	a5,0
   16370:	0300006f          	j	163a0 <rt_mb_create+0x14c>
    }
    mb->entry      = 0;
   16374:	fe842783          	lw	a5,-24(s0)
   16378:	02079123          	sh	zero,34(a5)
    mb->in_offset  = 0;
   1637c:	fe842783          	lw	a5,-24(s0)
   16380:	02079223          	sh	zero,36(a5)
    mb->out_offset = 0;
   16384:	fe842783          	lw	a5,-24(s0)
   16388:	02079323          	sh	zero,38(a5)

    /* initialize an additional list of sender suspend thread */
    rt_list_init(&(mb->suspend_sender_thread));
   1638c:	fe842783          	lw	a5,-24(s0)
   16390:	02878793          	addi	a5,a5,40
   16394:	00078513          	mv	a0,a5
   16398:	d75fd0ef          	jal	ra,1410c <rt_list_init>

    return mb;
   1639c:	fe842783          	lw	a5,-24(s0)
}
   163a0:	00078513          	mv	a0,a5
   163a4:	02c12083          	lw	ra,44(sp)
   163a8:	02812403          	lw	s0,40(sp)
   163ac:	03010113          	addi	sp,sp,48
   163b0:	00008067          	ret

000163b4 <rt_mb_delete>:
 * @warning  This function can only delete mailbox created by the rt_mb_create() function.
 *           If the mailbox is initialized by the rt_mb_init() function, you MUST NOT USE this function to delete it,
 *           ONLY USE the rt_mb_detach() function to complete the detachment.
 */
rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
   163b4:	fd010113          	addi	sp,sp,-48
   163b8:	02112623          	sw	ra,44(sp)
   163bc:	02812423          	sw	s0,40(sp)
   163c0:	03010413          	addi	s0,sp,48
   163c4:	fca42e23          	sw	a0,-36(s0)
    /* parameter check */
    RT_ASSERT(mb != RT_NULL);
   163c8:	fdc42783          	lw	a5,-36(s0)
   163cc:	00079e63          	bnez	a5,163e8 <rt_mb_delete+0x34>
   163d0:	78c00613          	li	a2,1932
   163d4:	0000a597          	auipc	a1,0xa
   163d8:	62c58593          	addi	a1,a1,1580 # 20a00 <__FUNCTION__.2648>
   163dc:	0000a517          	auipc	a0,0xa
   163e0:	2ec50513          	addi	a0,a0,748 # 206c8 <__FUNCTION__.2575+0x324>
   163e4:	c61fc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
   163e8:	fdc42783          	lw	a5,-36(s0)
   163ec:	00078513          	mv	a0,a5
   163f0:	b39fa0ef          	jal	ra,10f28 <rt_object_get_type>
   163f4:	00050793          	mv	a5,a0
   163f8:	00078713          	mv	a4,a5
   163fc:	00500793          	li	a5,5
   16400:	00f70e63          	beq	a4,a5,1641c <rt_mb_delete+0x68>
   16404:	78d00613          	li	a2,1933
   16408:	0000a597          	auipc	a1,0xa
   1640c:	5f858593          	addi	a1,a1,1528 # 20a00 <__FUNCTION__.2648>
   16410:	0000a517          	auipc	a0,0xa
   16414:	2c850513          	addi	a0,a0,712 # 206d8 <__FUNCTION__.2575+0x334>
   16418:	c2dfc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&mb->parent.parent) == RT_FALSE);
   1641c:	fdc42783          	lw	a5,-36(s0)
   16420:	00078513          	mv	a0,a5
   16424:	a9dfa0ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   16428:	00050793          	mv	a5,a0
   1642c:	00078e63          	beqz	a5,16448 <rt_mb_delete+0x94>
   16430:	78e00613          	li	a2,1934
   16434:	0000a597          	auipc	a1,0xa
   16438:	5cc58593          	addi	a1,a1,1484 # 20a00 <__FUNCTION__.2648>
   1643c:	0000a517          	auipc	a0,0xa
   16440:	31050513          	addi	a0,a0,784 # 2074c <__FUNCTION__.2575+0x3a8>
   16444:	c01fc0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   16448:	201050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1644c:	fea42623          	sw	a0,-20(s0)
   16450:	0c9020ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   16454:	00050793          	mv	a5,a0
   16458:	02078863          	beqz	a5,16488 <rt_mb_delete+0xd4>
   1645c:	0000a597          	auipc	a1,0xa
   16460:	5a458593          	addi	a1,a1,1444 # 20a00 <__FUNCTION__.2648>
   16464:	0000a517          	auipc	a0,0xa
   16468:	03050513          	addi	a0,a0,48 # 20494 <__FUNCTION__.2575+0xf0>
   1646c:	c94fc0ef          	jal	ra,12900 <rt_kprintf>
   16470:	79000613          	li	a2,1936
   16474:	0000a597          	auipc	a1,0xa
   16478:	58c58593          	addi	a1,a1,1420 # 20a00 <__FUNCTION__.2648>
   1647c:	0000a517          	auipc	a0,0xa
   16480:	f3c50513          	addi	a0,a0,-196 # 203b8 <__FUNCTION__.2575+0x14>
   16484:	bc1fc0ef          	jal	ra,13044 <rt_assert_handler>
   16488:	fec42503          	lw	a0,-20(s0)
   1648c:	1c5050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* resume all suspended thread */
    _ipc_list_resume_all(&(mb->parent.suspend_thread));
   16490:	fdc42783          	lw	a5,-36(s0)
   16494:	01478793          	addi	a5,a5,20
   16498:	00078513          	mv	a0,a5
   1649c:	ed9fd0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* also resume all mailbox private suspended thread */
    _ipc_list_resume_all(&(mb->suspend_sender_thread));
   164a0:	fdc42783          	lw	a5,-36(s0)
   164a4:	02878793          	addi	a5,a5,40
   164a8:	00078513          	mv	a0,a5
   164ac:	ec9fd0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* free mailbox pool */
    RT_KERNEL_FREE(mb->msg_pool);
   164b0:	fdc42783          	lw	a5,-36(s0)
   164b4:	01c7a783          	lw	a5,28(a5)
   164b8:	00078513          	mv	a0,a5
   164bc:	891fc0ef          	jal	ra,12d4c <rt_free>

    /* delete mailbox object */
    rt_object_delete(&(mb->parent.parent));
   164c0:	fdc42783          	lw	a5,-36(s0)
   164c4:	00078513          	mv	a0,a5
   164c8:	931fa0ef          	jal	ra,10df8 <rt_object_delete>

    return RT_EOK;
   164cc:	00000793          	li	a5,0
}
   164d0:	00078513          	mv	a0,a5
   164d4:	02c12083          	lw	ra,44(sp)
   164d8:	02812403          	lw	s0,40(sp)
   164dc:	03010113          	addi	sp,sp,48
   164e0:	00008067          	ret

000164e4 <rt_mb_send_wait>:
 * @warning  This function can be called in interrupt context and thread context.
 */
rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
                         rt_ubase_t   value,
                         rt_int32_t   timeout)
{
   164e4:	fd010113          	addi	sp,sp,-48
   164e8:	02112623          	sw	ra,44(sp)
   164ec:	02812423          	sw	s0,40(sp)
   164f0:	02912223          	sw	s1,36(sp)
   164f4:	03010413          	addi	s0,sp,48
   164f8:	fca42e23          	sw	a0,-36(s0)
   164fc:	fcb42c23          	sw	a1,-40(s0)
   16500:	fcc42a23          	sw	a2,-44(s0)
    struct rt_thread *thread;
    register rt_ubase_t temp;
    rt_uint32_t tick_delta;

    /* parameter check */
    RT_ASSERT(mb != RT_NULL);
   16504:	fdc42783          	lw	a5,-36(s0)
   16508:	00079e63          	bnez	a5,16524 <rt_mb_send_wait+0x40>
   1650c:	7c400613          	li	a2,1988
   16510:	0000a597          	auipc	a1,0xa
   16514:	50058593          	addi	a1,a1,1280 # 20a10 <__FUNCTION__.2658>
   16518:	0000a517          	auipc	a0,0xa
   1651c:	1b050513          	addi	a0,a0,432 # 206c8 <__FUNCTION__.2575+0x324>
   16520:	b25fc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
   16524:	fdc42783          	lw	a5,-36(s0)
   16528:	00078513          	mv	a0,a5
   1652c:	9fdfa0ef          	jal	ra,10f28 <rt_object_get_type>
   16530:	00050793          	mv	a5,a0
   16534:	00078713          	mv	a4,a5
   16538:	00500793          	li	a5,5
   1653c:	00f70e63          	beq	a4,a5,16558 <rt_mb_send_wait+0x74>
   16540:	7c500613          	li	a2,1989
   16544:	0000a597          	auipc	a1,0xa
   16548:	4cc58593          	addi	a1,a1,1228 # 20a10 <__FUNCTION__.2658>
   1654c:	0000a517          	auipc	a0,0xa
   16550:	18c50513          	addi	a0,a0,396 # 206d8 <__FUNCTION__.2575+0x334>
   16554:	af1fc0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize delta tick */
    tick_delta = 0;
   16558:	fe042623          	sw	zero,-20(s0)
    /* get current thread */
    thread = rt_thread_self();
   1655c:	f75fc0ef          	jal	ra,134d0 <rt_thread_self>
   16560:	fea42423          	sw	a0,-24(s0)

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mb->parent.parent)));
   16564:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   16568:	0007a783          	lw	a5,0(a5)
   1656c:	00078c63          	beqz	a5,16584 <rt_mb_send_wait+0xa0>
   16570:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   16574:	0007a703          	lw	a4,0(a5)
   16578:	fdc42783          	lw	a5,-36(s0)
   1657c:	00078513          	mv	a0,a5
   16580:	000700e7          	jalr	a4

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   16584:	0c5050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16588:	00050793          	mv	a5,a0
   1658c:	00078493          	mv	s1,a5

    /* for non-blocking call */
    if (mb->entry == mb->size && timeout == 0)
   16590:	fdc42783          	lw	a5,-36(s0)
   16594:	0227d703          	lhu	a4,34(a5)
   16598:	fdc42783          	lw	a5,-36(s0)
   1659c:	0207d783          	lhu	a5,32(a5)
   165a0:	1af71063          	bne	a4,a5,16740 <rt_mb_send_wait+0x25c>
   165a4:	fd442783          	lw	a5,-44(s0)
   165a8:	18079c63          	bnez	a5,16740 <rt_mb_send_wait+0x25c>
    {
        rt_hw_interrupt_enable(temp);
   165ac:	00048793          	mv	a5,s1
   165b0:	00078513          	mv	a0,a5
   165b4:	09d050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        return -RT_EFULL;
   165b8:	ffd00793          	li	a5,-3
   165bc:	2880006f          	j	16844 <rt_mb_send_wait+0x360>

    /* mailbox is full */
    while (mb->entry == mb->size)
    {
        /* reset error number in thread */
        thread->error = RT_EOK;
   165c0:	fe842783          	lw	a5,-24(s0)
   165c4:	0207a823          	sw	zero,48(a5)

        /* no waiting, return timeout */
        if (timeout == 0)
   165c8:	fd442783          	lw	a5,-44(s0)
   165cc:	00079c63          	bnez	a5,165e4 <rt_mb_send_wait+0x100>
        {
            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
   165d0:	00048793          	mv	a5,s1
   165d4:	00078513          	mv	a0,a5
   165d8:	079050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            return -RT_EFULL;
   165dc:	ffd00793          	li	a5,-3
   165e0:	2640006f          	j	16844 <rt_mb_send_wait+0x360>
        }

        RT_DEBUG_IN_THREAD_CONTEXT;
   165e4:	065050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   165e8:	fea42223          	sw	a0,-28(s0)
   165ec:	ee5fc0ef          	jal	ra,134d0 <rt_thread_self>
   165f0:	00050793          	mv	a5,a0
   165f4:	02079863          	bnez	a5,16624 <rt_mb_send_wait+0x140>
   165f8:	0000a597          	auipc	a1,0xa
   165fc:	41858593          	addi	a1,a1,1048 # 20a10 <__FUNCTION__.2658>
   16600:	0000a517          	auipc	a0,0xa
   16604:	ef850513          	addi	a0,a0,-264 # 204f8 <__FUNCTION__.2575+0x154>
   16608:	af8fc0ef          	jal	ra,12900 <rt_kprintf>
   1660c:	7e700613          	li	a2,2023
   16610:	0000a597          	auipc	a1,0xa
   16614:	40058593          	addi	a1,a1,1024 # 20a10 <__FUNCTION__.2658>
   16618:	0000a517          	auipc	a0,0xa
   1661c:	da050513          	addi	a0,a0,-608 # 203b8 <__FUNCTION__.2575+0x14>
   16620:	a25fc0ef          	jal	ra,13044 <rt_assert_handler>
   16624:	025050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16628:	fea42023          	sw	a0,-32(s0)
   1662c:	6ec020ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   16630:	00050793          	mv	a5,a0
   16634:	02078863          	beqz	a5,16664 <rt_mb_send_wait+0x180>
   16638:	0000a597          	auipc	a1,0xa
   1663c:	3d858593          	addi	a1,a1,984 # 20a10 <__FUNCTION__.2658>
   16640:	0000a517          	auipc	a0,0xa
   16644:	e5450513          	addi	a0,a0,-428 # 20494 <__FUNCTION__.2575+0xf0>
   16648:	ab8fc0ef          	jal	ra,12900 <rt_kprintf>
   1664c:	7e700613          	li	a2,2023
   16650:	0000a597          	auipc	a1,0xa
   16654:	3c058593          	addi	a1,a1,960 # 20a10 <__FUNCTION__.2658>
   16658:	0000a517          	auipc	a0,0xa
   1665c:	d6050513          	addi	a0,a0,-672 # 203b8 <__FUNCTION__.2575+0x14>
   16660:	9e5fc0ef          	jal	ra,13044 <rt_assert_handler>
   16664:	fe042503          	lw	a0,-32(s0)
   16668:	7e8050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   1666c:	fe442503          	lw	a0,-28(s0)
   16670:	7e0050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        /* suspend current thread */
        _ipc_list_suspend(&(mb->suspend_sender_thread),
   16674:	fdc42783          	lw	a5,-36(s0)
   16678:	02878713          	addi	a4,a5,40
   1667c:	fdc42783          	lw	a5,-36(s0)
   16680:	0097c783          	lbu	a5,9(a5)
   16684:	00078613          	mv	a2,a5
   16688:	fe842583          	lw	a1,-24(s0)
   1668c:	00070513          	mv	a0,a4
   16690:	b89fd0ef          	jal	ra,14218 <_ipc_list_suspend>
                            thread,
                            mb->parent.parent.flag);

        /* has waiting time, start thread timer */
        if (timeout > 0)
   16694:	fd442783          	lw	a5,-44(s0)
   16698:	02f05c63          	blez	a5,166d0 <rt_mb_send_wait+0x1ec>
        {
            /* get the start tick of timer */
            tick_delta = rt_tick_get();
   1669c:	25d010ef          	jal	ra,180f8 <rt_tick_get>
   166a0:	fea42623          	sw	a0,-20(s0)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mb_send_wait: start timer of thread:%s\n",
                                        thread->name));

            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
   166a4:	fe842783          	lw	a5,-24(s0)
   166a8:	04c78793          	addi	a5,a5,76
   166ac:	fd440713          	addi	a4,s0,-44
   166b0:	00070613          	mv	a2,a4
   166b4:	00000593          	li	a1,0
   166b8:	00078513          	mv	a0,a5
   166bc:	321040ef          	jal	ra,1b1dc <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
   166c0:	fe842783          	lw	a5,-24(s0)
   166c4:	04c78793          	addi	a5,a5,76
   166c8:	00078513          	mv	a0,a5
   166cc:	67c040ef          	jal	ra,1ad48 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   166d0:	00048793          	mv	a5,s1
   166d4:	00078513          	mv	a0,a5
   166d8:	778050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        /* re-schedule */
        rt_schedule();
   166dc:	7ad010ef          	jal	ra,18688 <rt_schedule>

        /* resume from suspend state */
        if (thread->error != RT_EOK)
   166e0:	fe842783          	lw	a5,-24(s0)
   166e4:	0307a783          	lw	a5,48(a5)
   166e8:	00078863          	beqz	a5,166f8 <rt_mb_send_wait+0x214>
        {
            /* return error */
            return thread->error;
   166ec:	fe842783          	lw	a5,-24(s0)
   166f0:	0307a783          	lw	a5,48(a5)
   166f4:	1500006f          	j	16844 <rt_mb_send_wait+0x360>
        }

        /* disable interrupt */
        temp = rt_hw_interrupt_disable();
   166f8:	750050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   166fc:	00050793          	mv	a5,a0
   16700:	00078493          	mv	s1,a5

        /* if it's not waiting forever and then re-calculate timeout tick */
        if (timeout > 0)
   16704:	fd442783          	lw	a5,-44(s0)
   16708:	02f05c63          	blez	a5,16740 <rt_mb_send_wait+0x25c>
        {
            tick_delta = rt_tick_get() - tick_delta;
   1670c:	1ed010ef          	jal	ra,180f8 <rt_tick_get>
   16710:	00050713          	mv	a4,a0
   16714:	fec42783          	lw	a5,-20(s0)
   16718:	40f707b3          	sub	a5,a4,a5
   1671c:	fef42623          	sw	a5,-20(s0)
            timeout -= tick_delta;
   16720:	fd442783          	lw	a5,-44(s0)
   16724:	00078713          	mv	a4,a5
   16728:	fec42783          	lw	a5,-20(s0)
   1672c:	40f707b3          	sub	a5,a4,a5
   16730:	fcf42a23          	sw	a5,-44(s0)
            if (timeout < 0)
   16734:	fd442783          	lw	a5,-44(s0)
   16738:	0007d463          	bgez	a5,16740 <rt_mb_send_wait+0x25c>
                timeout = 0;
   1673c:	fc042a23          	sw	zero,-44(s0)
    while (mb->entry == mb->size)
   16740:	fdc42783          	lw	a5,-36(s0)
   16744:	0227d703          	lhu	a4,34(a5)
   16748:	fdc42783          	lw	a5,-36(s0)
   1674c:	0207d783          	lhu	a5,32(a5)
   16750:	e6f708e3          	beq	a4,a5,165c0 <rt_mb_send_wait+0xdc>
        }
    }

    /* set ptr */
    mb->msg_pool[mb->in_offset] = value;
   16754:	fdc42783          	lw	a5,-36(s0)
   16758:	01c7a703          	lw	a4,28(a5)
   1675c:	fdc42783          	lw	a5,-36(s0)
   16760:	0247d783          	lhu	a5,36(a5)
   16764:	00279793          	slli	a5,a5,0x2
   16768:	00f707b3          	add	a5,a4,a5
   1676c:	fd842703          	lw	a4,-40(s0)
   16770:	00e7a023          	sw	a4,0(a5)
    /* increase input offset */
    ++ mb->in_offset;
   16774:	fdc42783          	lw	a5,-36(s0)
   16778:	0247d783          	lhu	a5,36(a5)
   1677c:	00178793          	addi	a5,a5,1
   16780:	01079713          	slli	a4,a5,0x10
   16784:	01075713          	srli	a4,a4,0x10
   16788:	fdc42783          	lw	a5,-36(s0)
   1678c:	02e79223          	sh	a4,36(a5)
    if (mb->in_offset >= mb->size)
   16790:	fdc42783          	lw	a5,-36(s0)
   16794:	0247d703          	lhu	a4,36(a5)
   16798:	fdc42783          	lw	a5,-36(s0)
   1679c:	0207d783          	lhu	a5,32(a5)
   167a0:	00f76663          	bltu	a4,a5,167ac <rt_mb_send_wait+0x2c8>
        mb->in_offset = 0;
   167a4:	fdc42783          	lw	a5,-36(s0)
   167a8:	02079223          	sh	zero,36(a5)

    if(mb->entry < RT_MB_ENTRY_MAX)
   167ac:	fdc42783          	lw	a5,-36(s0)
   167b0:	0227d703          	lhu	a4,34(a5)
   167b4:	000107b7          	lui	a5,0x10
   167b8:	fff78793          	addi	a5,a5,-1 # ffff <__load-0x1>
   167bc:	02f70e63          	beq	a4,a5,167f8 <rt_mb_send_wait+0x314>
    {
        /* increase message entry */
        mb->entry ++;
   167c0:	fdc42783          	lw	a5,-36(s0)
   167c4:	0227d783          	lhu	a5,34(a5)
   167c8:	00178793          	addi	a5,a5,1
   167cc:	01079713          	slli	a4,a5,0x10
   167d0:	01075713          	srli	a4,a4,0x10
   167d4:	fdc42783          	lw	a5,-36(s0)
   167d8:	02e79123          	sh	a4,34(a5)
        rt_hw_interrupt_enable(temp); /* enable interrupt */
        return -RT_EFULL; /* value overflowed */
    }

    /* resume suspended thread */
    if (!rt_list_isempty(&mb->parent.suspend_thread))
   167dc:	fdc42783          	lw	a5,-36(s0)
   167e0:	01478793          	addi	a5,a5,20
   167e4:	00078513          	mv	a0,a5
   167e8:	9bdfd0ef          	jal	ra,141a4 <rt_list_isempty>
   167ec:	00050793          	mv	a5,a0
   167f0:	04079263          	bnez	a5,16834 <rt_mb_send_wait+0x350>
   167f4:	0180006f          	j	1680c <rt_mb_send_wait+0x328>
        rt_hw_interrupt_enable(temp); /* enable interrupt */
   167f8:	00048793          	mv	a5,s1
   167fc:	00078513          	mv	a0,a5
   16800:	650050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        return -RT_EFULL; /* value overflowed */
   16804:	ffd00793          	li	a5,-3
   16808:	03c0006f          	j	16844 <rt_mb_send_wait+0x360>
    {
        _ipc_list_resume(&(mb->parent.suspend_thread));
   1680c:	fdc42783          	lw	a5,-36(s0)
   16810:	01478793          	addi	a5,a5,20
   16814:	00078513          	mv	a0,a5
   16818:	b19fd0ef          	jal	ra,14330 <_ipc_list_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   1681c:	00048793          	mv	a5,s1
   16820:	00078513          	mv	a0,a5
   16824:	62c050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   16828:	661010ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   1682c:	00000793          	li	a5,0
   16830:	0140006f          	j	16844 <rt_mb_send_wait+0x360>
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   16834:	00048793          	mv	a5,s1
   16838:	00078513          	mv	a0,a5
   1683c:	614050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   16840:	00000793          	li	a5,0
}
   16844:	00078513          	mv	a0,a5
   16848:	02c12083          	lw	ra,44(sp)
   1684c:	02812403          	lw	s0,40(sp)
   16850:	02412483          	lw	s1,36(sp)
   16854:	03010113          	addi	sp,sp,48
   16858:	00008067          	ret

0001685c <rt_mb_send>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mailbox detach failed.
 */
rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
   1685c:	fe010113          	addi	sp,sp,-32
   16860:	00112e23          	sw	ra,28(sp)
   16864:	00812c23          	sw	s0,24(sp)
   16868:	02010413          	addi	s0,sp,32
   1686c:	fea42623          	sw	a0,-20(s0)
   16870:	feb42423          	sw	a1,-24(s0)
    return rt_mb_send_wait(mb, value, 0);
   16874:	00000613          	li	a2,0
   16878:	fe842583          	lw	a1,-24(s0)
   1687c:	fec42503          	lw	a0,-20(s0)
   16880:	c65ff0ef          	jal	ra,164e4 <rt_mb_send_wait>
   16884:	00050793          	mv	a5,a0
}
   16888:	00078513          	mv	a0,a5
   1688c:	01c12083          	lw	ra,28(sp)
   16890:	01812403          	lw	s0,24(sp)
   16894:	02010113          	addi	sp,sp,32
   16898:	00008067          	ret

0001689c <rt_mb_urgent>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mailbox detach failed.
 */
rt_err_t rt_mb_urgent(rt_mailbox_t mb, rt_ubase_t value)
{
   1689c:	fe010113          	addi	sp,sp,-32
   168a0:	00112e23          	sw	ra,28(sp)
   168a4:	00812c23          	sw	s0,24(sp)
   168a8:	00912a23          	sw	s1,20(sp)
   168ac:	02010413          	addi	s0,sp,32
   168b0:	fea42623          	sw	a0,-20(s0)
   168b4:	feb42423          	sw	a1,-24(s0)
    register rt_ubase_t temp;

    /* parameter check */
    RT_ASSERT(mb != RT_NULL);
   168b8:	fec42783          	lw	a5,-20(s0)
   168bc:	02079063          	bnez	a5,168dc <rt_mb_urgent+0x40>
   168c0:	000017b7          	lui	a5,0x1
   168c4:	86b78613          	addi	a2,a5,-1941 # 86b <__load-0xf795>
   168c8:	0000a597          	auipc	a1,0xa
   168cc:	15858593          	addi	a1,a1,344 # 20a20 <__FUNCTION__.2673>
   168d0:	0000a517          	auipc	a0,0xa
   168d4:	df850513          	addi	a0,a0,-520 # 206c8 <__FUNCTION__.2575+0x324>
   168d8:	f6cfc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
   168dc:	fec42783          	lw	a5,-20(s0)
   168e0:	00078513          	mv	a0,a5
   168e4:	e44fa0ef          	jal	ra,10f28 <rt_object_get_type>
   168e8:	00050793          	mv	a5,a0
   168ec:	00078713          	mv	a4,a5
   168f0:	00500793          	li	a5,5
   168f4:	02f70063          	beq	a4,a5,16914 <rt_mb_urgent+0x78>
   168f8:	000017b7          	lui	a5,0x1
   168fc:	86c78613          	addi	a2,a5,-1940 # 86c <__load-0xf794>
   16900:	0000a597          	auipc	a1,0xa
   16904:	12058593          	addi	a1,a1,288 # 20a20 <__FUNCTION__.2673>
   16908:	0000a517          	auipc	a0,0xa
   1690c:	dd050513          	addi	a0,a0,-560 # 206d8 <__FUNCTION__.2575+0x334>
   16910:	f34fc0ef          	jal	ra,13044 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mb->parent.parent)));
   16914:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   16918:	0007a783          	lw	a5,0(a5)
   1691c:	00078c63          	beqz	a5,16934 <rt_mb_urgent+0x98>
   16920:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   16924:	0007a703          	lw	a4,0(a5)
   16928:	fec42783          	lw	a5,-20(s0)
   1692c:	00078513          	mv	a0,a5
   16930:	000700e7          	jalr	a4

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   16934:	514050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16938:	00050793          	mv	a5,a0
   1693c:	00078493          	mv	s1,a5

    if (mb->entry == mb->size)
   16940:	fec42783          	lw	a5,-20(s0)
   16944:	0227d703          	lhu	a4,34(a5)
   16948:	fec42783          	lw	a5,-20(s0)
   1694c:	0207d783          	lhu	a5,32(a5)
   16950:	00f71c63          	bne	a4,a5,16968 <rt_mb_urgent+0xcc>
    {
        rt_hw_interrupt_enable(temp);
   16954:	00048793          	mv	a5,s1
   16958:	00078513          	mv	a0,a5
   1695c:	4f4050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        return -RT_EFULL;
   16960:	ffd00793          	li	a5,-3
   16964:	0d80006f          	j	16a3c <rt_mb_urgent+0x1a0>
    }

    /* rewind to the previous position */
    if (mb->out_offset > 0)
   16968:	fec42783          	lw	a5,-20(s0)
   1696c:	0267d783          	lhu	a5,38(a5)
   16970:	02078263          	beqz	a5,16994 <rt_mb_urgent+0xf8>
    {
        mb->out_offset --;
   16974:	fec42783          	lw	a5,-20(s0)
   16978:	0267d783          	lhu	a5,38(a5)
   1697c:	fff78793          	addi	a5,a5,-1
   16980:	01079713          	slli	a4,a5,0x10
   16984:	01075713          	srli	a4,a4,0x10
   16988:	fec42783          	lw	a5,-20(s0)
   1698c:	02e79323          	sh	a4,38(a5)
   16990:	0200006f          	j	169b0 <rt_mb_urgent+0x114>
    }
    else
    {
        mb->out_offset = mb->size - 1;
   16994:	fec42783          	lw	a5,-20(s0)
   16998:	0207d783          	lhu	a5,32(a5)
   1699c:	fff78793          	addi	a5,a5,-1
   169a0:	01079713          	slli	a4,a5,0x10
   169a4:	01075713          	srli	a4,a4,0x10
   169a8:	fec42783          	lw	a5,-20(s0)
   169ac:	02e79323          	sh	a4,38(a5)
    }

    /* set ptr */
    mb->msg_pool[mb->out_offset] = value;
   169b0:	fec42783          	lw	a5,-20(s0)
   169b4:	01c7a703          	lw	a4,28(a5)
   169b8:	fec42783          	lw	a5,-20(s0)
   169bc:	0267d783          	lhu	a5,38(a5)
   169c0:	00279793          	slli	a5,a5,0x2
   169c4:	00f707b3          	add	a5,a4,a5
   169c8:	fe842703          	lw	a4,-24(s0)
   169cc:	00e7a023          	sw	a4,0(a5)

    /* increase message entry */
    mb->entry ++;
   169d0:	fec42783          	lw	a5,-20(s0)
   169d4:	0227d783          	lhu	a5,34(a5)
   169d8:	00178793          	addi	a5,a5,1
   169dc:	01079713          	slli	a4,a5,0x10
   169e0:	01075713          	srli	a4,a4,0x10
   169e4:	fec42783          	lw	a5,-20(s0)
   169e8:	02e79123          	sh	a4,34(a5)

    /* resume suspended thread */
    if (!rt_list_isempty(&mb->parent.suspend_thread))
   169ec:	fec42783          	lw	a5,-20(s0)
   169f0:	01478793          	addi	a5,a5,20
   169f4:	00078513          	mv	a0,a5
   169f8:	facfd0ef          	jal	ra,141a4 <rt_list_isempty>
   169fc:	00050793          	mv	a5,a0
   16a00:	02079663          	bnez	a5,16a2c <rt_mb_urgent+0x190>
    {
        _ipc_list_resume(&(mb->parent.suspend_thread));
   16a04:	fec42783          	lw	a5,-20(s0)
   16a08:	01478793          	addi	a5,a5,20
   16a0c:	00078513          	mv	a0,a5
   16a10:	921fd0ef          	jal	ra,14330 <_ipc_list_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   16a14:	00048793          	mv	a5,s1
   16a18:	00078513          	mv	a0,a5
   16a1c:	434050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   16a20:	469010ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   16a24:	00000793          	li	a5,0
   16a28:	0140006f          	j	16a3c <rt_mb_urgent+0x1a0>
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   16a2c:	00048793          	mv	a5,s1
   16a30:	00078513          	mv	a0,a5
   16a34:	41c050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   16a38:	00000793          	li	a5,0
}
   16a3c:	00078513          	mv	a0,a5
   16a40:	01c12083          	lw	ra,28(sp)
   16a44:	01812403          	lw	s0,24(sp)
   16a48:	01412483          	lw	s1,20(sp)
   16a4c:	02010113          	addi	sp,sp,32
   16a50:	00008067          	ret

00016a54 <rt_mb_recv>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mailbox release failed.
 */
rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
   16a54:	fd010113          	addi	sp,sp,-48
   16a58:	02112623          	sw	ra,44(sp)
   16a5c:	02812423          	sw	s0,40(sp)
   16a60:	02912223          	sw	s1,36(sp)
   16a64:	03010413          	addi	s0,sp,48
   16a68:	fca42e23          	sw	a0,-36(s0)
   16a6c:	fcb42c23          	sw	a1,-40(s0)
   16a70:	fcc42a23          	sw	a2,-44(s0)
    struct rt_thread *thread;
    register rt_ubase_t temp;
    rt_uint32_t tick_delta;

    /* parameter check */
    RT_ASSERT(mb != RT_NULL);
   16a74:	fdc42783          	lw	a5,-36(s0)
   16a78:	02079063          	bnez	a5,16a98 <rt_mb_recv+0x44>
   16a7c:	000017b7          	lui	a5,0x1
   16a80:	8b778613          	addi	a2,a5,-1865 # 8b7 <__load-0xf749>
   16a84:	0000a597          	auipc	a1,0xa
   16a88:	fac58593          	addi	a1,a1,-84 # 20a30 <__FUNCTION__.2682>
   16a8c:	0000a517          	auipc	a0,0xa
   16a90:	c3c50513          	addi	a0,a0,-964 # 206c8 <__FUNCTION__.2575+0x324>
   16a94:	db0fc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
   16a98:	fdc42783          	lw	a5,-36(s0)
   16a9c:	00078513          	mv	a0,a5
   16aa0:	c88fa0ef          	jal	ra,10f28 <rt_object_get_type>
   16aa4:	00050793          	mv	a5,a0
   16aa8:	00078713          	mv	a4,a5
   16aac:	00500793          	li	a5,5
   16ab0:	02f70063          	beq	a4,a5,16ad0 <rt_mb_recv+0x7c>
   16ab4:	000017b7          	lui	a5,0x1
   16ab8:	8b878613          	addi	a2,a5,-1864 # 8b8 <__load-0xf748>
   16abc:	0000a597          	auipc	a1,0xa
   16ac0:	f7458593          	addi	a1,a1,-140 # 20a30 <__FUNCTION__.2682>
   16ac4:	0000a517          	auipc	a0,0xa
   16ac8:	c1450513          	addi	a0,a0,-1004 # 206d8 <__FUNCTION__.2575+0x334>
   16acc:	d78fc0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize delta tick */
    tick_delta = 0;
   16ad0:	fe042623          	sw	zero,-20(s0)
    /* get current thread */
    thread = rt_thread_self();
   16ad4:	9fdfc0ef          	jal	ra,134d0 <rt_thread_self>
   16ad8:	fea42423          	sw	a0,-24(s0)

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mb->parent.parent)));
   16adc:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   16ae0:	0007a783          	lw	a5,0(a5)
   16ae4:	00078c63          	beqz	a5,16afc <rt_mb_recv+0xa8>
   16ae8:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   16aec:	0007a703          	lw	a4,0(a5)
   16af0:	fdc42783          	lw	a5,-36(s0)
   16af4:	00078513          	mv	a0,a5
   16af8:	000700e7          	jalr	a4

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   16afc:	34c050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16b00:	00050793          	mv	a5,a0
   16b04:	00078493          	mv	s1,a5

    /* for non-blocking call */
    if (mb->entry == 0 && timeout == 0)
   16b08:	fdc42783          	lw	a5,-36(s0)
   16b0c:	0227d783          	lhu	a5,34(a5)
   16b10:	1a079a63          	bnez	a5,16cc4 <rt_mb_recv+0x270>
   16b14:	fd442783          	lw	a5,-44(s0)
   16b18:	1a079663          	bnez	a5,16cc4 <rt_mb_recv+0x270>
    {
        rt_hw_interrupt_enable(temp);
   16b1c:	00048793          	mv	a5,s1
   16b20:	00078513          	mv	a0,a5
   16b24:	32c050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        return -RT_ETIMEOUT;
   16b28:	ffe00793          	li	a5,-2
   16b2c:	2b80006f          	j	16de4 <rt_mb_recv+0x390>

    /* mailbox is empty */
    while (mb->entry == 0)
    {
        /* reset error number in thread */
        thread->error = RT_EOK;
   16b30:	fe842783          	lw	a5,-24(s0)
   16b34:	0207a823          	sw	zero,48(a5)

        /* no waiting, return timeout */
        if (timeout == 0)
   16b38:	fd442783          	lw	a5,-44(s0)
   16b3c:	02079263          	bnez	a5,16b60 <rt_mb_recv+0x10c>
        {
            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
   16b40:	00048793          	mv	a5,s1
   16b44:	00078513          	mv	a0,a5
   16b48:	308050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            thread->error = -RT_ETIMEOUT;
   16b4c:	fe842783          	lw	a5,-24(s0)
   16b50:	ffe00713          	li	a4,-2
   16b54:	02e7a823          	sw	a4,48(a5)

            return -RT_ETIMEOUT;
   16b58:	ffe00793          	li	a5,-2
   16b5c:	2880006f          	j	16de4 <rt_mb_recv+0x390>
        }

        RT_DEBUG_IN_THREAD_CONTEXT;
   16b60:	2e8050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16b64:	fea42223          	sw	a0,-28(s0)
   16b68:	969fc0ef          	jal	ra,134d0 <rt_thread_self>
   16b6c:	00050793          	mv	a5,a0
   16b70:	02079a63          	bnez	a5,16ba4 <rt_mb_recv+0x150>
   16b74:	0000a597          	auipc	a1,0xa
   16b78:	ebc58593          	addi	a1,a1,-324 # 20a30 <__FUNCTION__.2682>
   16b7c:	0000a517          	auipc	a0,0xa
   16b80:	97c50513          	addi	a0,a0,-1668 # 204f8 <__FUNCTION__.2575+0x154>
   16b84:	d7dfb0ef          	jal	ra,12900 <rt_kprintf>
   16b88:	000017b7          	lui	a5,0x1
   16b8c:	8dd78613          	addi	a2,a5,-1827 # 8dd <__load-0xf723>
   16b90:	0000a597          	auipc	a1,0xa
   16b94:	ea058593          	addi	a1,a1,-352 # 20a30 <__FUNCTION__.2682>
   16b98:	0000a517          	auipc	a0,0xa
   16b9c:	82050513          	addi	a0,a0,-2016 # 203b8 <__FUNCTION__.2575+0x14>
   16ba0:	ca4fc0ef          	jal	ra,13044 <rt_assert_handler>
   16ba4:	2a4050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16ba8:	fea42023          	sw	a0,-32(s0)
   16bac:	16c020ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   16bb0:	00050793          	mv	a5,a0
   16bb4:	02078a63          	beqz	a5,16be8 <rt_mb_recv+0x194>
   16bb8:	0000a597          	auipc	a1,0xa
   16bbc:	e7858593          	addi	a1,a1,-392 # 20a30 <__FUNCTION__.2682>
   16bc0:	0000a517          	auipc	a0,0xa
   16bc4:	8d450513          	addi	a0,a0,-1836 # 20494 <__FUNCTION__.2575+0xf0>
   16bc8:	d39fb0ef          	jal	ra,12900 <rt_kprintf>
   16bcc:	000017b7          	lui	a5,0x1
   16bd0:	8dd78613          	addi	a2,a5,-1827 # 8dd <__load-0xf723>
   16bd4:	0000a597          	auipc	a1,0xa
   16bd8:	e5c58593          	addi	a1,a1,-420 # 20a30 <__FUNCTION__.2682>
   16bdc:	00009517          	auipc	a0,0x9
   16be0:	7dc50513          	addi	a0,a0,2012 # 203b8 <__FUNCTION__.2575+0x14>
   16be4:	c60fc0ef          	jal	ra,13044 <rt_assert_handler>
   16be8:	fe042503          	lw	a0,-32(s0)
   16bec:	264050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   16bf0:	fe442503          	lw	a0,-28(s0)
   16bf4:	25c050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        /* suspend current thread */
        _ipc_list_suspend(&(mb->parent.suspend_thread),
   16bf8:	fdc42783          	lw	a5,-36(s0)
   16bfc:	01478713          	addi	a4,a5,20
   16c00:	fdc42783          	lw	a5,-36(s0)
   16c04:	0097c783          	lbu	a5,9(a5)
   16c08:	00078613          	mv	a2,a5
   16c0c:	fe842583          	lw	a1,-24(s0)
   16c10:	00070513          	mv	a0,a4
   16c14:	e04fd0ef          	jal	ra,14218 <_ipc_list_suspend>
                            thread,
                            mb->parent.parent.flag);

        /* has waiting time, start thread timer */
        if (timeout > 0)
   16c18:	fd442783          	lw	a5,-44(s0)
   16c1c:	02f05c63          	blez	a5,16c54 <rt_mb_recv+0x200>
        {
            /* get the start tick of timer */
            tick_delta = rt_tick_get();
   16c20:	4d8010ef          	jal	ra,180f8 <rt_tick_get>
   16c24:	fea42623          	sw	a0,-20(s0)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mb_recv: start timer of thread:%s\n",
                                        thread->name));

            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
   16c28:	fe842783          	lw	a5,-24(s0)
   16c2c:	04c78793          	addi	a5,a5,76
   16c30:	fd440713          	addi	a4,s0,-44
   16c34:	00070613          	mv	a2,a4
   16c38:	00000593          	li	a1,0
   16c3c:	00078513          	mv	a0,a5
   16c40:	59c040ef          	jal	ra,1b1dc <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
   16c44:	fe842783          	lw	a5,-24(s0)
   16c48:	04c78793          	addi	a5,a5,76
   16c4c:	00078513          	mv	a0,a5
   16c50:	0f8040ef          	jal	ra,1ad48 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   16c54:	00048793          	mv	a5,s1
   16c58:	00078513          	mv	a0,a5
   16c5c:	1f4050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        /* re-schedule */
        rt_schedule();
   16c60:	229010ef          	jal	ra,18688 <rt_schedule>

        /* resume from suspend state */
        if (thread->error != RT_EOK)
   16c64:	fe842783          	lw	a5,-24(s0)
   16c68:	0307a783          	lw	a5,48(a5)
   16c6c:	00078863          	beqz	a5,16c7c <rt_mb_recv+0x228>
        {
            /* return error */
            return thread->error;
   16c70:	fe842783          	lw	a5,-24(s0)
   16c74:	0307a783          	lw	a5,48(a5)
   16c78:	16c0006f          	j	16de4 <rt_mb_recv+0x390>
        }

        /* disable interrupt */
        temp = rt_hw_interrupt_disable();
   16c7c:	1cc050ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16c80:	00050793          	mv	a5,a0
   16c84:	00078493          	mv	s1,a5

        /* if it's not waiting forever and then re-calculate timeout tick */
        if (timeout > 0)
   16c88:	fd442783          	lw	a5,-44(s0)
   16c8c:	02f05c63          	blez	a5,16cc4 <rt_mb_recv+0x270>
        {
            tick_delta = rt_tick_get() - tick_delta;
   16c90:	468010ef          	jal	ra,180f8 <rt_tick_get>
   16c94:	00050713          	mv	a4,a0
   16c98:	fec42783          	lw	a5,-20(s0)
   16c9c:	40f707b3          	sub	a5,a4,a5
   16ca0:	fef42623          	sw	a5,-20(s0)
            timeout -= tick_delta;
   16ca4:	fd442783          	lw	a5,-44(s0)
   16ca8:	00078713          	mv	a4,a5
   16cac:	fec42783          	lw	a5,-20(s0)
   16cb0:	40f707b3          	sub	a5,a4,a5
   16cb4:	fcf42a23          	sw	a5,-44(s0)
            if (timeout < 0)
   16cb8:	fd442783          	lw	a5,-44(s0)
   16cbc:	0007d463          	bgez	a5,16cc4 <rt_mb_recv+0x270>
                timeout = 0;
   16cc0:	fc042a23          	sw	zero,-44(s0)
    while (mb->entry == 0)
   16cc4:	fdc42783          	lw	a5,-36(s0)
   16cc8:	0227d783          	lhu	a5,34(a5)
   16ccc:	e60782e3          	beqz	a5,16b30 <rt_mb_recv+0xdc>
        }
    }

    /* fill ptr */
    *value = mb->msg_pool[mb->out_offset];
   16cd0:	fdc42783          	lw	a5,-36(s0)
   16cd4:	01c7a703          	lw	a4,28(a5)
   16cd8:	fdc42783          	lw	a5,-36(s0)
   16cdc:	0267d783          	lhu	a5,38(a5)
   16ce0:	00279793          	slli	a5,a5,0x2
   16ce4:	00f707b3          	add	a5,a4,a5
   16ce8:	0007a703          	lw	a4,0(a5)
   16cec:	fd842783          	lw	a5,-40(s0)
   16cf0:	00e7a023          	sw	a4,0(a5)

    /* increase output offset */
    ++ mb->out_offset;
   16cf4:	fdc42783          	lw	a5,-36(s0)
   16cf8:	0267d783          	lhu	a5,38(a5)
   16cfc:	00178793          	addi	a5,a5,1
   16d00:	01079713          	slli	a4,a5,0x10
   16d04:	01075713          	srli	a4,a4,0x10
   16d08:	fdc42783          	lw	a5,-36(s0)
   16d0c:	02e79323          	sh	a4,38(a5)
    if (mb->out_offset >= mb->size)
   16d10:	fdc42783          	lw	a5,-36(s0)
   16d14:	0267d703          	lhu	a4,38(a5)
   16d18:	fdc42783          	lw	a5,-36(s0)
   16d1c:	0207d783          	lhu	a5,32(a5)
   16d20:	00f76663          	bltu	a4,a5,16d2c <rt_mb_recv+0x2d8>
        mb->out_offset = 0;
   16d24:	fdc42783          	lw	a5,-36(s0)
   16d28:	02079323          	sh	zero,38(a5)

    /* decrease message entry */
    if(mb->entry > 0)
   16d2c:	fdc42783          	lw	a5,-36(s0)
   16d30:	0227d783          	lhu	a5,34(a5)
   16d34:	02078063          	beqz	a5,16d54 <rt_mb_recv+0x300>
    {
        mb->entry --;
   16d38:	fdc42783          	lw	a5,-36(s0)
   16d3c:	0227d783          	lhu	a5,34(a5)
   16d40:	fff78793          	addi	a5,a5,-1
   16d44:	01079713          	slli	a4,a5,0x10
   16d48:	01075713          	srli	a4,a4,0x10
   16d4c:	fdc42783          	lw	a5,-36(s0)
   16d50:	02e79123          	sh	a4,34(a5)
    }

    /* resume suspended thread */
    if (!rt_list_isempty(&(mb->suspend_sender_thread)))
   16d54:	fdc42783          	lw	a5,-36(s0)
   16d58:	02878793          	addi	a5,a5,40
   16d5c:	00078513          	mv	a0,a5
   16d60:	c44fd0ef          	jal	ra,141a4 <rt_list_isempty>
   16d64:	00050793          	mv	a5,a0
   16d68:	04079663          	bnez	a5,16db4 <rt_mb_recv+0x360>
    {
        _ipc_list_resume(&(mb->suspend_sender_thread));
   16d6c:	fdc42783          	lw	a5,-36(s0)
   16d70:	02878793          	addi	a5,a5,40
   16d74:	00078513          	mv	a0,a5
   16d78:	db8fd0ef          	jal	ra,14330 <_ipc_list_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   16d7c:	00048793          	mv	a5,s1
   16d80:	00078513          	mv	a0,a5
   16d84:	0cc050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mb->parent.parent)));
   16d88:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   16d8c:	0007a783          	lw	a5,0(a5)
   16d90:	00078c63          	beqz	a5,16da8 <rt_mb_recv+0x354>
   16d94:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   16d98:	0007a703          	lw	a4,0(a5)
   16d9c:	fdc42783          	lw	a5,-36(s0)
   16da0:	00078513          	mv	a0,a5
   16da4:	000700e7          	jalr	a4

        rt_schedule();
   16da8:	0e1010ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   16dac:	00000793          	li	a5,0
   16db0:	0340006f          	j	16de4 <rt_mb_recv+0x390>
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   16db4:	00048793          	mv	a5,s1
   16db8:	00078513          	mv	a0,a5
   16dbc:	094050ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mb->parent.parent)));
   16dc0:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   16dc4:	0007a783          	lw	a5,0(a5)
   16dc8:	00078c63          	beqz	a5,16de0 <rt_mb_recv+0x38c>
   16dcc:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   16dd0:	0007a703          	lw	a4,0(a5)
   16dd4:	fdc42783          	lw	a5,-36(s0)
   16dd8:	00078513          	mv	a0,a5
   16ddc:	000700e7          	jalr	a4

    return RT_EOK;
   16de0:	00000793          	li	a5,0
}
   16de4:	00078513          	mv	a0,a5
   16de8:	02c12083          	lw	ra,44(sp)
   16dec:	02812403          	lw	s0,40(sp)
   16df0:	02412483          	lw	s1,36(sp)
   16df4:	03010113          	addi	sp,sp,48
   16df8:	00008067          	ret

00016dfc <rt_mb_control>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that this function failed to execute.
 */
rt_err_t rt_mb_control(rt_mailbox_t mb, int cmd, void *arg)
{
   16dfc:	fd010113          	addi	sp,sp,-48
   16e00:	02112623          	sw	ra,44(sp)
   16e04:	02812423          	sw	s0,40(sp)
   16e08:	03010413          	addi	s0,sp,48
   16e0c:	fca42e23          	sw	a0,-36(s0)
   16e10:	fcb42c23          	sw	a1,-40(s0)
   16e14:	fcc42a23          	sw	a2,-44(s0)
    rt_ubase_t level;

    /* parameter check */
    RT_ASSERT(mb != RT_NULL);
   16e18:	fdc42783          	lw	a5,-36(s0)
   16e1c:	02079063          	bnez	a5,16e3c <rt_mb_control+0x40>
   16e20:	000017b7          	lui	a5,0x1
   16e24:	94778613          	addi	a2,a5,-1721 # 947 <__load-0xf6b9>
   16e28:	0000a597          	auipc	a1,0xa
   16e2c:	c1458593          	addi	a1,a1,-1004 # 20a3c <__FUNCTION__.2694>
   16e30:	0000a517          	auipc	a0,0xa
   16e34:	89850513          	addi	a0,a0,-1896 # 206c8 <__FUNCTION__.2575+0x324>
   16e38:	a0cfc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
   16e3c:	fdc42783          	lw	a5,-36(s0)
   16e40:	00078513          	mv	a0,a5
   16e44:	8e4fa0ef          	jal	ra,10f28 <rt_object_get_type>
   16e48:	00050793          	mv	a5,a0
   16e4c:	00078713          	mv	a4,a5
   16e50:	00500793          	li	a5,5
   16e54:	02f70063          	beq	a4,a5,16e74 <rt_mb_control+0x78>
   16e58:	000017b7          	lui	a5,0x1
   16e5c:	94878613          	addi	a2,a5,-1720 # 948 <__load-0xf6b8>
   16e60:	0000a597          	auipc	a1,0xa
   16e64:	bdc58593          	addi	a1,a1,-1060 # 20a3c <__FUNCTION__.2694>
   16e68:	0000a517          	auipc	a0,0xa
   16e6c:	87050513          	addi	a0,a0,-1936 # 206d8 <__FUNCTION__.2575+0x334>
   16e70:	9d4fc0ef          	jal	ra,13044 <rt_assert_handler>

    if (cmd == RT_IPC_CMD_RESET)
   16e74:	fd842703          	lw	a4,-40(s0)
   16e78:	00100793          	li	a5,1
   16e7c:	06f71063          	bne	a4,a5,16edc <rt_mb_control+0xe0>
    {
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
   16e80:	7c9040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   16e84:	00050793          	mv	a5,a0
   16e88:	fef42623          	sw	a5,-20(s0)

        /* resume all waiting thread */
        _ipc_list_resume_all(&(mb->parent.suspend_thread));
   16e8c:	fdc42783          	lw	a5,-36(s0)
   16e90:	01478793          	addi	a5,a5,20
   16e94:	00078513          	mv	a0,a5
   16e98:	cdcfd0ef          	jal	ra,14374 <_ipc_list_resume_all>
        /* also resume all mailbox private suspended thread */
        _ipc_list_resume_all(&(mb->suspend_sender_thread));
   16e9c:	fdc42783          	lw	a5,-36(s0)
   16ea0:	02878793          	addi	a5,a5,40
   16ea4:	00078513          	mv	a0,a5
   16ea8:	cccfd0ef          	jal	ra,14374 <_ipc_list_resume_all>

        /* re-init mailbox */
        mb->entry      = 0;
   16eac:	fdc42783          	lw	a5,-36(s0)
   16eb0:	02079123          	sh	zero,34(a5)
        mb->in_offset  = 0;
   16eb4:	fdc42783          	lw	a5,-36(s0)
   16eb8:	02079223          	sh	zero,36(a5)
        mb->out_offset = 0;
   16ebc:	fdc42783          	lw	a5,-36(s0)
   16ec0:	02079323          	sh	zero,38(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   16ec4:	fec42783          	lw	a5,-20(s0)
   16ec8:	00078513          	mv	a0,a5
   16ecc:	785040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   16ed0:	7b8010ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   16ed4:	00000793          	li	a5,0
   16ed8:	0080006f          	j	16ee0 <rt_mb_control+0xe4>
    }

    return -RT_ERROR;
   16edc:	fff00793          	li	a5,-1
}
   16ee0:	00078513          	mv	a0,a5
   16ee4:	02c12083          	lw	ra,44(sp)
   16ee8:	02812403          	lw	s0,40(sp)
   16eec:	03010113          	addi	sp,sp,48
   16ef0:	00008067          	ret

00016ef4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
   16ef4:	fc010113          	addi	sp,sp,-64
   16ef8:	02112e23          	sw	ra,60(sp)
   16efc:	02812c23          	sw	s0,56(sp)
   16f00:	04010413          	addi	s0,sp,64
   16f04:	fca42e23          	sw	a0,-36(s0)
   16f08:	fcb42c23          	sw	a1,-40(s0)
   16f0c:	fcc42a23          	sw	a2,-44(s0)
   16f10:	fcd42823          	sw	a3,-48(s0)
   16f14:	fce42623          	sw	a4,-52(s0)
   16f18:	fcf405a3          	sb	a5,-53(s0)
    struct rt_mq_message *head;
    register rt_base_t temp;

    /* parameter check */
    RT_ASSERT(mq != RT_NULL);
   16f1c:	fdc42783          	lw	a5,-36(s0)
   16f20:	02079063          	bnez	a5,16f40 <rt_mq_init+0x4c>
   16f24:	000017b7          	lui	a5,0x1
   16f28:	9aa78613          	addi	a2,a5,-1622 # 9aa <__load-0xf656>
   16f2c:	0000a597          	auipc	a1,0xa
   16f30:	b2058593          	addi	a1,a1,-1248 # 20a4c <__FUNCTION__.2707>
   16f34:	0000a517          	auipc	a0,0xa
   16f38:	85450513          	addi	a0,a0,-1964 # 20788 <__FUNCTION__.2575+0x3e4>
   16f3c:	908fc0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   16f40:	fcb44783          	lbu	a5,-53(s0)
   16f44:	02078663          	beqz	a5,16f70 <rt_mq_init+0x7c>
   16f48:	fcb44703          	lbu	a4,-53(s0)
   16f4c:	00100793          	li	a5,1
   16f50:	02f70063          	beq	a4,a5,16f70 <rt_mq_init+0x7c>
   16f54:	000017b7          	lui	a5,0x1
   16f58:	9ab78613          	addi	a2,a5,-1621 # 9ab <__load-0xf655>
   16f5c:	0000a597          	auipc	a1,0xa
   16f60:	af058593          	addi	a1,a1,-1296 # 20a4c <__FUNCTION__.2707>
   16f64:	00009517          	auipc	a0,0x9
   16f68:	47c50513          	addi	a0,a0,1148 # 203e0 <__FUNCTION__.2575+0x3c>
   16f6c:	8d8fc0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize object */
    rt_object_init(&(mq->parent.parent), RT_Object_Class_MessageQueue, name);
   16f70:	fdc42783          	lw	a5,-36(s0)
   16f74:	fd842603          	lw	a2,-40(s0)
   16f78:	00600593          	li	a1,6
   16f7c:	00078513          	mv	a0,a5
   16f80:	b41f90ef          	jal	ra,10ac0 <rt_object_init>

    /* set parent flag */
    mq->parent.parent.flag = flag;
   16f84:	fdc42783          	lw	a5,-36(s0)
   16f88:	fcb44703          	lbu	a4,-53(s0)
   16f8c:	00e784a3          	sb	a4,9(a5)

    /* initialize ipc object */
    _ipc_object_init(&(mq->parent));
   16f90:	fdc42783          	lw	a5,-36(s0)
   16f94:	00078513          	mv	a0,a5
   16f98:	a44fd0ef          	jal	ra,141dc <_ipc_object_init>

    /* set message pool */
    mq->msg_pool = msgpool;
   16f9c:	fdc42783          	lw	a5,-36(s0)
   16fa0:	fd442703          	lw	a4,-44(s0)
   16fa4:	00e7ae23          	sw	a4,28(a5)

    /* get correct message size */
    mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
   16fa8:	fd042783          	lw	a5,-48(s0)
   16fac:	01079793          	slli	a5,a5,0x10
   16fb0:	0107d793          	srli	a5,a5,0x10
   16fb4:	00378793          	addi	a5,a5,3
   16fb8:	01079793          	slli	a5,a5,0x10
   16fbc:	0107d793          	srli	a5,a5,0x10
   16fc0:	ffc7f793          	andi	a5,a5,-4
   16fc4:	01079713          	slli	a4,a5,0x10
   16fc8:	01075713          	srli	a4,a4,0x10
   16fcc:	fdc42783          	lw	a5,-36(s0)
   16fd0:	02e79023          	sh	a4,32(a5)
    mq->max_msgs = pool_size / (mq->msg_size + sizeof(struct rt_mq_message));
   16fd4:	fdc42783          	lw	a5,-36(s0)
   16fd8:	0207d783          	lhu	a5,32(a5)
   16fdc:	00478793          	addi	a5,a5,4
   16fe0:	fcc42703          	lw	a4,-52(s0)
   16fe4:	02f757b3          	divu	a5,a4,a5
   16fe8:	01079713          	slli	a4,a5,0x10
   16fec:	01075713          	srli	a4,a4,0x10
   16ff0:	fdc42783          	lw	a5,-36(s0)
   16ff4:	02e79123          	sh	a4,34(a5)

    /* initialize message list */
    mq->msg_queue_head = RT_NULL;
   16ff8:	fdc42783          	lw	a5,-36(s0)
   16ffc:	0207a423          	sw	zero,40(a5)
    mq->msg_queue_tail = RT_NULL;
   17000:	fdc42783          	lw	a5,-36(s0)
   17004:	0207a623          	sw	zero,44(a5)

    /* initialize message empty list */
    mq->msg_queue_free = RT_NULL;
   17008:	fdc42783          	lw	a5,-36(s0)
   1700c:	0207a823          	sw	zero,48(a5)
    for (temp = 0; temp < mq->max_msgs; temp ++)
   17010:	00000093          	li	ra,0
   17014:	0480006f          	j	1705c <rt_mq_init+0x168>
    {
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
   17018:	fdc42783          	lw	a5,-36(s0)
   1701c:	01c7a703          	lw	a4,28(a5)
                                        temp * (mq->msg_size + sizeof(struct rt_mq_message)));
   17020:	fdc42783          	lw	a5,-36(s0)
   17024:	0207d783          	lhu	a5,32(a5)
   17028:	00478793          	addi	a5,a5,4
   1702c:	00008693          	mv	a3,ra
   17030:	02d787b3          	mul	a5,a5,a3
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
   17034:	00f707b3          	add	a5,a4,a5
   17038:	fef42623          	sw	a5,-20(s0)
        head->next = (struct rt_mq_message *)mq->msg_queue_free;
   1703c:	fdc42783          	lw	a5,-36(s0)
   17040:	0307a703          	lw	a4,48(a5)
   17044:	fec42783          	lw	a5,-20(s0)
   17048:	00e7a023          	sw	a4,0(a5)
        mq->msg_queue_free = head;
   1704c:	fdc42783          	lw	a5,-36(s0)
   17050:	fec42703          	lw	a4,-20(s0)
   17054:	02e7a823          	sw	a4,48(a5)
    for (temp = 0; temp < mq->max_msgs; temp ++)
   17058:	00108093          	addi	ra,ra,1
   1705c:	fdc42783          	lw	a5,-36(s0)
   17060:	0227d783          	lhu	a5,34(a5)
   17064:	faf0cae3          	blt	ra,a5,17018 <rt_mq_init+0x124>
    }

    /* the initial entry is zero */
    mq->entry = 0;
   17068:	fdc42783          	lw	a5,-36(s0)
   1706c:	02079223          	sh	zero,36(a5)

    /* initialize an additional list of sender suspend thread */
    rt_list_init(&(mq->suspend_sender_thread));
   17070:	fdc42783          	lw	a5,-36(s0)
   17074:	03478793          	addi	a5,a5,52
   17078:	00078513          	mv	a0,a5
   1707c:	890fd0ef          	jal	ra,1410c <rt_list_init>

    return RT_EOK;
   17080:	00000793          	li	a5,0
}
   17084:	00078513          	mv	a0,a5
   17088:	03c12083          	lw	ra,60(sp)
   1708c:	03812403          	lw	s0,56(sp)
   17090:	04010113          	addi	sp,sp,64
   17094:	00008067          	ret

00017098 <rt_mq_detach>:
 * @warning  This function can ONLY detach a static messagequeue initialized by the rt_mq_init() function.
 *           If the messagequeue is created by the rt_mq_create() function, you MUST NOT USE this function to detach it,
 *           and ONLY USE the rt_mq_delete() function to complete the deletion.
 */
rt_err_t rt_mq_detach(rt_mq_t mq)
{
   17098:	fe010113          	addi	sp,sp,-32
   1709c:	00112e23          	sw	ra,28(sp)
   170a0:	00812c23          	sw	s0,24(sp)
   170a4:	02010413          	addi	s0,sp,32
   170a8:	fea42623          	sw	a0,-20(s0)
    /* parameter check */
    RT_ASSERT(mq != RT_NULL);
   170ac:	fec42783          	lw	a5,-20(s0)
   170b0:	02079063          	bnez	a5,170d0 <rt_mq_detach+0x38>
   170b4:	000017b7          	lui	a5,0x1
   170b8:	9eb78613          	addi	a2,a5,-1557 # 9eb <__load-0xf615>
   170bc:	0000a597          	auipc	a1,0xa
   170c0:	99c58593          	addi	a1,a1,-1636 # 20a58 <__FUNCTION__.2714>
   170c4:	00009517          	auipc	a0,0x9
   170c8:	6c450513          	addi	a0,a0,1732 # 20788 <__FUNCTION__.2575+0x3e4>
   170cc:	f79fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
   170d0:	fec42783          	lw	a5,-20(s0)
   170d4:	00078513          	mv	a0,a5
   170d8:	e51f90ef          	jal	ra,10f28 <rt_object_get_type>
   170dc:	00050793          	mv	a5,a0
   170e0:	00078713          	mv	a4,a5
   170e4:	00600793          	li	a5,6
   170e8:	02f70063          	beq	a4,a5,17108 <rt_mq_detach+0x70>
   170ec:	000017b7          	lui	a5,0x1
   170f0:	9ec78613          	addi	a2,a5,-1556 # 9ec <__load-0xf614>
   170f4:	0000a597          	auipc	a1,0xa
   170f8:	96458593          	addi	a1,a1,-1692 # 20a58 <__FUNCTION__.2714>
   170fc:	00009517          	auipc	a0,0x9
   17100:	69c50513          	addi	a0,a0,1692 # 20798 <__FUNCTION__.2575+0x3f4>
   17104:	f41fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&mq->parent.parent));
   17108:	fec42783          	lw	a5,-20(s0)
   1710c:	00078513          	mv	a0,a5
   17110:	db1f90ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   17114:	00050793          	mv	a5,a0
   17118:	02079063          	bnez	a5,17138 <rt_mq_detach+0xa0>
   1711c:	000017b7          	lui	a5,0x1
   17120:	9ed78613          	addi	a2,a5,-1555 # 9ed <__load-0xf613>
   17124:	0000a597          	auipc	a1,0xa
   17128:	93458593          	addi	a1,a1,-1740 # 20a58 <__FUNCTION__.2714>
   1712c:	00009517          	auipc	a0,0x9
   17130:	6b450513          	addi	a0,a0,1716 # 207e0 <__FUNCTION__.2575+0x43c>
   17134:	f11fb0ef          	jal	ra,13044 <rt_assert_handler>

    /* resume all suspended thread */
    _ipc_list_resume_all(&mq->parent.suspend_thread);
   17138:	fec42783          	lw	a5,-20(s0)
   1713c:	01478793          	addi	a5,a5,20
   17140:	00078513          	mv	a0,a5
   17144:	a30fd0ef          	jal	ra,14374 <_ipc_list_resume_all>
    /* also resume all message queue private suspended thread */
    _ipc_list_resume_all(&(mq->suspend_sender_thread));
   17148:	fec42783          	lw	a5,-20(s0)
   1714c:	03478793          	addi	a5,a5,52
   17150:	00078513          	mv	a0,a5
   17154:	a20fd0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* detach message queue object */
    rt_object_detach(&(mq->parent.parent));
   17158:	fec42783          	lw	a5,-20(s0)
   1715c:	00078513          	mv	a0,a5
   17160:	aa9f90ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   17164:	00000793          	li	a5,0
}
   17168:	00078513          	mv	a0,a5
   1716c:	01c12083          	lw	ra,28(sp)
   17170:	01812403          	lw	s0,24(sp)
   17174:	02010113          	addi	sp,sp,32
   17178:	00008067          	ret

0001717c <rt_mq_create>:
 */
rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
   1717c:	fd010113          	addi	sp,sp,-48
   17180:	02112623          	sw	ra,44(sp)
   17184:	02812423          	sw	s0,40(sp)
   17188:	03010413          	addi	s0,sp,48
   1718c:	fca42e23          	sw	a0,-36(s0)
   17190:	fcb42c23          	sw	a1,-40(s0)
   17194:	fcc42a23          	sw	a2,-44(s0)
   17198:	00068793          	mv	a5,a3
   1719c:	fcf409a3          	sb	a5,-45(s0)
    struct rt_messagequeue *mq;
    struct rt_mq_message *head;
    register rt_base_t temp;

    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
   171a0:	fd344783          	lbu	a5,-45(s0)
   171a4:	02078663          	beqz	a5,171d0 <rt_mq_create+0x54>
   171a8:	fd344703          	lbu	a4,-45(s0)
   171ac:	00100793          	li	a5,1
   171b0:	02f70063          	beq	a4,a5,171d0 <rt_mq_create+0x54>
   171b4:	000017b7          	lui	a5,0x1
   171b8:	a2578613          	addi	a2,a5,-1499 # a25 <__load-0xf5db>
   171bc:	0000a597          	auipc	a1,0xa
   171c0:	8ac58593          	addi	a1,a1,-1876 # 20a68 <__FUNCTION__.2724>
   171c4:	00009517          	auipc	a0,0x9
   171c8:	21c50513          	addi	a0,a0,540 # 203e0 <__FUNCTION__.2575+0x3c>
   171cc:	e79fb0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   171d0:	479040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   171d4:	fea42623          	sw	a0,-20(s0)
   171d8:	341010ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   171dc:	00050793          	mv	a5,a0
   171e0:	02078a63          	beqz	a5,17214 <rt_mq_create+0x98>
   171e4:	0000a597          	auipc	a1,0xa
   171e8:	88458593          	addi	a1,a1,-1916 # 20a68 <__FUNCTION__.2724>
   171ec:	00009517          	auipc	a0,0x9
   171f0:	2a850513          	addi	a0,a0,680 # 20494 <__FUNCTION__.2575+0xf0>
   171f4:	f0cfb0ef          	jal	ra,12900 <rt_kprintf>
   171f8:	000017b7          	lui	a5,0x1
   171fc:	a2778613          	addi	a2,a5,-1497 # a27 <__load-0xf5d9>
   17200:	0000a597          	auipc	a1,0xa
   17204:	86858593          	addi	a1,a1,-1944 # 20a68 <__FUNCTION__.2724>
   17208:	00009517          	auipc	a0,0x9
   1720c:	1b050513          	addi	a0,a0,432 # 203b8 <__FUNCTION__.2575+0x14>
   17210:	e35fb0ef          	jal	ra,13044 <rt_assert_handler>
   17214:	fec42503          	lw	a0,-20(s0)
   17218:	439040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* allocate object */
    mq = (rt_mq_t)rt_object_allocate(RT_Object_Class_MessageQueue, name);
   1721c:	fdc42583          	lw	a1,-36(s0)
   17220:	00600513          	li	a0,6
   17224:	a79f90ef          	jal	ra,10c9c <rt_object_allocate>
   17228:	fea42423          	sw	a0,-24(s0)
    if (mq == RT_NULL)
   1722c:	fe842783          	lw	a5,-24(s0)
   17230:	00079663          	bnez	a5,1723c <rt_mq_create+0xc0>
        return mq;
   17234:	fe842783          	lw	a5,-24(s0)
   17238:	1340006f          	j	1736c <rt_mq_create+0x1f0>

    /* set parent */
    mq->parent.parent.flag = flag;
   1723c:	fe842783          	lw	a5,-24(s0)
   17240:	fd344703          	lbu	a4,-45(s0)
   17244:	00e784a3          	sb	a4,9(a5)

    /* initialize ipc object */
    _ipc_object_init(&(mq->parent));
   17248:	fe842783          	lw	a5,-24(s0)
   1724c:	00078513          	mv	a0,a5
   17250:	f8dfc0ef          	jal	ra,141dc <_ipc_object_init>

    /* initialize message queue */

    /* get correct message size */
    mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
   17254:	fd842783          	lw	a5,-40(s0)
   17258:	01079793          	slli	a5,a5,0x10
   1725c:	0107d793          	srli	a5,a5,0x10
   17260:	00378793          	addi	a5,a5,3
   17264:	01079793          	slli	a5,a5,0x10
   17268:	0107d793          	srli	a5,a5,0x10
   1726c:	ffc7f793          	andi	a5,a5,-4
   17270:	01079713          	slli	a4,a5,0x10
   17274:	01075713          	srli	a4,a4,0x10
   17278:	fe842783          	lw	a5,-24(s0)
   1727c:	02e79023          	sh	a4,32(a5)
    mq->max_msgs = max_msgs;
   17280:	fd442783          	lw	a5,-44(s0)
   17284:	01079713          	slli	a4,a5,0x10
   17288:	01075713          	srli	a4,a4,0x10
   1728c:	fe842783          	lw	a5,-24(s0)
   17290:	02e79123          	sh	a4,34(a5)

    /* allocate message pool */
    mq->msg_pool = RT_KERNEL_MALLOC((mq->msg_size + sizeof(struct rt_mq_message)) * mq->max_msgs);
   17294:	fe842783          	lw	a5,-24(s0)
   17298:	0207d783          	lhu	a5,32(a5)
   1729c:	00478793          	addi	a5,a5,4
   172a0:	fe842703          	lw	a4,-24(s0)
   172a4:	02275703          	lhu	a4,34(a4)
   172a8:	02e787b3          	mul	a5,a5,a4
   172ac:	00078513          	mv	a0,a5
   172b0:	961fb0ef          	jal	ra,12c10 <rt_malloc>
   172b4:	00050713          	mv	a4,a0
   172b8:	fe842783          	lw	a5,-24(s0)
   172bc:	00e7ae23          	sw	a4,28(a5)
    if (mq->msg_pool == RT_NULL)
   172c0:	fe842783          	lw	a5,-24(s0)
   172c4:	01c7a783          	lw	a5,28(a5)
   172c8:	00079c63          	bnez	a5,172e0 <rt_mq_create+0x164>
    {
        rt_object_delete(&(mq->parent.parent));
   172cc:	fe842783          	lw	a5,-24(s0)
   172d0:	00078513          	mv	a0,a5
   172d4:	b25f90ef          	jal	ra,10df8 <rt_object_delete>

        return RT_NULL;
   172d8:	00000793          	li	a5,0
   172dc:	0900006f          	j	1736c <rt_mq_create+0x1f0>
    }

    /* initialize message list */
    mq->msg_queue_head = RT_NULL;
   172e0:	fe842783          	lw	a5,-24(s0)
   172e4:	0207a423          	sw	zero,40(a5)
    mq->msg_queue_tail = RT_NULL;
   172e8:	fe842783          	lw	a5,-24(s0)
   172ec:	0207a623          	sw	zero,44(a5)

    /* initialize message empty list */
    mq->msg_queue_free = RT_NULL;
   172f0:	fe842783          	lw	a5,-24(s0)
   172f4:	0207a823          	sw	zero,48(a5)
    for (temp = 0; temp < mq->max_msgs; temp ++)
   172f8:	00000093          	li	ra,0
   172fc:	0480006f          	j	17344 <rt_mq_create+0x1c8>
    {
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
   17300:	fe842783          	lw	a5,-24(s0)
   17304:	01c7a703          	lw	a4,28(a5)
                                        temp * (mq->msg_size + sizeof(struct rt_mq_message)));
   17308:	fe842783          	lw	a5,-24(s0)
   1730c:	0207d783          	lhu	a5,32(a5)
   17310:	00478793          	addi	a5,a5,4
   17314:	00008693          	mv	a3,ra
   17318:	02d787b3          	mul	a5,a5,a3
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
   1731c:	00f707b3          	add	a5,a4,a5
   17320:	fef42223          	sw	a5,-28(s0)
        head->next = (struct rt_mq_message *)mq->msg_queue_free;
   17324:	fe842783          	lw	a5,-24(s0)
   17328:	0307a703          	lw	a4,48(a5)
   1732c:	fe442783          	lw	a5,-28(s0)
   17330:	00e7a023          	sw	a4,0(a5)
        mq->msg_queue_free = head;
   17334:	fe842783          	lw	a5,-24(s0)
   17338:	fe442703          	lw	a4,-28(s0)
   1733c:	02e7a823          	sw	a4,48(a5)
    for (temp = 0; temp < mq->max_msgs; temp ++)
   17340:	00108093          	addi	ra,ra,1
   17344:	fe842783          	lw	a5,-24(s0)
   17348:	0227d783          	lhu	a5,34(a5)
   1734c:	faf0cae3          	blt	ra,a5,17300 <rt_mq_create+0x184>
    }

    /* the initial entry is zero */
    mq->entry = 0;
   17350:	fe842783          	lw	a5,-24(s0)
   17354:	02079223          	sh	zero,36(a5)

    /* initialize an additional list of sender suspend thread */
    rt_list_init(&(mq->suspend_sender_thread));
   17358:	fe842783          	lw	a5,-24(s0)
   1735c:	03478793          	addi	a5,a5,52
   17360:	00078513          	mv	a0,a5
   17364:	da9fc0ef          	jal	ra,1410c <rt_list_init>

    return mq;
   17368:	fe842783          	lw	a5,-24(s0)
}
   1736c:	00078513          	mv	a0,a5
   17370:	02c12083          	lw	ra,44(sp)
   17374:	02812403          	lw	s0,40(sp)
   17378:	03010113          	addi	sp,sp,48
   1737c:	00008067          	ret

00017380 <rt_mq_delete>:
 *           If the messagequeue is initialized by the rt_mq_init() function, you MUST NOT USE this function to delete it,
 *           ONLY USE the rt_mq_detach() function to complete the detachment.
 *           for example,the rt_mq_create() function, it cannot be called in interrupt context.
 */
rt_err_t rt_mq_delete(rt_mq_t mq)
{
   17380:	fd010113          	addi	sp,sp,-48
   17384:	02112623          	sw	ra,44(sp)
   17388:	02812423          	sw	s0,40(sp)
   1738c:	03010413          	addi	s0,sp,48
   17390:	fca42e23          	sw	a0,-36(s0)
    /* parameter check */
    RT_ASSERT(mq != RT_NULL);
   17394:	fdc42783          	lw	a5,-36(s0)
   17398:	02079063          	bnez	a5,173b8 <rt_mq_delete+0x38>
   1739c:	000017b7          	lui	a5,0x1
   173a0:	a7278613          	addi	a2,a5,-1422 # a72 <__load-0xf58e>
   173a4:	00009597          	auipc	a1,0x9
   173a8:	6d458593          	addi	a1,a1,1748 # 20a78 <__FUNCTION__.2732>
   173ac:	00009517          	auipc	a0,0x9
   173b0:	3dc50513          	addi	a0,a0,988 # 20788 <__FUNCTION__.2575+0x3e4>
   173b4:	c91fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
   173b8:	fdc42783          	lw	a5,-36(s0)
   173bc:	00078513          	mv	a0,a5
   173c0:	b69f90ef          	jal	ra,10f28 <rt_object_get_type>
   173c4:	00050793          	mv	a5,a0
   173c8:	00078713          	mv	a4,a5
   173cc:	00600793          	li	a5,6
   173d0:	02f70063          	beq	a4,a5,173f0 <rt_mq_delete+0x70>
   173d4:	000017b7          	lui	a5,0x1
   173d8:	a7378613          	addi	a2,a5,-1421 # a73 <__load-0xf58d>
   173dc:	00009597          	auipc	a1,0x9
   173e0:	69c58593          	addi	a1,a1,1692 # 20a78 <__FUNCTION__.2732>
   173e4:	00009517          	auipc	a0,0x9
   173e8:	3b450513          	addi	a0,a0,948 # 20798 <__FUNCTION__.2575+0x3f4>
   173ec:	c59fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&mq->parent.parent) == RT_FALSE);
   173f0:	fdc42783          	lw	a5,-36(s0)
   173f4:	00078513          	mv	a0,a5
   173f8:	ac9f90ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   173fc:	00050793          	mv	a5,a0
   17400:	02078063          	beqz	a5,17420 <rt_mq_delete+0xa0>
   17404:	000017b7          	lui	a5,0x1
   17408:	a7478613          	addi	a2,a5,-1420 # a74 <__load-0xf58c>
   1740c:	00009597          	auipc	a1,0x9
   17410:	66c58593          	addi	a1,a1,1644 # 20a78 <__FUNCTION__.2732>
   17414:	00009517          	auipc	a0,0x9
   17418:	3fc50513          	addi	a0,a0,1020 # 20810 <__FUNCTION__.2575+0x46c>
   1741c:	c29fb0ef          	jal	ra,13044 <rt_assert_handler>

    RT_DEBUG_NOT_IN_INTERRUPT;
   17420:	229040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17424:	fea42623          	sw	a0,-20(s0)
   17428:	0f1010ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   1742c:	00050793          	mv	a5,a0
   17430:	02078a63          	beqz	a5,17464 <rt_mq_delete+0xe4>
   17434:	00009597          	auipc	a1,0x9
   17438:	64458593          	addi	a1,a1,1604 # 20a78 <__FUNCTION__.2732>
   1743c:	00009517          	auipc	a0,0x9
   17440:	05850513          	addi	a0,a0,88 # 20494 <__FUNCTION__.2575+0xf0>
   17444:	cbcfb0ef          	jal	ra,12900 <rt_kprintf>
   17448:	000017b7          	lui	a5,0x1
   1744c:	a7678613          	addi	a2,a5,-1418 # a76 <__load-0xf58a>
   17450:	00009597          	auipc	a1,0x9
   17454:	62858593          	addi	a1,a1,1576 # 20a78 <__FUNCTION__.2732>
   17458:	00009517          	auipc	a0,0x9
   1745c:	f6050513          	addi	a0,a0,-160 # 203b8 <__FUNCTION__.2575+0x14>
   17460:	be5fb0ef          	jal	ra,13044 <rt_assert_handler>
   17464:	fec42503          	lw	a0,-20(s0)
   17468:	1e9040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* resume all suspended thread */
    _ipc_list_resume_all(&(mq->parent.suspend_thread));
   1746c:	fdc42783          	lw	a5,-36(s0)
   17470:	01478793          	addi	a5,a5,20
   17474:	00078513          	mv	a0,a5
   17478:	efdfc0ef          	jal	ra,14374 <_ipc_list_resume_all>
    /* also resume all message queue private suspended thread */
    _ipc_list_resume_all(&(mq->suspend_sender_thread));
   1747c:	fdc42783          	lw	a5,-36(s0)
   17480:	03478793          	addi	a5,a5,52
   17484:	00078513          	mv	a0,a5
   17488:	eedfc0ef          	jal	ra,14374 <_ipc_list_resume_all>

    /* free message queue pool */
    RT_KERNEL_FREE(mq->msg_pool);
   1748c:	fdc42783          	lw	a5,-36(s0)
   17490:	01c7a783          	lw	a5,28(a5)
   17494:	00078513          	mv	a0,a5
   17498:	8b5fb0ef          	jal	ra,12d4c <rt_free>

    /* delete message queue object */
    rt_object_delete(&(mq->parent.parent));
   1749c:	fdc42783          	lw	a5,-36(s0)
   174a0:	00078513          	mv	a0,a5
   174a4:	955f90ef          	jal	ra,10df8 <rt_object_delete>

    return RT_EOK;
   174a8:	00000793          	li	a5,0
}
   174ac:	00078513          	mv	a0,a5
   174b0:	02c12083          	lw	ra,44(sp)
   174b4:	02812403          	lw	s0,40(sp)
   174b8:	03010113          	addi	sp,sp,48
   174bc:	00008067          	ret

000174c0 <rt_mq_send_wait>:
 */
rt_err_t rt_mq_send_wait(rt_mq_t     mq,
                         const void *buffer,
                         rt_size_t   size,
                         rt_int32_t  timeout)
{
   174c0:	fc010113          	addi	sp,sp,-64
   174c4:	02112e23          	sw	ra,60(sp)
   174c8:	02812c23          	sw	s0,56(sp)
   174cc:	02912a23          	sw	s1,52(sp)
   174d0:	04010413          	addi	s0,sp,64
   174d4:	fca42623          	sw	a0,-52(s0)
   174d8:	fcb42423          	sw	a1,-56(s0)
   174dc:	fcc42223          	sw	a2,-60(s0)
   174e0:	fcd42023          	sw	a3,-64(s0)
    struct rt_mq_message *msg;
    rt_uint32_t tick_delta;
    struct rt_thread *thread;

    /* parameter check */
    RT_ASSERT(mq != RT_NULL);
   174e4:	fcc42783          	lw	a5,-52(s0)
   174e8:	02079063          	bnez	a5,17508 <rt_mq_send_wait+0x48>
   174ec:	000017b7          	lui	a5,0x1
   174f0:	ab178613          	addi	a2,a5,-1359 # ab1 <__load-0xf54f>
   174f4:	00009597          	auipc	a1,0x9
   174f8:	59458593          	addi	a1,a1,1428 # 20a88 <__FUNCTION__.2744>
   174fc:	00009517          	auipc	a0,0x9
   17500:	28c50513          	addi	a0,a0,652 # 20788 <__FUNCTION__.2575+0x3e4>
   17504:	b41fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
   17508:	fcc42783          	lw	a5,-52(s0)
   1750c:	00078513          	mv	a0,a5
   17510:	a19f90ef          	jal	ra,10f28 <rt_object_get_type>
   17514:	00050793          	mv	a5,a0
   17518:	00078713          	mv	a4,a5
   1751c:	00600793          	li	a5,6
   17520:	02f70063          	beq	a4,a5,17540 <rt_mq_send_wait+0x80>
   17524:	000017b7          	lui	a5,0x1
   17528:	ab278613          	addi	a2,a5,-1358 # ab2 <__load-0xf54e>
   1752c:	00009597          	auipc	a1,0x9
   17530:	55c58593          	addi	a1,a1,1372 # 20a88 <__FUNCTION__.2744>
   17534:	00009517          	auipc	a0,0x9
   17538:	26450513          	addi	a0,a0,612 # 20798 <__FUNCTION__.2575+0x3f4>
   1753c:	b09fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(buffer != RT_NULL);
   17540:	fc842783          	lw	a5,-56(s0)
   17544:	02079063          	bnez	a5,17564 <rt_mq_send_wait+0xa4>
   17548:	000017b7          	lui	a5,0x1
   1754c:	ab378613          	addi	a2,a5,-1357 # ab3 <__load-0xf54d>
   17550:	00009597          	auipc	a1,0x9
   17554:	53858593          	addi	a1,a1,1336 # 20a88 <__FUNCTION__.2744>
   17558:	00009517          	auipc	a0,0x9
   1755c:	2f450513          	addi	a0,a0,756 # 2084c <__FUNCTION__.2575+0x4a8>
   17560:	ae5fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(size != 0);
   17564:	fc442783          	lw	a5,-60(s0)
   17568:	02079063          	bnez	a5,17588 <rt_mq_send_wait+0xc8>
   1756c:	000017b7          	lui	a5,0x1
   17570:	ab478613          	addi	a2,a5,-1356 # ab4 <__load-0xf54c>
   17574:	00009597          	auipc	a1,0x9
   17578:	51458593          	addi	a1,a1,1300 # 20a88 <__FUNCTION__.2744>
   1757c:	00009517          	auipc	a0,0x9
   17580:	2e450513          	addi	a0,a0,740 # 20860 <__FUNCTION__.2575+0x4bc>
   17584:	ac1fb0ef          	jal	ra,13044 <rt_assert_handler>

    /* greater than one message size */
    if (size > mq->msg_size)
   17588:	fcc42783          	lw	a5,-52(s0)
   1758c:	0207d783          	lhu	a5,32(a5)
   17590:	00078713          	mv	a4,a5
   17594:	fc442783          	lw	a5,-60(s0)
   17598:	00f77663          	bgeu	a4,a5,175a4 <rt_mq_send_wait+0xe4>
        return -RT_ERROR;
   1759c:	fff00793          	li	a5,-1
   175a0:	3280006f          	j	178c8 <rt_mq_send_wait+0x408>

    /* initialize delta tick */
    tick_delta = 0;
   175a4:	fe042623          	sw	zero,-20(s0)
    /* get current thread */
    thread = rt_thread_self();
   175a8:	f29fb0ef          	jal	ra,134d0 <rt_thread_self>
   175ac:	fea42423          	sw	a0,-24(s0)

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));
   175b0:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   175b4:	0007a783          	lw	a5,0(a5)
   175b8:	00078c63          	beqz	a5,175d0 <rt_mq_send_wait+0x110>
   175bc:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   175c0:	0007a703          	lw	a4,0(a5)
   175c4:	fcc42783          	lw	a5,-52(s0)
   175c8:	00078513          	mv	a0,a5
   175cc:	000700e7          	jalr	a4

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   175d0:	079040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   175d4:	00050793          	mv	a5,a0
   175d8:	00078493          	mv	s1,a5

    /* get a free list, there must be an empty item */
    msg = (struct rt_mq_message *)mq->msg_queue_free;
   175dc:	fcc42783          	lw	a5,-52(s0)
   175e0:	0307a783          	lw	a5,48(a5)
   175e4:	fef42223          	sw	a5,-28(s0)
    /* for non-blocking call */
    if (msg == RT_NULL && timeout == 0)
   175e8:	fe442783          	lw	a5,-28(s0)
   175ec:	1a079463          	bnez	a5,17794 <rt_mq_send_wait+0x2d4>
   175f0:	fc042783          	lw	a5,-64(s0)
   175f4:	1a079063          	bnez	a5,17794 <rt_mq_send_wait+0x2d4>
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   175f8:	00048793          	mv	a5,s1
   175fc:	00078513          	mv	a0,a5
   17600:	051040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        return -RT_EFULL;
   17604:	ffd00793          	li	a5,-3
   17608:	2c00006f          	j	178c8 <rt_mq_send_wait+0x408>

    /* message queue is full */
    while ((msg = (struct rt_mq_message *)mq->msg_queue_free) == RT_NULL)
    {
        /* reset error number in thread */
        thread->error = RT_EOK;
   1760c:	fe842783          	lw	a5,-24(s0)
   17610:	0207a823          	sw	zero,48(a5)

        /* no waiting, return timeout */
        if (timeout == 0)
   17614:	fc042783          	lw	a5,-64(s0)
   17618:	00079c63          	bnez	a5,17630 <rt_mq_send_wait+0x170>
        {
            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
   1761c:	00048793          	mv	a5,s1
   17620:	00078513          	mv	a0,a5
   17624:	02d040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            return -RT_EFULL;
   17628:	ffd00793          	li	a5,-3
   1762c:	29c0006f          	j	178c8 <rt_mq_send_wait+0x408>
        }

        RT_DEBUG_IN_THREAD_CONTEXT;
   17630:	019040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17634:	fea42023          	sw	a0,-32(s0)
   17638:	e99fb0ef          	jal	ra,134d0 <rt_thread_self>
   1763c:	00050793          	mv	a5,a0
   17640:	02079a63          	bnez	a5,17674 <rt_mq_send_wait+0x1b4>
   17644:	00009597          	auipc	a1,0x9
   17648:	44458593          	addi	a1,a1,1092 # 20a88 <__FUNCTION__.2744>
   1764c:	00009517          	auipc	a0,0x9
   17650:	eac50513          	addi	a0,a0,-340 # 204f8 <__FUNCTION__.2575+0x154>
   17654:	aacfb0ef          	jal	ra,12900 <rt_kprintf>
   17658:	000017b7          	lui	a5,0x1
   1765c:	ade78613          	addi	a2,a5,-1314 # ade <__load-0xf522>
   17660:	00009597          	auipc	a1,0x9
   17664:	42858593          	addi	a1,a1,1064 # 20a88 <__FUNCTION__.2744>
   17668:	00009517          	auipc	a0,0x9
   1766c:	d5050513          	addi	a0,a0,-688 # 203b8 <__FUNCTION__.2575+0x14>
   17670:	9d5fb0ef          	jal	ra,13044 <rt_assert_handler>
   17674:	7d4040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17678:	fca42e23          	sw	a0,-36(s0)
   1767c:	69c010ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   17680:	00050793          	mv	a5,a0
   17684:	02078a63          	beqz	a5,176b8 <rt_mq_send_wait+0x1f8>
   17688:	00009597          	auipc	a1,0x9
   1768c:	40058593          	addi	a1,a1,1024 # 20a88 <__FUNCTION__.2744>
   17690:	00009517          	auipc	a0,0x9
   17694:	e0450513          	addi	a0,a0,-508 # 20494 <__FUNCTION__.2575+0xf0>
   17698:	a68fb0ef          	jal	ra,12900 <rt_kprintf>
   1769c:	000017b7          	lui	a5,0x1
   176a0:	ade78613          	addi	a2,a5,-1314 # ade <__load-0xf522>
   176a4:	00009597          	auipc	a1,0x9
   176a8:	3e458593          	addi	a1,a1,996 # 20a88 <__FUNCTION__.2744>
   176ac:	00009517          	auipc	a0,0x9
   176b0:	d0c50513          	addi	a0,a0,-756 # 203b8 <__FUNCTION__.2575+0x14>
   176b4:	991fb0ef          	jal	ra,13044 <rt_assert_handler>
   176b8:	fdc42503          	lw	a0,-36(s0)
   176bc:	794040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   176c0:	fe042503          	lw	a0,-32(s0)
   176c4:	78c040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        /* suspend current thread */
        _ipc_list_suspend(&(mq->suspend_sender_thread),
   176c8:	fcc42783          	lw	a5,-52(s0)
   176cc:	03478713          	addi	a4,a5,52
   176d0:	fcc42783          	lw	a5,-52(s0)
   176d4:	0097c783          	lbu	a5,9(a5)
   176d8:	00078613          	mv	a2,a5
   176dc:	fe842583          	lw	a1,-24(s0)
   176e0:	00070513          	mv	a0,a4
   176e4:	b35fc0ef          	jal	ra,14218 <_ipc_list_suspend>
                            thread,
                            mq->parent.parent.flag);

        /* has waiting time, start thread timer */
        if (timeout > 0)
   176e8:	fc042783          	lw	a5,-64(s0)
   176ec:	02f05c63          	blez	a5,17724 <rt_mq_send_wait+0x264>
        {
            /* get the start tick of timer */
            tick_delta = rt_tick_get();
   176f0:	209000ef          	jal	ra,180f8 <rt_tick_get>
   176f4:	fea42623          	sw	a0,-20(s0)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mq_send_wait: start timer of thread:%s\n",
                                        thread->name));

            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
   176f8:	fe842783          	lw	a5,-24(s0)
   176fc:	04c78793          	addi	a5,a5,76
   17700:	fc040713          	addi	a4,s0,-64
   17704:	00070613          	mv	a2,a4
   17708:	00000593          	li	a1,0
   1770c:	00078513          	mv	a0,a5
   17710:	2cd030ef          	jal	ra,1b1dc <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
   17714:	fe842783          	lw	a5,-24(s0)
   17718:	04c78793          	addi	a5,a5,76
   1771c:	00078513          	mv	a0,a5
   17720:	628030ef          	jal	ra,1ad48 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   17724:	00048793          	mv	a5,s1
   17728:	00078513          	mv	a0,a5
   1772c:	724040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        /* re-schedule */
        rt_schedule();
   17730:	759000ef          	jal	ra,18688 <rt_schedule>

        /* resume from suspend state */
        if (thread->error != RT_EOK)
   17734:	fe842783          	lw	a5,-24(s0)
   17738:	0307a783          	lw	a5,48(a5)
   1773c:	00078863          	beqz	a5,1774c <rt_mq_send_wait+0x28c>
        {
            /* return error */
            return thread->error;
   17740:	fe842783          	lw	a5,-24(s0)
   17744:	0307a783          	lw	a5,48(a5)
   17748:	1800006f          	j	178c8 <rt_mq_send_wait+0x408>
        }

        /* disable interrupt */
        temp = rt_hw_interrupt_disable();
   1774c:	6fc040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17750:	00050793          	mv	a5,a0
   17754:	00078493          	mv	s1,a5

        /* if it's not waiting forever and then re-calculate timeout tick */
        if (timeout > 0)
   17758:	fc042783          	lw	a5,-64(s0)
   1775c:	02f05c63          	blez	a5,17794 <rt_mq_send_wait+0x2d4>
        {
            tick_delta = rt_tick_get() - tick_delta;
   17760:	199000ef          	jal	ra,180f8 <rt_tick_get>
   17764:	00050713          	mv	a4,a0
   17768:	fec42783          	lw	a5,-20(s0)
   1776c:	40f707b3          	sub	a5,a4,a5
   17770:	fef42623          	sw	a5,-20(s0)
            timeout -= tick_delta;
   17774:	fc042783          	lw	a5,-64(s0)
   17778:	00078713          	mv	a4,a5
   1777c:	fec42783          	lw	a5,-20(s0)
   17780:	40f707b3          	sub	a5,a4,a5
   17784:	fcf42023          	sw	a5,-64(s0)
            if (timeout < 0)
   17788:	fc042783          	lw	a5,-64(s0)
   1778c:	0007d463          	bgez	a5,17794 <rt_mq_send_wait+0x2d4>
                timeout = 0;
   17790:	fc042023          	sw	zero,-64(s0)
    while ((msg = (struct rt_mq_message *)mq->msg_queue_free) == RT_NULL)
   17794:	fcc42783          	lw	a5,-52(s0)
   17798:	0307a783          	lw	a5,48(a5)
   1779c:	fef42223          	sw	a5,-28(s0)
   177a0:	fe442783          	lw	a5,-28(s0)
   177a4:	e60784e3          	beqz	a5,1760c <rt_mq_send_wait+0x14c>
        }
    }

    /* move free list pointer */
    mq->msg_queue_free = msg->next;
   177a8:	fe442783          	lw	a5,-28(s0)
   177ac:	0007a703          	lw	a4,0(a5)
   177b0:	fcc42783          	lw	a5,-52(s0)
   177b4:	02e7a823          	sw	a4,48(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   177b8:	00048793          	mv	a5,s1
   177bc:	00078513          	mv	a0,a5
   177c0:	690040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* the msg is the new tailer of list, the next shall be NULL */
    msg->next = RT_NULL;
   177c4:	fe442783          	lw	a5,-28(s0)
   177c8:	0007a023          	sw	zero,0(a5)
    /* copy buffer */
    rt_memcpy(msg + 1, buffer, size);
   177cc:	fe442783          	lw	a5,-28(s0)
   177d0:	00478793          	addi	a5,a5,4
   177d4:	fc442603          	lw	a2,-60(s0)
   177d8:	fc842583          	lw	a1,-56(s0)
   177dc:	00078513          	mv	a0,a5
   177e0:	b35f90ef          	jal	ra,11314 <rt_memcpy>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   177e4:	664040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   177e8:	00050793          	mv	a5,a0
   177ec:	00078493          	mv	s1,a5
    /* link msg to message queue */
    if (mq->msg_queue_tail != RT_NULL)
   177f0:	fcc42783          	lw	a5,-52(s0)
   177f4:	02c7a783          	lw	a5,44(a5)
   177f8:	00078a63          	beqz	a5,1780c <rt_mq_send_wait+0x34c>
    {
        /* if the tail exists, */
        ((struct rt_mq_message *)mq->msg_queue_tail)->next = msg;
   177fc:	fcc42783          	lw	a5,-52(s0)
   17800:	02c7a783          	lw	a5,44(a5)
   17804:	fe442703          	lw	a4,-28(s0)
   17808:	00e7a023          	sw	a4,0(a5)
    }

    /* set new tail */
    mq->msg_queue_tail = msg;
   1780c:	fcc42783          	lw	a5,-52(s0)
   17810:	fe442703          	lw	a4,-28(s0)
   17814:	02e7a623          	sw	a4,44(a5)
    /* if the head is empty, set head */
    if (mq->msg_queue_head == RT_NULL)
   17818:	fcc42783          	lw	a5,-52(s0)
   1781c:	0287a783          	lw	a5,40(a5)
   17820:	00079863          	bnez	a5,17830 <rt_mq_send_wait+0x370>
        mq->msg_queue_head = msg;
   17824:	fcc42783          	lw	a5,-52(s0)
   17828:	fe442703          	lw	a4,-28(s0)
   1782c:	02e7a423          	sw	a4,40(a5)

    if(mq->entry < RT_MQ_ENTRY_MAX)
   17830:	fcc42783          	lw	a5,-52(s0)
   17834:	0247d703          	lhu	a4,36(a5)
   17838:	000107b7          	lui	a5,0x10
   1783c:	fff78793          	addi	a5,a5,-1 # ffff <__load-0x1>
   17840:	02f70e63          	beq	a4,a5,1787c <rt_mq_send_wait+0x3bc>
    {
        /* increase message entry */
        mq->entry ++;
   17844:	fcc42783          	lw	a5,-52(s0)
   17848:	0247d783          	lhu	a5,36(a5)
   1784c:	00178793          	addi	a5,a5,1
   17850:	01079713          	slli	a4,a5,0x10
   17854:	01075713          	srli	a4,a4,0x10
   17858:	fcc42783          	lw	a5,-52(s0)
   1785c:	02e79223          	sh	a4,36(a5)
        rt_hw_interrupt_enable(temp); /* enable interrupt */
        return -RT_EFULL; /* value overflowed */
    }

    /* resume suspended thread */
    if (!rt_list_isempty(&mq->parent.suspend_thread))
   17860:	fcc42783          	lw	a5,-52(s0)
   17864:	01478793          	addi	a5,a5,20
   17868:	00078513          	mv	a0,a5
   1786c:	939fc0ef          	jal	ra,141a4 <rt_list_isempty>
   17870:	00050793          	mv	a5,a0
   17874:	04079263          	bnez	a5,178b8 <rt_mq_send_wait+0x3f8>
   17878:	0180006f          	j	17890 <rt_mq_send_wait+0x3d0>
        rt_hw_interrupt_enable(temp); /* enable interrupt */
   1787c:	00048793          	mv	a5,s1
   17880:	00078513          	mv	a0,a5
   17884:	5cc040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        return -RT_EFULL; /* value overflowed */
   17888:	ffd00793          	li	a5,-3
   1788c:	03c0006f          	j	178c8 <rt_mq_send_wait+0x408>
    {
        _ipc_list_resume(&(mq->parent.suspend_thread));
   17890:	fcc42783          	lw	a5,-52(s0)
   17894:	01478793          	addi	a5,a5,20
   17898:	00078513          	mv	a0,a5
   1789c:	a95fc0ef          	jal	ra,14330 <_ipc_list_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   178a0:	00048793          	mv	a5,s1
   178a4:	00078513          	mv	a0,a5
   178a8:	5a8040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   178ac:	5dd000ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   178b0:	00000793          	li	a5,0
   178b4:	0140006f          	j	178c8 <rt_mq_send_wait+0x408>
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   178b8:	00048793          	mv	a5,s1
   178bc:	00078513          	mv	a0,a5
   178c0:	590040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   178c4:	00000793          	li	a5,0
}
   178c8:	00078513          	mv	a0,a5
   178cc:	03c12083          	lw	ra,60(sp)
   178d0:	03812403          	lw	s0,56(sp)
   178d4:	03412483          	lw	s1,52(sp)
   178d8:	04010113          	addi	sp,sp,64
   178dc:	00008067          	ret

000178e0 <rt_mq_send>:
 *           If the return value is any other values, it means that the messagequeue detach failed.
 *
 * @warning  This function can be called in interrupt context and thread context.
 */
rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
   178e0:	fe010113          	addi	sp,sp,-32
   178e4:	00112e23          	sw	ra,28(sp)
   178e8:	00812c23          	sw	s0,24(sp)
   178ec:	02010413          	addi	s0,sp,32
   178f0:	fea42623          	sw	a0,-20(s0)
   178f4:	feb42423          	sw	a1,-24(s0)
   178f8:	fec42223          	sw	a2,-28(s0)
    return rt_mq_send_wait(mq, buffer, size, 0);
   178fc:	00000693          	li	a3,0
   17900:	fe442603          	lw	a2,-28(s0)
   17904:	fe842583          	lw	a1,-24(s0)
   17908:	fec42503          	lw	a0,-20(s0)
   1790c:	bb5ff0ef          	jal	ra,174c0 <rt_mq_send_wait>
   17910:	00050793          	mv	a5,a0
}
   17914:	00078513          	mv	a0,a5
   17918:	01c12083          	lw	ra,28(sp)
   1791c:	01812403          	lw	s0,24(sp)
   17920:	02010113          	addi	sp,sp,32
   17924:	00008067          	ret

00017928 <rt_mq_urgent>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mailbox detach failed.
 */
rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
   17928:	fd010113          	addi	sp,sp,-48
   1792c:	02112623          	sw	ra,44(sp)
   17930:	02812423          	sw	s0,40(sp)
   17934:	02912223          	sw	s1,36(sp)
   17938:	03010413          	addi	s0,sp,48
   1793c:	fca42e23          	sw	a0,-36(s0)
   17940:	fcb42c23          	sw	a1,-40(s0)
   17944:	fcc42a23          	sw	a2,-44(s0)
    register rt_ubase_t temp;
    struct rt_mq_message *msg;

    /* parameter check */
    RT_ASSERT(mq != RT_NULL);
   17948:	fdc42783          	lw	a5,-36(s0)
   1794c:	02079063          	bnez	a5,1796c <rt_mq_urgent+0x44>
   17950:	000017b7          	lui	a5,0x1
   17954:	b7d78613          	addi	a2,a5,-1155 # b7d <__load-0xf483>
   17958:	00009597          	auipc	a1,0x9
   1795c:	14058593          	addi	a1,a1,320 # 20a98 <__FUNCTION__.2762>
   17960:	00009517          	auipc	a0,0x9
   17964:	e2850513          	addi	a0,a0,-472 # 20788 <__FUNCTION__.2575+0x3e4>
   17968:	edcfb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
   1796c:	fdc42783          	lw	a5,-36(s0)
   17970:	00078513          	mv	a0,a5
   17974:	db4f90ef          	jal	ra,10f28 <rt_object_get_type>
   17978:	00050793          	mv	a5,a0
   1797c:	00078713          	mv	a4,a5
   17980:	00600793          	li	a5,6
   17984:	02f70063          	beq	a4,a5,179a4 <rt_mq_urgent+0x7c>
   17988:	000017b7          	lui	a5,0x1
   1798c:	b7e78613          	addi	a2,a5,-1154 # b7e <__load-0xf482>
   17990:	00009597          	auipc	a1,0x9
   17994:	10858593          	addi	a1,a1,264 # 20a98 <__FUNCTION__.2762>
   17998:	00009517          	auipc	a0,0x9
   1799c:	e0050513          	addi	a0,a0,-512 # 20798 <__FUNCTION__.2575+0x3f4>
   179a0:	ea4fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(buffer != RT_NULL);
   179a4:	fd842783          	lw	a5,-40(s0)
   179a8:	02079063          	bnez	a5,179c8 <rt_mq_urgent+0xa0>
   179ac:	000017b7          	lui	a5,0x1
   179b0:	b7f78613          	addi	a2,a5,-1153 # b7f <__load-0xf481>
   179b4:	00009597          	auipc	a1,0x9
   179b8:	0e458593          	addi	a1,a1,228 # 20a98 <__FUNCTION__.2762>
   179bc:	00009517          	auipc	a0,0x9
   179c0:	e9050513          	addi	a0,a0,-368 # 2084c <__FUNCTION__.2575+0x4a8>
   179c4:	e80fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(size != 0);
   179c8:	fd442783          	lw	a5,-44(s0)
   179cc:	02079063          	bnez	a5,179ec <rt_mq_urgent+0xc4>
   179d0:	000017b7          	lui	a5,0x1
   179d4:	b8078613          	addi	a2,a5,-1152 # b80 <__load-0xf480>
   179d8:	00009597          	auipc	a1,0x9
   179dc:	0c058593          	addi	a1,a1,192 # 20a98 <__FUNCTION__.2762>
   179e0:	00009517          	auipc	a0,0x9
   179e4:	e8050513          	addi	a0,a0,-384 # 20860 <__FUNCTION__.2575+0x4bc>
   179e8:	e5cfb0ef          	jal	ra,13044 <rt_assert_handler>

    /* greater than one message size */
    if (size > mq->msg_size)
   179ec:	fdc42783          	lw	a5,-36(s0)
   179f0:	0207d783          	lhu	a5,32(a5)
   179f4:	00078713          	mv	a4,a5
   179f8:	fd442783          	lw	a5,-44(s0)
   179fc:	00f77663          	bgeu	a4,a5,17a08 <rt_mq_urgent+0xe0>
        return -RT_ERROR;
   17a00:	fff00793          	li	a5,-1
   17a04:	1640006f          	j	17b68 <rt_mq_urgent+0x240>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));
   17a08:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   17a0c:	0007a783          	lw	a5,0(a5)
   17a10:	00078c63          	beqz	a5,17a28 <rt_mq_urgent+0x100>
   17a14:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   17a18:	0007a703          	lw	a4,0(a5)
   17a1c:	fdc42783          	lw	a5,-36(s0)
   17a20:	00078513          	mv	a0,a5
   17a24:	000700e7          	jalr	a4

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   17a28:	420040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17a2c:	00050793          	mv	a5,a0
   17a30:	00078493          	mv	s1,a5

    /* get a free list, there must be an empty item */
    msg = (struct rt_mq_message *)mq->msg_queue_free;
   17a34:	fdc42783          	lw	a5,-36(s0)
   17a38:	0307a783          	lw	a5,48(a5)
   17a3c:	fef42623          	sw	a5,-20(s0)
    /* message queue is full */
    if (msg == RT_NULL)
   17a40:	fec42783          	lw	a5,-20(s0)
   17a44:	00079c63          	bnez	a5,17a5c <rt_mq_urgent+0x134>
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   17a48:	00048793          	mv	a5,s1
   17a4c:	00078513          	mv	a0,a5
   17a50:	400040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        return -RT_EFULL;
   17a54:	ffd00793          	li	a5,-3
   17a58:	1100006f          	j	17b68 <rt_mq_urgent+0x240>
    }
    /* move free list pointer */
    mq->msg_queue_free = msg->next;
   17a5c:	fec42783          	lw	a5,-20(s0)
   17a60:	0007a703          	lw	a4,0(a5)
   17a64:	fdc42783          	lw	a5,-36(s0)
   17a68:	02e7a823          	sw	a4,48(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   17a6c:	00048793          	mv	a5,s1
   17a70:	00078513          	mv	a0,a5
   17a74:	3dc040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* copy buffer */
    rt_memcpy(msg + 1, buffer, size);
   17a78:	fec42783          	lw	a5,-20(s0)
   17a7c:	00478793          	addi	a5,a5,4
   17a80:	fd442603          	lw	a2,-44(s0)
   17a84:	fd842583          	lw	a1,-40(s0)
   17a88:	00078513          	mv	a0,a5
   17a8c:	889f90ef          	jal	ra,11314 <rt_memcpy>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   17a90:	3b8040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17a94:	00050793          	mv	a5,a0
   17a98:	00078493          	mv	s1,a5

    /* link msg to the beginning of message queue */
    msg->next = (struct rt_mq_message *)mq->msg_queue_head;
   17a9c:	fdc42783          	lw	a5,-36(s0)
   17aa0:	0287a703          	lw	a4,40(a5)
   17aa4:	fec42783          	lw	a5,-20(s0)
   17aa8:	00e7a023          	sw	a4,0(a5)
    mq->msg_queue_head = msg;
   17aac:	fdc42783          	lw	a5,-36(s0)
   17ab0:	fec42703          	lw	a4,-20(s0)
   17ab4:	02e7a423          	sw	a4,40(a5)

    /* if there is no tail */
    if (mq->msg_queue_tail == RT_NULL)
   17ab8:	fdc42783          	lw	a5,-36(s0)
   17abc:	02c7a783          	lw	a5,44(a5)
   17ac0:	00079863          	bnez	a5,17ad0 <rt_mq_urgent+0x1a8>
        mq->msg_queue_tail = msg;
   17ac4:	fdc42783          	lw	a5,-36(s0)
   17ac8:	fec42703          	lw	a4,-20(s0)
   17acc:	02e7a623          	sw	a4,44(a5)

    if(mq->entry < RT_MQ_ENTRY_MAX)
   17ad0:	fdc42783          	lw	a5,-36(s0)
   17ad4:	0247d703          	lhu	a4,36(a5)
   17ad8:	000107b7          	lui	a5,0x10
   17adc:	fff78793          	addi	a5,a5,-1 # ffff <__load-0x1>
   17ae0:	02f70e63          	beq	a4,a5,17b1c <rt_mq_urgent+0x1f4>
    {
        /* increase message entry */
        mq->entry ++;
   17ae4:	fdc42783          	lw	a5,-36(s0)
   17ae8:	0247d783          	lhu	a5,36(a5)
   17aec:	00178793          	addi	a5,a5,1
   17af0:	01079713          	slli	a4,a5,0x10
   17af4:	01075713          	srli	a4,a4,0x10
   17af8:	fdc42783          	lw	a5,-36(s0)
   17afc:	02e79223          	sh	a4,36(a5)
        rt_hw_interrupt_enable(temp); /* enable interrupt */
        return -RT_EFULL; /* value overflowed */
    }

    /* resume suspended thread */
    if (!rt_list_isempty(&mq->parent.suspend_thread))
   17b00:	fdc42783          	lw	a5,-36(s0)
   17b04:	01478793          	addi	a5,a5,20
   17b08:	00078513          	mv	a0,a5
   17b0c:	e98fc0ef          	jal	ra,141a4 <rt_list_isempty>
   17b10:	00050793          	mv	a5,a0
   17b14:	04079263          	bnez	a5,17b58 <rt_mq_urgent+0x230>
   17b18:	0180006f          	j	17b30 <rt_mq_urgent+0x208>
        rt_hw_interrupt_enable(temp); /* enable interrupt */
   17b1c:	00048793          	mv	a5,s1
   17b20:	00078513          	mv	a0,a5
   17b24:	32c040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        return -RT_EFULL; /* value overflowed */
   17b28:	ffd00793          	li	a5,-3
   17b2c:	03c0006f          	j	17b68 <rt_mq_urgent+0x240>
    {
        _ipc_list_resume(&(mq->parent.suspend_thread));
   17b30:	fdc42783          	lw	a5,-36(s0)
   17b34:	01478793          	addi	a5,a5,20
   17b38:	00078513          	mv	a0,a5
   17b3c:	ff4fc0ef          	jal	ra,14330 <_ipc_list_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   17b40:	00048793          	mv	a5,s1
   17b44:	00078513          	mv	a0,a5
   17b48:	308040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   17b4c:	33d000ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   17b50:	00000793          	li	a5,0
   17b54:	0140006f          	j	17b68 <rt_mq_urgent+0x240>
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   17b58:	00048793          	mv	a5,s1
   17b5c:	00078513          	mv	a0,a5
   17b60:	2f0040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   17b64:	00000793          	li	a5,0
}
   17b68:	00078513          	mv	a0,a5
   17b6c:	02c12083          	lw	ra,44(sp)
   17b70:	02812403          	lw	s0,40(sp)
   17b74:	02412483          	lw	s1,36(sp)
   17b78:	03010113          	addi	sp,sp,48
   17b7c:	00008067          	ret

00017b80 <rt_mq_recv>:
 */
rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
   17b80:	fc010113          	addi	sp,sp,-64
   17b84:	02112e23          	sw	ra,60(sp)
   17b88:	02812c23          	sw	s0,56(sp)
   17b8c:	02912a23          	sw	s1,52(sp)
   17b90:	04010413          	addi	s0,sp,64
   17b94:	fca42623          	sw	a0,-52(s0)
   17b98:	fcb42423          	sw	a1,-56(s0)
   17b9c:	fcc42223          	sw	a2,-60(s0)
   17ba0:	fcd42023          	sw	a3,-64(s0)
    register rt_ubase_t temp;
    struct rt_mq_message *msg;
    rt_uint32_t tick_delta;

    /* parameter check */
    RT_ASSERT(mq != RT_NULL);
   17ba4:	fcc42783          	lw	a5,-52(s0)
   17ba8:	02079063          	bnez	a5,17bc8 <rt_mq_recv+0x48>
   17bac:	000017b7          	lui	a5,0x1
   17bb0:	be778613          	addi	a2,a5,-1049 # be7 <__load-0xf419>
   17bb4:	00009597          	auipc	a1,0x9
   17bb8:	ef458593          	addi	a1,a1,-268 # 20aa8 <__FUNCTION__.2773>
   17bbc:	00009517          	auipc	a0,0x9
   17bc0:	bcc50513          	addi	a0,a0,-1076 # 20788 <__FUNCTION__.2575+0x3e4>
   17bc4:	c80fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
   17bc8:	fcc42783          	lw	a5,-52(s0)
   17bcc:	00078513          	mv	a0,a5
   17bd0:	b58f90ef          	jal	ra,10f28 <rt_object_get_type>
   17bd4:	00050793          	mv	a5,a0
   17bd8:	00078713          	mv	a4,a5
   17bdc:	00600793          	li	a5,6
   17be0:	02f70063          	beq	a4,a5,17c00 <rt_mq_recv+0x80>
   17be4:	000017b7          	lui	a5,0x1
   17be8:	be878613          	addi	a2,a5,-1048 # be8 <__load-0xf418>
   17bec:	00009597          	auipc	a1,0x9
   17bf0:	ebc58593          	addi	a1,a1,-324 # 20aa8 <__FUNCTION__.2773>
   17bf4:	00009517          	auipc	a0,0x9
   17bf8:	ba450513          	addi	a0,a0,-1116 # 20798 <__FUNCTION__.2575+0x3f4>
   17bfc:	c48fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(buffer != RT_NULL);
   17c00:	fc842783          	lw	a5,-56(s0)
   17c04:	02079063          	bnez	a5,17c24 <rt_mq_recv+0xa4>
   17c08:	000017b7          	lui	a5,0x1
   17c0c:	be978613          	addi	a2,a5,-1047 # be9 <__load-0xf417>
   17c10:	00009597          	auipc	a1,0x9
   17c14:	e9858593          	addi	a1,a1,-360 # 20aa8 <__FUNCTION__.2773>
   17c18:	00009517          	auipc	a0,0x9
   17c1c:	c3450513          	addi	a0,a0,-972 # 2084c <__FUNCTION__.2575+0x4a8>
   17c20:	c24fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(size != 0);
   17c24:	fc442783          	lw	a5,-60(s0)
   17c28:	02079063          	bnez	a5,17c48 <rt_mq_recv+0xc8>
   17c2c:	000017b7          	lui	a5,0x1
   17c30:	bea78613          	addi	a2,a5,-1046 # bea <__load-0xf416>
   17c34:	00009597          	auipc	a1,0x9
   17c38:	e7458593          	addi	a1,a1,-396 # 20aa8 <__FUNCTION__.2773>
   17c3c:	00009517          	auipc	a0,0x9
   17c40:	c2450513          	addi	a0,a0,-988 # 20860 <__FUNCTION__.2575+0x4bc>
   17c44:	c00fb0ef          	jal	ra,13044 <rt_assert_handler>

    /* initialize delta tick */
    tick_delta = 0;
   17c48:	fe042623          	sw	zero,-20(s0)
    /* get current thread */
    thread = rt_thread_self();
   17c4c:	885fb0ef          	jal	ra,134d0 <rt_thread_self>
   17c50:	fea42423          	sw	a0,-24(s0)
    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mq->parent.parent)));
   17c54:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   17c58:	0007a783          	lw	a5,0(a5)
   17c5c:	00078c63          	beqz	a5,17c74 <rt_mq_recv+0xf4>
   17c60:	de818793          	addi	a5,gp,-536 # 22948 <rt_object_trytake_hook>
   17c64:	0007a703          	lw	a4,0(a5)
   17c68:	fcc42783          	lw	a5,-52(s0)
   17c6c:	00078513          	mv	a0,a5
   17c70:	000700e7          	jalr	a4

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   17c74:	1d4040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17c78:	00050793          	mv	a5,a0
   17c7c:	00078493          	mv	s1,a5

    /* for non-blocking call */
    if (mq->entry == 0 && timeout == 0)
   17c80:	fcc42783          	lw	a5,-52(s0)
   17c84:	0247d783          	lhu	a5,36(a5)
   17c88:	1a079a63          	bnez	a5,17e3c <rt_mq_recv+0x2bc>
   17c8c:	fc042783          	lw	a5,-64(s0)
   17c90:	1a079663          	bnez	a5,17e3c <rt_mq_recv+0x2bc>
    {
        rt_hw_interrupt_enable(temp);
   17c94:	00048793          	mv	a5,s1
   17c98:	00078513          	mv	a0,a5
   17c9c:	1b4040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        return -RT_ETIMEOUT;
   17ca0:	ffe00793          	li	a5,-2
   17ca4:	2f40006f          	j	17f98 <rt_mq_recv+0x418>
    }

    /* message queue is empty */
    while (mq->entry == 0)
    {
        RT_DEBUG_IN_THREAD_CONTEXT;
   17ca8:	1a0040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17cac:	fea42023          	sw	a0,-32(s0)
   17cb0:	821fb0ef          	jal	ra,134d0 <rt_thread_self>
   17cb4:	00050793          	mv	a5,a0
   17cb8:	02079a63          	bnez	a5,17cec <rt_mq_recv+0x16c>
   17cbc:	00009597          	auipc	a1,0x9
   17cc0:	dec58593          	addi	a1,a1,-532 # 20aa8 <__FUNCTION__.2773>
   17cc4:	00009517          	auipc	a0,0x9
   17cc8:	83450513          	addi	a0,a0,-1996 # 204f8 <__FUNCTION__.2575+0x154>
   17ccc:	c35fa0ef          	jal	ra,12900 <rt_kprintf>
   17cd0:	000017b7          	lui	a5,0x1
   17cd4:	c0078613          	addi	a2,a5,-1024 # c00 <__load-0xf400>
   17cd8:	00009597          	auipc	a1,0x9
   17cdc:	dd058593          	addi	a1,a1,-560 # 20aa8 <__FUNCTION__.2773>
   17ce0:	00008517          	auipc	a0,0x8
   17ce4:	6d850513          	addi	a0,a0,1752 # 203b8 <__FUNCTION__.2575+0x14>
   17ce8:	b5cfb0ef          	jal	ra,13044 <rt_assert_handler>
   17cec:	15c040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17cf0:	fca42e23          	sw	a0,-36(s0)
   17cf4:	024010ef          	jal	ra,18d18 <rt_interrupt_get_nest>
   17cf8:	00050793          	mv	a5,a0
   17cfc:	02078a63          	beqz	a5,17d30 <rt_mq_recv+0x1b0>
   17d00:	00009597          	auipc	a1,0x9
   17d04:	da858593          	addi	a1,a1,-600 # 20aa8 <__FUNCTION__.2773>
   17d08:	00008517          	auipc	a0,0x8
   17d0c:	78c50513          	addi	a0,a0,1932 # 20494 <__FUNCTION__.2575+0xf0>
   17d10:	bf1fa0ef          	jal	ra,12900 <rt_kprintf>
   17d14:	000017b7          	lui	a5,0x1
   17d18:	c0078613          	addi	a2,a5,-1024 # c00 <__load-0xf400>
   17d1c:	00009597          	auipc	a1,0x9
   17d20:	d8c58593          	addi	a1,a1,-628 # 20aa8 <__FUNCTION__.2773>
   17d24:	00008517          	auipc	a0,0x8
   17d28:	69450513          	addi	a0,a0,1684 # 203b8 <__FUNCTION__.2575+0x14>
   17d2c:	b18fb0ef          	jal	ra,13044 <rt_assert_handler>
   17d30:	fdc42503          	lw	a0,-36(s0)
   17d34:	11c040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   17d38:	fe042503          	lw	a0,-32(s0)
   17d3c:	114040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        /* reset error number in thread */
        thread->error = RT_EOK;
   17d40:	fe842783          	lw	a5,-24(s0)
   17d44:	0207a823          	sw	zero,48(a5)

        /* no waiting, return timeout */
        if (timeout == 0)
   17d48:	fc042783          	lw	a5,-64(s0)
   17d4c:	02079263          	bnez	a5,17d70 <rt_mq_recv+0x1f0>
        {
            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
   17d50:	00048793          	mv	a5,s1
   17d54:	00078513          	mv	a0,a5
   17d58:	0f8040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            thread->error = -RT_ETIMEOUT;
   17d5c:	fe842783          	lw	a5,-24(s0)
   17d60:	ffe00713          	li	a4,-2
   17d64:	02e7a823          	sw	a4,48(a5)

            return -RT_ETIMEOUT;
   17d68:	ffe00793          	li	a5,-2
   17d6c:	22c0006f          	j	17f98 <rt_mq_recv+0x418>
        }

        /* suspend current thread */
        _ipc_list_suspend(&(mq->parent.suspend_thread),
   17d70:	fcc42783          	lw	a5,-52(s0)
   17d74:	01478713          	addi	a4,a5,20
   17d78:	fcc42783          	lw	a5,-52(s0)
   17d7c:	0097c783          	lbu	a5,9(a5)
   17d80:	00078613          	mv	a2,a5
   17d84:	fe842583          	lw	a1,-24(s0)
   17d88:	00070513          	mv	a0,a4
   17d8c:	c8cfc0ef          	jal	ra,14218 <_ipc_list_suspend>
                            thread,
                            mq->parent.parent.flag);

        /* has waiting time, start thread timer */
        if (timeout > 0)
   17d90:	fc042783          	lw	a5,-64(s0)
   17d94:	02f05c63          	blez	a5,17dcc <rt_mq_recv+0x24c>
        {
            /* get the start tick of timer */
            tick_delta = rt_tick_get();
   17d98:	360000ef          	jal	ra,180f8 <rt_tick_get>
   17d9c:	fea42623          	sw	a0,-20(s0)

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n",
                                        thread->name));

            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
   17da0:	fe842783          	lw	a5,-24(s0)
   17da4:	04c78793          	addi	a5,a5,76
   17da8:	fc040713          	addi	a4,s0,-64
   17dac:	00070613          	mv	a2,a4
   17db0:	00000593          	li	a1,0
   17db4:	00078513          	mv	a0,a5
   17db8:	424030ef          	jal	ra,1b1dc <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
   17dbc:	fe842783          	lw	a5,-24(s0)
   17dc0:	04c78793          	addi	a5,a5,76
   17dc4:	00078513          	mv	a0,a5
   17dc8:	781020ef          	jal	ra,1ad48 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   17dcc:	00048793          	mv	a5,s1
   17dd0:	00078513          	mv	a0,a5
   17dd4:	07c040ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        /* re-schedule */
        rt_schedule();
   17dd8:	0b1000ef          	jal	ra,18688 <rt_schedule>

        /* recv message */
        if (thread->error != RT_EOK)
   17ddc:	fe842783          	lw	a5,-24(s0)
   17de0:	0307a783          	lw	a5,48(a5)
   17de4:	00078863          	beqz	a5,17df4 <rt_mq_recv+0x274>
        {
            /* return error */
            return thread->error;
   17de8:	fe842783          	lw	a5,-24(s0)
   17dec:	0307a783          	lw	a5,48(a5)
   17df0:	1a80006f          	j	17f98 <rt_mq_recv+0x418>
        }

        /* disable interrupt */
        temp = rt_hw_interrupt_disable();
   17df4:	054040ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17df8:	00050793          	mv	a5,a0
   17dfc:	00078493          	mv	s1,a5

        /* if it's not waiting forever and then re-calculate timeout tick */
        if (timeout > 0)
   17e00:	fc042783          	lw	a5,-64(s0)
   17e04:	02f05c63          	blez	a5,17e3c <rt_mq_recv+0x2bc>
        {
            tick_delta = rt_tick_get() - tick_delta;
   17e08:	2f0000ef          	jal	ra,180f8 <rt_tick_get>
   17e0c:	00050713          	mv	a4,a0
   17e10:	fec42783          	lw	a5,-20(s0)
   17e14:	40f707b3          	sub	a5,a4,a5
   17e18:	fef42623          	sw	a5,-20(s0)
            timeout -= tick_delta;
   17e1c:	fc042783          	lw	a5,-64(s0)
   17e20:	00078713          	mv	a4,a5
   17e24:	fec42783          	lw	a5,-20(s0)
   17e28:	40f707b3          	sub	a5,a4,a5
   17e2c:	fcf42023          	sw	a5,-64(s0)
            if (timeout < 0)
   17e30:	fc042783          	lw	a5,-64(s0)
   17e34:	0007d463          	bgez	a5,17e3c <rt_mq_recv+0x2bc>
                timeout = 0;
   17e38:	fc042023          	sw	zero,-64(s0)
    while (mq->entry == 0)
   17e3c:	fcc42783          	lw	a5,-52(s0)
   17e40:	0247d783          	lhu	a5,36(a5)
   17e44:	e60782e3          	beqz	a5,17ca8 <rt_mq_recv+0x128>
        }
    }

    /* get message from queue */
    msg = (struct rt_mq_message *)mq->msg_queue_head;
   17e48:	fcc42783          	lw	a5,-52(s0)
   17e4c:	0287a783          	lw	a5,40(a5)
   17e50:	fef42223          	sw	a5,-28(s0)

    /* move message queue head */
    mq->msg_queue_head = msg->next;
   17e54:	fe442783          	lw	a5,-28(s0)
   17e58:	0007a703          	lw	a4,0(a5)
   17e5c:	fcc42783          	lw	a5,-52(s0)
   17e60:	02e7a423          	sw	a4,40(a5)
    /* reach queue tail, set to NULL */
    if (mq->msg_queue_tail == msg)
   17e64:	fcc42783          	lw	a5,-52(s0)
   17e68:	02c7a783          	lw	a5,44(a5)
   17e6c:	fe442703          	lw	a4,-28(s0)
   17e70:	00f71663          	bne	a4,a5,17e7c <rt_mq_recv+0x2fc>
        mq->msg_queue_tail = RT_NULL;
   17e74:	fcc42783          	lw	a5,-52(s0)
   17e78:	0207a623          	sw	zero,44(a5)

    /* decrease message entry */
    if(mq->entry > 0)
   17e7c:	fcc42783          	lw	a5,-52(s0)
   17e80:	0247d783          	lhu	a5,36(a5)
   17e84:	02078063          	beqz	a5,17ea4 <rt_mq_recv+0x324>
    {
        mq->entry --;
   17e88:	fcc42783          	lw	a5,-52(s0)
   17e8c:	0247d783          	lhu	a5,36(a5)
   17e90:	fff78793          	addi	a5,a5,-1
   17e94:	01079713          	slli	a4,a5,0x10
   17e98:	01075713          	srli	a4,a4,0x10
   17e9c:	fcc42783          	lw	a5,-52(s0)
   17ea0:	02e79223          	sh	a4,36(a5)
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   17ea4:	00048793          	mv	a5,s1
   17ea8:	00078513          	mv	a0,a5
   17eac:	7a5030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* copy message */
    rt_memcpy(buffer, msg + 1, size > mq->msg_size ? mq->msg_size : size);
   17eb0:	fe442783          	lw	a5,-28(s0)
   17eb4:	00478713          	addi	a4,a5,4
   17eb8:	fcc42783          	lw	a5,-52(s0)
   17ebc:	0207d783          	lhu	a5,32(a5)
   17ec0:	00078693          	mv	a3,a5
   17ec4:	fc442783          	lw	a5,-60(s0)
   17ec8:	00f6f463          	bgeu	a3,a5,17ed0 <rt_mq_recv+0x350>
   17ecc:	00068793          	mv	a5,a3
   17ed0:	00078613          	mv	a2,a5
   17ed4:	00070593          	mv	a1,a4
   17ed8:	fc842503          	lw	a0,-56(s0)
   17edc:	c38f90ef          	jal	ra,11314 <rt_memcpy>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   17ee0:	769030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   17ee4:	00050793          	mv	a5,a0
   17ee8:	00078493          	mv	s1,a5
    /* put message to free list */
    msg->next = (struct rt_mq_message *)mq->msg_queue_free;
   17eec:	fcc42783          	lw	a5,-52(s0)
   17ef0:	0307a703          	lw	a4,48(a5)
   17ef4:	fe442783          	lw	a5,-28(s0)
   17ef8:	00e7a023          	sw	a4,0(a5)
    mq->msg_queue_free = msg;
   17efc:	fcc42783          	lw	a5,-52(s0)
   17f00:	fe442703          	lw	a4,-28(s0)
   17f04:	02e7a823          	sw	a4,48(a5)

    /* resume suspended thread */
    if (!rt_list_isempty(&(mq->suspend_sender_thread)))
   17f08:	fcc42783          	lw	a5,-52(s0)
   17f0c:	03478793          	addi	a5,a5,52
   17f10:	00078513          	mv	a0,a5
   17f14:	a90fc0ef          	jal	ra,141a4 <rt_list_isempty>
   17f18:	00050793          	mv	a5,a0
   17f1c:	04079663          	bnez	a5,17f68 <rt_mq_recv+0x3e8>
    {
        _ipc_list_resume(&(mq->suspend_sender_thread));
   17f20:	fcc42783          	lw	a5,-52(s0)
   17f24:	03478793          	addi	a5,a5,52
   17f28:	00078513          	mv	a0,a5
   17f2c:	c04fc0ef          	jal	ra,14330 <_ipc_list_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
   17f30:	00048793          	mv	a5,s1
   17f34:	00078513          	mv	a0,a5
   17f38:	719030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mq->parent.parent)));
   17f3c:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   17f40:	0007a783          	lw	a5,0(a5)
   17f44:	00078c63          	beqz	a5,17f5c <rt_mq_recv+0x3dc>
   17f48:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   17f4c:	0007a703          	lw	a4,0(a5)
   17f50:	fcc42783          	lw	a5,-52(s0)
   17f54:	00078513          	mv	a0,a5
   17f58:	000700e7          	jalr	a4

        rt_schedule();
   17f5c:	72c000ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   17f60:	00000793          	li	a5,0
   17f64:	0340006f          	j	17f98 <rt_mq_recv+0x418>
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   17f68:	00048793          	mv	a5,s1
   17f6c:	00078513          	mv	a0,a5
   17f70:	6e1030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mq->parent.parent)));
   17f74:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   17f78:	0007a783          	lw	a5,0(a5)
   17f7c:	00078c63          	beqz	a5,17f94 <rt_mq_recv+0x414>
   17f80:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   17f84:	0007a703          	lw	a4,0(a5)
   17f88:	fcc42783          	lw	a5,-52(s0)
   17f8c:	00078513          	mv	a0,a5
   17f90:	000700e7          	jalr	a4

    return RT_EOK;
   17f94:	00000793          	li	a5,0
}
   17f98:	00078513          	mv	a0,a5
   17f9c:	03c12083          	lw	ra,60(sp)
   17fa0:	03812403          	lw	s0,56(sp)
   17fa4:	03412483          	lw	s1,52(sp)
   17fa8:	04010113          	addi	sp,sp,64
   17fac:	00008067          	ret

00017fb0 <rt_mq_control>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that this function failed to execute.
 */
rt_err_t rt_mq_control(rt_mq_t mq, int cmd, void *arg)
{
   17fb0:	fd010113          	addi	sp,sp,-48
   17fb4:	02112623          	sw	ra,44(sp)
   17fb8:	02812423          	sw	s0,40(sp)
   17fbc:	03010413          	addi	s0,sp,48
   17fc0:	fca42e23          	sw	a0,-36(s0)
   17fc4:	fcb42c23          	sw	a1,-40(s0)
   17fc8:	fcc42a23          	sw	a2,-44(s0)
    rt_ubase_t level;
    struct rt_mq_message *msg;

    /* parameter check */
    RT_ASSERT(mq != RT_NULL);
   17fcc:	fdc42783          	lw	a5,-36(s0)
   17fd0:	02079063          	bnez	a5,17ff0 <rt_mq_control+0x40>
   17fd4:	000017b7          	lui	a5,0x1
   17fd8:	c8778613          	addi	a2,a5,-889 # c87 <__load-0xf379>
   17fdc:	00009597          	auipc	a1,0x9
   17fe0:	ad858593          	addi	a1,a1,-1320 # 20ab4 <__FUNCTION__.2786>
   17fe4:	00008517          	auipc	a0,0x8
   17fe8:	7a450513          	addi	a0,a0,1956 # 20788 <__FUNCTION__.2575+0x3e4>
   17fec:	858fb0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
   17ff0:	fdc42783          	lw	a5,-36(s0)
   17ff4:	00078513          	mv	a0,a5
   17ff8:	f31f80ef          	jal	ra,10f28 <rt_object_get_type>
   17ffc:	00050793          	mv	a5,a0
   18000:	00078713          	mv	a4,a5
   18004:	00600793          	li	a5,6
   18008:	02f70063          	beq	a4,a5,18028 <rt_mq_control+0x78>
   1800c:	000017b7          	lui	a5,0x1
   18010:	c8878613          	addi	a2,a5,-888 # c88 <__load-0xf378>
   18014:	00009597          	auipc	a1,0x9
   18018:	aa058593          	addi	a1,a1,-1376 # 20ab4 <__FUNCTION__.2786>
   1801c:	00008517          	auipc	a0,0x8
   18020:	77c50513          	addi	a0,a0,1916 # 20798 <__FUNCTION__.2575+0x3f4>
   18024:	820fb0ef          	jal	ra,13044 <rt_assert_handler>

    if (cmd == RT_IPC_CMD_RESET)
   18028:	fd842703          	lw	a4,-40(s0)
   1802c:	00100793          	li	a5,1
   18030:	0af71863          	bne	a4,a5,180e0 <rt_mq_control+0x130>
    {
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
   18034:	615030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18038:	00050793          	mv	a5,a0
   1803c:	fef42623          	sw	a5,-20(s0)

        /* resume all waiting thread */
        _ipc_list_resume_all(&mq->parent.suspend_thread);
   18040:	fdc42783          	lw	a5,-36(s0)
   18044:	01478793          	addi	a5,a5,20
   18048:	00078513          	mv	a0,a5
   1804c:	b28fc0ef          	jal	ra,14374 <_ipc_list_resume_all>
        /* also resume all message queue private suspended thread */
        _ipc_list_resume_all(&(mq->suspend_sender_thread));
   18050:	fdc42783          	lw	a5,-36(s0)
   18054:	03478793          	addi	a5,a5,52
   18058:	00078513          	mv	a0,a5
   1805c:	b18fc0ef          	jal	ra,14374 <_ipc_list_resume_all>

        /* release all message in the queue */
        while (mq->msg_queue_head != RT_NULL)
   18060:	0540006f          	j	180b4 <rt_mq_control+0x104>
        {
            /* get message from queue */
            msg = (struct rt_mq_message *)mq->msg_queue_head;
   18064:	fdc42783          	lw	a5,-36(s0)
   18068:	0287a783          	lw	a5,40(a5)
   1806c:	fef42423          	sw	a5,-24(s0)

            /* move message queue head */
            mq->msg_queue_head = msg->next;
   18070:	fe842783          	lw	a5,-24(s0)
   18074:	0007a703          	lw	a4,0(a5)
   18078:	fdc42783          	lw	a5,-36(s0)
   1807c:	02e7a423          	sw	a4,40(a5)
            /* reach queue tail, set to NULL */
            if (mq->msg_queue_tail == msg)
   18080:	fdc42783          	lw	a5,-36(s0)
   18084:	02c7a783          	lw	a5,44(a5)
   18088:	fe842703          	lw	a4,-24(s0)
   1808c:	00f71663          	bne	a4,a5,18098 <rt_mq_control+0xe8>
                mq->msg_queue_tail = RT_NULL;
   18090:	fdc42783          	lw	a5,-36(s0)
   18094:	0207a623          	sw	zero,44(a5)

            /* put message to free list */
            msg->next = (struct rt_mq_message *)mq->msg_queue_free;
   18098:	fdc42783          	lw	a5,-36(s0)
   1809c:	0307a703          	lw	a4,48(a5)
   180a0:	fe842783          	lw	a5,-24(s0)
   180a4:	00e7a023          	sw	a4,0(a5)
            mq->msg_queue_free = msg;
   180a8:	fdc42783          	lw	a5,-36(s0)
   180ac:	fe842703          	lw	a4,-24(s0)
   180b0:	02e7a823          	sw	a4,48(a5)
        while (mq->msg_queue_head != RT_NULL)
   180b4:	fdc42783          	lw	a5,-36(s0)
   180b8:	0287a783          	lw	a5,40(a5)
   180bc:	fa0794e3          	bnez	a5,18064 <rt_mq_control+0xb4>
        }

        /* clean entry */
        mq->entry = 0;
   180c0:	fdc42783          	lw	a5,-36(s0)
   180c4:	02079223          	sh	zero,36(a5)

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   180c8:	fec42783          	lw	a5,-20(s0)
   180cc:	00078513          	mv	a0,a5
   180d0:	581030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        rt_schedule();
   180d4:	5b4000ef          	jal	ra,18688 <rt_schedule>

        return RT_EOK;
   180d8:	00000793          	li	a5,0
   180dc:	0080006f          	j	180e4 <rt_mq_control+0x134>
    }

    return -RT_ERROR;
   180e0:	fff00793          	li	a5,-1
}
   180e4:	00078513          	mv	a0,a5
   180e8:	02c12083          	lw	ra,44(sp)
   180ec:	02812403          	lw	s0,40(sp)
   180f0:	03010113          	addi	sp,sp,48
   180f4:	00008067          	ret

000180f8 <rt_tick_get>:
 * @brief    This function will return current tick from operating system startup.
 *
 * @return   Return current tick.
 */
rt_tick_t rt_tick_get(void)
{
   180f8:	ff010113          	addi	sp,sp,-16
   180fc:	00812623          	sw	s0,12(sp)
   18100:	01010413          	addi	s0,sp,16
    /* return the global tick */
    return rt_tick;
   18104:	91418793          	addi	a5,gp,-1772 # 22474 <rt_tick>
   18108:	0007a783          	lw	a5,0(a5)
}
   1810c:	00078513          	mv	a0,a5
   18110:	00c12403          	lw	s0,12(sp)
   18114:	01010113          	addi	sp,sp,16
   18118:	00008067          	ret

0001811c <rt_tick_set>:
 * @brief    This function will set current tick.
 *
 * @param    tick is the value that you will set.
 */
void rt_tick_set(rt_tick_t tick)
{
   1811c:	fd010113          	addi	sp,sp,-48
   18120:	02112623          	sw	ra,44(sp)
   18124:	02812423          	sw	s0,40(sp)
   18128:	03010413          	addi	s0,sp,48
   1812c:	fca42e23          	sw	a0,-36(s0)
    rt_base_t level;

    level = rt_hw_interrupt_disable();
   18130:	519030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18134:	fea42623          	sw	a0,-20(s0)
    rt_tick = tick;
   18138:	91418793          	addi	a5,gp,-1772 # 22474 <rt_tick>
   1813c:	fdc42703          	lw	a4,-36(s0)
   18140:	00e7a023          	sw	a4,0(a5)
    rt_hw_interrupt_enable(level);
   18144:	fec42503          	lw	a0,-20(s0)
   18148:	509030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   1814c:	00000013          	nop
   18150:	02c12083          	lw	ra,44(sp)
   18154:	02812403          	lw	s0,40(sp)
   18158:	03010113          	addi	sp,sp,48
   1815c:	00008067          	ret

00018160 <rt_tick_increase>:
/**
 * @brief    This function will notify kernel there is one tick passed.
 *           Normally, this function is invoked by clock ISR.
 */
void rt_tick_increase(void)
{
   18160:	fe010113          	addi	sp,sp,-32
   18164:	00112e23          	sw	ra,28(sp)
   18168:	00812c23          	sw	s0,24(sp)
   1816c:	02010413          	addi	s0,sp,32
    struct rt_thread *thread;
    rt_base_t level;

    level = rt_hw_interrupt_disable();
   18170:	4d9030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18174:	fea42623          	sw	a0,-20(s0)

    /* increase the global tick */
#ifdef RT_USING_SMP
    rt_cpu_self()->tick ++;
#else
    ++ rt_tick;
   18178:	91418793          	addi	a5,gp,-1772 # 22474 <rt_tick>
   1817c:	0007a783          	lw	a5,0(a5)
   18180:	00178713          	addi	a4,a5,1
   18184:	91418793          	addi	a5,gp,-1772 # 22474 <rt_tick>
   18188:	00e7a023          	sw	a4,0(a5)
#endif /* RT_USING_SMP */

    /* check time slice */
    thread = rt_thread_self();
   1818c:	b44fb0ef          	jal	ra,134d0 <rt_thread_self>
   18190:	fea42423          	sw	a0,-24(s0)

    -- thread->remaining_tick;
   18194:	fe842783          	lw	a5,-24(s0)
   18198:	0487a783          	lw	a5,72(a5)
   1819c:	fff78713          	addi	a4,a5,-1
   181a0:	fe842783          	lw	a5,-24(s0)
   181a4:	04e7a423          	sw	a4,72(a5)
    if (thread->remaining_tick == 0)
   181a8:	fe842783          	lw	a5,-24(s0)
   181ac:	0487a783          	lw	a5,72(a5)
   181b0:	02079e63          	bnez	a5,181ec <rt_tick_increase+0x8c>
    {
        /* change to initialized tick */
        thread->remaining_tick = thread->init_tick;
   181b4:	fe842783          	lw	a5,-24(s0)
   181b8:	0447a703          	lw	a4,68(a5)
   181bc:	fe842783          	lw	a5,-24(s0)
   181c0:	04e7a423          	sw	a4,72(a5)
        thread->stat |= RT_THREAD_STAT_YIELD;
   181c4:	fe842783          	lw	a5,-24(s0)
   181c8:	0347c783          	lbu	a5,52(a5)
   181cc:	0087e793          	ori	a5,a5,8
   181d0:	0ff7f713          	andi	a4,a5,255
   181d4:	fe842783          	lw	a5,-24(s0)
   181d8:	02e78a23          	sb	a4,52(a5)

        rt_hw_interrupt_enable(level);
   181dc:	fec42503          	lw	a0,-20(s0)
   181e0:	471030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
        rt_schedule();
   181e4:	4a4000ef          	jal	ra,18688 <rt_schedule>
   181e8:	00c0006f          	j	181f4 <rt_tick_increase+0x94>
    }
    else
    {
        rt_hw_interrupt_enable(level);
   181ec:	fec42503          	lw	a0,-20(s0)
   181f0:	461030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
    }

    /* check timer */
    rt_timer_check();
   181f4:	144030ef          	jal	ra,1b338 <rt_timer_check>
}
   181f8:	00000013          	nop
   181fc:	01c12083          	lw	ra,28(sp)
   18200:	01812403          	lw	s0,24(sp)
   18204:	02010113          	addi	sp,sp,32
   18208:	00008067          	ret

0001820c <rt_tick_from_millisecond>:
 *              - Max 0x7fffffff
 *
 * @return   Return the calculated tick.
 */
rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
   1820c:	fd010113          	addi	sp,sp,-48
   18210:	02812623          	sw	s0,44(sp)
   18214:	03010413          	addi	s0,sp,48
   18218:	fca42e23          	sw	a0,-36(s0)
    rt_tick_t tick;

    if (ms < 0)
   1821c:	fdc42783          	lw	a5,-36(s0)
   18220:	0007d863          	bgez	a5,18230 <rt_tick_from_millisecond+0x24>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
   18224:	fff00793          	li	a5,-1
   18228:	fef42623          	sw	a5,-20(s0)
   1822c:	04c0006f          	j	18278 <rt_tick_from_millisecond+0x6c>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
   18230:	fdc42703          	lw	a4,-36(s0)
   18234:	3e800793          	li	a5,1000
   18238:	02f74733          	div	a4,a4,a5
   1823c:	06400793          	li	a5,100
   18240:	02f707b3          	mul	a5,a4,a5
   18244:	fef42623          	sw	a5,-20(s0)
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
   18248:	fdc42703          	lw	a4,-36(s0)
   1824c:	3e800793          	li	a5,1000
   18250:	02f76733          	rem	a4,a4,a5
   18254:	06400793          	li	a5,100
   18258:	02f707b3          	mul	a5,a4,a5
   1825c:	3e778713          	addi	a4,a5,999
   18260:	3e800793          	li	a5,1000
   18264:	02f747b3          	div	a5,a4,a5
   18268:	00078713          	mv	a4,a5
   1826c:	fec42783          	lw	a5,-20(s0)
   18270:	00e787b3          	add	a5,a5,a4
   18274:	fef42623          	sw	a5,-20(s0)
    }

    /* return the calculated tick */
    return tick;
   18278:	fec42783          	lw	a5,-20(s0)
}
   1827c:	00078513          	mv	a0,a5
   18280:	02c12403          	lw	s0,44(sp)
   18284:	03010113          	addi	sp,sp,48
   18288:	00008067          	ret

0001828c <rt_tick_get_millisecond>:
 *           provide the correct 1ms-based tick.
 *
 * @return   Return passed millisecond from boot.
 */
RT_WEAK rt_tick_t rt_tick_get_millisecond(void)
{
   1828c:	ff010113          	addi	sp,sp,-16
   18290:	00112623          	sw	ra,12(sp)
   18294:	00812423          	sw	s0,8(sp)
   18298:	01010413          	addi	s0,sp,16
#if 1000 % RT_TICK_PER_SECOND == 0u
    return rt_tick_get() * (1000u / RT_TICK_PER_SECOND);
   1829c:	e5dff0ef          	jal	ra,180f8 <rt_tick_get>
   182a0:	00050713          	mv	a4,a0
   182a4:	00070793          	mv	a5,a4
   182a8:	00279793          	slli	a5,a5,0x2
   182ac:	00e787b3          	add	a5,a5,a4
   182b0:	00179793          	slli	a5,a5,0x1
#else
    #warning "rt-thread cannot provide a correct 1ms-based tick any longer,\
    please redefine this function in another file by using a high-precision hard-timer."
    return 0;
#endif /* 1000 % RT_TICK_PER_SECOND == 0u */
}
   182b4:	00078513          	mv	a0,a5
   182b8:	00c12083          	lw	ra,12(sp)
   182bc:	00812403          	lw	s0,8(sp)
   182c0:	01010113          	addi	sp,sp,16
   182c4:	00008067          	ret

000182c8 <rt_list_init>:
{
   182c8:	fe010113          	addi	sp,sp,-32
   182cc:	00812e23          	sw	s0,28(sp)
   182d0:	02010413          	addi	s0,sp,32
   182d4:	fea42623          	sw	a0,-20(s0)
    l->next = l->prev = l;
   182d8:	fec42783          	lw	a5,-20(s0)
   182dc:	fec42703          	lw	a4,-20(s0)
   182e0:	00e7a223          	sw	a4,4(a5)
   182e4:	fec42783          	lw	a5,-20(s0)
   182e8:	0047a703          	lw	a4,4(a5)
   182ec:	fec42783          	lw	a5,-20(s0)
   182f0:	00e7a023          	sw	a4,0(a5)
}
   182f4:	00000013          	nop
   182f8:	01c12403          	lw	s0,28(sp)
   182fc:	02010113          	addi	sp,sp,32
   18300:	00008067          	ret

00018304 <rt_list_insert_before>:
{
   18304:	fe010113          	addi	sp,sp,-32
   18308:	00812e23          	sw	s0,28(sp)
   1830c:	02010413          	addi	s0,sp,32
   18310:	fea42623          	sw	a0,-20(s0)
   18314:	feb42423          	sw	a1,-24(s0)
    l->prev->next = n;
   18318:	fec42783          	lw	a5,-20(s0)
   1831c:	0047a783          	lw	a5,4(a5)
   18320:	fe842703          	lw	a4,-24(s0)
   18324:	00e7a023          	sw	a4,0(a5)
    n->prev = l->prev;
   18328:	fec42783          	lw	a5,-20(s0)
   1832c:	0047a703          	lw	a4,4(a5)
   18330:	fe842783          	lw	a5,-24(s0)
   18334:	00e7a223          	sw	a4,4(a5)
    l->prev = n;
   18338:	fec42783          	lw	a5,-20(s0)
   1833c:	fe842703          	lw	a4,-24(s0)
   18340:	00e7a223          	sw	a4,4(a5)
    n->next = l;
   18344:	fe842783          	lw	a5,-24(s0)
   18348:	fec42703          	lw	a4,-20(s0)
   1834c:	00e7a023          	sw	a4,0(a5)
}
   18350:	00000013          	nop
   18354:	01c12403          	lw	s0,28(sp)
   18358:	02010113          	addi	sp,sp,32
   1835c:	00008067          	ret

00018360 <rt_list_remove>:
{
   18360:	fe010113          	addi	sp,sp,-32
   18364:	00812e23          	sw	s0,28(sp)
   18368:	02010413          	addi	s0,sp,32
   1836c:	fea42623          	sw	a0,-20(s0)
    n->next->prev = n->prev;
   18370:	fec42783          	lw	a5,-20(s0)
   18374:	0007a783          	lw	a5,0(a5)
   18378:	fec42703          	lw	a4,-20(s0)
   1837c:	00472703          	lw	a4,4(a4)
   18380:	00e7a223          	sw	a4,4(a5)
    n->prev->next = n->next;
   18384:	fec42783          	lw	a5,-20(s0)
   18388:	0047a783          	lw	a5,4(a5)
   1838c:	fec42703          	lw	a4,-20(s0)
   18390:	00072703          	lw	a4,0(a4)
   18394:	00e7a023          	sw	a4,0(a5)
    n->next = n->prev = n;
   18398:	fec42783          	lw	a5,-20(s0)
   1839c:	fec42703          	lw	a4,-20(s0)
   183a0:	00e7a223          	sw	a4,4(a5)
   183a4:	fec42783          	lw	a5,-20(s0)
   183a8:	0047a703          	lw	a4,4(a5)
   183ac:	fec42783          	lw	a5,-20(s0)
   183b0:	00e7a023          	sw	a4,0(a5)
}
   183b4:	00000013          	nop
   183b8:	01c12403          	lw	s0,28(sp)
   183bc:	02010113          	addi	sp,sp,32
   183c0:	00008067          	ret

000183c4 <rt_list_isempty>:
{
   183c4:	fe010113          	addi	sp,sp,-32
   183c8:	00812e23          	sw	s0,28(sp)
   183cc:	02010413          	addi	s0,sp,32
   183d0:	fea42623          	sw	a0,-20(s0)
    return l->next == l;
   183d4:	fec42783          	lw	a5,-20(s0)
   183d8:	0007a783          	lw	a5,0(a5)
   183dc:	fec42703          	lw	a4,-20(s0)
   183e0:	40f707b3          	sub	a5,a4,a5
   183e4:	0017b793          	seqz	a5,a5
   183e8:	0ff7f793          	andi	a5,a5,255
}
   183ec:	00078513          	mv	a0,a5
   183f0:	01c12403          	lw	s0,28(sp)
   183f4:	02010113          	addi	sp,sp,32
   183f8:	00008067          	ret

000183fc <rt_scheduler_sethook>:
 *        switch happens.
 *
 * @param hook is the hook function.
 */
void rt_scheduler_sethook(void (*hook)(struct rt_thread *from, struct rt_thread *to))
{
   183fc:	fe010113          	addi	sp,sp,-32
   18400:	00812e23          	sw	s0,28(sp)
   18404:	02010413          	addi	s0,sp,32
   18408:	fea42623          	sw	a0,-20(s0)
    rt_scheduler_hook = hook;
   1840c:	91c18793          	addi	a5,gp,-1764 # 2247c <rt_scheduler_hook>
   18410:	fec42703          	lw	a4,-20(s0)
   18414:	00e7a023          	sw	a4,0(a5)
}
   18418:	00000013          	nop
   1841c:	01c12403          	lw	s0,28(sp)
   18420:	02010113          	addi	sp,sp,32
   18424:	00008067          	ret

00018428 <rt_scheduler_switch_sethook>:
 *        switch happens.
 *
 * @param hook is the hook function.
 */
void rt_scheduler_switch_sethook(void (*hook)(struct rt_thread *tid))
{
   18428:	fe010113          	addi	sp,sp,-32
   1842c:	00812e23          	sw	s0,28(sp)
   18430:	02010413          	addi	s0,sp,32
   18434:	fea42623          	sw	a0,-20(s0)
    rt_scheduler_switch_hook = hook;
   18438:	92018793          	addi	a5,gp,-1760 # 22480 <rt_scheduler_switch_hook>
   1843c:	fec42703          	lw	a4,-20(s0)
   18440:	00e7a023          	sw	a4,0(a5)
}
   18444:	00000013          	nop
   18448:	01c12403          	lw	s0,28(sp)
   1844c:	02010113          	addi	sp,sp,32
   18450:	00008067          	ret

00018454 <_rt_scheduler_stack_check>:
/**@}*/
#endif /* RT_USING_HOOK */

#ifdef RT_USING_OVERFLOW_CHECK
static void _rt_scheduler_stack_check(struct rt_thread *thread)
{
   18454:	fd010113          	addi	sp,sp,-48
   18458:	02112623          	sw	ra,44(sp)
   1845c:	02812423          	sw	s0,40(sp)
   18460:	03010413          	addi	s0,sp,48
   18464:	fca42e23          	sw	a0,-36(s0)
    RT_ASSERT(thread != RT_NULL);
   18468:	fdc42783          	lw	a5,-36(s0)
   1846c:	00079e63          	bnez	a5,18488 <_rt_scheduler_stack_check+0x34>
   18470:	05800613          	li	a2,88
   18474:	00008597          	auipc	a1,0x8
   18478:	6b858593          	addi	a1,a1,1720 # 20b2c <__FUNCTION__.2458>
   1847c:	00008517          	auipc	a0,0x8
   18480:	64850513          	addi	a0,a0,1608 # 20ac4 <__FUNCTION__.2786+0x10>
   18484:	bc1fa0ef          	jal	ra,13044 <rt_assert_handler>

#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    if (*((rt_uint8_t *)((rt_ubase_t)thread->stack_addr + thread->stack_size - 1)) != '#' ||
#else
    if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
   18488:	fdc42783          	lw	a5,-36(s0)
   1848c:	0287a783          	lw	a5,40(a5)
   18490:	0007c703          	lbu	a4,0(a5)
   18494:	02300793          	li	a5,35
   18498:	04f71263          	bne	a4,a5,184dc <_rt_scheduler_stack_check+0x88>
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */
        (rt_ubase_t)thread->sp <= (rt_ubase_t)thread->stack_addr ||
   1849c:	fdc42783          	lw	a5,-36(s0)
   184a0:	01c7a783          	lw	a5,28(a5)
   184a4:	00078713          	mv	a4,a5
   184a8:	fdc42783          	lw	a5,-36(s0)
   184ac:	0287a783          	lw	a5,40(a5)
    if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
   184b0:	02e7f663          	bgeu	a5,a4,184dc <_rt_scheduler_stack_check+0x88>
        (rt_ubase_t)thread->sp >
   184b4:	fdc42783          	lw	a5,-36(s0)
   184b8:	01c7a783          	lw	a5,28(a5)
   184bc:	00078713          	mv	a4,a5
        (rt_ubase_t)thread->stack_addr + (rt_ubase_t)thread->stack_size)
   184c0:	fdc42783          	lw	a5,-36(s0)
   184c4:	0287a783          	lw	a5,40(a5)
   184c8:	00078693          	mv	a3,a5
   184cc:	fdc42783          	lw	a5,-36(s0)
   184d0:	02c7a783          	lw	a5,44(a5)
   184d4:	00f687b3          	add	a5,a3,a5
        (rt_ubase_t)thread->sp <= (rt_ubase_t)thread->stack_addr ||
   184d8:	02e7f863          	bgeu	a5,a4,18508 <_rt_scheduler_stack_check+0xb4>
    {
        rt_ubase_t level;

        rt_kprintf("thread:%s stack overflow\n", thread->name);
   184dc:	fdc42783          	lw	a5,-36(s0)
   184e0:	00078593          	mv	a1,a5
   184e4:	00008517          	auipc	a0,0x8
   184e8:	5f450513          	addi	a0,a0,1524 # 20ad8 <__FUNCTION__.2786+0x24>
   184ec:	c14fa0ef          	jal	ra,12900 <rt_kprintf>

        level = rt_hw_interrupt_disable();
   184f0:	159030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   184f4:	00050793          	mv	a5,a0
   184f8:	fef42623          	sw	a5,-20(s0)
        while (level);
   184fc:	fec42783          	lw	a5,-20(s0)
   18500:	fe079ee3          	bnez	a5,184fc <_rt_scheduler_stack_check+0xa8>
    {
   18504:	0380006f          	j	1853c <_rt_scheduler_stack_check+0xe8>
    {
        rt_kprintf("warning: %s stack is close to the top of stack address.\n",
                   thread->name);
    }
#else
    else if ((rt_ubase_t)thread->sp <= ((rt_ubase_t)thread->stack_addr + 32))
   18508:	fdc42783          	lw	a5,-36(s0)
   1850c:	01c7a783          	lw	a5,28(a5)
   18510:	00078713          	mv	a4,a5
   18514:	fdc42783          	lw	a5,-36(s0)
   18518:	0287a783          	lw	a5,40(a5)
   1851c:	02078793          	addi	a5,a5,32
   18520:	00e7ee63          	bltu	a5,a4,1853c <_rt_scheduler_stack_check+0xe8>
    {
        rt_kprintf("warning: %s stack is close to end of stack address.\n",
                   thread->name);
   18524:	fdc42783          	lw	a5,-36(s0)
        rt_kprintf("warning: %s stack is close to end of stack address.\n",
   18528:	00078593          	mv	a1,a5
   1852c:	00008517          	auipc	a0,0x8
   18530:	5c850513          	addi	a0,a0,1480 # 20af4 <__FUNCTION__.2786+0x40>
   18534:	bccfa0ef          	jal	ra,12900 <rt_kprintf>
    }
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */
}
   18538:	0040006f          	j	1853c <_rt_scheduler_stack_check+0xe8>
   1853c:	00000013          	nop
   18540:	02c12083          	lw	ra,44(sp)
   18544:	02812403          	lw	s0,40(sp)
   18548:	03010113          	addi	sp,sp,48
   1854c:	00008067          	ret

00018550 <_scheduler_get_highest_priority_thread>:

    return highest_priority_thread;
}
#else
static struct rt_thread* _scheduler_get_highest_priority_thread(rt_ubase_t *highest_prio)
{
   18550:	fe010113          	addi	sp,sp,-32
   18554:	00112e23          	sw	ra,28(sp)
   18558:	00812c23          	sw	s0,24(sp)
   1855c:	00912a23          	sw	s1,20(sp)
   18560:	01212823          	sw	s2,16(sp)
   18564:	02010413          	addi	s0,sp,32
   18568:	fea42623          	sw	a0,-20(s0)
    register rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
   1856c:	ef418793          	addi	a5,gp,-268 # 22a54 <rt_thread_ready_priority_group>
   18570:	0007a783          	lw	a5,0(a5)
   18574:	00078513          	mv	a0,a5
   18578:	9bdfa0ef          	jal	ra,12f34 <__rt_ffs>
   1857c:	00050793          	mv	a5,a0
   18580:	fff78793          	addi	a5,a5,-1
   18584:	00078493          	mv	s1,a5
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    /* get highest ready priority thread */
    highest_priority_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
   18588:	df018713          	addi	a4,gp,-528 # 22950 <rt_thread_priority_table>
   1858c:	00349793          	slli	a5,s1,0x3
   18590:	00f707b3          	add	a5,a4,a5
   18594:	0007a783          	lw	a5,0(a5)
   18598:	fec78913          	addi	s2,a5,-20
                              struct rt_thread,
                              tlist);

    *highest_prio = highest_ready_priority;
   1859c:	fec42783          	lw	a5,-20(s0)
   185a0:	0097a023          	sw	s1,0(a5)

    return highest_priority_thread;
   185a4:	00090793          	mv	a5,s2
}
   185a8:	00078513          	mv	a0,a5
   185ac:	01c12083          	lw	ra,28(sp)
   185b0:	01812403          	lw	s0,24(sp)
   185b4:	01412483          	lw	s1,20(sp)
   185b8:	01012903          	lw	s2,16(sp)
   185bc:	02010113          	addi	sp,sp,32
   185c0:	00008067          	ret

000185c4 <rt_system_scheduler_init>:

/**
 * @brief This function will initialize the system scheduler.
 */
void rt_system_scheduler_init(void)
{
   185c4:	ff010113          	addi	sp,sp,-16
   185c8:	00112623          	sw	ra,12(sp)
   185cc:	00812423          	sw	s0,8(sp)
   185d0:	00912223          	sw	s1,4(sp)
   185d4:	01010413          	addi	s0,sp,16
    int cpu;
#endif /* RT_USING_SMP */
    register rt_base_t offset;

#ifndef RT_USING_SMP
    rt_scheduler_lock_nest = 0;
   185d8:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   185dc:	00079023          	sh	zero,0(a5)
#endif /* RT_USING_SMP */

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
   185e0:	00000493          	li	s1,0
   185e4:	01c0006f          	j	18600 <rt_system_scheduler_init+0x3c>
    {
        rt_list_init(&rt_thread_priority_table[offset]);
   185e8:	00349713          	slli	a4,s1,0x3
   185ec:	df018793          	addi	a5,gp,-528 # 22950 <rt_thread_priority_table>
   185f0:	00f707b3          	add	a5,a4,a5
   185f4:	00078513          	mv	a0,a5
   185f8:	cd1ff0ef          	jal	ra,182c8 <rt_list_init>
    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
   185fc:	00148493          	addi	s1,s1,1
   18600:	01f00793          	li	a5,31
   18604:	fe97d2e3          	bge	a5,s1,185e8 <rt_system_scheduler_init+0x24>
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    }
#endif /* RT_USING_SMP */

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
   18608:	ef418793          	addi	a5,gp,-268 # 22a54 <rt_thread_ready_priority_group>
   1860c:	0007a023          	sw	zero,0(a5)

#if RT_THREAD_PRIORITY_MAX > 32
    /* initialize ready table */
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
}
   18610:	00000013          	nop
   18614:	00c12083          	lw	ra,12(sp)
   18618:	00812403          	lw	s0,8(sp)
   1861c:	00412483          	lw	s1,4(sp)
   18620:	01010113          	addi	sp,sp,16
   18624:	00008067          	ret

00018628 <rt_system_scheduler_start>:
/**
 * @brief This function will startup the scheduler. It will select one thread
 *        with the highest priority level, then switch to it.
 */
void rt_system_scheduler_start(void)
{
   18628:	fe010113          	addi	sp,sp,-32
   1862c:	00112e23          	sw	ra,28(sp)
   18630:	00812c23          	sw	s0,24(sp)
   18634:	00912a23          	sw	s1,20(sp)
   18638:	02010413          	addi	s0,sp,32
    register struct rt_thread *to_thread;
    rt_ubase_t highest_ready_priority;

    to_thread = _scheduler_get_highest_priority_thread(&highest_ready_priority);
   1863c:	fec40793          	addi	a5,s0,-20
   18640:	00078513          	mv	a0,a5
   18644:	f0dff0ef          	jal	ra,18550 <_scheduler_get_highest_priority_thread>
   18648:	00050493          	mv	s1,a0

#ifdef RT_USING_SMP
    to_thread->oncpu = rt_hw_cpu_id();
#else
    rt_current_thread = to_thread;
   1864c:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18650:	0097a023          	sw	s1,0(a5)
#endif /* RT_USING_SMP */

    rt_schedule_remove_thread(to_thread);
   18654:	00048513          	mv	a0,s1
   18658:	3c8000ef          	jal	ra,18a20 <rt_schedule_remove_thread>
    to_thread->stat = RT_THREAD_RUNNING;
   1865c:	00300793          	li	a5,3
   18660:	02f48a23          	sb	a5,52(s1)

    /* switch to new thread */
#ifdef RT_USING_SMP
    rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp, to_thread);
#else
    rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp);
   18664:	01c48793          	addi	a5,s1,28
   18668:	00078513          	mv	a0,a5
   1866c:	7ec030ef          	jal	ra,1be58 <rt_hw_context_switch_to>
#endif /* RT_USING_SMP */

    /* never come back */
}
   18670:	00000013          	nop
   18674:	01c12083          	lw	ra,28(sp)
   18678:	01812403          	lw	s0,24(sp)
   1867c:	01412483          	lw	s1,20(sp)
   18680:	02010113          	addi	sp,sp,32
   18684:	00008067          	ret

00018688 <rt_schedule>:
/**
 * @brief This function will perform scheduling once. It will select one thread
 *        with the highest priority, and switch to it immediately.
 */
void rt_schedule(void)
{
   18688:	fd010113          	addi	sp,sp,-48
   1868c:	02112623          	sw	ra,44(sp)
   18690:	02812423          	sw	s0,40(sp)
   18694:	03010413          	addi	s0,sp,48
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   18698:	7b0030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1869c:	fea42223          	sw	a0,-28(s0)

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
   186a0:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   186a4:	00079783          	lh	a5,0(a5)
   186a8:	22079e63          	bnez	a5,188e4 <rt_schedule+0x25c>
    {
        rt_ubase_t highest_ready_priority;

        if (rt_thread_ready_priority_group != 0)
   186ac:	ef418793          	addi	a5,gp,-268 # 22a54 <rt_thread_ready_priority_group>
   186b0:	0007a783          	lw	a5,0(a5)
   186b4:	22078863          	beqz	a5,188e4 <rt_schedule+0x25c>
        {
            /* need_insert_from_thread: need to insert from_thread to ready queue */
            int need_insert_from_thread = 0;
   186b8:	fe042423          	sw	zero,-24(s0)

            to_thread = _scheduler_get_highest_priority_thread(&highest_ready_priority);
   186bc:	fdc40793          	addi	a5,s0,-36
   186c0:	00078513          	mv	a0,a5
   186c4:	e8dff0ef          	jal	ra,18550 <_scheduler_get_highest_priority_thread>
   186c8:	fea42623          	sw	a0,-20(s0)

            if ((rt_current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_RUNNING)
   186cc:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   186d0:	0007a783          	lw	a5,0(a5)
   186d4:	0347c783          	lbu	a5,52(a5)
   186d8:	0077f713          	andi	a4,a5,7
   186dc:	00300793          	li	a5,3
   186e0:	08f71863          	bne	a4,a5,18770 <rt_schedule+0xe8>
            {
                if (rt_current_thread->current_priority < highest_ready_priority)
   186e4:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   186e8:	0007a783          	lw	a5,0(a5)
   186ec:	0357c783          	lbu	a5,53(a5)
   186f0:	00078713          	mv	a4,a5
   186f4:	fdc42783          	lw	a5,-36(s0)
   186f8:	00f77a63          	bgeu	a4,a5,1870c <rt_schedule+0x84>
                {
                    to_thread = rt_current_thread;
   186fc:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18700:	0007a783          	lw	a5,0(a5)
   18704:	fef42623          	sw	a5,-20(s0)
   18708:	0480006f          	j	18750 <rt_schedule+0xc8>
                }
                else if (rt_current_thread->current_priority == highest_ready_priority && (rt_current_thread->stat & RT_THREAD_STAT_YIELD_MASK) == 0)
   1870c:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18710:	0007a783          	lw	a5,0(a5)
   18714:	0357c783          	lbu	a5,53(a5)
   18718:	00078713          	mv	a4,a5
   1871c:	fdc42783          	lw	a5,-36(s0)
   18720:	02f71463          	bne	a4,a5,18748 <rt_schedule+0xc0>
   18724:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18728:	0007a783          	lw	a5,0(a5)
   1872c:	0347c783          	lbu	a5,52(a5)
   18730:	0087f793          	andi	a5,a5,8
   18734:	00079a63          	bnez	a5,18748 <rt_schedule+0xc0>
                {
                    to_thread = rt_current_thread;
   18738:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   1873c:	0007a783          	lw	a5,0(a5)
   18740:	fef42623          	sw	a5,-20(s0)
   18744:	00c0006f          	j	18750 <rt_schedule+0xc8>
                }
                else
                {
                    need_insert_from_thread = 1;
   18748:	00100793          	li	a5,1
   1874c:	fef42423          	sw	a5,-24(s0)
                }
                rt_current_thread->stat &= ~RT_THREAD_STAT_YIELD_MASK;
   18750:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18754:	0007a783          	lw	a5,0(a5)
   18758:	0347c703          	lbu	a4,52(a5)
   1875c:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18760:	0007a783          	lw	a5,0(a5)
   18764:	ff777713          	andi	a4,a4,-9
   18768:	0ff77713          	andi	a4,a4,255
   1876c:	02e78a23          	sb	a4,52(a5)
            }

            if (to_thread != rt_current_thread)
   18770:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18774:	0007a783          	lw	a5,0(a5)
   18778:	fec42703          	lw	a4,-20(s0)
   1877c:	10f70e63          	beq	a4,a5,18898 <rt_schedule+0x210>
            {
                /* if the destination thread is not the same as current thread */
                rt_current_priority = (rt_uint8_t)highest_ready_priority;
   18780:	fdc42783          	lw	a5,-36(s0)
   18784:	0ff7f713          	andi	a4,a5,255
   18788:	ef018793          	addi	a5,gp,-272 # 22a50 <rt_current_priority>
   1878c:	00e78023          	sb	a4,0(a5)
                from_thread         = rt_current_thread;
   18790:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18794:	0007a783          	lw	a5,0(a5)
   18798:	fef42023          	sw	a5,-32(s0)
                rt_current_thread   = to_thread;
   1879c:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   187a0:	fec42703          	lw	a4,-20(s0)
   187a4:	00e7a023          	sw	a4,0(a5)

                RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
   187a8:	91c18793          	addi	a5,gp,-1764 # 2247c <rt_scheduler_hook>
   187ac:	0007a783          	lw	a5,0(a5)
   187b0:	00078c63          	beqz	a5,187c8 <rt_schedule+0x140>
   187b4:	91c18793          	addi	a5,gp,-1764 # 2247c <rt_scheduler_hook>
   187b8:	0007a783          	lw	a5,0(a5)
   187bc:	fec42583          	lw	a1,-20(s0)
   187c0:	fe042503          	lw	a0,-32(s0)
   187c4:	000780e7          	jalr	a5

                if (need_insert_from_thread)
   187c8:	fe842783          	lw	a5,-24(s0)
   187cc:	00078663          	beqz	a5,187d8 <rt_schedule+0x150>
                {
                    rt_schedule_insert_thread(from_thread);
   187d0:	fe042503          	lw	a0,-32(s0)
   187d4:	12c000ef          	jal	ra,18900 <rt_schedule_insert_thread>
                }

                rt_schedule_remove_thread(to_thread);
   187d8:	fec42503          	lw	a0,-20(s0)
   187dc:	244000ef          	jal	ra,18a20 <rt_schedule_remove_thread>
                to_thread->stat = RT_THREAD_RUNNING | (to_thread->stat & ~RT_THREAD_STAT_MASK);
   187e0:	fec42783          	lw	a5,-20(s0)
   187e4:	0347c783          	lbu	a5,52(a5)
   187e8:	01879793          	slli	a5,a5,0x18
   187ec:	4187d793          	srai	a5,a5,0x18
   187f0:	ff87f793          	andi	a5,a5,-8
   187f4:	01879793          	slli	a5,a5,0x18
   187f8:	4187d793          	srai	a5,a5,0x18
   187fc:	0037e793          	ori	a5,a5,3
   18800:	01879793          	slli	a5,a5,0x18
   18804:	4187d793          	srai	a5,a5,0x18
   18808:	0ff7f713          	andi	a4,a5,255
   1880c:	fec42783          	lw	a5,-20(s0)
   18810:	02e78a23          	sb	a4,52(a5)
                         rt_interrupt_nest, highest_ready_priority,
                         RT_NAME_MAX, to_thread->name, to_thread->sp,
                         RT_NAME_MAX, from_thread->name, from_thread->sp));

#ifdef RT_USING_OVERFLOW_CHECK
                _rt_scheduler_stack_check(to_thread);
   18814:	fec42503          	lw	a0,-20(s0)
   18818:	c3dff0ef          	jal	ra,18454 <_rt_scheduler_stack_check>
#endif /* RT_USING_OVERFLOW_CHECK */

                if (rt_interrupt_nest == 0)
   1881c:	82418793          	addi	a5,gp,-2012 # 22384 <rt_interrupt_nest>
   18820:	0007c783          	lbu	a5,0(a5)
   18824:	0ff7f793          	andi	a5,a5,255
   18828:	04079663          	bnez	a5,18874 <rt_schedule+0x1ec>
                {
                    extern void rt_thread_handle_sig(rt_bool_t clean_state);

                    RT_OBJECT_HOOK_CALL(rt_scheduler_switch_hook, (from_thread));
   1882c:	92018793          	addi	a5,gp,-1760 # 22480 <rt_scheduler_switch_hook>
   18830:	0007a783          	lw	a5,0(a5)
   18834:	00078a63          	beqz	a5,18848 <rt_schedule+0x1c0>
   18838:	92018793          	addi	a5,gp,-1760 # 22480 <rt_scheduler_switch_hook>
   1883c:	0007a783          	lw	a5,0(a5)
   18840:	fe042503          	lw	a0,-32(s0)
   18844:	000780e7          	jalr	a5

                    rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
   18848:	fe042783          	lw	a5,-32(s0)
   1884c:	01c78793          	addi	a5,a5,28
   18850:	00078713          	mv	a4,a5
                            (rt_ubase_t)&to_thread->sp);
   18854:	fec42783          	lw	a5,-20(s0)
   18858:	01c78793          	addi	a5,a5,28
                    rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
   1885c:	00078593          	mv	a1,a5
   18860:	00070513          	mv	a0,a4
   18864:	604030ef          	jal	ra,1be68 <rt_hw_context_switch>

                    /* enable interrupt */
                    rt_hw_interrupt_enable(level);
   18868:	fe442503          	lw	a0,-28(s0)
   1886c:	5e4030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);

__exit:
    return;
   18870:	0800006f          	j	188f0 <rt_schedule+0x268>
                    rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
   18874:	fe042783          	lw	a5,-32(s0)
   18878:	01c78793          	addi	a5,a5,28
   1887c:	00078713          	mv	a4,a5
                            (rt_ubase_t)&to_thread->sp);
   18880:	fec42783          	lw	a5,-20(s0)
   18884:	01c78793          	addi	a5,a5,28
                    rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
   18888:	00078593          	mv	a1,a5
   1888c:	00070513          	mv	a0,a4
   18890:	500030ef          	jal	ra,1bd90 <rt_hw_context_switch_interrupt>
   18894:	0500006f          	j	188e4 <rt_schedule+0x25c>
                rt_schedule_remove_thread(rt_current_thread);
   18898:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   1889c:	0007a783          	lw	a5,0(a5)
   188a0:	00078513          	mv	a0,a5
   188a4:	17c000ef          	jal	ra,18a20 <rt_schedule_remove_thread>
                rt_current_thread->stat = RT_THREAD_RUNNING | (rt_current_thread->stat & ~RT_THREAD_STAT_MASK);
   188a8:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   188ac:	0007a783          	lw	a5,0(a5)
   188b0:	0347c783          	lbu	a5,52(a5)
   188b4:	01879793          	slli	a5,a5,0x18
   188b8:	4187d793          	srai	a5,a5,0x18
   188bc:	ff87f793          	andi	a5,a5,-8
   188c0:	01879793          	slli	a5,a5,0x18
   188c4:	4187d793          	srai	a5,a5,0x18
   188c8:	0037e793          	ori	a5,a5,3
   188cc:	01879713          	slli	a4,a5,0x18
   188d0:	41875713          	srai	a4,a4,0x18
   188d4:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   188d8:	0007a783          	lw	a5,0(a5)
   188dc:	0ff77713          	andi	a4,a4,255
   188e0:	02e78a23          	sb	a4,52(a5)
    rt_hw_interrupt_enable(level);
   188e4:	fe442503          	lw	a0,-28(s0)
   188e8:	568030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
    return;
   188ec:	00000013          	nop
}
   188f0:	02c12083          	lw	ra,44(sp)
   188f4:	02812403          	lw	s0,40(sp)
   188f8:	03010113          	addi	sp,sp,48
   188fc:	00008067          	ret

00018900 <rt_schedule_insert_thread>:
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
}
#else
void rt_schedule_insert_thread(struct rt_thread *thread)
{
   18900:	fe010113          	addi	sp,sp,-32
   18904:	00112e23          	sw	ra,28(sp)
   18908:	00812c23          	sw	s0,24(sp)
   1890c:	00912a23          	sw	s1,20(sp)
   18910:	02010413          	addi	s0,sp,32
   18914:	fea42623          	sw	a0,-20(s0)
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);
   18918:	fec42783          	lw	a5,-20(s0)
   1891c:	00079e63          	bnez	a5,18938 <rt_schedule_insert_thread+0x38>
   18920:	2cb00613          	li	a2,715
   18924:	00008597          	auipc	a1,0x8
   18928:	22458593          	addi	a1,a1,548 # 20b48 <__FUNCTION__.2496>
   1892c:	00008517          	auipc	a0,0x8
   18930:	19850513          	addi	a0,a0,408 # 20ac4 <__FUNCTION__.2786+0x10>
   18934:	f10fa0ef          	jal	ra,13044 <rt_assert_handler>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
   18938:	510030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1893c:	00050493          	mv	s1,a0

    /* it's current thread, it should be RUNNING thread */
    if (thread == rt_current_thread)
   18940:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18944:	0007a783          	lw	a5,0(a5)
   18948:	fec42703          	lw	a4,-20(s0)
   1894c:	02f71e63          	bne	a4,a5,18988 <rt_schedule_insert_thread+0x88>
    {
        thread->stat = RT_THREAD_RUNNING | (thread->stat & ~RT_THREAD_STAT_MASK);
   18950:	fec42783          	lw	a5,-20(s0)
   18954:	0347c783          	lbu	a5,52(a5)
   18958:	01879793          	slli	a5,a5,0x18
   1895c:	4187d793          	srai	a5,a5,0x18
   18960:	ff87f793          	andi	a5,a5,-8
   18964:	01879793          	slli	a5,a5,0x18
   18968:	4187d793          	srai	a5,a5,0x18
   1896c:	0037e793          	ori	a5,a5,3
   18970:	01879793          	slli	a5,a5,0x18
   18974:	4187d793          	srai	a5,a5,0x18
   18978:	0ff7f713          	andi	a4,a5,255
   1897c:	fec42783          	lw	a5,-20(s0)
   18980:	02e78a23          	sb	a4,52(a5)
        goto __exit;
   18984:	07c0006f          	j	18a00 <rt_schedule_insert_thread+0x100>
    }

    /* READY thread, insert to ready queue */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
   18988:	fec42783          	lw	a5,-20(s0)
   1898c:	0347c783          	lbu	a5,52(a5)
   18990:	01879793          	slli	a5,a5,0x18
   18994:	4187d793          	srai	a5,a5,0x18
   18998:	ff87f793          	andi	a5,a5,-8
   1899c:	01879793          	slli	a5,a5,0x18
   189a0:	4187d793          	srai	a5,a5,0x18
   189a4:	0017e793          	ori	a5,a5,1
   189a8:	01879793          	slli	a5,a5,0x18
   189ac:	4187d793          	srai	a5,a5,0x18
   189b0:	0ff7f713          	andi	a4,a5,255
   189b4:	fec42783          	lw	a5,-20(s0)
   189b8:	02e78a23          	sb	a4,52(a5)
    /* insert thread to ready list */
    rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
   189bc:	fec42783          	lw	a5,-20(s0)
   189c0:	0357c783          	lbu	a5,53(a5)
   189c4:	00379713          	slli	a4,a5,0x3
   189c8:	df018793          	addi	a5,gp,-528 # 22950 <rt_thread_priority_table>
   189cc:	00f70733          	add	a4,a4,a5
   189d0:	fec42783          	lw	a5,-20(s0)
   189d4:	01478793          	addi	a5,a5,20
   189d8:	00078593          	mv	a1,a5
   189dc:	00070513          	mv	a0,a4
   189e0:	925ff0ef          	jal	ra,18304 <rt_list_insert_before>

    /* set priority mask */
#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    rt_thread_ready_priority_group |= thread->number_mask;
   189e4:	fec42783          	lw	a5,-20(s0)
   189e8:	0387a703          	lw	a4,56(a5)
   189ec:	ef418793          	addi	a5,gp,-268 # 22a54 <rt_thread_ready_priority_group>
   189f0:	0007a783          	lw	a5,0(a5)
   189f4:	00f76733          	or	a4,a4,a5
   189f8:	ef418793          	addi	a5,gp,-268 # 22a54 <rt_thread_ready_priority_group>
   189fc:	00e7a023          	sw	a4,0(a5)

__exit:
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
   18a00:	00048513          	mv	a0,s1
   18a04:	44c030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   18a08:	00000013          	nop
   18a0c:	01c12083          	lw	ra,28(sp)
   18a10:	01812403          	lw	s0,24(sp)
   18a14:	01412483          	lw	s1,20(sp)
   18a18:	02010113          	addi	sp,sp,32
   18a1c:	00008067          	ret

00018a20 <rt_schedule_remove_thread>:
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
}
#else
void rt_schedule_remove_thread(struct rt_thread *thread)
{
   18a20:	fe010113          	addi	sp,sp,-32
   18a24:	00112e23          	sw	ra,28(sp)
   18a28:	00812c23          	sw	s0,24(sp)
   18a2c:	00912a23          	sw	s1,20(sp)
   18a30:	02010413          	addi	s0,sp,32
   18a34:	fea42623          	sw	a0,-20(s0)
    register rt_base_t level;

    RT_ASSERT(thread != RT_NULL);
   18a38:	fec42783          	lw	a5,-20(s0)
   18a3c:	00079e63          	bnez	a5,18a58 <rt_schedule_remove_thread+0x38>
   18a40:	32c00613          	li	a2,812
   18a44:	00008597          	auipc	a1,0x8
   18a48:	12058593          	addi	a1,a1,288 # 20b64 <__FUNCTION__.2502>
   18a4c:	00008517          	auipc	a0,0x8
   18a50:	07850513          	addi	a0,a0,120 # 20ac4 <__FUNCTION__.2786+0x10>
   18a54:	df0fa0ef          	jal	ra,13044 <rt_assert_handler>

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   18a58:	3f0030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18a5c:	00050493          	mv	s1,a0
    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("remove thread[%.*s], the priority: %d\n",
                                      RT_NAME_MAX, thread->name,
                                      thread->current_priority));

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
   18a60:	fec42783          	lw	a5,-20(s0)
   18a64:	01478793          	addi	a5,a5,20
   18a68:	00078513          	mv	a0,a5
   18a6c:	8f5ff0ef          	jal	ra,18360 <rt_list_remove>
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
   18a70:	fec42783          	lw	a5,-20(s0)
   18a74:	0357c783          	lbu	a5,53(a5)
   18a78:	00379713          	slli	a4,a5,0x3
   18a7c:	df018793          	addi	a5,gp,-528 # 22950 <rt_thread_priority_table>
   18a80:	00f707b3          	add	a5,a4,a5
   18a84:	00078513          	mv	a0,a5
   18a88:	93dff0ef          	jal	ra,183c4 <rt_list_isempty>
   18a8c:	00050793          	mv	a5,a0
   18a90:	02078263          	beqz	a5,18ab4 <rt_schedule_remove_thread+0x94>
        if (rt_thread_ready_table[thread->number] == 0)
        {
            rt_thread_ready_priority_group &= ~thread->number_mask;
        }
#else
        rt_thread_ready_priority_group &= ~thread->number_mask;
   18a94:	fec42783          	lw	a5,-20(s0)
   18a98:	0387a783          	lw	a5,56(a5)
   18a9c:	fff7c713          	not	a4,a5
   18aa0:	ef418793          	addi	a5,gp,-268 # 22a54 <rt_thread_ready_priority_group>
   18aa4:	0007a783          	lw	a5,0(a5)
   18aa8:	00f77733          	and	a4,a4,a5
   18aac:	ef418793          	addi	a5,gp,-268 # 22a54 <rt_thread_ready_priority_group>
   18ab0:	00e7a023          	sw	a4,0(a5)
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   18ab4:	00048513          	mv	a0,s1
   18ab8:	398030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   18abc:	00000013          	nop
   18ac0:	01c12083          	lw	ra,28(sp)
   18ac4:	01812403          	lw	s0,24(sp)
   18ac8:	01412483          	lw	s1,20(sp)
   18acc:	02010113          	addi	sp,sp,32
   18ad0:	00008067          	ret

00018ad4 <rt_enter_critical>:
    /* enable interrupt */
    rt_hw_local_irq_enable(level);
}
#else
void rt_enter_critical(void)
{
   18ad4:	ff010113          	addi	sp,sp,-16
   18ad8:	00112623          	sw	ra,12(sp)
   18adc:	00812423          	sw	s0,8(sp)
   18ae0:	01010413          	addi	s0,sp,16
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   18ae4:	364030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18ae8:	00050093          	mv	ra,a0

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
   18aec:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   18af0:	00079783          	lh	a5,0(a5)
   18af4:	01079793          	slli	a5,a5,0x10
   18af8:	0107d793          	srli	a5,a5,0x10
   18afc:	00178793          	addi	a5,a5,1
   18b00:	01079793          	slli	a5,a5,0x10
   18b04:	0107d793          	srli	a5,a5,0x10
   18b08:	01079713          	slli	a4,a5,0x10
   18b0c:	41075713          	srai	a4,a4,0x10
   18b10:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   18b14:	00e79023          	sh	a4,0(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   18b18:	00008513          	mv	a0,ra
   18b1c:	334030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   18b20:	00000013          	nop
   18b24:	00c12083          	lw	ra,12(sp)
   18b28:	00812403          	lw	s0,8(sp)
   18b2c:	01010113          	addi	sp,sp,16
   18b30:	00008067          	ret

00018b34 <rt_exit_critical>:
        rt_hw_local_irq_enable(level);
    }
}
#else
void rt_exit_critical(void)
{
   18b34:	ff010113          	addi	sp,sp,-16
   18b38:	00112623          	sw	ra,12(sp)
   18b3c:	00812423          	sw	s0,8(sp)
   18b40:	01010413          	addi	s0,sp,16
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   18b44:	304030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18b48:	00050093          	mv	ra,a0

    rt_scheduler_lock_nest --;
   18b4c:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   18b50:	00079783          	lh	a5,0(a5)
   18b54:	01079793          	slli	a5,a5,0x10
   18b58:	0107d793          	srli	a5,a5,0x10
   18b5c:	fff78793          	addi	a5,a5,-1
   18b60:	01079793          	slli	a5,a5,0x10
   18b64:	0107d793          	srli	a5,a5,0x10
   18b68:	01079713          	slli	a4,a5,0x10
   18b6c:	41075713          	srai	a4,a4,0x10
   18b70:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   18b74:	00e79023          	sh	a4,0(a5)
    if (rt_scheduler_lock_nest <= 0)
   18b78:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   18b7c:	00079783          	lh	a5,0(a5)
   18b80:	02f04463          	bgtz	a5,18ba8 <rt_exit_critical+0x74>
    {
        rt_scheduler_lock_nest = 0;
   18b84:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   18b88:	00079023          	sh	zero,0(a5)
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
   18b8c:	00008513          	mv	a0,ra
   18b90:	2c0030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

        if (rt_current_thread)
   18b94:	82018793          	addi	a5,gp,-2016 # 22380 <rt_current_thread>
   18b98:	0007a783          	lw	a5,0(a5)
   18b9c:	00078a63          	beqz	a5,18bb0 <rt_exit_critical+0x7c>
        {
            /* if scheduler is started, do a schedule */
            rt_schedule();
   18ba0:	ae9ff0ef          	jal	ra,18688 <rt_schedule>
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    }
}
   18ba4:	00c0006f          	j	18bb0 <rt_exit_critical+0x7c>
        rt_hw_interrupt_enable(level);
   18ba8:	00008513          	mv	a0,ra
   18bac:	2a4030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   18bb0:	00000013          	nop
   18bb4:	00c12083          	lw	ra,12(sp)
   18bb8:	00812403          	lw	s0,8(sp)
   18bbc:	01010113          	addi	sp,sp,16
   18bc0:	00008067          	ret

00018bc4 <rt_critical_level>:
 * @brief Get the scheduler lock level.
 *
 * @return the level of the scheduler lock. 0 means unlocked.
 */
rt_uint16_t rt_critical_level(void)
{
   18bc4:	ff010113          	addi	sp,sp,-16
   18bc8:	00812623          	sw	s0,12(sp)
   18bcc:	01010413          	addi	s0,sp,16
#ifdef RT_USING_SMP
    struct rt_thread *current_thread = rt_cpu_self()->current_thread;

    return current_thread->critical_lock_nest;
#else
    return rt_scheduler_lock_nest;
   18bd0:	91818793          	addi	a5,gp,-1768 # 22478 <rt_scheduler_lock_nest>
   18bd4:	00079783          	lh	a5,0(a5)
   18bd8:	01079793          	slli	a5,a5,0x10
   18bdc:	0107d793          	srli	a5,a5,0x10
#endif /* RT_USING_SMP */
}
   18be0:	00078513          	mv	a0,a5
   18be4:	00c12403          	lw	s0,12(sp)
   18be8:	01010113          	addi	sp,sp,16
   18bec:	00008067          	ret

00018bf0 <rt_interrupt_enter_sethook>:
 * @note The hook function must be simple and never be blocked or suspend.
 *
 * @param hook the function point to be called
 */
void rt_interrupt_enter_sethook(void (*hook)(void))
{
   18bf0:	fe010113          	addi	sp,sp,-32
   18bf4:	00812e23          	sw	s0,28(sp)
   18bf8:	02010413          	addi	s0,sp,32
   18bfc:	fea42623          	sw	a0,-20(s0)
    rt_interrupt_enter_hook = hook;
   18c00:	92418793          	addi	a5,gp,-1756 # 22484 <rt_interrupt_enter_hook>
   18c04:	fec42703          	lw	a4,-20(s0)
   18c08:	00e7a023          	sw	a4,0(a5)
}
   18c0c:	00000013          	nop
   18c10:	01c12403          	lw	s0,28(sp)
   18c14:	02010113          	addi	sp,sp,32
   18c18:	00008067          	ret

00018c1c <rt_interrupt_leave_sethook>:
 * @note The hook function must be simple and never be blocked or suspend.
 *
 * @param hook the function point to be called
 */
void rt_interrupt_leave_sethook(void (*hook)(void))
{
   18c1c:	fe010113          	addi	sp,sp,-32
   18c20:	00812e23          	sw	s0,28(sp)
   18c24:	02010413          	addi	s0,sp,32
   18c28:	fea42623          	sw	a0,-20(s0)
    rt_interrupt_leave_hook = hook;
   18c2c:	92818793          	addi	a5,gp,-1752 # 22488 <rt_interrupt_leave_hook>
   18c30:	fec42703          	lw	a4,-20(s0)
   18c34:	00e7a023          	sw	a4,0(a5)
}
   18c38:	00000013          	nop
   18c3c:	01c12403          	lw	s0,28(sp)
   18c40:	02010113          	addi	sp,sp,32
   18c44:	00008067          	ret

00018c48 <rt_interrupt_enter>:
 * @note Please don't invoke this routine in application
 *
 * @see rt_interrupt_leave
 */
void rt_interrupt_enter(void)
{
   18c48:	fe010113          	addi	sp,sp,-32
   18c4c:	00112e23          	sw	ra,28(sp)
   18c50:	00812c23          	sw	s0,24(sp)
   18c54:	02010413          	addi	s0,sp,32
    rt_base_t level;

    level = rt_hw_interrupt_disable();
   18c58:	1f0030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18c5c:	fea42623          	sw	a0,-20(s0)
    rt_interrupt_nest ++;
   18c60:	82418793          	addi	a5,gp,-2012 # 22384 <rt_interrupt_nest>
   18c64:	0007c783          	lbu	a5,0(a5)
   18c68:	0ff7f793          	andi	a5,a5,255
   18c6c:	00178793          	addi	a5,a5,1
   18c70:	0ff7f713          	andi	a4,a5,255
   18c74:	82418793          	addi	a5,gp,-2012 # 22384 <rt_interrupt_nest>
   18c78:	00e78023          	sb	a4,0(a5)
    RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
   18c7c:	92418793          	addi	a5,gp,-1756 # 22484 <rt_interrupt_enter_hook>
   18c80:	0007a783          	lw	a5,0(a5)
   18c84:	00078863          	beqz	a5,18c94 <rt_interrupt_enter+0x4c>
   18c88:	92418793          	addi	a5,gp,-1756 # 22484 <rt_interrupt_enter_hook>
   18c8c:	0007a783          	lw	a5,0(a5)
   18c90:	000780e7          	jalr	a5
    rt_hw_interrupt_enable(level);
   18c94:	fec42503          	lw	a0,-20(s0)
   18c98:	1b8030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq has come..., irq current nest:%d\n",
                                rt_interrupt_nest));
}
   18c9c:	00000013          	nop
   18ca0:	01c12083          	lw	ra,28(sp)
   18ca4:	01812403          	lw	s0,24(sp)
   18ca8:	02010113          	addi	sp,sp,32
   18cac:	00008067          	ret

00018cb0 <rt_interrupt_leave>:
 * @note Please don't invoke this routine in application
 *
 * @see rt_interrupt_enter
 */
void rt_interrupt_leave(void)
{
   18cb0:	fe010113          	addi	sp,sp,-32
   18cb4:	00112e23          	sw	ra,28(sp)
   18cb8:	00812c23          	sw	s0,24(sp)
   18cbc:	02010413          	addi	s0,sp,32
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq is going to leave, irq current nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
   18cc0:	188030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18cc4:	fea42623          	sw	a0,-20(s0)
    RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
   18cc8:	92818793          	addi	a5,gp,-1752 # 22488 <rt_interrupt_leave_hook>
   18ccc:	0007a783          	lw	a5,0(a5)
   18cd0:	00078863          	beqz	a5,18ce0 <rt_interrupt_leave+0x30>
   18cd4:	92818793          	addi	a5,gp,-1752 # 22488 <rt_interrupt_leave_hook>
   18cd8:	0007a783          	lw	a5,0(a5)
   18cdc:	000780e7          	jalr	a5
    rt_interrupt_nest --;
   18ce0:	82418793          	addi	a5,gp,-2012 # 22384 <rt_interrupt_nest>
   18ce4:	0007c783          	lbu	a5,0(a5)
   18ce8:	0ff7f793          	andi	a5,a5,255
   18cec:	fff78793          	addi	a5,a5,-1
   18cf0:	0ff7f713          	andi	a4,a5,255
   18cf4:	82418793          	addi	a5,gp,-2012 # 22384 <rt_interrupt_nest>
   18cf8:	00e78023          	sb	a4,0(a5)
    rt_hw_interrupt_enable(level);
   18cfc:	fec42503          	lw	a0,-20(s0)
   18d00:	150030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
}
   18d04:	00000013          	nop
   18d08:	01c12083          	lw	ra,28(sp)
   18d0c:	01812403          	lw	s0,24(sp)
   18d10:	02010113          	addi	sp,sp,32
   18d14:	00008067          	ret

00018d18 <rt_interrupt_get_nest>:
 * context is interrupt context.
 *
 * @return the number of nested interrupts.
 */
RT_WEAK rt_uint8_t rt_interrupt_get_nest(void)
{
   18d18:	fe010113          	addi	sp,sp,-32
   18d1c:	00112e23          	sw	ra,28(sp)
   18d20:	00812c23          	sw	s0,24(sp)
   18d24:	02010413          	addi	s0,sp,32
    rt_uint8_t ret;
    rt_base_t level;

    level = rt_hw_interrupt_disable();
   18d28:	120030ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   18d2c:	fea42623          	sw	a0,-20(s0)
    ret = rt_interrupt_nest;
   18d30:	82418793          	addi	a5,gp,-2012 # 22384 <rt_interrupt_nest>
   18d34:	0007c783          	lbu	a5,0(a5)
   18d38:	fef405a3          	sb	a5,-21(s0)
    rt_hw_interrupt_enable(level);
   18d3c:	fec42503          	lw	a0,-20(s0)
   18d40:	110030ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
    return ret;
   18d44:	feb44783          	lbu	a5,-21(s0)
}
   18d48:	00078513          	mv	a0,a5
   18d4c:	01c12083          	lw	ra,28(sp)
   18d50:	01812403          	lw	s0,24(sp)
   18d54:	02010113          	addi	sp,sp,32
   18d58:	00008067          	ret

00018d5c <plug_holes>:
    }
}
#endif /* RT_USING_MEMTRACE */

static void plug_holes(struct rt_small_mem *m, struct rt_small_mem_item *mem)
{
   18d5c:	fd010113          	addi	sp,sp,-48
   18d60:	02112623          	sw	ra,44(sp)
   18d64:	02812423          	sw	s0,40(sp)
   18d68:	03010413          	addi	s0,sp,48
   18d6c:	fca42e23          	sw	a0,-36(s0)
   18d70:	fcb42c23          	sw	a1,-40(s0)
    struct rt_small_mem_item *nmem;
    struct rt_small_mem_item *pmem;

    RT_ASSERT((rt_uint8_t *)mem >= m->heap_ptr);
   18d74:	fdc42783          	lw	a5,-36(s0)
   18d78:	0287a783          	lw	a5,40(a5)
   18d7c:	fd842703          	lw	a4,-40(s0)
   18d80:	00f77e63          	bgeu	a4,a5,18d9c <plug_holes+0x40>
   18d84:	08200613          	li	a2,130
   18d88:	00008597          	auipc	a1,0x8
   18d8c:	21458593          	addi	a1,a1,532 # 20f9c <__FUNCTION__.2451>
   18d90:	00008517          	auipc	a0,0x8
   18d94:	df050513          	addi	a0,a0,-528 # 20b80 <__FUNCTION__.2502+0x1c>
   18d98:	aacfa0ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)m->heap_end);
   18d9c:	fdc42783          	lw	a5,-36(s0)
   18da0:	02c7a783          	lw	a5,44(a5)
   18da4:	fd842703          	lw	a4,-40(s0)
   18da8:	00f76e63          	bltu	a4,a5,18dc4 <plug_holes+0x68>
   18dac:	08300613          	li	a2,131
   18db0:	00008597          	auipc	a1,0x8
   18db4:	1ec58593          	addi	a1,a1,492 # 20f9c <__FUNCTION__.2451>
   18db8:	00008517          	auipc	a0,0x8
   18dbc:	dec50513          	addi	a0,a0,-532 # 20ba4 <__FUNCTION__.2502+0x40>
   18dc0:	a84fa0ef          	jal	ra,13044 <rt_assert_handler>

    /* plug hole forward */
    nmem = (struct rt_small_mem_item *)&m->heap_ptr[mem->next];
   18dc4:	fdc42783          	lw	a5,-36(s0)
   18dc8:	0287a703          	lw	a4,40(a5)
   18dcc:	fd842783          	lw	a5,-40(s0)
   18dd0:	0047a783          	lw	a5,4(a5)
   18dd4:	00f707b3          	add	a5,a4,a5
   18dd8:	fef42623          	sw	a5,-20(s0)
    if (mem != nmem && !MEM_ISUSED(nmem) &&
   18ddc:	fd842703          	lw	a4,-40(s0)
   18de0:	fec42783          	lw	a5,-20(s0)
   18de4:	08f70263          	beq	a4,a5,18e68 <plug_holes+0x10c>
   18de8:	fec42783          	lw	a5,-20(s0)
   18dec:	0007a783          	lw	a5,0(a5)
   18df0:	0017f793          	andi	a5,a5,1
   18df4:	06079a63          	bnez	a5,18e68 <plug_holes+0x10c>
        (rt_uint8_t *)nmem != (rt_uint8_t *)m->heap_end)
   18df8:	fdc42783          	lw	a5,-36(s0)
   18dfc:	02c7a783          	lw	a5,44(a5)
    if (mem != nmem && !MEM_ISUSED(nmem) &&
   18e00:	fec42703          	lw	a4,-20(s0)
   18e04:	06f70263          	beq	a4,a5,18e68 <plug_holes+0x10c>
    {
        /* if mem->next is unused and not end of m->heap_ptr,
         * combine mem and mem->next
         */
        if (m->lfree == nmem)
   18e08:	fdc42783          	lw	a5,-36(s0)
   18e0c:	0307a783          	lw	a5,48(a5)
   18e10:	fec42703          	lw	a4,-20(s0)
   18e14:	00f71863          	bne	a4,a5,18e24 <plug_holes+0xc8>
        {
            m->lfree = mem;
   18e18:	fdc42783          	lw	a5,-36(s0)
   18e1c:	fd842703          	lw	a4,-40(s0)
   18e20:	02e7a823          	sw	a4,48(a5)
        }
        nmem->pool_ptr = 0;
   18e24:	fec42783          	lw	a5,-20(s0)
   18e28:	0007a023          	sw	zero,0(a5)
        mem->next = nmem->next;
   18e2c:	fec42783          	lw	a5,-20(s0)
   18e30:	0047a703          	lw	a4,4(a5)
   18e34:	fd842783          	lw	a5,-40(s0)
   18e38:	00e7a223          	sw	a4,4(a5)
        ((struct rt_small_mem_item *)&m->heap_ptr[nmem->next])->prev = (rt_uint8_t *)mem - m->heap_ptr;
   18e3c:	fdc42783          	lw	a5,-36(s0)
   18e40:	0287a783          	lw	a5,40(a5)
   18e44:	fd842703          	lw	a4,-40(s0)
   18e48:	40f706b3          	sub	a3,a4,a5
   18e4c:	fdc42783          	lw	a5,-36(s0)
   18e50:	0287a703          	lw	a4,40(a5)
   18e54:	fec42783          	lw	a5,-20(s0)
   18e58:	0047a783          	lw	a5,4(a5)
   18e5c:	00f707b3          	add	a5,a4,a5
   18e60:	00068713          	mv	a4,a3
   18e64:	00e7a423          	sw	a4,8(a5)
    }

    /* plug hole backward */
    pmem = (struct rt_small_mem_item *)&m->heap_ptr[mem->prev];
   18e68:	fdc42783          	lw	a5,-36(s0)
   18e6c:	0287a703          	lw	a4,40(a5)
   18e70:	fd842783          	lw	a5,-40(s0)
   18e74:	0087a783          	lw	a5,8(a5)
   18e78:	00f707b3          	add	a5,a4,a5
   18e7c:	fef42423          	sw	a5,-24(s0)
    if (pmem != mem && !MEM_ISUSED(pmem))
   18e80:	fe842703          	lw	a4,-24(s0)
   18e84:	fd842783          	lw	a5,-40(s0)
   18e88:	06f70a63          	beq	a4,a5,18efc <plug_holes+0x1a0>
   18e8c:	fe842783          	lw	a5,-24(s0)
   18e90:	0007a783          	lw	a5,0(a5)
   18e94:	0017f793          	andi	a5,a5,1
   18e98:	06079263          	bnez	a5,18efc <plug_holes+0x1a0>
    {
        /* if mem->prev is unused, combine mem and mem->prev */
        if (m->lfree == mem)
   18e9c:	fdc42783          	lw	a5,-36(s0)
   18ea0:	0307a783          	lw	a5,48(a5)
   18ea4:	fd842703          	lw	a4,-40(s0)
   18ea8:	00f71863          	bne	a4,a5,18eb8 <plug_holes+0x15c>
        {
            m->lfree = pmem;
   18eac:	fdc42783          	lw	a5,-36(s0)
   18eb0:	fe842703          	lw	a4,-24(s0)
   18eb4:	02e7a823          	sw	a4,48(a5)
        }
        mem->pool_ptr = 0;
   18eb8:	fd842783          	lw	a5,-40(s0)
   18ebc:	0007a023          	sw	zero,0(a5)
        pmem->next = mem->next;
   18ec0:	fd842783          	lw	a5,-40(s0)
   18ec4:	0047a703          	lw	a4,4(a5)
   18ec8:	fe842783          	lw	a5,-24(s0)
   18ecc:	00e7a223          	sw	a4,4(a5)
        ((struct rt_small_mem_item *)&m->heap_ptr[mem->next])->prev = (rt_uint8_t *)pmem - m->heap_ptr;
   18ed0:	fdc42783          	lw	a5,-36(s0)
   18ed4:	0287a783          	lw	a5,40(a5)
   18ed8:	fe842703          	lw	a4,-24(s0)
   18edc:	40f706b3          	sub	a3,a4,a5
   18ee0:	fdc42783          	lw	a5,-36(s0)
   18ee4:	0287a703          	lw	a4,40(a5)
   18ee8:	fd842783          	lw	a5,-40(s0)
   18eec:	0047a783          	lw	a5,4(a5)
   18ef0:	00f707b3          	add	a5,a4,a5
   18ef4:	00068713          	mv	a4,a3
   18ef8:	00e7a423          	sw	a4,8(a5)
    }
}
   18efc:	00000013          	nop
   18f00:	02c12083          	lw	ra,44(sp)
   18f04:	02812403          	lw	s0,40(sp)
   18f08:	03010113          	addi	sp,sp,48
   18f0c:	00008067          	ret

00018f10 <rt_smem_init>:
 * @return Return a pointer to the memory object. When the return value is RT_NULL, it means the init failed.
 */
rt_smem_t rt_smem_init(const char    *name,
                     void          *begin_addr,
                     rt_size_t      size)
{
   18f10:	fc010113          	addi	sp,sp,-64
   18f14:	02112e23          	sw	ra,60(sp)
   18f18:	02812c23          	sw	s0,56(sp)
   18f1c:	04010413          	addi	s0,sp,64
   18f20:	fca42623          	sw	a0,-52(s0)
   18f24:	fcb42423          	sw	a1,-56(s0)
   18f28:	fcc42223          	sw	a2,-60(s0)
    struct rt_small_mem_item *mem;
    struct rt_small_mem *small_mem;
    rt_ubase_t start_addr, begin_align, end_align, mem_size;

    small_mem = (struct rt_small_mem *)RT_ALIGN((rt_ubase_t)begin_addr, RT_ALIGN_SIZE);
   18f2c:	fc842783          	lw	a5,-56(s0)
   18f30:	00378793          	addi	a5,a5,3
   18f34:	ffc7f793          	andi	a5,a5,-4
   18f38:	fef42623          	sw	a5,-20(s0)
    start_addr = (rt_ubase_t)small_mem + sizeof(*small_mem);
   18f3c:	fec42783          	lw	a5,-20(s0)
   18f40:	03878793          	addi	a5,a5,56
   18f44:	fef42423          	sw	a5,-24(s0)
    begin_align = RT_ALIGN((rt_ubase_t)start_addr, RT_ALIGN_SIZE);
   18f48:	fe842783          	lw	a5,-24(s0)
   18f4c:	00378793          	addi	a5,a5,3
   18f50:	ffc7f793          	andi	a5,a5,-4
   18f54:	fef42223          	sw	a5,-28(s0)
    end_align   = RT_ALIGN_DOWN((rt_ubase_t)begin_addr + size, RT_ALIGN_SIZE);
   18f58:	fc842703          	lw	a4,-56(s0)
   18f5c:	fc442783          	lw	a5,-60(s0)
   18f60:	00f707b3          	add	a5,a4,a5
   18f64:	ffc7f793          	andi	a5,a5,-4
   18f68:	fef42023          	sw	a5,-32(s0)

    /* alignment addr */
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
   18f6c:	fe042703          	lw	a4,-32(s0)
   18f70:	01800793          	li	a5,24
   18f74:	12e7fe63          	bgeu	a5,a4,190b0 <rt_smem_init+0x1a0>
        ((end_align - 2 * SIZEOF_STRUCT_MEM) >= start_addr))
   18f78:	fe042783          	lw	a5,-32(s0)
   18f7c:	fe878793          	addi	a5,a5,-24
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
   18f80:	fe842703          	lw	a4,-24(s0)
   18f84:	12e7e663          	bltu	a5,a4,190b0 <rt_smem_init+0x1a0>
    {
        /* calculate the aligned memory size */
        mem_size = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
   18f88:	fe042703          	lw	a4,-32(s0)
   18f8c:	fe442783          	lw	a5,-28(s0)
   18f90:	40f707b3          	sub	a5,a4,a5
   18f94:	fe878793          	addi	a5,a5,-24
   18f98:	fcf42e23          	sw	a5,-36(s0)
                   (rt_ubase_t)begin_addr, (rt_ubase_t)begin_addr + size);

        return RT_NULL;
    }

    rt_memset(small_mem, 0, sizeof(*small_mem));
   18f9c:	03800613          	li	a2,56
   18fa0:	00000593          	li	a1,0
   18fa4:	fec42503          	lw	a0,-20(s0)
   18fa8:	a14f80ef          	jal	ra,111bc <rt_memset>
    /* initialize small memory object */
    rt_object_init(&(small_mem->parent.parent), RT_Object_Class_Memory, name);
   18fac:	fec42783          	lw	a5,-20(s0)
   18fb0:	fcc42603          	lw	a2,-52(s0)
   18fb4:	00c00593          	li	a1,12
   18fb8:	00078513          	mv	a0,a5
   18fbc:	b05f70ef          	jal	ra,10ac0 <rt_object_init>
    small_mem->parent.algorithm = "small";
   18fc0:	fec42783          	lw	a5,-20(s0)
   18fc4:	00008717          	auipc	a4,0x8
   18fc8:	c1070713          	addi	a4,a4,-1008 # 20bd4 <__FUNCTION__.2502+0x70>
   18fcc:	00e7aa23          	sw	a4,20(a5)
    small_mem->parent.address = begin_align;
   18fd0:	fec42783          	lw	a5,-20(s0)
   18fd4:	fe442703          	lw	a4,-28(s0)
   18fd8:	00e7ac23          	sw	a4,24(a5)
    small_mem->parent.total = mem_size;
   18fdc:	fec42783          	lw	a5,-20(s0)
   18fe0:	fdc42703          	lw	a4,-36(s0)
   18fe4:	00e7ae23          	sw	a4,28(a5)
    small_mem->mem_size_aligned = mem_size;
   18fe8:	fec42783          	lw	a5,-20(s0)
   18fec:	fdc42703          	lw	a4,-36(s0)
   18ff0:	02e7aa23          	sw	a4,52(a5)

    /* point to begin address of heap */
    small_mem->heap_ptr = (rt_uint8_t *)begin_align;
   18ff4:	fe442703          	lw	a4,-28(s0)
   18ff8:	fec42783          	lw	a5,-20(s0)
   18ffc:	02e7a423          	sw	a4,40(a5)

    RT_DEBUG_LOG(RT_DEBUG_MEM, ("mem init, heap begin address 0x%x, size %d\n",
                                (rt_ubase_t)small_mem->heap_ptr, small_mem->mem_size_aligned));

    /* initialize the start of the heap */
    mem        = (struct rt_small_mem_item *)small_mem->heap_ptr;
   19000:	fec42783          	lw	a5,-20(s0)
   19004:	0287a783          	lw	a5,40(a5)
   19008:	fcf42c23          	sw	a5,-40(s0)
    mem->pool_ptr = MEM_FREED();
   1900c:	fec42783          	lw	a5,-20(s0)
   19010:	ffe7f713          	andi	a4,a5,-2
   19014:	fd842783          	lw	a5,-40(s0)
   19018:	00e7a023          	sw	a4,0(a5)
    mem->next  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
   1901c:	fec42783          	lw	a5,-20(s0)
   19020:	0347a783          	lw	a5,52(a5)
   19024:	00c78713          	addi	a4,a5,12
   19028:	fd842783          	lw	a5,-40(s0)
   1902c:	00e7a223          	sw	a4,4(a5)
    mem->prev  = 0;
   19030:	fd842783          	lw	a5,-40(s0)
   19034:	0007a423          	sw	zero,8(a5)
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(mem, "INIT");
#endif /* RT_USING_MEMTRACE */

    /* initialize the end of the heap */
    small_mem->heap_end        = (struct rt_small_mem_item *)&small_mem->heap_ptr[mem->next];
   19038:	fec42783          	lw	a5,-20(s0)
   1903c:	0287a703          	lw	a4,40(a5)
   19040:	fd842783          	lw	a5,-40(s0)
   19044:	0047a783          	lw	a5,4(a5)
   19048:	00f70733          	add	a4,a4,a5
   1904c:	fec42783          	lw	a5,-20(s0)
   19050:	02e7a623          	sw	a4,44(a5)
    small_mem->heap_end->pool_ptr = MEM_USED();
   19054:	fec42703          	lw	a4,-20(s0)
   19058:	fec42783          	lw	a5,-20(s0)
   1905c:	02c7a783          	lw	a5,44(a5)
   19060:	00176713          	ori	a4,a4,1
   19064:	00e7a023          	sw	a4,0(a5)
    small_mem->heap_end->next  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
   19068:	fec42783          	lw	a5,-20(s0)
   1906c:	0347a703          	lw	a4,52(a5)
   19070:	fec42783          	lw	a5,-20(s0)
   19074:	02c7a783          	lw	a5,44(a5)
   19078:	00c70713          	addi	a4,a4,12
   1907c:	00e7a223          	sw	a4,4(a5)
    small_mem->heap_end->prev  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
   19080:	fec42783          	lw	a5,-20(s0)
   19084:	0347a703          	lw	a4,52(a5)
   19088:	fec42783          	lw	a5,-20(s0)
   1908c:	02c7a783          	lw	a5,44(a5)
   19090:	00c70713          	addi	a4,a4,12
   19094:	00e7a423          	sw	a4,8(a5)
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(small_mem->heap_end, "INIT");
#endif /* RT_USING_MEMTRACE */

    /* initialize the lowest-free pointer to the start of the heap */
    small_mem->lfree = (struct rt_small_mem_item *)small_mem->heap_ptr;
   19098:	fec42783          	lw	a5,-20(s0)
   1909c:	0287a703          	lw	a4,40(a5)
   190a0:	fec42783          	lw	a5,-20(s0)
   190a4:	02e7a823          	sw	a4,48(a5)

    return &small_mem->parent;
   190a8:	fec42783          	lw	a5,-20(s0)
   190ac:	02c0006f          	j	190d8 <rt_smem_init+0x1c8>
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
   190b0:	fc842683          	lw	a3,-56(s0)
                   (rt_ubase_t)begin_addr, (rt_ubase_t)begin_addr + size);
   190b4:	fc842703          	lw	a4,-56(s0)
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
   190b8:	fc442783          	lw	a5,-60(s0)
   190bc:	00f707b3          	add	a5,a4,a5
   190c0:	00078613          	mv	a2,a5
   190c4:	00068593          	mv	a1,a3
   190c8:	00008517          	auipc	a0,0x8
   190cc:	b1450513          	addi	a0,a0,-1260 # 20bdc <__FUNCTION__.2502+0x78>
   190d0:	831f90ef          	jal	ra,12900 <rt_kprintf>
        return RT_NULL;
   190d4:	00000793          	li	a5,0
}
   190d8:	00078513          	mv	a0,a5
   190dc:	03c12083          	lw	ra,60(sp)
   190e0:	03812403          	lw	s0,56(sp)
   190e4:	04010113          	addi	sp,sp,64
   190e8:	00008067          	ret

000190ec <rt_smem_detach>:
 * @param m the small memory management object.
 *
 * @return RT_EOK
 */
rt_err_t rt_smem_detach(rt_smem_t m)
{
   190ec:	fe010113          	addi	sp,sp,-32
   190f0:	00112e23          	sw	ra,28(sp)
   190f4:	00812c23          	sw	s0,24(sp)
   190f8:	02010413          	addi	s0,sp,32
   190fc:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(m != RT_NULL);
   19100:	fec42783          	lw	a5,-20(s0)
   19104:	00079e63          	bnez	a5,19120 <rt_smem_detach+0x34>
   19108:	0fe00613          	li	a2,254
   1910c:	00008597          	auipc	a1,0x8
   19110:	e9c58593          	addi	a1,a1,-356 # 20fa8 <__FUNCTION__.2466>
   19114:	00008517          	auipc	a0,0x8
   19118:	b0450513          	addi	a0,a0,-1276 # 20c18 <__FUNCTION__.2502+0xb4>
   1911c:	f29f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&m->parent) == RT_Object_Class_Memory);
   19120:	fec42783          	lw	a5,-20(s0)
   19124:	00078513          	mv	a0,a5
   19128:	e01f70ef          	jal	ra,10f28 <rt_object_get_type>
   1912c:	00050793          	mv	a5,a0
   19130:	00078713          	mv	a4,a5
   19134:	00c00793          	li	a5,12
   19138:	00f70e63          	beq	a4,a5,19154 <rt_smem_detach+0x68>
   1913c:	0ff00613          	li	a2,255
   19140:	00008597          	auipc	a1,0x8
   19144:	e6858593          	addi	a1,a1,-408 # 20fa8 <__FUNCTION__.2466>
   19148:	00008517          	auipc	a0,0x8
   1914c:	ae050513          	addi	a0,a0,-1312 # 20c28 <__FUNCTION__.2502+0xc4>
   19150:	ef5f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&m->parent));
   19154:	fec42783          	lw	a5,-20(s0)
   19158:	00078513          	mv	a0,a5
   1915c:	d65f70ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   19160:	00050793          	mv	a5,a0
   19164:	00079e63          	bnez	a5,19180 <rt_smem_detach+0x94>
   19168:	10000613          	li	a2,256
   1916c:	00008597          	auipc	a1,0x8
   19170:	e3c58593          	addi	a1,a1,-452 # 20fa8 <__FUNCTION__.2466>
   19174:	00008517          	auipc	a0,0x8
   19178:	af050513          	addi	a0,a0,-1296 # 20c64 <__FUNCTION__.2502+0x100>
   1917c:	ec9f90ef          	jal	ra,13044 <rt_assert_handler>

    rt_object_detach(&(m->parent));
   19180:	fec42783          	lw	a5,-20(s0)
   19184:	00078513          	mv	a0,a5
   19188:	a81f70ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   1918c:	00000793          	li	a5,0
}
   19190:	00078513          	mv	a0,a5
   19194:	01c12083          	lw	ra,28(sp)
   19198:	01812403          	lw	s0,24(sp)
   1919c:	02010113          	addi	sp,sp,32
   191a0:	00008067          	ret

000191a4 <rt_smem_alloc>:
 * @param size is the minimum size of the requested block in bytes.
 *
 * @return the pointer to allocated memory or NULL if no free memory was found.
 */
void *rt_smem_alloc(rt_smem_t m, rt_size_t size)
{
   191a4:	fc010113          	addi	sp,sp,-64
   191a8:	02112e23          	sw	ra,60(sp)
   191ac:	02812c23          	sw	s0,56(sp)
   191b0:	04010413          	addi	s0,sp,64
   191b4:	fca42623          	sw	a0,-52(s0)
   191b8:	fcb42423          	sw	a1,-56(s0)
    rt_size_t ptr, ptr2;
    struct rt_small_mem_item *mem, *mem2;
    struct rt_small_mem *small_mem;

    if (size == 0)
   191bc:	fc842783          	lw	a5,-56(s0)
   191c0:	00079663          	bnez	a5,191cc <rt_smem_alloc+0x28>
        return RT_NULL;
   191c4:	00000793          	li	a5,0
   191c8:	3dc0006f          	j	195a4 <rt_smem_alloc+0x400>

    RT_ASSERT(m != RT_NULL);
   191cc:	fcc42783          	lw	a5,-52(s0)
   191d0:	00079e63          	bnez	a5,191ec <rt_smem_alloc+0x48>
   191d4:	12000613          	li	a2,288
   191d8:	00008597          	auipc	a1,0x8
   191dc:	de058593          	addi	a1,a1,-544 # 20fb8 <__FUNCTION__.2476>
   191e0:	00008517          	auipc	a0,0x8
   191e4:	a3850513          	addi	a0,a0,-1480 # 20c18 <__FUNCTION__.2502+0xb4>
   191e8:	e5df90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&m->parent) == RT_Object_Class_Memory);
   191ec:	fcc42783          	lw	a5,-52(s0)
   191f0:	00078513          	mv	a0,a5
   191f4:	d35f70ef          	jal	ra,10f28 <rt_object_get_type>
   191f8:	00050793          	mv	a5,a0
   191fc:	00078713          	mv	a4,a5
   19200:	00c00793          	li	a5,12
   19204:	00f70e63          	beq	a4,a5,19220 <rt_smem_alloc+0x7c>
   19208:	12100613          	li	a2,289
   1920c:	00008597          	auipc	a1,0x8
   19210:	dac58593          	addi	a1,a1,-596 # 20fb8 <__FUNCTION__.2476>
   19214:	00008517          	auipc	a0,0x8
   19218:	a1450513          	addi	a0,a0,-1516 # 20c28 <__FUNCTION__.2502+0xc4>
   1921c:	e29f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&m->parent));
   19220:	fcc42783          	lw	a5,-52(s0)
   19224:	00078513          	mv	a0,a5
   19228:	c99f70ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   1922c:	00050793          	mv	a5,a0
   19230:	00079e63          	bnez	a5,1924c <rt_smem_alloc+0xa8>
   19234:	12200613          	li	a2,290
   19238:	00008597          	auipc	a1,0x8
   1923c:	d8058593          	addi	a1,a1,-640 # 20fb8 <__FUNCTION__.2476>
   19240:	00008517          	auipc	a0,0x8
   19244:	a2450513          	addi	a0,a0,-1500 # 20c64 <__FUNCTION__.2502+0x100>
   19248:	dfdf90ef          	jal	ra,13044 <rt_assert_handler>
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d, but align to %d\n",
                                    size, RT_ALIGN(size, RT_ALIGN_SIZE)));
    else
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d\n", size));

    small_mem = (struct rt_small_mem *)m;
   1924c:	fcc42783          	lw	a5,-52(s0)
   19250:	fef42423          	sw	a5,-24(s0)
    /* alignment size */
    size = RT_ALIGN(size, RT_ALIGN_SIZE);
   19254:	fc842783          	lw	a5,-56(s0)
   19258:	00378793          	addi	a5,a5,3
   1925c:	ffc7f793          	andi	a5,a5,-4
   19260:	fcf42423          	sw	a5,-56(s0)

    if (size > small_mem->mem_size_aligned)
   19264:	fe842783          	lw	a5,-24(s0)
   19268:	0347a783          	lw	a5,52(a5)
   1926c:	fc842703          	lw	a4,-56(s0)
   19270:	00e7f663          	bgeu	a5,a4,1927c <rt_smem_alloc+0xd8>
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("no memory\n"));

        return RT_NULL;
   19274:	00000793          	li	a5,0
   19278:	32c0006f          	j	195a4 <rt_smem_alloc+0x400>
    }

    /* every data block must be at least MIN_SIZE_ALIGNED long */
    if (size < MIN_SIZE_ALIGNED)
   1927c:	fc842703          	lw	a4,-56(s0)
   19280:	00b00793          	li	a5,11
   19284:	00e7e663          	bltu	a5,a4,19290 <rt_smem_alloc+0xec>
        size = MIN_SIZE_ALIGNED;
   19288:	00c00793          	li	a5,12
   1928c:	fcf42423          	sw	a5,-56(s0)

    for (ptr = (rt_uint8_t *)small_mem->lfree - small_mem->heap_ptr;
   19290:	fe842783          	lw	a5,-24(s0)
   19294:	0307a703          	lw	a4,48(a5)
   19298:	fe842783          	lw	a5,-24(s0)
   1929c:	0287a783          	lw	a5,40(a5)
   192a0:	40f707b3          	sub	a5,a4,a5
   192a4:	fef42623          	sw	a5,-20(s0)
   192a8:	2e00006f          	j	19588 <rt_smem_alloc+0x3e4>
         ptr <= small_mem->mem_size_aligned - size;
         ptr = ((struct rt_small_mem_item *)&small_mem->heap_ptr[ptr])->next)
    {
        mem = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr];
   192ac:	fe842783          	lw	a5,-24(s0)
   192b0:	0287a703          	lw	a4,40(a5)
   192b4:	fec42783          	lw	a5,-20(s0)
   192b8:	00f707b3          	add	a5,a4,a5
   192bc:	fef42223          	sw	a5,-28(s0)

        if ((!MEM_ISUSED(mem)) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
   192c0:	fe442783          	lw	a5,-28(s0)
   192c4:	0007a783          	lw	a5,0(a5)
   192c8:	0017f793          	andi	a5,a5,1
   192cc:	2a079263          	bnez	a5,19570 <rt_smem_alloc+0x3cc>
   192d0:	fe442783          	lw	a5,-28(s0)
   192d4:	0047a703          	lw	a4,4(a5)
   192d8:	fec42783          	lw	a5,-20(s0)
   192dc:	40f707b3          	sub	a5,a4,a5
   192e0:	ff478793          	addi	a5,a5,-12
   192e4:	fc842703          	lw	a4,-56(s0)
   192e8:	28e7e463          	bltu	a5,a4,19570 <rt_smem_alloc+0x3cc>
        {
            /* mem is not used and at least perfect fit is possible:
             * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
   192ec:	fe442783          	lw	a5,-28(s0)
   192f0:	0047a703          	lw	a4,4(a5)
   192f4:	fec42783          	lw	a5,-20(s0)
   192f8:	40f707b3          	sub	a5,a4,a5
   192fc:	ff478713          	addi	a4,a5,-12
                (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED))
   19300:	fc842783          	lw	a5,-56(s0)
   19304:	01878793          	addi	a5,a5,24
            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
   19308:	0cf76e63          	bltu	a4,a5,193e4 <rt_smem_alloc+0x240>
                 * struct rt_small_mem_item would fit in but no data between mem2 and mem2->next
                 * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
                 *       region that couldn't hold data, but when mem->next gets freed,
                 *       the 2 regions would be combined, resulting in more free memory
                 */
                ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
   1930c:	fec42703          	lw	a4,-20(s0)
   19310:	fc842783          	lw	a5,-56(s0)
   19314:	00f707b3          	add	a5,a4,a5
   19318:	00c78793          	addi	a5,a5,12
   1931c:	fef42023          	sw	a5,-32(s0)

                /* create mem2 struct */
                mem2       = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr2];
   19320:	fe842783          	lw	a5,-24(s0)
   19324:	0287a703          	lw	a4,40(a5)
   19328:	fe042783          	lw	a5,-32(s0)
   1932c:	00f707b3          	add	a5,a4,a5
   19330:	fcf42e23          	sw	a5,-36(s0)
                mem2->pool_ptr = MEM_FREED();
   19334:	fe842783          	lw	a5,-24(s0)
   19338:	ffe7f713          	andi	a4,a5,-2
   1933c:	fdc42783          	lw	a5,-36(s0)
   19340:	00e7a023          	sw	a4,0(a5)
                mem2->next = mem->next;
   19344:	fe442783          	lw	a5,-28(s0)
   19348:	0047a703          	lw	a4,4(a5)
   1934c:	fdc42783          	lw	a5,-36(s0)
   19350:	00e7a223          	sw	a4,4(a5)
                mem2->prev = ptr;
   19354:	fdc42783          	lw	a5,-36(s0)
   19358:	fec42703          	lw	a4,-20(s0)
   1935c:	00e7a423          	sw	a4,8(a5)
#ifdef RT_USING_MEMTRACE
                rt_smem_setname(mem2, "    ");
#endif /* RT_USING_MEMTRACE */

                /* and insert it between mem and mem->next */
                mem->next = ptr2;
   19360:	fe442783          	lw	a5,-28(s0)
   19364:	fe042703          	lw	a4,-32(s0)
   19368:	00e7a223          	sw	a4,4(a5)

                if (mem2->next != small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM)
   1936c:	fdc42783          	lw	a5,-36(s0)
   19370:	0047a703          	lw	a4,4(a5)
   19374:	fe842783          	lw	a5,-24(s0)
   19378:	0347a783          	lw	a5,52(a5)
   1937c:	00c78793          	addi	a5,a5,12
   19380:	02f70063          	beq	a4,a5,193a0 <rt_smem_alloc+0x1fc>
                {
                    ((struct rt_small_mem_item *)&small_mem->heap_ptr[mem2->next])->prev = ptr2;
   19384:	fe842783          	lw	a5,-24(s0)
   19388:	0287a703          	lw	a4,40(a5)
   1938c:	fdc42783          	lw	a5,-36(s0)
   19390:	0047a783          	lw	a5,4(a5)
   19394:	00f707b3          	add	a5,a4,a5
   19398:	fe042703          	lw	a4,-32(s0)
   1939c:	00e7a423          	sw	a4,8(a5)
                }
                small_mem->parent.used += (size + SIZEOF_STRUCT_MEM);
   193a0:	fe842783          	lw	a5,-24(s0)
   193a4:	0207a703          	lw	a4,32(a5)
   193a8:	fc842783          	lw	a5,-56(s0)
   193ac:	00f707b3          	add	a5,a4,a5
   193b0:	00c78713          	addi	a4,a5,12
   193b4:	fe842783          	lw	a5,-24(s0)
   193b8:	02e7a023          	sw	a4,32(a5)
                if (small_mem->parent.max < small_mem->parent.used)
   193bc:	fe842783          	lw	a5,-24(s0)
   193c0:	0247a703          	lw	a4,36(a5)
   193c4:	fe842783          	lw	a5,-24(s0)
   193c8:	0207a783          	lw	a5,32(a5)
   193cc:	06f77663          	bgeu	a4,a5,19438 <rt_smem_alloc+0x294>
                    small_mem->parent.max = small_mem->parent.used;
   193d0:	fe842783          	lw	a5,-24(s0)
   193d4:	0207a703          	lw	a4,32(a5)
   193d8:	fe842783          	lw	a5,-24(s0)
   193dc:	02e7a223          	sw	a4,36(a5)
   193e0:	0580006f          	j	19438 <rt_smem_alloc+0x294>
                 * take care of this).
                 * -> near fit or excact fit: do not split, no mem2 creation
                 * also can't move mem->next directly behind mem, since mem->next
                 * will always be used at this point!
                 */
                small_mem->parent.used += mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr);
   193e4:	fe842783          	lw	a5,-24(s0)
   193e8:	0207a703          	lw	a4,32(a5)
   193ec:	fe442783          	lw	a5,-28(s0)
   193f0:	0047a783          	lw	a5,4(a5)
   193f4:	fe842683          	lw	a3,-24(s0)
   193f8:	0286a683          	lw	a3,40(a3)
   193fc:	fe442603          	lw	a2,-28(s0)
   19400:	40d606b3          	sub	a3,a2,a3
   19404:	40d787b3          	sub	a5,a5,a3
   19408:	00f70733          	add	a4,a4,a5
   1940c:	fe842783          	lw	a5,-24(s0)
   19410:	02e7a023          	sw	a4,32(a5)
                if (small_mem->parent.max < small_mem->parent.used)
   19414:	fe842783          	lw	a5,-24(s0)
   19418:	0247a703          	lw	a4,36(a5)
   1941c:	fe842783          	lw	a5,-24(s0)
   19420:	0207a783          	lw	a5,32(a5)
   19424:	00f77a63          	bgeu	a4,a5,19438 <rt_smem_alloc+0x294>
                    small_mem->parent.max = small_mem->parent.used;
   19428:	fe842783          	lw	a5,-24(s0)
   1942c:	0207a703          	lw	a4,32(a5)
   19430:	fe842783          	lw	a5,-24(s0)
   19434:	02e7a223          	sw	a4,36(a5)
            }
            /* set small memory object */
            mem->pool_ptr = MEM_USED();
   19438:	fe842783          	lw	a5,-24(s0)
   1943c:	0017e713          	ori	a4,a5,1
   19440:	fe442783          	lw	a5,-28(s0)
   19444:	00e7a023          	sw	a4,0(a5)
                rt_smem_setname(mem, rt_thread_self()->name);
            else
                rt_smem_setname(mem, "NONE");
#endif /* RT_USING_MEMTRACE */

            if (mem == small_mem->lfree)
   19448:	fe842783          	lw	a5,-24(s0)
   1944c:	0307a783          	lw	a5,48(a5)
   19450:	fe442703          	lw	a4,-28(s0)
   19454:	08f71863          	bne	a4,a5,194e4 <rt_smem_alloc+0x340>
            {
                /* Find next free block after mem and update lowest free pointer */
                while (MEM_ISUSED(small_mem->lfree) && small_mem->lfree != small_mem->heap_end)
   19458:	0240006f          	j	1947c <rt_smem_alloc+0x2d8>
                    small_mem->lfree = (struct rt_small_mem_item *)&small_mem->heap_ptr[small_mem->lfree->next];
   1945c:	fe842783          	lw	a5,-24(s0)
   19460:	0287a703          	lw	a4,40(a5)
   19464:	fe842783          	lw	a5,-24(s0)
   19468:	0307a783          	lw	a5,48(a5)
   1946c:	0047a783          	lw	a5,4(a5)
   19470:	00f70733          	add	a4,a4,a5
   19474:	fe842783          	lw	a5,-24(s0)
   19478:	02e7a823          	sw	a4,48(a5)
                while (MEM_ISUSED(small_mem->lfree) && small_mem->lfree != small_mem->heap_end)
   1947c:	fe842783          	lw	a5,-24(s0)
   19480:	0307a783          	lw	a5,48(a5)
   19484:	0007a783          	lw	a5,0(a5)
   19488:	0017f793          	andi	a5,a5,1
   1948c:	00078c63          	beqz	a5,194a4 <rt_smem_alloc+0x300>
   19490:	fe842783          	lw	a5,-24(s0)
   19494:	0307a703          	lw	a4,48(a5)
   19498:	fe842783          	lw	a5,-24(s0)
   1949c:	02c7a783          	lw	a5,44(a5)
   194a0:	faf71ee3          	bne	a4,a5,1945c <rt_smem_alloc+0x2b8>

                RT_ASSERT(((small_mem->lfree == small_mem->heap_end) || (!MEM_ISUSED(small_mem->lfree))));
   194a4:	fe842783          	lw	a5,-24(s0)
   194a8:	0307a703          	lw	a4,48(a5)
   194ac:	fe842783          	lw	a5,-24(s0)
   194b0:	02c7a783          	lw	a5,44(a5)
   194b4:	02f70863          	beq	a4,a5,194e4 <rt_smem_alloc+0x340>
   194b8:	fe842783          	lw	a5,-24(s0)
   194bc:	0307a783          	lw	a5,48(a5)
   194c0:	0007a783          	lw	a5,0(a5)
   194c4:	0017f793          	andi	a5,a5,1
   194c8:	00078e63          	beqz	a5,194e4 <rt_smem_alloc+0x340>
   194cc:	18300613          	li	a2,387
   194d0:	00008597          	auipc	a1,0x8
   194d4:	ae858593          	addi	a1,a1,-1304 # 20fb8 <__FUNCTION__.2476>
   194d8:	00007517          	auipc	a0,0x7
   194dc:	7b450513          	addi	a0,a0,1972 # 20c8c <__FUNCTION__.2502+0x128>
   194e0:	b65f90ef          	jal	ra,13044 <rt_assert_handler>
            }
            RT_ASSERT((rt_ubase_t)mem + SIZEOF_STRUCT_MEM + size <= (rt_ubase_t)small_mem->heap_end);
   194e4:	fe442703          	lw	a4,-28(s0)
   194e8:	fc842783          	lw	a5,-56(s0)
   194ec:	00f707b3          	add	a5,a4,a5
   194f0:	00c78793          	addi	a5,a5,12
   194f4:	fe842703          	lw	a4,-24(s0)
   194f8:	02c72703          	lw	a4,44(a4)
   194fc:	00f77e63          	bgeu	a4,a5,19518 <rt_smem_alloc+0x374>
   19500:	18500613          	li	a2,389
   19504:	00008597          	auipc	a1,0x8
   19508:	ab458593          	addi	a1,a1,-1356 # 20fb8 <__FUNCTION__.2476>
   1950c:	00007517          	auipc	a0,0x7
   19510:	7d050513          	addi	a0,a0,2000 # 20cdc <__FUNCTION__.2502+0x178>
   19514:	b31f90ef          	jal	ra,13044 <rt_assert_handler>
            RT_ASSERT((rt_ubase_t)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM) % RT_ALIGN_SIZE == 0);
   19518:	fe442783          	lw	a5,-28(s0)
   1951c:	00c78793          	addi	a5,a5,12
   19520:	0037f793          	andi	a5,a5,3
   19524:	00078e63          	beqz	a5,19540 <rt_smem_alloc+0x39c>
   19528:	18600613          	li	a2,390
   1952c:	00008597          	auipc	a1,0x8
   19530:	a8c58593          	addi	a1,a1,-1396 # 20fb8 <__FUNCTION__.2476>
   19534:	00007517          	auipc	a0,0x7
   19538:	7f850513          	addi	a0,a0,2040 # 20d2c <__FUNCTION__.2502+0x1c8>
   1953c:	b09f90ef          	jal	ra,13044 <rt_assert_handler>
            RT_ASSERT((((rt_ubase_t)mem) & (RT_ALIGN_SIZE - 1)) == 0);
   19540:	fe442783          	lw	a5,-28(s0)
   19544:	0037f793          	andi	a5,a5,3
   19548:	00078e63          	beqz	a5,19564 <rt_smem_alloc+0x3c0>
   1954c:	18700613          	li	a2,391
   19550:	00008597          	auipc	a1,0x8
   19554:	a6858593          	addi	a1,a1,-1432 # 20fb8 <__FUNCTION__.2476>
   19558:	00008517          	auipc	a0,0x8
   1955c:	82050513          	addi	a0,a0,-2016 # 20d78 <__FUNCTION__.2502+0x214>
   19560:	ae5f90ef          	jal	ra,13044 <rt_assert_handler>
                         ("allocate memory at 0x%x, size: %d\n",
                          (rt_ubase_t)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM),
                          (rt_ubase_t)(mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr))));

            /* return the memory data except mem struct */
            return (rt_uint8_t *)mem + SIZEOF_STRUCT_MEM;
   19564:	fe442783          	lw	a5,-28(s0)
   19568:	00c78793          	addi	a5,a5,12
   1956c:	0380006f          	j	195a4 <rt_smem_alloc+0x400>
         ptr = ((struct rt_small_mem_item *)&small_mem->heap_ptr[ptr])->next)
   19570:	fe842783          	lw	a5,-24(s0)
   19574:	0287a703          	lw	a4,40(a5)
   19578:	fec42783          	lw	a5,-20(s0)
   1957c:	00f707b3          	add	a5,a4,a5
   19580:	0047a783          	lw	a5,4(a5)
   19584:	fef42623          	sw	a5,-20(s0)
         ptr <= small_mem->mem_size_aligned - size;
   19588:	fe842783          	lw	a5,-24(s0)
   1958c:	0347a703          	lw	a4,52(a5)
   19590:	fc842783          	lw	a5,-56(s0)
   19594:	40f707b3          	sub	a5,a4,a5
    for (ptr = (rt_uint8_t *)small_mem->lfree - small_mem->heap_ptr;
   19598:	fec42703          	lw	a4,-20(s0)
   1959c:	d0e7f8e3          	bgeu	a5,a4,192ac <rt_smem_alloc+0x108>
        }
    }

    return RT_NULL;
   195a0:	00000793          	li	a5,0
}
   195a4:	00078513          	mv	a0,a5
   195a8:	03c12083          	lw	ra,60(sp)
   195ac:	03812403          	lw	s0,56(sp)
   195b0:	04010113          	addi	sp,sp,64
   195b4:	00008067          	ret

000195b8 <rt_smem_realloc>:
 * @param newsize is the required new size.
 *
 * @return the changed memory block address.
 */
void *rt_smem_realloc(rt_smem_t m, void *rmem, rt_size_t newsize)
{
   195b8:	fc010113          	addi	sp,sp,-64
   195bc:	02112e23          	sw	ra,60(sp)
   195c0:	02812c23          	sw	s0,56(sp)
   195c4:	04010413          	addi	s0,sp,64
   195c8:	fca42623          	sw	a0,-52(s0)
   195cc:	fcb42423          	sw	a1,-56(s0)
   195d0:	fcc42223          	sw	a2,-60(s0)
    rt_size_t ptr, ptr2;
    struct rt_small_mem_item *mem, *mem2;
    struct rt_small_mem *small_mem;
    void *nmem;

    RT_ASSERT(m != RT_NULL);
   195d4:	fcc42783          	lw	a5,-52(s0)
   195d8:	00079e63          	bnez	a5,195f4 <rt_smem_realloc+0x3c>
   195dc:	1aa00613          	li	a2,426
   195e0:	00008597          	auipc	a1,0x8
   195e4:	9e858593          	addi	a1,a1,-1560 # 20fc8 <__FUNCTION__.2495>
   195e8:	00007517          	auipc	a0,0x7
   195ec:	63050513          	addi	a0,a0,1584 # 20c18 <__FUNCTION__.2502+0xb4>
   195f0:	a55f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&m->parent) == RT_Object_Class_Memory);
   195f4:	fcc42783          	lw	a5,-52(s0)
   195f8:	00078513          	mv	a0,a5
   195fc:	92df70ef          	jal	ra,10f28 <rt_object_get_type>
   19600:	00050793          	mv	a5,a0
   19604:	00078713          	mv	a4,a5
   19608:	00c00793          	li	a5,12
   1960c:	00f70e63          	beq	a4,a5,19628 <rt_smem_realloc+0x70>
   19610:	1ab00613          	li	a2,427
   19614:	00008597          	auipc	a1,0x8
   19618:	9b458593          	addi	a1,a1,-1612 # 20fc8 <__FUNCTION__.2495>
   1961c:	00007517          	auipc	a0,0x7
   19620:	60c50513          	addi	a0,a0,1548 # 20c28 <__FUNCTION__.2502+0xc4>
   19624:	a21f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&m->parent));
   19628:	fcc42783          	lw	a5,-52(s0)
   1962c:	00078513          	mv	a0,a5
   19630:	891f70ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   19634:	00050793          	mv	a5,a0
   19638:	00079e63          	bnez	a5,19654 <rt_smem_realloc+0x9c>
   1963c:	1ac00613          	li	a2,428
   19640:	00008597          	auipc	a1,0x8
   19644:	98858593          	addi	a1,a1,-1656 # 20fc8 <__FUNCTION__.2495>
   19648:	00007517          	auipc	a0,0x7
   1964c:	61c50513          	addi	a0,a0,1564 # 20c64 <__FUNCTION__.2502+0x100>
   19650:	9f5f90ef          	jal	ra,13044 <rt_assert_handler>

    small_mem = (struct rt_small_mem *)m;
   19654:	fcc42783          	lw	a5,-52(s0)
   19658:	fef42623          	sw	a5,-20(s0)
    /* alignment size */
    newsize = RT_ALIGN(newsize, RT_ALIGN_SIZE);
   1965c:	fc442783          	lw	a5,-60(s0)
   19660:	00378793          	addi	a5,a5,3
   19664:	ffc7f793          	andi	a5,a5,-4
   19668:	fcf42223          	sw	a5,-60(s0)
    if (newsize > small_mem->mem_size_aligned)
   1966c:	fec42783          	lw	a5,-20(s0)
   19670:	0347a783          	lw	a5,52(a5)
   19674:	fc442703          	lw	a4,-60(s0)
   19678:	00e7f663          	bgeu	a5,a4,19684 <rt_smem_realloc+0xcc>
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("realloc: out of memory\n"));

        return RT_NULL;
   1967c:	00000793          	li	a5,0
   19680:	2380006f          	j	198b8 <rt_smem_realloc+0x300>
    }
    else if (newsize == 0)
   19684:	fc442783          	lw	a5,-60(s0)
   19688:	00079a63          	bnez	a5,1969c <rt_smem_realloc+0xe4>
    {
        rt_smem_free(rmem);
   1968c:	fc842503          	lw	a0,-56(s0)
   19690:	23c000ef          	jal	ra,198cc <rt_smem_free>
        return RT_NULL;
   19694:	00000793          	li	a5,0
   19698:	2200006f          	j	198b8 <rt_smem_realloc+0x300>
    }

    /* allocate a new memory block */
    if (rmem == RT_NULL)
   1969c:	fc842783          	lw	a5,-56(s0)
   196a0:	00079e63          	bnez	a5,196bc <rt_smem_realloc+0x104>
        return rt_smem_alloc(&small_mem->parent, newsize);
   196a4:	fec42783          	lw	a5,-20(s0)
   196a8:	fc442583          	lw	a1,-60(s0)
   196ac:	00078513          	mv	a0,a5
   196b0:	af5ff0ef          	jal	ra,191a4 <rt_smem_alloc>
   196b4:	00050793          	mv	a5,a0
   196b8:	2000006f          	j	198b8 <rt_smem_realloc+0x300>

    RT_ASSERT((((rt_ubase_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);
   196bc:	fc842783          	lw	a5,-56(s0)
   196c0:	0037f793          	andi	a5,a5,3
   196c4:	00078e63          	beqz	a5,196e0 <rt_smem_realloc+0x128>
   196c8:	1c100613          	li	a2,449
   196cc:	00008597          	auipc	a1,0x8
   196d0:	8fc58593          	addi	a1,a1,-1796 # 20fc8 <__FUNCTION__.2495>
   196d4:	00007517          	auipc	a0,0x7
   196d8:	6d450513          	addi	a0,a0,1748 # 20da8 <__FUNCTION__.2502+0x244>
   196dc:	969f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)small_mem->heap_ptr);
   196e0:	fec42783          	lw	a5,-20(s0)
   196e4:	0287a783          	lw	a5,40(a5)
   196e8:	fc842703          	lw	a4,-56(s0)
   196ec:	00f77e63          	bgeu	a4,a5,19708 <rt_smem_realloc+0x150>
   196f0:	1c200613          	li	a2,450
   196f4:	00008597          	auipc	a1,0x8
   196f8:	8d458593          	addi	a1,a1,-1836 # 20fc8 <__FUNCTION__.2495>
   196fc:	00007517          	auipc	a0,0x7
   19700:	6dc50513          	addi	a0,a0,1756 # 20dd8 <__FUNCTION__.2502+0x274>
   19704:	941f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)rmem < (rt_uint8_t *)small_mem->heap_end);
   19708:	fec42783          	lw	a5,-20(s0)
   1970c:	02c7a783          	lw	a5,44(a5)
   19710:	fc842703          	lw	a4,-56(s0)
   19714:	00f76e63          	bltu	a4,a5,19730 <rt_smem_realloc+0x178>
   19718:	1c300613          	li	a2,451
   1971c:	00008597          	auipc	a1,0x8
   19720:	8ac58593          	addi	a1,a1,-1876 # 20fc8 <__FUNCTION__.2495>
   19724:	00007517          	auipc	a0,0x7
   19728:	6ec50513          	addi	a0,a0,1772 # 20e10 <__FUNCTION__.2502+0x2ac>
   1972c:	919f90ef          	jal	ra,13044 <rt_assert_handler>

    mem = (struct rt_small_mem_item *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
   19730:	fc842783          	lw	a5,-56(s0)
   19734:	ff478793          	addi	a5,a5,-12
   19738:	fef42423          	sw	a5,-24(s0)

    /* current memory block size */
    ptr = (rt_uint8_t *)mem - small_mem->heap_ptr;
   1973c:	fec42783          	lw	a5,-20(s0)
   19740:	0287a783          	lw	a5,40(a5)
   19744:	fe842703          	lw	a4,-24(s0)
   19748:	40f707b3          	sub	a5,a4,a5
   1974c:	fef42223          	sw	a5,-28(s0)
    size = mem->next - ptr - SIZEOF_STRUCT_MEM;
   19750:	fe842783          	lw	a5,-24(s0)
   19754:	0047a703          	lw	a4,4(a5)
   19758:	fe442783          	lw	a5,-28(s0)
   1975c:	40f707b3          	sub	a5,a4,a5
   19760:	ff478793          	addi	a5,a5,-12
   19764:	fef42023          	sw	a5,-32(s0)
    if (size == newsize)
   19768:	fe042703          	lw	a4,-32(s0)
   1976c:	fc442783          	lw	a5,-60(s0)
   19770:	00f71663          	bne	a4,a5,1977c <rt_smem_realloc+0x1c4>
    {
        /* the size is the same as */
        return rmem;
   19774:	fc842783          	lw	a5,-56(s0)
   19778:	1400006f          	j	198b8 <rt_smem_realloc+0x300>
    }

    if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE < size)
   1977c:	fc442783          	lw	a5,-60(s0)
   19780:	01878793          	addi	a5,a5,24
   19784:	fe042703          	lw	a4,-32(s0)
   19788:	0ee7f463          	bgeu	a5,a4,19870 <rt_smem_realloc+0x2b8>
    {
        /* split memory block */
        small_mem->parent.used -= (size - newsize);
   1978c:	fec42783          	lw	a5,-20(s0)
   19790:	0207a703          	lw	a4,32(a5)
   19794:	fc442683          	lw	a3,-60(s0)
   19798:	fe042783          	lw	a5,-32(s0)
   1979c:	40f687b3          	sub	a5,a3,a5
   197a0:	00f70733          	add	a4,a4,a5
   197a4:	fec42783          	lw	a5,-20(s0)
   197a8:	02e7a023          	sw	a4,32(a5)

        ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
   197ac:	fe442703          	lw	a4,-28(s0)
   197b0:	fc442783          	lw	a5,-60(s0)
   197b4:	00f707b3          	add	a5,a4,a5
   197b8:	00c78793          	addi	a5,a5,12
   197bc:	fcf42c23          	sw	a5,-40(s0)
        mem2 = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr2];
   197c0:	fec42783          	lw	a5,-20(s0)
   197c4:	0287a703          	lw	a4,40(a5)
   197c8:	fd842783          	lw	a5,-40(s0)
   197cc:	00f707b3          	add	a5,a4,a5
   197d0:	fcf42a23          	sw	a5,-44(s0)
        mem2->pool_ptr = MEM_FREED();
   197d4:	fec42783          	lw	a5,-20(s0)
   197d8:	ffe7f713          	andi	a4,a5,-2
   197dc:	fd442783          	lw	a5,-44(s0)
   197e0:	00e7a023          	sw	a4,0(a5)
        mem2->next = mem->next;
   197e4:	fe842783          	lw	a5,-24(s0)
   197e8:	0047a703          	lw	a4,4(a5)
   197ec:	fd442783          	lw	a5,-44(s0)
   197f0:	00e7a223          	sw	a4,4(a5)
        mem2->prev = ptr;
   197f4:	fd442783          	lw	a5,-44(s0)
   197f8:	fe442703          	lw	a4,-28(s0)
   197fc:	00e7a423          	sw	a4,8(a5)
#ifdef RT_USING_MEMTRACE
        rt_smem_setname(mem2, "    ");
#endif /* RT_USING_MEMTRACE */
        mem->next = ptr2;
   19800:	fe842783          	lw	a5,-24(s0)
   19804:	fd842703          	lw	a4,-40(s0)
   19808:	00e7a223          	sw	a4,4(a5)
        if (mem2->next != small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM)
   1980c:	fd442783          	lw	a5,-44(s0)
   19810:	0047a703          	lw	a4,4(a5)
   19814:	fec42783          	lw	a5,-20(s0)
   19818:	0347a783          	lw	a5,52(a5)
   1981c:	00c78793          	addi	a5,a5,12
   19820:	02f70063          	beq	a4,a5,19840 <rt_smem_realloc+0x288>
        {
            ((struct rt_small_mem_item *)&small_mem->heap_ptr[mem2->next])->prev = ptr2;
   19824:	fec42783          	lw	a5,-20(s0)
   19828:	0287a703          	lw	a4,40(a5)
   1982c:	fd442783          	lw	a5,-44(s0)
   19830:	0047a783          	lw	a5,4(a5)
   19834:	00f707b3          	add	a5,a4,a5
   19838:	fd842703          	lw	a4,-40(s0)
   1983c:	00e7a423          	sw	a4,8(a5)
        }

        if (mem2 < small_mem->lfree)
   19840:	fec42783          	lw	a5,-20(s0)
   19844:	0307a783          	lw	a5,48(a5)
   19848:	fd442703          	lw	a4,-44(s0)
   1984c:	00f77863          	bgeu	a4,a5,1985c <rt_smem_realloc+0x2a4>
        {
            /* the splited struct is now the lowest */
            small_mem->lfree = mem2;
   19850:	fec42783          	lw	a5,-20(s0)
   19854:	fd442703          	lw	a4,-44(s0)
   19858:	02e7a823          	sw	a4,48(a5)
        }

        plug_holes(small_mem, mem2);
   1985c:	fd442583          	lw	a1,-44(s0)
   19860:	fec42503          	lw	a0,-20(s0)
   19864:	cf8ff0ef          	jal	ra,18d5c <plug_holes>

        return rmem;
   19868:	fc842783          	lw	a5,-56(s0)
   1986c:	04c0006f          	j	198b8 <rt_smem_realloc+0x300>
    }

    /* expand memory */
    nmem = rt_smem_alloc(&small_mem->parent, newsize);
   19870:	fec42783          	lw	a5,-20(s0)
   19874:	fc442583          	lw	a1,-60(s0)
   19878:	00078513          	mv	a0,a5
   1987c:	929ff0ef          	jal	ra,191a4 <rt_smem_alloc>
   19880:	fca42e23          	sw	a0,-36(s0)
    if (nmem != RT_NULL) /* check memory */
   19884:	fdc42783          	lw	a5,-36(s0)
   19888:	02078663          	beqz	a5,198b4 <rt_smem_realloc+0x2fc>
    {
        rt_memcpy(nmem, rmem, size < newsize ? size : newsize);
   1988c:	fe042703          	lw	a4,-32(s0)
   19890:	fc442783          	lw	a5,-60(s0)
   19894:	00f77463          	bgeu	a4,a5,1989c <rt_smem_realloc+0x2e4>
   19898:	00070793          	mv	a5,a4
   1989c:	00078613          	mv	a2,a5
   198a0:	fc842583          	lw	a1,-56(s0)
   198a4:	fdc42503          	lw	a0,-36(s0)
   198a8:	a6df70ef          	jal	ra,11314 <rt_memcpy>
        rt_smem_free(rmem);
   198ac:	fc842503          	lw	a0,-56(s0)
   198b0:	01c000ef          	jal	ra,198cc <rt_smem_free>
    }

    return nmem;
   198b4:	fdc42783          	lw	a5,-36(s0)
}
   198b8:	00078513          	mv	a0,a5
   198bc:	03c12083          	lw	ra,60(sp)
   198c0:	03812403          	lw	s0,56(sp)
   198c4:	04010113          	addi	sp,sp,64
   198c8:	00008067          	ret

000198cc <rt_smem_free>:
 *        rt_mem_alloc. The released memory block is taken back to system heap.
 *
 * @param rmem the address of memory which will be released.
 */
void rt_smem_free(void *rmem)
{
   198cc:	fd010113          	addi	sp,sp,-48
   198d0:	02112623          	sw	ra,44(sp)
   198d4:	02812423          	sw	s0,40(sp)
   198d8:	03010413          	addi	s0,sp,48
   198dc:	fca42e23          	sw	a0,-36(s0)
    struct rt_small_mem_item *mem;
    struct rt_small_mem *small_mem;

    if (rmem == RT_NULL)
   198e0:	fdc42783          	lw	a5,-36(s0)
   198e4:	1c078a63          	beqz	a5,19ab8 <rt_smem_free+0x1ec>
        return;

    RT_ASSERT((((rt_ubase_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);
   198e8:	fdc42783          	lw	a5,-36(s0)
   198ec:	0037f793          	andi	a5,a5,3
   198f0:	00078e63          	beqz	a5,1990c <rt_smem_free+0x40>
   198f4:	20800613          	li	a2,520
   198f8:	00007597          	auipc	a1,0x7
   198fc:	6e058593          	addi	a1,a1,1760 # 20fd8 <__FUNCTION__.2501>
   19900:	00007517          	auipc	a0,0x7
   19904:	4a850513          	addi	a0,a0,1192 # 20da8 <__FUNCTION__.2502+0x244>
   19908:	f3cf90ef          	jal	ra,13044 <rt_assert_handler>

    /* Get the corresponding struct rt_small_mem_item ... */
    mem = (struct rt_small_mem_item *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
   1990c:	fdc42783          	lw	a5,-36(s0)
   19910:	ff478793          	addi	a5,a5,-12
   19914:	fef42623          	sw	a5,-20(s0)
                 ("release memory 0x%x, size: %d\n",
                  (rt_ubase_t)rmem,
                  (rt_ubase_t)(mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr))));

    /* ... which has to be in a used state ... */
    small_mem = MEM_POOL(mem);
   19918:	fec42783          	lw	a5,-20(s0)
   1991c:	0007a783          	lw	a5,0(a5)
   19920:	ffe7f793          	andi	a5,a5,-2
   19924:	fef42423          	sw	a5,-24(s0)
    RT_ASSERT(small_mem != RT_NULL);
   19928:	fe842783          	lw	a5,-24(s0)
   1992c:	00079e63          	bnez	a5,19948 <rt_smem_free+0x7c>
   19930:	21400613          	li	a2,532
   19934:	00007597          	auipc	a1,0x7
   19938:	6a458593          	addi	a1,a1,1700 # 20fd8 <__FUNCTION__.2501>
   1993c:	00007517          	auipc	a0,0x7
   19940:	50c50513          	addi	a0,a0,1292 # 20e48 <__FUNCTION__.2502+0x2e4>
   19944:	f00f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(MEM_ISUSED(mem));
   19948:	fec42783          	lw	a5,-20(s0)
   1994c:	0007a783          	lw	a5,0(a5)
   19950:	0017f793          	andi	a5,a5,1
   19954:	00079e63          	bnez	a5,19970 <rt_smem_free+0xa4>
   19958:	21500613          	li	a2,533
   1995c:	00007597          	auipc	a1,0x7
   19960:	67c58593          	addi	a1,a1,1660 # 20fd8 <__FUNCTION__.2501>
   19964:	00007517          	auipc	a0,0x7
   19968:	4fc50513          	addi	a0,a0,1276 # 20e60 <__FUNCTION__.2502+0x2fc>
   1996c:	ed8f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&small_mem->parent.parent) == RT_Object_Class_Memory);
   19970:	fe842783          	lw	a5,-24(s0)
   19974:	00078513          	mv	a0,a5
   19978:	db0f70ef          	jal	ra,10f28 <rt_object_get_type>
   1997c:	00050793          	mv	a5,a0
   19980:	00078713          	mv	a4,a5
   19984:	00c00793          	li	a5,12
   19988:	00f70e63          	beq	a4,a5,199a4 <rt_smem_free+0xd8>
   1998c:	21600613          	li	a2,534
   19990:	00007597          	auipc	a1,0x7
   19994:	64858593          	addi	a1,a1,1608 # 20fd8 <__FUNCTION__.2501>
   19998:	00007517          	auipc	a0,0x7
   1999c:	4d850513          	addi	a0,a0,1240 # 20e70 <__FUNCTION__.2502+0x30c>
   199a0:	ea4f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&small_mem->parent.parent));
   199a4:	fe842783          	lw	a5,-24(s0)
   199a8:	00078513          	mv	a0,a5
   199ac:	d14f70ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   199b0:	00050793          	mv	a5,a0
   199b4:	00079e63          	bnez	a5,199d0 <rt_smem_free+0x104>
   199b8:	21700613          	li	a2,535
   199bc:	00007597          	auipc	a1,0x7
   199c0:	61c58593          	addi	a1,a1,1564 # 20fd8 <__FUNCTION__.2501>
   199c4:	00007517          	auipc	a0,0x7
   199c8:	4f450513          	addi	a0,a0,1268 # 20eb8 <__FUNCTION__.2502+0x354>
   199cc:	e78f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)small_mem->heap_ptr &&
   199d0:	fe842783          	lw	a5,-24(s0)
   199d4:	0287a783          	lw	a5,40(a5)
   199d8:	fdc42703          	lw	a4,-36(s0)
   199dc:	00f76a63          	bltu	a4,a5,199f0 <rt_smem_free+0x124>
   199e0:	fe842783          	lw	a5,-24(s0)
   199e4:	02c7a783          	lw	a5,44(a5)
   199e8:	fdc42703          	lw	a4,-36(s0)
   199ec:	00f76e63          	bltu	a4,a5,19a08 <rt_smem_free+0x13c>
   199f0:	21800613          	li	a2,536
   199f4:	00007597          	auipc	a1,0x7
   199f8:	5e458593          	addi	a1,a1,1508 # 20fd8 <__FUNCTION__.2501>
   199fc:	00007517          	auipc	a0,0x7
   19a00:	4f450513          	addi	a0,a0,1268 # 20ef0 <__FUNCTION__.2502+0x38c>
   19a04:	e40f90ef          	jal	ra,13044 <rt_assert_handler>
              (rt_uint8_t *)rmem < (rt_uint8_t *)small_mem->heap_end);
    RT_ASSERT(MEM_POOL(&small_mem->heap_ptr[mem->next]) == small_mem);
   19a08:	fe842783          	lw	a5,-24(s0)
   19a0c:	0287a703          	lw	a4,40(a5)
   19a10:	fec42783          	lw	a5,-20(s0)
   19a14:	0047a783          	lw	a5,4(a5)
   19a18:	00f707b3          	add	a5,a4,a5
   19a1c:	0007a783          	lw	a5,0(a5)
   19a20:	ffe7f793          	andi	a5,a5,-2
   19a24:	00078713          	mv	a4,a5
   19a28:	fe842783          	lw	a5,-24(s0)
   19a2c:	00e78e63          	beq	a5,a4,19a48 <rt_smem_free+0x17c>
   19a30:	21a00613          	li	a2,538
   19a34:	00007597          	auipc	a1,0x7
   19a38:	5a458593          	addi	a1,a1,1444 # 20fd8 <__FUNCTION__.2501>
   19a3c:	00007517          	auipc	a0,0x7
   19a40:	52850513          	addi	a0,a0,1320 # 20f64 <__FUNCTION__.2502+0x400>
   19a44:	e00f90ef          	jal	ra,13044 <rt_assert_handler>

    /* ... and is now unused. */
    mem->pool_ptr = MEM_FREED();
   19a48:	fe842783          	lw	a5,-24(s0)
   19a4c:	ffe7f713          	andi	a4,a5,-2
   19a50:	fec42783          	lw	a5,-20(s0)
   19a54:	00e7a023          	sw	a4,0(a5)
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(mem, "    ");
#endif /* RT_USING_MEMTRACE */

    if (mem < small_mem->lfree)
   19a58:	fe842783          	lw	a5,-24(s0)
   19a5c:	0307a783          	lw	a5,48(a5)
   19a60:	fec42703          	lw	a4,-20(s0)
   19a64:	00f77863          	bgeu	a4,a5,19a74 <rt_smem_free+0x1a8>
    {
        /* the newly freed struct is now the lowest */
        small_mem->lfree = mem;
   19a68:	fe842783          	lw	a5,-24(s0)
   19a6c:	fec42703          	lw	a4,-20(s0)
   19a70:	02e7a823          	sw	a4,48(a5)
    }

    small_mem->parent.used -= (mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr));
   19a74:	fe842783          	lw	a5,-24(s0)
   19a78:	0207a703          	lw	a4,32(a5)
   19a7c:	fe842783          	lw	a5,-24(s0)
   19a80:	0287a783          	lw	a5,40(a5)
   19a84:	fec42683          	lw	a3,-20(s0)
   19a88:	40f687b3          	sub	a5,a3,a5
   19a8c:	00078693          	mv	a3,a5
   19a90:	fec42783          	lw	a5,-20(s0)
   19a94:	0047a783          	lw	a5,4(a5)
   19a98:	40f687b3          	sub	a5,a3,a5
   19a9c:	00f70733          	add	a4,a4,a5
   19aa0:	fe842783          	lw	a5,-24(s0)
   19aa4:	02e7a023          	sw	a4,32(a5)

    /* finally, see if prev or next are free also */
    plug_holes(small_mem, mem);
   19aa8:	fec42583          	lw	a1,-20(s0)
   19aac:	fe842503          	lw	a0,-24(s0)
   19ab0:	aacff0ef          	jal	ra,18d5c <plug_holes>
   19ab4:	0080006f          	j	19abc <rt_smem_free+0x1f0>
        return;
   19ab8:	00000013          	nop
}
   19abc:	02c12083          	lw	ra,44(sp)
   19ac0:	02812403          	lw	s0,40(sp)
   19ac4:	03010113          	addi	sp,sp,48
   19ac8:	00008067          	ret

00019acc <rti_start>:
 * ...
 * INIT_APP_EXPORT(fn);
 * etc.
 */
static int rti_start(void)
{
   19acc:	ff010113          	addi	sp,sp,-16
   19ad0:	00812623          	sw	s0,12(sp)
   19ad4:	01010413          	addi	s0,sp,16
    return 0;
   19ad8:	00000793          	li	a5,0
}
   19adc:	00078513          	mv	a0,a5
   19ae0:	00c12403          	lw	s0,12(sp)
   19ae4:	01010113          	addi	sp,sp,16
   19ae8:	00008067          	ret

00019aec <rti_board_start>:
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
   19aec:	ff010113          	addi	sp,sp,-16
   19af0:	00812623          	sw	s0,12(sp)
   19af4:	01010413          	addi	s0,sp,16
    return 0;
   19af8:	00000793          	li	a5,0
}
   19afc:	00078513          	mv	a0,a5
   19b00:	00c12403          	lw	s0,12(sp)
   19b04:	01010113          	addi	sp,sp,16
   19b08:	00008067          	ret

00019b0c <rti_board_end>:
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
   19b0c:	ff010113          	addi	sp,sp,-16
   19b10:	00812623          	sw	s0,12(sp)
   19b14:	01010413          	addi	s0,sp,16
    return 0;
   19b18:	00000793          	li	a5,0
}
   19b1c:	00078513          	mv	a0,a5
   19b20:	00c12403          	lw	s0,12(sp)
   19b24:	01010113          	addi	sp,sp,16
   19b28:	00008067          	ret

00019b2c <rti_end>:
INIT_EXPORT(rti_board_end, "1.end");

static int rti_end(void)
{
   19b2c:	ff010113          	addi	sp,sp,-16
   19b30:	00812623          	sw	s0,12(sp)
   19b34:	01010413          	addi	s0,sp,16
    return 0;
   19b38:	00000793          	li	a5,0
}
   19b3c:	00078513          	mv	a0,a5
   19b40:	00c12403          	lw	s0,12(sp)
   19b44:	01010113          	addi	sp,sp,16
   19b48:	00008067          	ret

00019b4c <rt_components_board_init>:
 * @brief  Onboard components initialization. In this function, the board-level
 *         initialization function will be called to complete the initialization
 *         of the on-board peripherals.
 */
void rt_components_board_init(void)
{
   19b4c:	fe010113          	addi	sp,sp,-32
   19b50:	00112e23          	sw	ra,28(sp)
   19b54:	00812c23          	sw	s0,24(sp)
   19b58:	02010413          	addi	s0,sp,32
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
   19b5c:	00006797          	auipc	a5,0x6
   19b60:	12478793          	addi	a5,a5,292 # 1fc80 <__rt_init_rti_board_start>
   19b64:	fef42623          	sw	a5,-20(s0)
   19b68:	01c0006f          	j	19b84 <rt_components_board_init+0x38>
    {
        (*fn_ptr)();
   19b6c:	fec42783          	lw	a5,-20(s0)
   19b70:	0007a783          	lw	a5,0(a5)
   19b74:	000780e7          	jalr	a5
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
   19b78:	fec42783          	lw	a5,-20(s0)
   19b7c:	00478793          	addi	a5,a5,4
   19b80:	fef42623          	sw	a5,-20(s0)
   19b84:	fec42703          	lw	a4,-20(s0)
   19b88:	00006797          	auipc	a5,0x6
   19b8c:	10078793          	addi	a5,a5,256 # 1fc88 <__rt_init_rti_board_end>
   19b90:	fcf76ee3          	bltu	a4,a5,19b6c <rt_components_board_init+0x20>
    }
#endif /* RT_DEBUG_INIT */
}
   19b94:	00000013          	nop
   19b98:	00000013          	nop
   19b9c:	01c12083          	lw	ra,28(sp)
   19ba0:	01812403          	lw	s0,24(sp)
   19ba4:	02010113          	addi	sp,sp,32
   19ba8:	00008067          	ret

00019bac <rt_components_init>:

/**
 * @brief  RT-Thread Components Initialization.
 */
void rt_components_init(void)
{
   19bac:	fe010113          	addi	sp,sp,-32
   19bb0:	00112e23          	sw	ra,28(sp)
   19bb4:	00812c23          	sw	s0,24(sp)
   19bb8:	02010413          	addi	s0,sp,32
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
   19bbc:	00006797          	auipc	a5,0x6
   19bc0:	0cc78793          	addi	a5,a5,204 # 1fc88 <__rt_init_rti_board_end>
   19bc4:	fef42623          	sw	a5,-20(s0)
   19bc8:	01c0006f          	j	19be4 <rt_components_init+0x38>
    {
        (*fn_ptr)();
   19bcc:	fec42783          	lw	a5,-20(s0)
   19bd0:	0007a783          	lw	a5,0(a5)
   19bd4:	000780e7          	jalr	a5
    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
   19bd8:	fec42783          	lw	a5,-20(s0)
   19bdc:	00478793          	addi	a5,a5,4
   19be0:	fef42623          	sw	a5,-20(s0)
   19be4:	fec42703          	lw	a4,-20(s0)
   19be8:	00006797          	auipc	a5,0x6
   19bec:	0a878793          	addi	a5,a5,168 # 1fc90 <__rt_init_rti_end>
   19bf0:	fcf76ee3          	bltu	a4,a5,19bcc <rt_components_init+0x20>
    }
#endif /* RT_DEBUG_INIT */
}
   19bf4:	00000013          	nop
   19bf8:	00000013          	nop
   19bfc:	01c12083          	lw	ra,28(sp)
   19c00:	01812403          	lw	s0,24(sp)
   19c04:	02010113          	addi	sp,sp,32
   19c08:	00008067          	ret

00019c0c <entry>:
    return 0;
}
#elif defined(__GNUC__)
/* Add -eentry to arm-none-eabi-gcc argument */
int entry(void)
{
   19c0c:	ff010113          	addi	sp,sp,-16
   19c10:	00112623          	sw	ra,12(sp)
   19c14:	00812423          	sw	s0,8(sp)
   19c18:	01010413          	addi	s0,sp,16
    rtthread_startup();
   19c1c:	0c4000ef          	jal	ra,19ce0 <rtthread_startup>
    return 0;
   19c20:	00000793          	li	a5,0
}
   19c24:	00078513          	mv	a0,a5
   19c28:	00c12083          	lw	ra,12(sp)
   19c2c:	00812403          	lw	s0,8(sp)
   19c30:	01010113          	addi	sp,sp,16
   19c34:	00008067          	ret

00019c38 <main_thread_entry>:
 * @brief  The system main thread. In this thread will call the rt_components_init()
 *         for initialization of RT-Thread Components and call the user's programming
 *         entry main().
 */
void main_thread_entry(void *parameter)
{
   19c38:	fe010113          	addi	sp,sp,-32
   19c3c:	00112e23          	sw	ra,28(sp)
   19c40:	00812c23          	sw	s0,24(sp)
   19c44:	02010413          	addi	s0,sp,32
   19c48:	fea42623          	sw	a0,-20(s0)
    extern int main(void);

#ifdef RT_USING_COMPONENTS_INIT
    /* RT-Thread components initialization */
    rt_components_init();
   19c4c:	f61ff0ef          	jal	ra,19bac <rt_components_init>
    {
        extern int $Super$$main(void);
        $Super$$main(); /* for ARMCC. */
    }
#elif defined(__ICCARM__) || defined(__GNUC__) || defined(__TASKING__)
    main();
   19c50:	f9cf60ef          	jal	ra,103ec <main>
#endif
}
   19c54:	00000013          	nop
   19c58:	01c12083          	lw	ra,28(sp)
   19c5c:	01812403          	lw	s0,24(sp)
   19c60:	02010113          	addi	sp,sp,32
   19c64:	00008067          	ret

00019c68 <rt_application_init>:
/**
 * @brief  This function will create and start the main thread, but this thread
 *         will not run until the scheduler starts.
 */
void rt_application_init(void)
{
   19c68:	fe010113          	addi	sp,sp,-32
   19c6c:	00112e23          	sw	ra,28(sp)
   19c70:	00812c23          	sw	s0,24(sp)
   19c74:	02010413          	addi	s0,sp,32
    rt_thread_t tid;

#ifdef RT_USING_HEAP
    tid = rt_thread_create("main", main_thread_entry, RT_NULL,
   19c78:	01400793          	li	a5,20
   19c7c:	00a00713          	li	a4,10
   19c80:	000016b7          	lui	a3,0x1
   19c84:	80068693          	addi	a3,a3,-2048 # 800 <__load-0xf800>
   19c88:	00000613          	li	a2,0
   19c8c:	00000597          	auipc	a1,0x0
   19c90:	fac58593          	addi	a1,a1,-84 # 19c38 <main_thread_entry>
   19c94:	00007517          	auipc	a0,0x7
   19c98:	35450513          	addi	a0,a0,852 # 20fe8 <__FUNCTION__.2501+0x10>
   19c9c:	a5df90ef          	jal	ra,136f8 <rt_thread_create>
   19ca0:	fea42623          	sw	a0,-20(s0)
                           RT_MAIN_THREAD_STACK_SIZE, RT_MAIN_THREAD_PRIORITY, 20);
    RT_ASSERT(tid != RT_NULL);
   19ca4:	fec42783          	lw	a5,-20(s0)
   19ca8:	00079e63          	bnez	a5,19cc4 <rt_application_init+0x5c>
   19cac:	0d500613          	li	a2,213
   19cb0:	00007597          	auipc	a1,0x7
   19cb4:	35058593          	addi	a1,a1,848 # 21000 <__FUNCTION__.2484>
   19cb8:	00007517          	auipc	a0,0x7
   19cbc:	33850513          	addi	a0,a0,824 # 20ff0 <__FUNCTION__.2501+0x18>
   19cc0:	b84f90ef          	jal	ra,13044 <rt_assert_handler>

    /* if not define RT_USING_HEAP, using to eliminate the warning */
    (void)result;
#endif /* RT_USING_HEAP */

    rt_thread_startup(tid);
   19cc4:	fec42503          	lw	a0,-20(s0)
   19cc8:	82df90ef          	jal	ra,134f4 <rt_thread_startup>
}
   19ccc:	00000013          	nop
   19cd0:	01c12083          	lw	ra,28(sp)
   19cd4:	01812403          	lw	s0,24(sp)
   19cd8:	02010113          	addi	sp,sp,32
   19cdc:	00008067          	ret

00019ce0 <rtthread_startup>:
/**
 * @brief  This function will call all levels of initialization functions to complete
 *         the initialization of the system, and finally start the scheduler.
 */
int rtthread_startup(void)
{
   19ce0:	ff010113          	addi	sp,sp,-16
   19ce4:	00112623          	sw	ra,12(sp)
   19ce8:	00812423          	sw	s0,8(sp)
   19cec:	01010413          	addi	s0,sp,16
    rt_hw_interrupt_disable();
   19cf0:	158020ef          	jal	ra,1be48 <rt_hw_interrupt_disable>

    /* board level initialization
     * NOTE: please initialize heap inside board initialization.
     */
    rt_hw_board_init();
   19cf4:	db0f60ef          	jal	ra,102a4 <rt_hw_board_init>

    /* show RT-Thread version */
    rt_show_version();
   19cf8:	db1f70ef          	jal	ra,11aa8 <rt_show_version>

    /* timer system initialization */
    rt_system_timer_init();
   19cfc:	24d010ef          	jal	ra,1b748 <rt_system_timer_init>

    /* scheduler system initialization */
    rt_system_scheduler_init();
   19d00:	8c5fe0ef          	jal	ra,185c4 <rt_system_scheduler_init>
    /* signal system initialization */
    rt_system_signal_init();
#endif /* RT_USING_SIGNALS */

    /* create init_thread */
    rt_application_init();
   19d04:	f65ff0ef          	jal	ra,19c68 <rt_application_init>

    /* timer thread initialization */
    rt_system_timer_thread_init();
   19d08:	29d010ef          	jal	ra,1b7a4 <rt_system_timer_thread_init>

    /* idle thread initialization */
    rt_thread_idle_init();
   19d0c:	6d1010ef          	jal	ra,1bbdc <rt_thread_idle_init>
#ifdef RT_USING_SMP
    rt_hw_spin_lock(&_cpus_lock);
#endif /* RT_USING_SMP */

    /* start scheduler */
    rt_system_scheduler_start();
   19d10:	919fe0ef          	jal	ra,18628 <rt_system_scheduler_start>

    /* never reach here */
    return 0;
   19d14:	00000793          	li	a5,0
}
   19d18:	00078513          	mv	a0,a5
   19d1c:	00c12083          	lw	ra,12(sp)
   19d20:	00812403          	lw	s0,8(sp)
   19d24:	01010113          	addi	sp,sp,16
   19d28:	00008067          	ret

00019d2c <rt_device_register>:
 * @return the error code, RT_EOK on initialization successfully.
 */
rt_err_t rt_device_register(rt_device_t dev,
                            const char *name,
                            rt_uint16_t flags)
{
   19d2c:	fe010113          	addi	sp,sp,-32
   19d30:	00112e23          	sw	ra,28(sp)
   19d34:	00812c23          	sw	s0,24(sp)
   19d38:	02010413          	addi	s0,sp,32
   19d3c:	fea42623          	sw	a0,-20(s0)
   19d40:	feb42423          	sw	a1,-24(s0)
   19d44:	00060793          	mv	a5,a2
   19d48:	fef41323          	sh	a5,-26(s0)
    if (dev == RT_NULL)
   19d4c:	fec42783          	lw	a5,-20(s0)
   19d50:	00079663          	bnez	a5,19d5c <rt_device_register+0x30>
        return -RT_ERROR;
   19d54:	fff00793          	li	a5,-1
   19d58:	0500006f          	j	19da8 <rt_device_register+0x7c>

    if (rt_device_find(name) != RT_NULL)
   19d5c:	fe842503          	lw	a0,-24(s0)
   19d60:	114000ef          	jal	ra,19e74 <rt_device_find>
   19d64:	00050793          	mv	a5,a0
   19d68:	00078663          	beqz	a5,19d74 <rt_device_register+0x48>
        return -RT_ERROR;
   19d6c:	fff00793          	li	a5,-1
   19d70:	0380006f          	j	19da8 <rt_device_register+0x7c>

    rt_object_init(&(dev->parent), RT_Object_Class_Device, name);
   19d74:	fec42783          	lw	a5,-20(s0)
   19d78:	fe842603          	lw	a2,-24(s0)
   19d7c:	00900593          	li	a1,9
   19d80:	00078513          	mv	a0,a5
   19d84:	d3df60ef          	jal	ra,10ac0 <rt_object_init>
    dev->flag = flags;
   19d88:	fec42783          	lw	a5,-20(s0)
   19d8c:	fe645703          	lhu	a4,-26(s0)
   19d90:	00e79c23          	sh	a4,24(a5)
    dev->ref_count = 0;
   19d94:	fec42783          	lw	a5,-20(s0)
   19d98:	00078e23          	sb	zero,28(a5)
    dev->open_flag = 0;
   19d9c:	fec42783          	lw	a5,-20(s0)
   19da0:	00079d23          	sh	zero,26(a5)
#ifdef RT_USING_POSIX_DEVIO
    dev->fops = RT_NULL;
    rt_wqueue_init(&(dev->wait_queue));
#endif /* RT_USING_POSIX_DEVIO */

    return RT_EOK;
   19da4:	00000793          	li	a5,0
}
   19da8:	00078513          	mv	a0,a5
   19dac:	01c12083          	lw	ra,28(sp)
   19db0:	01812403          	lw	s0,24(sp)
   19db4:	02010113          	addi	sp,sp,32
   19db8:	00008067          	ret

00019dbc <rt_device_unregister>:
 * @param dev is the pointer of device driver structure.
 *
 * @return the error code, RT_EOK on successfully.
 */
rt_err_t rt_device_unregister(rt_device_t dev)
{
   19dbc:	fe010113          	addi	sp,sp,-32
   19dc0:	00112e23          	sw	ra,28(sp)
   19dc4:	00812c23          	sw	s0,24(sp)
   19dc8:	02010413          	addi	s0,sp,32
   19dcc:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(dev != RT_NULL);
   19dd0:	fec42783          	lw	a5,-20(s0)
   19dd4:	00079e63          	bnez	a5,19df0 <rt_device_unregister+0x34>
   19dd8:	05500613          	li	a2,85
   19ddc:	00007597          	auipc	a1,0x7
   19de0:	32c58593          	addi	a1,a1,812 # 21108 <__FUNCTION__.2369>
   19de4:	00007517          	auipc	a0,0x7
   19de8:	23050513          	addi	a0,a0,560 # 21014 <__FUNCTION__.2484+0x14>
   19dec:	a58f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   19df0:	fec42783          	lw	a5,-20(s0)
   19df4:	00078513          	mv	a0,a5
   19df8:	930f70ef          	jal	ra,10f28 <rt_object_get_type>
   19dfc:	00050793          	mv	a5,a0
   19e00:	00078713          	mv	a4,a5
   19e04:	00900793          	li	a5,9
   19e08:	00f70e63          	beq	a4,a5,19e24 <rt_device_unregister+0x68>
   19e0c:	05600613          	li	a2,86
   19e10:	00007597          	auipc	a1,0x7
   19e14:	2f858593          	addi	a1,a1,760 # 21108 <__FUNCTION__.2369>
   19e18:	00007517          	auipc	a0,0x7
   19e1c:	20c50513          	addi	a0,a0,524 # 21024 <__FUNCTION__.2484+0x24>
   19e20:	a24f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&dev->parent));
   19e24:	fec42783          	lw	a5,-20(s0)
   19e28:	00078513          	mv	a0,a5
   19e2c:	894f70ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   19e30:	00050793          	mv	a5,a0
   19e34:	00079e63          	bnez	a5,19e50 <rt_device_unregister+0x94>
   19e38:	05700613          	li	a2,87
   19e3c:	00007597          	auipc	a1,0x7
   19e40:	2cc58593          	addi	a1,a1,716 # 21108 <__FUNCTION__.2369>
   19e44:	00007517          	auipc	a0,0x7
   19e48:	21c50513          	addi	a0,a0,540 # 21060 <__FUNCTION__.2484+0x60>
   19e4c:	9f8f90ef          	jal	ra,13044 <rt_assert_handler>

    rt_object_detach(&(dev->parent));
   19e50:	fec42783          	lw	a5,-20(s0)
   19e54:	00078513          	mv	a0,a5
   19e58:	db1f60ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   19e5c:	00000793          	li	a5,0
}
   19e60:	00078513          	mv	a0,a5
   19e64:	01c12083          	lw	ra,28(sp)
   19e68:	01812403          	lw	s0,24(sp)
   19e6c:	02010113          	addi	sp,sp,32
   19e70:	00008067          	ret

00019e74 <rt_device_find>:
 * @param name is the device driver's name.
 *
 * @return the registered device driver on successful, or RT_NULL on failure.
 */
rt_device_t rt_device_find(const char *name)
{
   19e74:	fe010113          	addi	sp,sp,-32
   19e78:	00112e23          	sw	ra,28(sp)
   19e7c:	00812c23          	sw	s0,24(sp)
   19e80:	02010413          	addi	s0,sp,32
   19e84:	fea42623          	sw	a0,-20(s0)
    return (rt_device_t)rt_object_find(name, RT_Object_Class_Device);
   19e88:	00900593          	li	a1,9
   19e8c:	fec42503          	lw	a0,-20(s0)
   19e90:	8f0f70ef          	jal	ra,10f80 <rt_object_find>
   19e94:	00050793          	mv	a5,a0
}
   19e98:	00078513          	mv	a0,a5
   19e9c:	01c12083          	lw	ra,28(sp)
   19ea0:	01812403          	lw	s0,24(sp)
   19ea4:	02010113          	addi	sp,sp,32
   19ea8:	00008067          	ret

00019eac <rt_device_create>:
 * @param attach_size is the size of user data.
 *
 * @return the allocated device object, or RT_NULL when failed.
 */
rt_device_t rt_device_create(int type, int attach_size)
{
   19eac:	fd010113          	addi	sp,sp,-48
   19eb0:	02112623          	sw	ra,44(sp)
   19eb4:	02812423          	sw	s0,40(sp)
   19eb8:	03010413          	addi	s0,sp,48
   19ebc:	fca42e23          	sw	a0,-36(s0)
   19ec0:	fcb42c23          	sw	a1,-40(s0)
    int size;
    rt_device_t device;

    size = RT_ALIGN(sizeof(struct rt_device), RT_ALIGN_SIZE);
   19ec4:	04400793          	li	a5,68
   19ec8:	fef42623          	sw	a5,-20(s0)
    attach_size = RT_ALIGN(attach_size, RT_ALIGN_SIZE);
   19ecc:	fd842783          	lw	a5,-40(s0)
   19ed0:	00378793          	addi	a5,a5,3
   19ed4:	ffc7f793          	andi	a5,a5,-4
   19ed8:	fcf42c23          	sw	a5,-40(s0)
    /* use the total size */
    size += attach_size;
   19edc:	fec42703          	lw	a4,-20(s0)
   19ee0:	fd842783          	lw	a5,-40(s0)
   19ee4:	00f707b3          	add	a5,a4,a5
   19ee8:	fef42623          	sw	a5,-20(s0)

    device = (rt_device_t)rt_malloc(size);
   19eec:	fec42783          	lw	a5,-20(s0)
   19ef0:	00078513          	mv	a0,a5
   19ef4:	d1df80ef          	jal	ra,12c10 <rt_malloc>
   19ef8:	fea42423          	sw	a0,-24(s0)
    if (device)
   19efc:	fe842783          	lw	a5,-24(s0)
   19f00:	02078063          	beqz	a5,19f20 <rt_device_create+0x74>
    {
        rt_memset(device, 0x0, sizeof(struct rt_device));
   19f04:	04400613          	li	a2,68
   19f08:	00000593          	li	a1,0
   19f0c:	fe842503          	lw	a0,-24(s0)
   19f10:	aacf70ef          	jal	ra,111bc <rt_memset>
        device->type = (enum rt_device_class_type)type;
   19f14:	fdc42703          	lw	a4,-36(s0)
   19f18:	fe842783          	lw	a5,-24(s0)
   19f1c:	00e7aa23          	sw	a4,20(a5)
    }

    return device;
   19f20:	fe842783          	lw	a5,-24(s0)
}
   19f24:	00078513          	mv	a0,a5
   19f28:	02c12083          	lw	ra,44(sp)
   19f2c:	02812403          	lw	s0,40(sp)
   19f30:	03010113          	addi	sp,sp,48
   19f34:	00008067          	ret

00019f38 <rt_device_destroy>:
 * @brief This function destroy the specific device object.
 *
 * @param dev is a specific device object.
 */
void rt_device_destroy(rt_device_t dev)
{
   19f38:	fe010113          	addi	sp,sp,-32
   19f3c:	00112e23          	sw	ra,28(sp)
   19f40:	00812c23          	sw	s0,24(sp)
   19f44:	02010413          	addi	s0,sp,32
   19f48:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(dev != RT_NULL);
   19f4c:	fec42783          	lw	a5,-20(s0)
   19f50:	00079e63          	bnez	a5,19f6c <rt_device_destroy+0x34>
   19f54:	09200613          	li	a2,146
   19f58:	00007597          	auipc	a1,0x7
   19f5c:	1c858593          	addi	a1,a1,456 # 21120 <__FUNCTION__.2382>
   19f60:	00007517          	auipc	a0,0x7
   19f64:	0b450513          	addi	a0,a0,180 # 21014 <__FUNCTION__.2484+0x14>
   19f68:	8dcf90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   19f6c:	fec42783          	lw	a5,-20(s0)
   19f70:	00078513          	mv	a0,a5
   19f74:	fb5f60ef          	jal	ra,10f28 <rt_object_get_type>
   19f78:	00050793          	mv	a5,a0
   19f7c:	00078713          	mv	a4,a5
   19f80:	00900793          	li	a5,9
   19f84:	00f70e63          	beq	a4,a5,19fa0 <rt_device_destroy+0x68>
   19f88:	09300613          	li	a2,147
   19f8c:	00007597          	auipc	a1,0x7
   19f90:	19458593          	addi	a1,a1,404 # 21120 <__FUNCTION__.2382>
   19f94:	00007517          	auipc	a0,0x7
   19f98:	09050513          	addi	a0,a0,144 # 21024 <__FUNCTION__.2484+0x24>
   19f9c:	8a8f90ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&dev->parent) == RT_FALSE);
   19fa0:	fec42783          	lw	a5,-20(s0)
   19fa4:	00078513          	mv	a0,a5
   19fa8:	f19f60ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   19fac:	00050793          	mv	a5,a0
   19fb0:	00078e63          	beqz	a5,19fcc <rt_device_destroy+0x94>
   19fb4:	09400613          	li	a2,148
   19fb8:	00007597          	auipc	a1,0x7
   19fbc:	16858593          	addi	a1,a1,360 # 21120 <__FUNCTION__.2382>
   19fc0:	00007517          	auipc	a0,0x7
   19fc4:	0c850513          	addi	a0,a0,200 # 21088 <__FUNCTION__.2484+0x88>
   19fc8:	87cf90ef          	jal	ra,13044 <rt_assert_handler>

    rt_object_detach(&(dev->parent));
   19fcc:	fec42783          	lw	a5,-20(s0)
   19fd0:	00078513          	mv	a0,a5
   19fd4:	c35f60ef          	jal	ra,10c08 <rt_object_detach>

    /* release this device object */
    rt_free(dev);
   19fd8:	fec42503          	lw	a0,-20(s0)
   19fdc:	d71f80ef          	jal	ra,12d4c <rt_free>
}
   19fe0:	00000013          	nop
   19fe4:	01c12083          	lw	ra,28(sp)
   19fe8:	01812403          	lw	s0,24(sp)
   19fec:	02010113          	addi	sp,sp,32
   19ff0:	00008067          	ret

00019ff4 <rt_device_init>:
 * @param dev is the pointer of device driver structure.
 *
 * @return the result, RT_EOK on successfully.
 */
rt_err_t rt_device_init(rt_device_t dev)
{
   19ff4:	fd010113          	addi	sp,sp,-48
   19ff8:	02112623          	sw	ra,44(sp)
   19ffc:	02812423          	sw	s0,40(sp)
   1a000:	03010413          	addi	s0,sp,48
   1a004:	fca42e23          	sw	a0,-36(s0)
    rt_err_t result = RT_EOK;
   1a008:	fe042623          	sw	zero,-20(s0)

    RT_ASSERT(dev != RT_NULL);
   1a00c:	fdc42783          	lw	a5,-36(s0)
   1a010:	00079e63          	bnez	a5,1a02c <rt_device_init+0x38>
   1a014:	0a900613          	li	a2,169
   1a018:	00007597          	auipc	a1,0x7
   1a01c:	11c58593          	addi	a1,a1,284 # 21134 <__FUNCTION__.2387>
   1a020:	00007517          	auipc	a0,0x7
   1a024:	ff450513          	addi	a0,a0,-12 # 21014 <__FUNCTION__.2484+0x14>
   1a028:	81cf90ef          	jal	ra,13044 <rt_assert_handler>

    /* get device_init handler */
    if (device_init != RT_NULL)
   1a02c:	fdc42783          	lw	a5,-36(s0)
   1a030:	0287a783          	lw	a5,40(a5)
   1a034:	06078463          	beqz	a5,1a09c <rt_device_init+0xa8>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
   1a038:	fdc42783          	lw	a5,-36(s0)
   1a03c:	0187d783          	lhu	a5,24(a5)
   1a040:	0107f793          	andi	a5,a5,16
   1a044:	04079c63          	bnez	a5,1a09c <rt_device_init+0xa8>
        {
            result = device_init(dev);
   1a048:	fdc42783          	lw	a5,-36(s0)
   1a04c:	0287a783          	lw	a5,40(a5)
   1a050:	fdc42503          	lw	a0,-36(s0)
   1a054:	000780e7          	jalr	a5
   1a058:	fea42623          	sw	a0,-20(s0)
            if (result != RT_EOK)
   1a05c:	fec42783          	lw	a5,-20(s0)
   1a060:	02078063          	beqz	a5,1a080 <rt_device_init+0x8c>
            {
                rt_kprintf("To initialize device:%s failed. The error code is %d\n",
                           dev->parent.name, result);
   1a064:	fdc42783          	lw	a5,-36(s0)
                rt_kprintf("To initialize device:%s failed. The error code is %d\n",
   1a068:	fec42603          	lw	a2,-20(s0)
   1a06c:	00078593          	mv	a1,a5
   1a070:	00007517          	auipc	a0,0x7
   1a074:	04c50513          	addi	a0,a0,76 # 210bc <__FUNCTION__.2484+0xbc>
   1a078:	889f80ef          	jal	ra,12900 <rt_kprintf>
   1a07c:	0200006f          	j	1a09c <rt_device_init+0xa8>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
   1a080:	fdc42783          	lw	a5,-36(s0)
   1a084:	0187d783          	lhu	a5,24(a5)
   1a088:	0107e793          	ori	a5,a5,16
   1a08c:	01079713          	slli	a4,a5,0x10
   1a090:	01075713          	srli	a4,a4,0x10
   1a094:	fdc42783          	lw	a5,-36(s0)
   1a098:	00e79c23          	sh	a4,24(a5)
            }
        }
    }

    return result;
   1a09c:	fec42783          	lw	a5,-20(s0)
}
   1a0a0:	00078513          	mv	a0,a5
   1a0a4:	02c12083          	lw	ra,44(sp)
   1a0a8:	02812403          	lw	s0,40(sp)
   1a0ac:	03010113          	addi	sp,sp,48
   1a0b0:	00008067          	ret

0001a0b4 <rt_device_open>:
 * @param oflag is the flags for device open.
 *
 * @return the result, RT_EOK on successfully.
 */
rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
   1a0b4:	fd010113          	addi	sp,sp,-48
   1a0b8:	02112623          	sw	ra,44(sp)
   1a0bc:	02812423          	sw	s0,40(sp)
   1a0c0:	03010413          	addi	s0,sp,48
   1a0c4:	fca42e23          	sw	a0,-36(s0)
   1a0c8:	00058793          	mv	a5,a1
   1a0cc:	fcf41d23          	sh	a5,-38(s0)
    rt_err_t result = RT_EOK;
   1a0d0:	fe042623          	sw	zero,-20(s0)

    RT_ASSERT(dev != RT_NULL);
   1a0d4:	fdc42783          	lw	a5,-36(s0)
   1a0d8:	00079e63          	bnez	a5,1a0f4 <rt_device_open+0x40>
   1a0dc:	0cd00613          	li	a2,205
   1a0e0:	00007597          	auipc	a1,0x7
   1a0e4:	06458593          	addi	a1,a1,100 # 21144 <__FUNCTION__.2393>
   1a0e8:	00007517          	auipc	a0,0x7
   1a0ec:	f2c50513          	addi	a0,a0,-212 # 21014 <__FUNCTION__.2484+0x14>
   1a0f0:	f55f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   1a0f4:	fdc42783          	lw	a5,-36(s0)
   1a0f8:	00078513          	mv	a0,a5
   1a0fc:	e2df60ef          	jal	ra,10f28 <rt_object_get_type>
   1a100:	00050793          	mv	a5,a0
   1a104:	00078713          	mv	a4,a5
   1a108:	00900793          	li	a5,9
   1a10c:	00f70e63          	beq	a4,a5,1a128 <rt_device_open+0x74>
   1a110:	0ce00613          	li	a2,206
   1a114:	00007597          	auipc	a1,0x7
   1a118:	03058593          	addi	a1,a1,48 # 21144 <__FUNCTION__.2393>
   1a11c:	00007517          	auipc	a0,0x7
   1a120:	f0850513          	addi	a0,a0,-248 # 21024 <__FUNCTION__.2484+0x24>
   1a124:	f21f80ef          	jal	ra,13044 <rt_assert_handler>

    /* if device is not initialized, initialize it. */
    if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
   1a128:	fdc42783          	lw	a5,-36(s0)
   1a12c:	0187d783          	lhu	a5,24(a5)
   1a130:	0107f793          	andi	a5,a5,16
   1a134:	06079463          	bnez	a5,1a19c <rt_device_open+0xe8>
    {
        if (device_init != RT_NULL)
   1a138:	fdc42783          	lw	a5,-36(s0)
   1a13c:	0287a783          	lw	a5,40(a5)
   1a140:	04078063          	beqz	a5,1a180 <rt_device_open+0xcc>
        {
            result = device_init(dev);
   1a144:	fdc42783          	lw	a5,-36(s0)
   1a148:	0287a783          	lw	a5,40(a5)
   1a14c:	fdc42503          	lw	a0,-36(s0)
   1a150:	000780e7          	jalr	a5
   1a154:	fea42623          	sw	a0,-20(s0)
            if (result != RT_EOK)
   1a158:	fec42783          	lw	a5,-20(s0)
   1a15c:	02078263          	beqz	a5,1a180 <rt_device_open+0xcc>
            {
                rt_kprintf("To initialize device:%s failed. The error code is %d\n",
                           dev->parent.name, result);
   1a160:	fdc42783          	lw	a5,-36(s0)
                rt_kprintf("To initialize device:%s failed. The error code is %d\n",
   1a164:	fec42603          	lw	a2,-20(s0)
   1a168:	00078593          	mv	a1,a5
   1a16c:	00007517          	auipc	a0,0x7
   1a170:	f5050513          	addi	a0,a0,-176 # 210bc <__FUNCTION__.2484+0xbc>
   1a174:	f8cf80ef          	jal	ra,12900 <rt_kprintf>

                return result;
   1a178:	fec42783          	lw	a5,-20(s0)
   1a17c:	1040006f          	j	1a280 <rt_device_open+0x1cc>
            }
        }

        dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
   1a180:	fdc42783          	lw	a5,-36(s0)
   1a184:	0187d783          	lhu	a5,24(a5)
   1a188:	0107e793          	ori	a5,a5,16
   1a18c:	01079713          	slli	a4,a5,0x10
   1a190:	01075713          	srli	a4,a4,0x10
   1a194:	fdc42783          	lw	a5,-36(s0)
   1a198:	00e79c23          	sh	a4,24(a5)
    }

    /* device is a stand alone device and opened */
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
   1a19c:	fdc42783          	lw	a5,-36(s0)
   1a1a0:	0187d783          	lhu	a5,24(a5)
   1a1a4:	0087f793          	andi	a5,a5,8
   1a1a8:	00078e63          	beqz	a5,1a1c4 <rt_device_open+0x110>
        (dev->open_flag & RT_DEVICE_OFLAG_OPEN))
   1a1ac:	fdc42783          	lw	a5,-36(s0)
   1a1b0:	01a7d783          	lhu	a5,26(a5)
   1a1b4:	0087f793          	andi	a5,a5,8
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
   1a1b8:	00078663          	beqz	a5,1a1c4 <rt_device_open+0x110>
    {
        return -RT_EBUSY;
   1a1bc:	ff900793          	li	a5,-7
   1a1c0:	0c00006f          	j	1a280 <rt_device_open+0x1cc>
    }

    /* call device_open interface */
    if (device_open != RT_NULL)
   1a1c4:	fdc42783          	lw	a5,-36(s0)
   1a1c8:	02c7a783          	lw	a5,44(a5)
   1a1cc:	02078263          	beqz	a5,1a1f0 <rt_device_open+0x13c>
    {
        result = device_open(dev, oflag);
   1a1d0:	fdc42783          	lw	a5,-36(s0)
   1a1d4:	02c7a703          	lw	a4,44(a5)
   1a1d8:	fda45783          	lhu	a5,-38(s0)
   1a1dc:	00078593          	mv	a1,a5
   1a1e0:	fdc42503          	lw	a0,-36(s0)
   1a1e4:	000700e7          	jalr	a4
   1a1e8:	fea42623          	sw	a0,-20(s0)
   1a1ec:	0240006f          	j	1a210 <rt_device_open+0x15c>
    }
    else
    {
        /* set open flag */
        dev->open_flag = (oflag & RT_DEVICE_OFLAG_MASK);
   1a1f0:	fda45703          	lhu	a4,-38(s0)
   1a1f4:	000017b7          	lui	a5,0x1
   1a1f8:	f0f78793          	addi	a5,a5,-241 # f0f <__load-0xf0f1>
   1a1fc:	00f777b3          	and	a5,a4,a5
   1a200:	01079713          	slli	a4,a5,0x10
   1a204:	01075713          	srli	a4,a4,0x10
   1a208:	fdc42783          	lw	a5,-36(s0)
   1a20c:	00e79d23          	sh	a4,26(a5)
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
   1a210:	fec42783          	lw	a5,-20(s0)
   1a214:	00078863          	beqz	a5,1a224 <rt_device_open+0x170>
   1a218:	fec42703          	lw	a4,-20(s0)
   1a21c:	ffa00793          	li	a5,-6
   1a220:	04f71e63          	bne	a4,a5,1a27c <rt_device_open+0x1c8>
    {
        dev->open_flag |= RT_DEVICE_OFLAG_OPEN;
   1a224:	fdc42783          	lw	a5,-36(s0)
   1a228:	01a7d783          	lhu	a5,26(a5)
   1a22c:	0087e793          	ori	a5,a5,8
   1a230:	01079713          	slli	a4,a5,0x10
   1a234:	01075713          	srli	a4,a4,0x10
   1a238:	fdc42783          	lw	a5,-36(s0)
   1a23c:	00e79d23          	sh	a4,26(a5)

        dev->ref_count++;
   1a240:	fdc42783          	lw	a5,-36(s0)
   1a244:	01c7c783          	lbu	a5,28(a5)
   1a248:	00178793          	addi	a5,a5,1
   1a24c:	0ff7f713          	andi	a4,a5,255
   1a250:	fdc42783          	lw	a5,-36(s0)
   1a254:	00e78e23          	sb	a4,28(a5)
        /* don't let bad things happen silently. If you are bitten by this assert,
         * please set the ref_count to a bigger type. */
        RT_ASSERT(dev->ref_count != 0);
   1a258:	fdc42783          	lw	a5,-36(s0)
   1a25c:	01c7c783          	lbu	a5,28(a5)
   1a260:	00079e63          	bnez	a5,1a27c <rt_device_open+0x1c8>
   1a264:	0fc00613          	li	a2,252
   1a268:	00007597          	auipc	a1,0x7
   1a26c:	edc58593          	addi	a1,a1,-292 # 21144 <__FUNCTION__.2393>
   1a270:	00007517          	auipc	a0,0x7
   1a274:	e8450513          	addi	a0,a0,-380 # 210f4 <__FUNCTION__.2484+0xf4>
   1a278:	dcdf80ef          	jal	ra,13044 <rt_assert_handler>
    }

    return result;
   1a27c:	fec42783          	lw	a5,-20(s0)
}
   1a280:	00078513          	mv	a0,a5
   1a284:	02c12083          	lw	ra,44(sp)
   1a288:	02812403          	lw	s0,40(sp)
   1a28c:	03010113          	addi	sp,sp,48
   1a290:	00008067          	ret

0001a294 <rt_device_close>:
 * @param dev is the pointer of device driver structure.
 *
 * @return the result, RT_EOK on successfully.
 */
rt_err_t rt_device_close(rt_device_t dev)
{
   1a294:	fd010113          	addi	sp,sp,-48
   1a298:	02112623          	sw	ra,44(sp)
   1a29c:	02812423          	sw	s0,40(sp)
   1a2a0:	03010413          	addi	s0,sp,48
   1a2a4:	fca42e23          	sw	a0,-36(s0)
    rt_err_t result = RT_EOK;
   1a2a8:	fe042623          	sw	zero,-20(s0)

    RT_ASSERT(dev != RT_NULL);
   1a2ac:	fdc42783          	lw	a5,-36(s0)
   1a2b0:	00079e63          	bnez	a5,1a2cc <rt_device_close+0x38>
   1a2b4:	10e00613          	li	a2,270
   1a2b8:	00007597          	auipc	a1,0x7
   1a2bc:	e9c58593          	addi	a1,a1,-356 # 21154 <__FUNCTION__.2398>
   1a2c0:	00007517          	auipc	a0,0x7
   1a2c4:	d5450513          	addi	a0,a0,-684 # 21014 <__FUNCTION__.2484+0x14>
   1a2c8:	d7df80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   1a2cc:	fdc42783          	lw	a5,-36(s0)
   1a2d0:	00078513          	mv	a0,a5
   1a2d4:	c55f60ef          	jal	ra,10f28 <rt_object_get_type>
   1a2d8:	00050793          	mv	a5,a0
   1a2dc:	00078713          	mv	a4,a5
   1a2e0:	00900793          	li	a5,9
   1a2e4:	00f70e63          	beq	a4,a5,1a300 <rt_device_close+0x6c>
   1a2e8:	10f00613          	li	a2,271
   1a2ec:	00007597          	auipc	a1,0x7
   1a2f0:	e6858593          	addi	a1,a1,-408 # 21154 <__FUNCTION__.2398>
   1a2f4:	00007517          	auipc	a0,0x7
   1a2f8:	d3050513          	addi	a0,a0,-720 # 21024 <__FUNCTION__.2484+0x24>
   1a2fc:	d49f80ef          	jal	ra,13044 <rt_assert_handler>

    if (dev->ref_count == 0)
   1a300:	fdc42783          	lw	a5,-36(s0)
   1a304:	01c7c783          	lbu	a5,28(a5)
   1a308:	00079663          	bnez	a5,1a314 <rt_device_close+0x80>
        return -RT_ERROR;
   1a30c:	fff00793          	li	a5,-1
   1a310:	0700006f          	j	1a380 <rt_device_close+0xec>

    dev->ref_count--;
   1a314:	fdc42783          	lw	a5,-36(s0)
   1a318:	01c7c783          	lbu	a5,28(a5)
   1a31c:	fff78793          	addi	a5,a5,-1
   1a320:	0ff7f713          	andi	a4,a5,255
   1a324:	fdc42783          	lw	a5,-36(s0)
   1a328:	00e78e23          	sb	a4,28(a5)

    if (dev->ref_count != 0)
   1a32c:	fdc42783          	lw	a5,-36(s0)
   1a330:	01c7c783          	lbu	a5,28(a5)
   1a334:	00078663          	beqz	a5,1a340 <rt_device_close+0xac>
        return RT_EOK;
   1a338:	00000793          	li	a5,0
   1a33c:	0440006f          	j	1a380 <rt_device_close+0xec>

    /* call device_close interface */
    if (device_close != RT_NULL)
   1a340:	fdc42783          	lw	a5,-36(s0)
   1a344:	0307a783          	lw	a5,48(a5)
   1a348:	00078c63          	beqz	a5,1a360 <rt_device_close+0xcc>
    {
        result = device_close(dev);
   1a34c:	fdc42783          	lw	a5,-36(s0)
   1a350:	0307a783          	lw	a5,48(a5)
   1a354:	fdc42503          	lw	a0,-36(s0)
   1a358:	000780e7          	jalr	a5
   1a35c:	fea42623          	sw	a0,-20(s0)
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
   1a360:	fec42783          	lw	a5,-20(s0)
   1a364:	00078863          	beqz	a5,1a374 <rt_device_close+0xe0>
   1a368:	fec42703          	lw	a4,-20(s0)
   1a36c:	ffa00793          	li	a5,-6
   1a370:	00f71663          	bne	a4,a5,1a37c <rt_device_close+0xe8>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
   1a374:	fdc42783          	lw	a5,-36(s0)
   1a378:	00079d23          	sh	zero,26(a5)

    return result;
   1a37c:	fec42783          	lw	a5,-20(s0)
}
   1a380:	00078513          	mv	a0,a5
   1a384:	02c12083          	lw	ra,44(sp)
   1a388:	02812403          	lw	s0,40(sp)
   1a38c:	03010113          	addi	sp,sp,48
   1a390:	00008067          	ret

0001a394 <rt_device_read>:
 */
rt_size_t rt_device_read(rt_device_t dev,
                         rt_off_t    pos,
                         void       *buffer,
                         rt_size_t   size)
{
   1a394:	fe010113          	addi	sp,sp,-32
   1a398:	00112e23          	sw	ra,28(sp)
   1a39c:	00812c23          	sw	s0,24(sp)
   1a3a0:	02010413          	addi	s0,sp,32
   1a3a4:	fea42623          	sw	a0,-20(s0)
   1a3a8:	feb42423          	sw	a1,-24(s0)
   1a3ac:	fec42223          	sw	a2,-28(s0)
   1a3b0:	fed42023          	sw	a3,-32(s0)
    RT_ASSERT(dev != RT_NULL);
   1a3b4:	fec42783          	lw	a5,-20(s0)
   1a3b8:	00079e63          	bnez	a5,1a3d4 <rt_device_read+0x40>
   1a3bc:	13b00613          	li	a2,315
   1a3c0:	00007597          	auipc	a1,0x7
   1a3c4:	da458593          	addi	a1,a1,-604 # 21164 <__FUNCTION__.2405>
   1a3c8:	00007517          	auipc	a0,0x7
   1a3cc:	c4c50513          	addi	a0,a0,-948 # 21014 <__FUNCTION__.2484+0x14>
   1a3d0:	c75f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   1a3d4:	fec42783          	lw	a5,-20(s0)
   1a3d8:	00078513          	mv	a0,a5
   1a3dc:	b4df60ef          	jal	ra,10f28 <rt_object_get_type>
   1a3e0:	00050793          	mv	a5,a0
   1a3e4:	00078713          	mv	a4,a5
   1a3e8:	00900793          	li	a5,9
   1a3ec:	00f70e63          	beq	a4,a5,1a408 <rt_device_read+0x74>
   1a3f0:	13c00613          	li	a2,316
   1a3f4:	00007597          	auipc	a1,0x7
   1a3f8:	d7058593          	addi	a1,a1,-656 # 21164 <__FUNCTION__.2405>
   1a3fc:	00007517          	auipc	a0,0x7
   1a400:	c2850513          	addi	a0,a0,-984 # 21024 <__FUNCTION__.2484+0x24>
   1a404:	c41f80ef          	jal	ra,13044 <rt_assert_handler>

    if (dev->ref_count == 0)
   1a408:	fec42783          	lw	a5,-20(s0)
   1a40c:	01c7c783          	lbu	a5,28(a5)
   1a410:	00079a63          	bnez	a5,1a424 <rt_device_read+0x90>
    {
        rt_set_errno(-RT_ERROR);
   1a414:	fff00513          	li	a0,-1
   1a418:	ce1f60ef          	jal	ra,110f8 <rt_set_errno>
        return 0;
   1a41c:	00000793          	li	a5,0
   1a420:	0400006f          	j	1a460 <rt_device_read+0xcc>
    }

    /* call device_read interface */
    if (device_read != RT_NULL)
   1a424:	fec42783          	lw	a5,-20(s0)
   1a428:	0347a783          	lw	a5,52(a5)
   1a42c:	02078463          	beqz	a5,1a454 <rt_device_read+0xc0>
    {
        return device_read(dev, pos, buffer, size);
   1a430:	fec42783          	lw	a5,-20(s0)
   1a434:	0347a783          	lw	a5,52(a5)
   1a438:	fe042683          	lw	a3,-32(s0)
   1a43c:	fe442603          	lw	a2,-28(s0)
   1a440:	fe842583          	lw	a1,-24(s0)
   1a444:	fec42503          	lw	a0,-20(s0)
   1a448:	000780e7          	jalr	a5
   1a44c:	00050793          	mv	a5,a0
   1a450:	0100006f          	j	1a460 <rt_device_read+0xcc>
    }

    /* set error code */
    rt_set_errno(-RT_ENOSYS);
   1a454:	ffa00513          	li	a0,-6
   1a458:	ca1f60ef          	jal	ra,110f8 <rt_set_errno>

    return 0;
   1a45c:	00000793          	li	a5,0
}
   1a460:	00078513          	mv	a0,a5
   1a464:	01c12083          	lw	ra,28(sp)
   1a468:	01812403          	lw	s0,24(sp)
   1a46c:	02010113          	addi	sp,sp,32
   1a470:	00008067          	ret

0001a474 <rt_device_write>:
 */
rt_size_t rt_device_write(rt_device_t dev,
                          rt_off_t    pos,
                          const void *buffer,
                          rt_size_t   size)
{
   1a474:	fe010113          	addi	sp,sp,-32
   1a478:	00112e23          	sw	ra,28(sp)
   1a47c:	00812c23          	sw	s0,24(sp)
   1a480:	02010413          	addi	s0,sp,32
   1a484:	fea42623          	sw	a0,-20(s0)
   1a488:	feb42423          	sw	a1,-24(s0)
   1a48c:	fec42223          	sw	a2,-28(s0)
   1a490:	fed42023          	sw	a3,-32(s0)
    RT_ASSERT(dev != RT_NULL);
   1a494:	fec42783          	lw	a5,-20(s0)
   1a498:	00079e63          	bnez	a5,1a4b4 <rt_device_write+0x40>
   1a49c:	16500613          	li	a2,357
   1a4a0:	00007597          	auipc	a1,0x7
   1a4a4:	cd458593          	addi	a1,a1,-812 # 21174 <__FUNCTION__.2412>
   1a4a8:	00007517          	auipc	a0,0x7
   1a4ac:	b6c50513          	addi	a0,a0,-1172 # 21014 <__FUNCTION__.2484+0x14>
   1a4b0:	b95f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   1a4b4:	fec42783          	lw	a5,-20(s0)
   1a4b8:	00078513          	mv	a0,a5
   1a4bc:	a6df60ef          	jal	ra,10f28 <rt_object_get_type>
   1a4c0:	00050793          	mv	a5,a0
   1a4c4:	00078713          	mv	a4,a5
   1a4c8:	00900793          	li	a5,9
   1a4cc:	00f70e63          	beq	a4,a5,1a4e8 <rt_device_write+0x74>
   1a4d0:	16600613          	li	a2,358
   1a4d4:	00007597          	auipc	a1,0x7
   1a4d8:	ca058593          	addi	a1,a1,-864 # 21174 <__FUNCTION__.2412>
   1a4dc:	00007517          	auipc	a0,0x7
   1a4e0:	b4850513          	addi	a0,a0,-1208 # 21024 <__FUNCTION__.2484+0x24>
   1a4e4:	b61f80ef          	jal	ra,13044 <rt_assert_handler>

    if (dev->ref_count == 0)
   1a4e8:	fec42783          	lw	a5,-20(s0)
   1a4ec:	01c7c783          	lbu	a5,28(a5)
   1a4f0:	00079a63          	bnez	a5,1a504 <rt_device_write+0x90>
    {
        rt_set_errno(-RT_ERROR);
   1a4f4:	fff00513          	li	a0,-1
   1a4f8:	c01f60ef          	jal	ra,110f8 <rt_set_errno>
        return 0;
   1a4fc:	00000793          	li	a5,0
   1a500:	0400006f          	j	1a540 <rt_device_write+0xcc>
    }

    /* call device_write interface */
    if (device_write != RT_NULL)
   1a504:	fec42783          	lw	a5,-20(s0)
   1a508:	0387a783          	lw	a5,56(a5)
   1a50c:	02078463          	beqz	a5,1a534 <rt_device_write+0xc0>
    {
        return device_write(dev, pos, buffer, size);
   1a510:	fec42783          	lw	a5,-20(s0)
   1a514:	0387a783          	lw	a5,56(a5)
   1a518:	fe042683          	lw	a3,-32(s0)
   1a51c:	fe442603          	lw	a2,-28(s0)
   1a520:	fe842583          	lw	a1,-24(s0)
   1a524:	fec42503          	lw	a0,-20(s0)
   1a528:	000780e7          	jalr	a5
   1a52c:	00050793          	mv	a5,a0
   1a530:	0100006f          	j	1a540 <rt_device_write+0xcc>
    }

    /* set error code */
    rt_set_errno(-RT_ENOSYS);
   1a534:	ffa00513          	li	a0,-6
   1a538:	bc1f60ef          	jal	ra,110f8 <rt_set_errno>

    return 0;
   1a53c:	00000793          	li	a5,0
}
   1a540:	00078513          	mv	a0,a5
   1a544:	01c12083          	lw	ra,28(sp)
   1a548:	01812403          	lw	s0,24(sp)
   1a54c:	02010113          	addi	sp,sp,32
   1a550:	00008067          	ret

0001a554 <rt_device_control>:
 * @param arg is the argument of command.
 *
 * @return the result, -RT_ENOSYS for failed.
 */
rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
   1a554:	fe010113          	addi	sp,sp,-32
   1a558:	00112e23          	sw	ra,28(sp)
   1a55c:	00812c23          	sw	s0,24(sp)
   1a560:	02010413          	addi	s0,sp,32
   1a564:	fea42623          	sw	a0,-20(s0)
   1a568:	feb42423          	sw	a1,-24(s0)
   1a56c:	fec42223          	sw	a2,-28(s0)
    RT_ASSERT(dev != RT_NULL);
   1a570:	fec42783          	lw	a5,-20(s0)
   1a574:	00079e63          	bnez	a5,1a590 <rt_device_control+0x3c>
   1a578:	18800613          	li	a2,392
   1a57c:	00007597          	auipc	a1,0x7
   1a580:	c0858593          	addi	a1,a1,-1016 # 21184 <__FUNCTION__.2418>
   1a584:	00007517          	auipc	a0,0x7
   1a588:	a9050513          	addi	a0,a0,-1392 # 21014 <__FUNCTION__.2484+0x14>
   1a58c:	ab9f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   1a590:	fec42783          	lw	a5,-20(s0)
   1a594:	00078513          	mv	a0,a5
   1a598:	991f60ef          	jal	ra,10f28 <rt_object_get_type>
   1a59c:	00050793          	mv	a5,a0
   1a5a0:	00078713          	mv	a4,a5
   1a5a4:	00900793          	li	a5,9
   1a5a8:	00f70e63          	beq	a4,a5,1a5c4 <rt_device_control+0x70>
   1a5ac:	18900613          	li	a2,393
   1a5b0:	00007597          	auipc	a1,0x7
   1a5b4:	bd458593          	addi	a1,a1,-1068 # 21184 <__FUNCTION__.2418>
   1a5b8:	00007517          	auipc	a0,0x7
   1a5bc:	a6c50513          	addi	a0,a0,-1428 # 21024 <__FUNCTION__.2484+0x24>
   1a5c0:	a85f80ef          	jal	ra,13044 <rt_assert_handler>

    /* call device_write interface */
    if (device_control != RT_NULL)
   1a5c4:	fec42783          	lw	a5,-20(s0)
   1a5c8:	03c7a783          	lw	a5,60(a5)
   1a5cc:	02078263          	beqz	a5,1a5f0 <rt_device_control+0x9c>
    {
        return device_control(dev, cmd, arg);
   1a5d0:	fec42783          	lw	a5,-20(s0)
   1a5d4:	03c7a783          	lw	a5,60(a5)
   1a5d8:	fe442603          	lw	a2,-28(s0)
   1a5dc:	fe842583          	lw	a1,-24(s0)
   1a5e0:	fec42503          	lw	a0,-20(s0)
   1a5e4:	000780e7          	jalr	a5
   1a5e8:	00050793          	mv	a5,a0
   1a5ec:	0080006f          	j	1a5f4 <rt_device_control+0xa0>
    }

    return -RT_ENOSYS;
   1a5f0:	ffa00793          	li	a5,-6
}
   1a5f4:	00078513          	mv	a0,a5
   1a5f8:	01c12083          	lw	ra,28(sp)
   1a5fc:	01812403          	lw	s0,24(sp)
   1a600:	02010113          	addi	sp,sp,32
   1a604:	00008067          	ret

0001a608 <rt_device_set_rx_indicate>:
 * @return RT_EOK
 */
rt_err_t
rt_device_set_rx_indicate(rt_device_t dev,
                          rt_err_t (*rx_ind)(rt_device_t dev, rt_size_t size))
{
   1a608:	fe010113          	addi	sp,sp,-32
   1a60c:	00112e23          	sw	ra,28(sp)
   1a610:	00812c23          	sw	s0,24(sp)
   1a614:	02010413          	addi	s0,sp,32
   1a618:	fea42623          	sw	a0,-20(s0)
   1a61c:	feb42423          	sw	a1,-24(s0)
    RT_ASSERT(dev != RT_NULL);
   1a620:	fec42783          	lw	a5,-20(s0)
   1a624:	00079e63          	bnez	a5,1a640 <rt_device_set_rx_indicate+0x38>
   1a628:	1a300613          	li	a2,419
   1a62c:	00007597          	auipc	a1,0x7
   1a630:	b6c58593          	addi	a1,a1,-1172 # 21198 <__FUNCTION__.2425>
   1a634:	00007517          	auipc	a0,0x7
   1a638:	9e050513          	addi	a0,a0,-1568 # 21014 <__FUNCTION__.2484+0x14>
   1a63c:	a09f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   1a640:	fec42783          	lw	a5,-20(s0)
   1a644:	00078513          	mv	a0,a5
   1a648:	8e1f60ef          	jal	ra,10f28 <rt_object_get_type>
   1a64c:	00050793          	mv	a5,a0
   1a650:	00078713          	mv	a4,a5
   1a654:	00900793          	li	a5,9
   1a658:	00f70e63          	beq	a4,a5,1a674 <rt_device_set_rx_indicate+0x6c>
   1a65c:	1a400613          	li	a2,420
   1a660:	00007597          	auipc	a1,0x7
   1a664:	b3858593          	addi	a1,a1,-1224 # 21198 <__FUNCTION__.2425>
   1a668:	00007517          	auipc	a0,0x7
   1a66c:	9bc50513          	addi	a0,a0,-1604 # 21024 <__FUNCTION__.2484+0x24>
   1a670:	9d5f80ef          	jal	ra,13044 <rt_assert_handler>

    dev->rx_indicate = rx_ind;
   1a674:	fec42783          	lw	a5,-20(s0)
   1a678:	fe842703          	lw	a4,-24(s0)
   1a67c:	02e7a023          	sw	a4,32(a5)

    return RT_EOK;
   1a680:	00000793          	li	a5,0
}
   1a684:	00078513          	mv	a0,a5
   1a688:	01c12083          	lw	ra,28(sp)
   1a68c:	01812403          	lw	s0,24(sp)
   1a690:	02010113          	addi	sp,sp,32
   1a694:	00008067          	ret

0001a698 <rt_device_set_tx_complete>:
 * @return RT_EOK
 */
rt_err_t
rt_device_set_tx_complete(rt_device_t dev,
                          rt_err_t (*tx_done)(rt_device_t dev, void *buffer))
{
   1a698:	fe010113          	addi	sp,sp,-32
   1a69c:	00112e23          	sw	ra,28(sp)
   1a6a0:	00812c23          	sw	s0,24(sp)
   1a6a4:	02010413          	addi	s0,sp,32
   1a6a8:	fea42623          	sw	a0,-20(s0)
   1a6ac:	feb42423          	sw	a1,-24(s0)
    RT_ASSERT(dev != RT_NULL);
   1a6b0:	fec42783          	lw	a5,-20(s0)
   1a6b4:	00079e63          	bnez	a5,1a6d0 <rt_device_set_tx_complete+0x38>
   1a6b8:	1ba00613          	li	a2,442
   1a6bc:	00007597          	auipc	a1,0x7
   1a6c0:	af858593          	addi	a1,a1,-1288 # 211b4 <__FUNCTION__.2432>
   1a6c4:	00007517          	auipc	a0,0x7
   1a6c8:	95050513          	addi	a0,a0,-1712 # 21014 <__FUNCTION__.2484+0x14>
   1a6cc:	979f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
   1a6d0:	fec42783          	lw	a5,-20(s0)
   1a6d4:	00078513          	mv	a0,a5
   1a6d8:	851f60ef          	jal	ra,10f28 <rt_object_get_type>
   1a6dc:	00050793          	mv	a5,a0
   1a6e0:	00078713          	mv	a4,a5
   1a6e4:	00900793          	li	a5,9
   1a6e8:	00f70e63          	beq	a4,a5,1a704 <rt_device_set_tx_complete+0x6c>
   1a6ec:	1bb00613          	li	a2,443
   1a6f0:	00007597          	auipc	a1,0x7
   1a6f4:	ac458593          	addi	a1,a1,-1340 # 211b4 <__FUNCTION__.2432>
   1a6f8:	00007517          	auipc	a0,0x7
   1a6fc:	92c50513          	addi	a0,a0,-1748 # 21024 <__FUNCTION__.2484+0x24>
   1a700:	945f80ef          	jal	ra,13044 <rt_assert_handler>

    dev->tx_complete = tx_done;
   1a704:	fec42783          	lw	a5,-20(s0)
   1a708:	fe842703          	lw	a4,-24(s0)
   1a70c:	02e7a223          	sw	a4,36(a5)

    return RT_EOK;
   1a710:	00000793          	li	a5,0
}
   1a714:	00078513          	mv	a0,a5
   1a718:	01c12083          	lw	ra,28(sp)
   1a71c:	01812403          	lw	s0,24(sp)
   1a720:	02010113          	addi	sp,sp,32
   1a724:	00008067          	ret

0001a728 <rt_list_init>:
{
   1a728:	fe010113          	addi	sp,sp,-32
   1a72c:	00812e23          	sw	s0,28(sp)
   1a730:	02010413          	addi	s0,sp,32
   1a734:	fea42623          	sw	a0,-20(s0)
    l->next = l->prev = l;
   1a738:	fec42783          	lw	a5,-20(s0)
   1a73c:	fec42703          	lw	a4,-20(s0)
   1a740:	00e7a223          	sw	a4,4(a5)
   1a744:	fec42783          	lw	a5,-20(s0)
   1a748:	0047a703          	lw	a4,4(a5)
   1a74c:	fec42783          	lw	a5,-20(s0)
   1a750:	00e7a023          	sw	a4,0(a5)
}
   1a754:	00000013          	nop
   1a758:	01c12403          	lw	s0,28(sp)
   1a75c:	02010113          	addi	sp,sp,32
   1a760:	00008067          	ret

0001a764 <rt_list_insert_after>:
{
   1a764:	fe010113          	addi	sp,sp,-32
   1a768:	00812e23          	sw	s0,28(sp)
   1a76c:	02010413          	addi	s0,sp,32
   1a770:	fea42623          	sw	a0,-20(s0)
   1a774:	feb42423          	sw	a1,-24(s0)
    l->next->prev = n;
   1a778:	fec42783          	lw	a5,-20(s0)
   1a77c:	0007a783          	lw	a5,0(a5)
   1a780:	fe842703          	lw	a4,-24(s0)
   1a784:	00e7a223          	sw	a4,4(a5)
    n->next = l->next;
   1a788:	fec42783          	lw	a5,-20(s0)
   1a78c:	0007a703          	lw	a4,0(a5)
   1a790:	fe842783          	lw	a5,-24(s0)
   1a794:	00e7a023          	sw	a4,0(a5)
    l->next = n;
   1a798:	fec42783          	lw	a5,-20(s0)
   1a79c:	fe842703          	lw	a4,-24(s0)
   1a7a0:	00e7a023          	sw	a4,0(a5)
    n->prev = l;
   1a7a4:	fe842783          	lw	a5,-24(s0)
   1a7a8:	fec42703          	lw	a4,-20(s0)
   1a7ac:	00e7a223          	sw	a4,4(a5)
}
   1a7b0:	00000013          	nop
   1a7b4:	01c12403          	lw	s0,28(sp)
   1a7b8:	02010113          	addi	sp,sp,32
   1a7bc:	00008067          	ret

0001a7c0 <rt_list_remove>:
{
   1a7c0:	fe010113          	addi	sp,sp,-32
   1a7c4:	00812e23          	sw	s0,28(sp)
   1a7c8:	02010413          	addi	s0,sp,32
   1a7cc:	fea42623          	sw	a0,-20(s0)
    n->next->prev = n->prev;
   1a7d0:	fec42783          	lw	a5,-20(s0)
   1a7d4:	0007a783          	lw	a5,0(a5)
   1a7d8:	fec42703          	lw	a4,-20(s0)
   1a7dc:	00472703          	lw	a4,4(a4)
   1a7e0:	00e7a223          	sw	a4,4(a5)
    n->prev->next = n->next;
   1a7e4:	fec42783          	lw	a5,-20(s0)
   1a7e8:	0047a783          	lw	a5,4(a5)
   1a7ec:	fec42703          	lw	a4,-20(s0)
   1a7f0:	00072703          	lw	a4,0(a4)
   1a7f4:	00e7a023          	sw	a4,0(a5)
    n->next = n->prev = n;
   1a7f8:	fec42783          	lw	a5,-20(s0)
   1a7fc:	fec42703          	lw	a4,-20(s0)
   1a800:	00e7a223          	sw	a4,4(a5)
   1a804:	fec42783          	lw	a5,-20(s0)
   1a808:	0047a703          	lw	a4,4(a5)
   1a80c:	fec42783          	lw	a5,-20(s0)
   1a810:	00e7a023          	sw	a4,0(a5)
}
   1a814:	00000013          	nop
   1a818:	01c12403          	lw	s0,28(sp)
   1a81c:	02010113          	addi	sp,sp,32
   1a820:	00008067          	ret

0001a824 <rt_list_isempty>:
{
   1a824:	fe010113          	addi	sp,sp,-32
   1a828:	00812e23          	sw	s0,28(sp)
   1a82c:	02010413          	addi	s0,sp,32
   1a830:	fea42623          	sw	a0,-20(s0)
    return l->next == l;
   1a834:	fec42783          	lw	a5,-20(s0)
   1a838:	0007a783          	lw	a5,0(a5)
   1a83c:	fec42703          	lw	a4,-20(s0)
   1a840:	40f707b3          	sub	a5,a4,a5
   1a844:	0017b793          	seqz	a5,a5
   1a848:	0ff7f793          	andi	a5,a5,255
}
   1a84c:	00078513          	mv	a0,a5
   1a850:	01c12403          	lw	s0,28(sp)
   1a854:	02010113          	addi	sp,sp,32
   1a858:	00008067          	ret

0001a85c <rt_timer_enter_sethook>:
 *        which will be invoked when enter timer timeout callback function.
 *
 * @param hook is the function point of timer
 */
void rt_timer_enter_sethook(void (*hook)(struct rt_timer *timer))
{
   1a85c:	fe010113          	addi	sp,sp,-32
   1a860:	00812e23          	sw	s0,28(sp)
   1a864:	02010413          	addi	s0,sp,32
   1a868:	fea42623          	sw	a0,-20(s0)
    rt_timer_enter_hook = hook;
   1a86c:	bbc18793          	addi	a5,gp,-1092 # 2271c <rt_timer_enter_hook>
   1a870:	fec42703          	lw	a4,-20(s0)
   1a874:	00e7a023          	sw	a4,0(a5)
}
   1a878:	00000013          	nop
   1a87c:	01c12403          	lw	s0,28(sp)
   1a880:	02010113          	addi	sp,sp,32
   1a884:	00008067          	ret

0001a888 <rt_timer_exit_sethook>:
 *        invoked when exit timer timeout callback function.
 *
 * @param hook is the function point of timer
 */
void rt_timer_exit_sethook(void (*hook)(struct rt_timer *timer))
{
   1a888:	fe010113          	addi	sp,sp,-32
   1a88c:	00812e23          	sw	s0,28(sp)
   1a890:	02010413          	addi	s0,sp,32
   1a894:	fea42623          	sw	a0,-20(s0)
    rt_timer_exit_hook = hook;
   1a898:	bc018793          	addi	a5,gp,-1088 # 22720 <rt_timer_exit_hook>
   1a89c:	fec42703          	lw	a4,-20(s0)
   1a8a0:	00e7a023          	sw	a4,0(a5)
}
   1a8a4:	00000013          	nop
   1a8a8:	01c12403          	lw	s0,28(sp)
   1a8ac:	02010113          	addi	sp,sp,32
   1a8b0:	00008067          	ret

0001a8b4 <_timer_init>:
static void _timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
   1a8b4:	fc010113          	addi	sp,sp,-64
   1a8b8:	02112e23          	sw	ra,60(sp)
   1a8bc:	02812c23          	sw	s0,56(sp)
   1a8c0:	04010413          	addi	s0,sp,64
   1a8c4:	fca42e23          	sw	a0,-36(s0)
   1a8c8:	fcb42c23          	sw	a1,-40(s0)
   1a8cc:	fcc42a23          	sw	a2,-44(s0)
   1a8d0:	fcd42823          	sw	a3,-48(s0)
   1a8d4:	00070793          	mv	a5,a4
   1a8d8:	fcf407a3          	sb	a5,-49(s0)
    int i;

    /* set flag */
    timer->parent.flag  = flag;
   1a8dc:	fdc42783          	lw	a5,-36(s0)
   1a8e0:	fcf44703          	lbu	a4,-49(s0)
   1a8e4:	00e784a3          	sb	a4,9(a5)

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1a8e8:	fdc42783          	lw	a5,-36(s0)
   1a8ec:	0097c783          	lbu	a5,9(a5)
   1a8f0:	ffe7f793          	andi	a5,a5,-2
   1a8f4:	0ff7f713          	andi	a4,a5,255
   1a8f8:	fdc42783          	lw	a5,-36(s0)
   1a8fc:	00e784a3          	sb	a4,9(a5)

    timer->timeout_func = timeout;
   1a900:	fdc42783          	lw	a5,-36(s0)
   1a904:	fd842703          	lw	a4,-40(s0)
   1a908:	00e7ae23          	sw	a4,28(a5)
    timer->parameter    = parameter;
   1a90c:	fdc42783          	lw	a5,-36(s0)
   1a910:	fd442703          	lw	a4,-44(s0)
   1a914:	02e7a023          	sw	a4,32(a5)

    timer->timeout_tick = 0;
   1a918:	fdc42783          	lw	a5,-36(s0)
   1a91c:	0207a423          	sw	zero,40(a5)
    timer->init_tick    = time;
   1a920:	fdc42783          	lw	a5,-36(s0)
   1a924:	fd042703          	lw	a4,-48(s0)
   1a928:	02e7a223          	sw	a4,36(a5)

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
   1a92c:	fe042623          	sw	zero,-20(s0)
   1a930:	0300006f          	j	1a960 <_timer_init+0xac>
    {
        rt_list_init(&(timer->row[i]));
   1a934:	fec42783          	lw	a5,-20(s0)
   1a938:	00278793          	addi	a5,a5,2
   1a93c:	00379793          	slli	a5,a5,0x3
   1a940:	fdc42703          	lw	a4,-36(s0)
   1a944:	00f707b3          	add	a5,a4,a5
   1a948:	00478793          	addi	a5,a5,4
   1a94c:	00078513          	mv	a0,a5
   1a950:	dd9ff0ef          	jal	ra,1a728 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
   1a954:	fec42783          	lw	a5,-20(s0)
   1a958:	00178793          	addi	a5,a5,1
   1a95c:	fef42623          	sw	a5,-20(s0)
   1a960:	fec42783          	lw	a5,-20(s0)
   1a964:	fcf058e3          	blez	a5,1a934 <_timer_init+0x80>
    }
}
   1a968:	00000013          	nop
   1a96c:	00000013          	nop
   1a970:	03c12083          	lw	ra,60(sp)
   1a974:	03812403          	lw	s0,56(sp)
   1a978:	04010113          	addi	sp,sp,64
   1a97c:	00008067          	ret

0001a980 <_timer_list_next_timeout>:
 * @param timer_list is the array of time list
 *
 * @return the next timer's ticks
 */
static rt_tick_t _timer_list_next_timeout(rt_list_t timer_list[])
{
   1a980:	fd010113          	addi	sp,sp,-48
   1a984:	02112623          	sw	ra,44(sp)
   1a988:	02812423          	sw	s0,40(sp)
   1a98c:	02912223          	sw	s1,36(sp)
   1a990:	03010413          	addi	s0,sp,48
   1a994:	fca42e23          	sw	a0,-36(s0)
    struct rt_timer *timer;
    register rt_base_t level;
    rt_tick_t timeout_tick = RT_TICK_MAX;
   1a998:	fff00793          	li	a5,-1
   1a99c:	fef42623          	sw	a5,-20(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1a9a0:	4a8010ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1a9a4:	00050493          	mv	s1,a0

    if (!rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
   1a9a8:	fdc42503          	lw	a0,-36(s0)
   1a9ac:	e79ff0ef          	jal	ra,1a824 <rt_list_isempty>
   1a9b0:	00050793          	mv	a5,a0
   1a9b4:	02079063          	bnez	a5,1a9d4 <_timer_list_next_timeout+0x54>
    {
        timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
   1a9b8:	fdc42783          	lw	a5,-36(s0)
   1a9bc:	0007a783          	lw	a5,0(a5)
   1a9c0:	fec78793          	addi	a5,a5,-20
   1a9c4:	fef42423          	sw	a5,-24(s0)
                              struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
        timeout_tick = timer->timeout_tick;
   1a9c8:	fe842783          	lw	a5,-24(s0)
   1a9cc:	0287a783          	lw	a5,40(a5)
   1a9d0:	fef42623          	sw	a5,-20(s0)
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1a9d4:	00048513          	mv	a0,s1
   1a9d8:	478010ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return timeout_tick;
   1a9dc:	fec42783          	lw	a5,-20(s0)
}
   1a9e0:	00078513          	mv	a0,a5
   1a9e4:	02c12083          	lw	ra,44(sp)
   1a9e8:	02812403          	lw	s0,40(sp)
   1a9ec:	02412483          	lw	s1,36(sp)
   1a9f0:	03010113          	addi	sp,sp,48
   1a9f4:	00008067          	ret

0001a9f8 <_timer_remove>:
 * @brief Remove the timer
 *
 * @param timer the point of the timer
 */
rt_inline void _timer_remove(rt_timer_t timer)
{
   1a9f8:	fd010113          	addi	sp,sp,-48
   1a9fc:	02112623          	sw	ra,44(sp)
   1aa00:	02812423          	sw	s0,40(sp)
   1aa04:	03010413          	addi	s0,sp,48
   1aa08:	fca42e23          	sw	a0,-36(s0)
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
   1aa0c:	fe042623          	sw	zero,-20(s0)
   1aa10:	0300006f          	j	1aa40 <_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
   1aa14:	fec42783          	lw	a5,-20(s0)
   1aa18:	00278793          	addi	a5,a5,2
   1aa1c:	00379793          	slli	a5,a5,0x3
   1aa20:	fdc42703          	lw	a4,-36(s0)
   1aa24:	00f707b3          	add	a5,a4,a5
   1aa28:	00478793          	addi	a5,a5,4
   1aa2c:	00078513          	mv	a0,a5
   1aa30:	d91ff0ef          	jal	ra,1a7c0 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
   1aa34:	fec42783          	lw	a5,-20(s0)
   1aa38:	00178793          	addi	a5,a5,1
   1aa3c:	fef42623          	sw	a5,-20(s0)
   1aa40:	fec42783          	lw	a5,-20(s0)
   1aa44:	fcf058e3          	blez	a5,1aa14 <_timer_remove+0x1c>
    }
}
   1aa48:	00000013          	nop
   1aa4c:	00000013          	nop
   1aa50:	02c12083          	lw	ra,44(sp)
   1aa54:	02812403          	lw	s0,40(sp)
   1aa58:	03010113          	addi	sp,sp,48
   1aa5c:	00008067          	ret

0001aa60 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
   1aa60:	fd010113          	addi	sp,sp,-48
   1aa64:	02112623          	sw	ra,44(sp)
   1aa68:	02812423          	sw	s0,40(sp)
   1aa6c:	03010413          	addi	s0,sp,48
   1aa70:	fea42623          	sw	a0,-20(s0)
   1aa74:	feb42423          	sw	a1,-24(s0)
   1aa78:	fec42223          	sw	a2,-28(s0)
   1aa7c:	fed42023          	sw	a3,-32(s0)
   1aa80:	fce42e23          	sw	a4,-36(s0)
   1aa84:	fcf40da3          	sb	a5,-37(s0)
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
   1aa88:	fec42783          	lw	a5,-20(s0)
   1aa8c:	00079e63          	bnez	a5,1aaa8 <rt_timer_init+0x48>
   1aa90:	0f700613          	li	a2,247
   1aa94:	00007597          	auipc	a1,0x7
   1aa98:	83058593          	addi	a1,a1,-2000 # 212c4 <__FUNCTION__.2490>
   1aa9c:	00006517          	auipc	a0,0x6
   1aaa0:	73450513          	addi	a0,a0,1844 # 211d0 <__FUNCTION__.2432+0x1c>
   1aaa4:	da0f80ef          	jal	ra,13044 <rt_assert_handler>

    /* timer object initialization */
    rt_object_init(&(timer->parent), RT_Object_Class_Timer, name);
   1aaa8:	fec42783          	lw	a5,-20(s0)
   1aaac:	fe842603          	lw	a2,-24(s0)
   1aab0:	00a00593          	li	a1,10
   1aab4:	00078513          	mv	a0,a5
   1aab8:	808f60ef          	jal	ra,10ac0 <rt_object_init>

    _timer_init(timer, timeout, parameter, time, flag);
   1aabc:	fdb44783          	lbu	a5,-37(s0)
   1aac0:	00078713          	mv	a4,a5
   1aac4:	fdc42683          	lw	a3,-36(s0)
   1aac8:	fe042603          	lw	a2,-32(s0)
   1aacc:	fe442583          	lw	a1,-28(s0)
   1aad0:	fec42503          	lw	a0,-20(s0)
   1aad4:	de1ff0ef          	jal	ra,1a8b4 <_timer_init>
}
   1aad8:	00000013          	nop
   1aadc:	02c12083          	lw	ra,44(sp)
   1aae0:	02812403          	lw	s0,40(sp)
   1aae4:	03010113          	addi	sp,sp,48
   1aae8:	00008067          	ret

0001aaec <rt_timer_detach>:
 * @param timer is the timer to be detached
 *
 * @return the status of detach
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
   1aaec:	fe010113          	addi	sp,sp,-32
   1aaf0:	00112e23          	sw	ra,28(sp)
   1aaf4:	00812c23          	sw	s0,24(sp)
   1aaf8:	00912a23          	sw	s1,20(sp)
   1aafc:	02010413          	addi	s0,sp,32
   1ab00:	fea42623          	sw	a0,-20(s0)
    register rt_base_t level;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
   1ab04:	fec42783          	lw	a5,-20(s0)
   1ab08:	00079e63          	bnez	a5,1ab24 <rt_timer_detach+0x38>
   1ab0c:	10c00613          	li	a2,268
   1ab10:	00006597          	auipc	a1,0x6
   1ab14:	7c458593          	addi	a1,a1,1988 # 212d4 <__FUNCTION__.2495>
   1ab18:	00006517          	auipc	a0,0x6
   1ab1c:	6b850513          	addi	a0,a0,1720 # 211d0 <__FUNCTION__.2432+0x1c>
   1ab20:	d24f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
   1ab24:	fec42783          	lw	a5,-20(s0)
   1ab28:	00078513          	mv	a0,a5
   1ab2c:	bfcf60ef          	jal	ra,10f28 <rt_object_get_type>
   1ab30:	00050793          	mv	a5,a0
   1ab34:	00078713          	mv	a4,a5
   1ab38:	00a00793          	li	a5,10
   1ab3c:	00f70e63          	beq	a4,a5,1ab58 <rt_timer_detach+0x6c>
   1ab40:	10d00613          	li	a2,269
   1ab44:	00006597          	auipc	a1,0x6
   1ab48:	79058593          	addi	a1,a1,1936 # 212d4 <__FUNCTION__.2495>
   1ab4c:	00006517          	auipc	a0,0x6
   1ab50:	69850513          	addi	a0,a0,1688 # 211e4 <__FUNCTION__.2432+0x30>
   1ab54:	cf0f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));
   1ab58:	fec42783          	lw	a5,-20(s0)
   1ab5c:	00078513          	mv	a0,a5
   1ab60:	b60f60ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   1ab64:	00050793          	mv	a5,a0
   1ab68:	00079e63          	bnez	a5,1ab84 <rt_timer_detach+0x98>
   1ab6c:	10e00613          	li	a2,270
   1ab70:	00006597          	auipc	a1,0x6
   1ab74:	76458593          	addi	a1,a1,1892 # 212d4 <__FUNCTION__.2495>
   1ab78:	00006517          	auipc	a0,0x6
   1ab7c:	6a850513          	addi	a0,a0,1704 # 21220 <__FUNCTION__.2432+0x6c>
   1ab80:	cc4f80ef          	jal	ra,13044 <rt_assert_handler>

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1ab84:	2c4010ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1ab88:	00050493          	mv	s1,a0

    _timer_remove(timer);
   1ab8c:	fec42503          	lw	a0,-20(s0)
   1ab90:	e69ff0ef          	jal	ra,1a9f8 <_timer_remove>
    /* stop timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1ab94:	fec42783          	lw	a5,-20(s0)
   1ab98:	0097c783          	lbu	a5,9(a5)
   1ab9c:	ffe7f793          	andi	a5,a5,-2
   1aba0:	0ff7f713          	andi	a4,a5,255
   1aba4:	fec42783          	lw	a5,-20(s0)
   1aba8:	00e784a3          	sb	a4,9(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1abac:	00048513          	mv	a0,s1
   1abb0:	2a0010ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    rt_object_detach(&(timer->parent));
   1abb4:	fec42783          	lw	a5,-20(s0)
   1abb8:	00078513          	mv	a0,a5
   1abbc:	84cf60ef          	jal	ra,10c08 <rt_object_detach>

    return RT_EOK;
   1abc0:	00000793          	li	a5,0
}
   1abc4:	00078513          	mv	a0,a5
   1abc8:	01c12083          	lw	ra,28(sp)
   1abcc:	01812403          	lw	s0,24(sp)
   1abd0:	01412483          	lw	s1,20(sp)
   1abd4:	02010113          	addi	sp,sp,32
   1abd8:	00008067          	ret

0001abdc <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
   1abdc:	fc010113          	addi	sp,sp,-64
   1abe0:	02112e23          	sw	ra,60(sp)
   1abe4:	02812c23          	sw	s0,56(sp)
   1abe8:	04010413          	addi	s0,sp,64
   1abec:	fca42e23          	sw	a0,-36(s0)
   1abf0:	fcb42c23          	sw	a1,-40(s0)
   1abf4:	fcc42a23          	sw	a2,-44(s0)
   1abf8:	fcd42823          	sw	a3,-48(s0)
   1abfc:	00070793          	mv	a5,a4
   1ac00:	fcf407a3          	sb	a5,-49(s0)
    struct rt_timer *timer;

    /* allocate a object */
    timer = (struct rt_timer *)rt_object_allocate(RT_Object_Class_Timer, name);
   1ac04:	fdc42583          	lw	a1,-36(s0)
   1ac08:	00a00513          	li	a0,10
   1ac0c:	890f60ef          	jal	ra,10c9c <rt_object_allocate>
   1ac10:	fea42623          	sw	a0,-20(s0)
    if (timer == RT_NULL)
   1ac14:	fec42783          	lw	a5,-20(s0)
   1ac18:	00079663          	bnez	a5,1ac24 <rt_timer_create+0x48>
    {
        return RT_NULL;
   1ac1c:	00000793          	li	a5,0
   1ac20:	0240006f          	j	1ac44 <rt_timer_create+0x68>
    }

    _timer_init(timer, timeout, parameter, time, flag);
   1ac24:	fcf44783          	lbu	a5,-49(s0)
   1ac28:	00078713          	mv	a4,a5
   1ac2c:	fd042683          	lw	a3,-48(s0)
   1ac30:	fd442603          	lw	a2,-44(s0)
   1ac34:	fd842583          	lw	a1,-40(s0)
   1ac38:	fec42503          	lw	a0,-20(s0)
   1ac3c:	c79ff0ef          	jal	ra,1a8b4 <_timer_init>

    return timer;
   1ac40:	fec42783          	lw	a5,-20(s0)
}
   1ac44:	00078513          	mv	a0,a5
   1ac48:	03c12083          	lw	ra,60(sp)
   1ac4c:	03812403          	lw	s0,56(sp)
   1ac50:	04010113          	addi	sp,sp,64
   1ac54:	00008067          	ret

0001ac58 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
   1ac58:	fe010113          	addi	sp,sp,-32
   1ac5c:	00112e23          	sw	ra,28(sp)
   1ac60:	00812c23          	sw	s0,24(sp)
   1ac64:	00912a23          	sw	s1,20(sp)
   1ac68:	02010413          	addi	s0,sp,32
   1ac6c:	fea42623          	sw	a0,-20(s0)
    register rt_base_t level;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
   1ac70:	fec42783          	lw	a5,-20(s0)
   1ac74:	00079e63          	bnez	a5,1ac90 <rt_timer_delete+0x38>
   1ac78:	15100613          	li	a2,337
   1ac7c:	00006597          	auipc	a1,0x6
   1ac80:	66858593          	addi	a1,a1,1640 # 212e4 <__FUNCTION__.2509>
   1ac84:	00006517          	auipc	a0,0x6
   1ac88:	54c50513          	addi	a0,a0,1356 # 211d0 <__FUNCTION__.2432+0x1c>
   1ac8c:	bb8f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
   1ac90:	fec42783          	lw	a5,-20(s0)
   1ac94:	00078513          	mv	a0,a5
   1ac98:	a90f60ef          	jal	ra,10f28 <rt_object_get_type>
   1ac9c:	00050793          	mv	a5,a0
   1aca0:	00078713          	mv	a4,a5
   1aca4:	00a00793          	li	a5,10
   1aca8:	00f70e63          	beq	a4,a5,1acc4 <rt_timer_delete+0x6c>
   1acac:	15200613          	li	a2,338
   1acb0:	00006597          	auipc	a1,0x6
   1acb4:	63458593          	addi	a1,a1,1588 # 212e4 <__FUNCTION__.2509>
   1acb8:	00006517          	auipc	a0,0x6
   1acbc:	52c50513          	addi	a0,a0,1324 # 211e4 <__FUNCTION__.2432+0x30>
   1acc0:	b84f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&timer->parent) == RT_FALSE);
   1acc4:	fec42783          	lw	a5,-20(s0)
   1acc8:	00078513          	mv	a0,a5
   1accc:	9f4f60ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   1acd0:	00050793          	mv	a5,a0
   1acd4:	00078e63          	beqz	a5,1acf0 <rt_timer_delete+0x98>
   1acd8:	15300613          	li	a2,339
   1acdc:	00006597          	auipc	a1,0x6
   1ace0:	60858593          	addi	a1,a1,1544 # 212e4 <__FUNCTION__.2509>
   1ace4:	00006517          	auipc	a0,0x6
   1ace8:	56850513          	addi	a0,a0,1384 # 2124c <__FUNCTION__.2432+0x98>
   1acec:	b58f80ef          	jal	ra,13044 <rt_assert_handler>

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1acf0:	158010ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1acf4:	00050493          	mv	s1,a0

    _timer_remove(timer);
   1acf8:	fec42503          	lw	a0,-20(s0)
   1acfc:	cfdff0ef          	jal	ra,1a9f8 <_timer_remove>
    /* stop timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1ad00:	fec42783          	lw	a5,-20(s0)
   1ad04:	0097c783          	lbu	a5,9(a5)
   1ad08:	ffe7f793          	andi	a5,a5,-2
   1ad0c:	0ff7f713          	andi	a4,a5,255
   1ad10:	fec42783          	lw	a5,-20(s0)
   1ad14:	00e784a3          	sb	a4,9(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1ad18:	00048513          	mv	a0,s1
   1ad1c:	134010ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    rt_object_delete(&(timer->parent));
   1ad20:	fec42783          	lw	a5,-20(s0)
   1ad24:	00078513          	mv	a0,a5
   1ad28:	8d0f60ef          	jal	ra,10df8 <rt_object_delete>

    return RT_EOK;
   1ad2c:	00000793          	li	a5,0
}
   1ad30:	00078513          	mv	a0,a5
   1ad34:	01c12083          	lw	ra,28(sp)
   1ad38:	01812403          	lw	s0,24(sp)
   1ad3c:	01412483          	lw	s1,20(sp)
   1ad40:	02010113          	addi	sp,sp,32
   1ad44:	00008067          	ret

0001ad48 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
   1ad48:	fc010113          	addi	sp,sp,-64
   1ad4c:	02112e23          	sw	ra,60(sp)
   1ad50:	02812c23          	sw	s0,56(sp)
   1ad54:	02912a23          	sw	s1,52(sp)
   1ad58:	03212823          	sw	s2,48(sp)
   1ad5c:	04010413          	addi	s0,sp,64
   1ad60:	fca42623          	sw	a0,-52(s0)
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
   1ad64:	fcc42783          	lw	a5,-52(s0)
   1ad68:	00079e63          	bnez	a5,1ad84 <rt_timer_start+0x3c>
   1ad6c:	17800613          	li	a2,376
   1ad70:	00006597          	auipc	a1,0x6
   1ad74:	58458593          	addi	a1,a1,1412 # 212f4 <__FUNCTION__.2520>
   1ad78:	00006517          	auipc	a0,0x6
   1ad7c:	45850513          	addi	a0,a0,1112 # 211d0 <__FUNCTION__.2432+0x1c>
   1ad80:	ac4f80ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
   1ad84:	fcc42783          	lw	a5,-52(s0)
   1ad88:	00078513          	mv	a0,a5
   1ad8c:	99cf60ef          	jal	ra,10f28 <rt_object_get_type>
   1ad90:	00050793          	mv	a5,a0
   1ad94:	00078713          	mv	a4,a5
   1ad98:	00a00793          	li	a5,10
   1ad9c:	00f70e63          	beq	a4,a5,1adb8 <rt_timer_start+0x70>
   1ada0:	17900613          	li	a2,377
   1ada4:	00006597          	auipc	a1,0x6
   1ada8:	55058593          	addi	a1,a1,1360 # 212f4 <__FUNCTION__.2520>
   1adac:	00006517          	auipc	a0,0x6
   1adb0:	43850513          	addi	a0,a0,1080 # 211e4 <__FUNCTION__.2432+0x30>
   1adb4:	a90f80ef          	jal	ra,13044 <rt_assert_handler>

    need_schedule = RT_FALSE;
   1adb8:	00000493          	li	s1,0

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
   1adbc:	08c010ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1adc0:	00050913          	mv	s2,a0
    /* remove timer from list */
    _timer_remove(timer);
   1adc4:	fcc42503          	lw	a0,-52(s0)
   1adc8:	c31ff0ef          	jal	ra,1a9f8 <_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1adcc:	fcc42783          	lw	a5,-52(s0)
   1add0:	0097c783          	lbu	a5,9(a5)
   1add4:	ffe7f793          	andi	a5,a5,-2
   1add8:	0ff7f713          	andi	a4,a5,255
   1addc:	fcc42783          	lw	a5,-52(s0)
   1ade0:	00e784a3          	sb	a4,9(a5)

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(timer->parent)));
   1ade4:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   1ade8:	0007a783          	lw	a5,0(a5)
   1adec:	00078c63          	beqz	a5,1ae04 <rt_timer_start+0xbc>
   1adf0:	de418793          	addi	a5,gp,-540 # 22944 <rt_object_take_hook>
   1adf4:	0007a703          	lw	a4,0(a5)
   1adf8:	fcc42783          	lw	a5,-52(s0)
   1adfc:	00078513          	mv	a0,a5
   1ae00:	000700e7          	jalr	a4

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
   1ae04:	fcc42783          	lw	a5,-52(s0)
   1ae08:	0247a703          	lw	a4,36(a5)
   1ae0c:	800007b7          	lui	a5,0x80000
   1ae10:	ffe7c793          	xori	a5,a5,-2
   1ae14:	00e7fe63          	bgeu	a5,a4,1ae30 <rt_timer_start+0xe8>
   1ae18:	18a00613          	li	a2,394
   1ae1c:	00006597          	auipc	a1,0x6
   1ae20:	4d858593          	addi	a1,a1,1240 # 212f4 <__FUNCTION__.2520>
   1ae24:	00006517          	auipc	a0,0x6
   1ae28:	46050513          	addi	a0,a0,1120 # 21284 <__FUNCTION__.2432+0xd0>
   1ae2c:	a18f80ef          	jal	ra,13044 <rt_assert_handler>
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
   1ae30:	ac8fd0ef          	jal	ra,180f8 <rt_tick_get>
   1ae34:	00050713          	mv	a4,a0
   1ae38:	fcc42783          	lw	a5,-52(s0)
   1ae3c:	0247a783          	lw	a5,36(a5) # 80000024 <__top+0x70000034>
   1ae40:	00f70733          	add	a4,a4,a5
   1ae44:	fcc42783          	lw	a5,-52(s0)
   1ae48:	02e7a423          	sw	a4,40(a5)

#ifdef RT_USING_TIMER_SOFT
    if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
   1ae4c:	fcc42783          	lw	a5,-52(s0)
   1ae50:	0097c783          	lbu	a5,9(a5)
   1ae54:	0047f793          	andi	a5,a5,4
   1ae58:	00078863          	beqz	a5,1ae68 <rt_timer_start+0x120>
    {
        /* insert timer to soft timer list */
        timer_list = _soft_timer_list;
   1ae5c:	93418793          	addi	a5,gp,-1740 # 22494 <_soft_timer_list>
   1ae60:	fef42423          	sw	a5,-24(s0)
   1ae64:	00c0006f          	j	1ae70 <rt_timer_start+0x128>
    }
    else
#endif /* RT_USING_TIMER_SOFT */
    {
        /* insert timer to system timer list */
        timer_list = _timer_list;
   1ae68:	92c18793          	addi	a5,gp,-1748 # 2248c <_timer_list>
   1ae6c:	fef42423          	sw	a5,-24(s0)
    }

    row_head[0]  = &timer_list[0];
   1ae70:	fe842783          	lw	a5,-24(s0)
   1ae74:	fcf42c23          	sw	a5,-40(s0)
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
   1ae78:	fe042623          	sw	zero,-20(s0)
   1ae7c:	11c0006f          	j	1af98 <rt_timer_start+0x250>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
   1ae80:	fec42783          	lw	a5,-20(s0)
   1ae84:	00279793          	slli	a5,a5,0x2
   1ae88:	ff040713          	addi	a4,s0,-16
   1ae8c:	00f707b3          	add	a5,a4,a5
   1ae90:	fe87a783          	lw	a5,-24(a5)
   1ae94:	0007a783          	lw	a5,0(a5)
   1ae98:	fef42023          	sw	a5,-32(s0)

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
   1ae9c:	fec42783          	lw	a5,-20(s0)
   1aea0:	00379793          	slli	a5,a5,0x3
   1aea4:	01478793          	addi	a5,a5,20
   1aea8:	40f007b3          	neg	a5,a5
   1aeac:	fe042703          	lw	a4,-32(s0)
   1aeb0:	00f707b3          	add	a5,a4,a5
   1aeb4:	fcf42e23          	sw	a5,-36(s0)
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
   1aeb8:	fdc42783          	lw	a5,-36(s0)
   1aebc:	0287a703          	lw	a4,40(a5)
   1aec0:	fcc42783          	lw	a5,-52(s0)
   1aec4:	0287a783          	lw	a5,40(a5)
   1aec8:	02f70463          	beq	a4,a5,1aef0 <rt_timer_start+0x1a8>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
   1aecc:	fdc42783          	lw	a5,-36(s0)
   1aed0:	0287a703          	lw	a4,40(a5)
   1aed4:	fcc42783          	lw	a5,-52(s0)
   1aed8:	0287a783          	lw	a5,40(a5)
   1aedc:	40f70733          	sub	a4,a4,a5
   1aee0:	800007b7          	lui	a5,0x80000
   1aee4:	ffe7c793          	xori	a5,a5,-2
   1aee8:	06e7f463          	bgeu	a5,a4,1af50 <rt_timer_start+0x208>
   1aeec:	0080006f          	j	1aef4 <rt_timer_start+0x1ac>
                continue;
   1aef0:	00000013          	nop
             row_head[row_lvl]  = row_head[row_lvl]->next)
   1aef4:	fec42783          	lw	a5,-20(s0)
   1aef8:	00279793          	slli	a5,a5,0x2
   1aefc:	ff040713          	addi	a4,s0,-16
   1af00:	00f707b3          	add	a5,a4,a5
   1af04:	fe87a783          	lw	a5,-24(a5) # 7fffffe8 <__top+0x6ffffff8>
   1af08:	0007a703          	lw	a4,0(a5)
   1af0c:	fec42783          	lw	a5,-20(s0)
   1af10:	00279793          	slli	a5,a5,0x2
   1af14:	ff040693          	addi	a3,s0,-16
   1af18:	00f687b3          	add	a5,a3,a5
   1af1c:	fee7a423          	sw	a4,-24(a5)
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
   1af20:	fec42783          	lw	a5,-20(s0)
   1af24:	00279793          	slli	a5,a5,0x2
   1af28:	ff040713          	addi	a4,s0,-16
   1af2c:	00f707b3          	add	a5,a4,a5
   1af30:	fe87a703          	lw	a4,-24(a5)
   1af34:	fec42783          	lw	a5,-20(s0)
   1af38:	00379793          	slli	a5,a5,0x3
   1af3c:	fe842683          	lw	a3,-24(s0)
   1af40:	00f687b3          	add	a5,a3,a5
   1af44:	0047a783          	lw	a5,4(a5)
   1af48:	f2f71ce3          	bne	a4,a5,1ae80 <rt_timer_start+0x138>
   1af4c:	0080006f          	j	1af54 <rt_timer_start+0x20c>
            {
                break;
   1af50:	00000013          	nop
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
   1af54:	fec42783          	lw	a5,-20(s0)
   1af58:	02078a63          	beqz	a5,1af8c <rt_timer_start+0x244>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
   1af5c:	fec42783          	lw	a5,-20(s0)
   1af60:	00279793          	slli	a5,a5,0x2
   1af64:	ff040713          	addi	a4,s0,-16
   1af68:	00f707b3          	add	a5,a4,a5
   1af6c:	fe87a703          	lw	a4,-24(a5)
   1af70:	fec42783          	lw	a5,-20(s0)
   1af74:	00178793          	addi	a5,a5,1
   1af78:	00870713          	addi	a4,a4,8
   1af7c:	00279793          	slli	a5,a5,0x2
   1af80:	ff040693          	addi	a3,s0,-16
   1af84:	00f687b3          	add	a5,a3,a5
   1af88:	fee7a423          	sw	a4,-24(a5)
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
   1af8c:	fec42783          	lw	a5,-20(s0)
   1af90:	00178793          	addi	a5,a5,1
   1af94:	fef42623          	sw	a5,-20(s0)
   1af98:	fec42783          	lw	a5,-20(s0)
   1af9c:	f80782e3          	beqz	a5,1af20 <rt_timer_start+0x1d8>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
   1afa0:	bc418793          	addi	a5,gp,-1084 # 22724 <random_nr.2519>
   1afa4:	0007a783          	lw	a5,0(a5)
   1afa8:	00178713          	addi	a4,a5,1
   1afac:	bc418793          	addi	a5,gp,-1084 # 22724 <random_nr.2519>
   1afb0:	00e7a023          	sw	a4,0(a5)
    tst_nr = random_nr;
   1afb4:	bc418793          	addi	a5,gp,-1084 # 22724 <random_nr.2519>
   1afb8:	0007a783          	lw	a5,0(a5)
   1afbc:	fef42223          	sw	a5,-28(s0)

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
   1afc0:	fd842703          	lw	a4,-40(s0)
   1afc4:	fcc42783          	lw	a5,-52(s0)
   1afc8:	01478793          	addi	a5,a5,20
   1afcc:	00078593          	mv	a1,a5
   1afd0:	00070513          	mv	a0,a4
   1afd4:	f90ff0ef          	jal	ra,1a764 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
   1afd8:	00200793          	li	a5,2
   1afdc:	fef42623          	sw	a5,-20(s0)
   1afe0:	0700006f          	j	1b050 <rt_timer_start+0x308>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
   1afe4:	fe442783          	lw	a5,-28(s0)
   1afe8:	0037f793          	andi	a5,a5,3
   1afec:	06079a63          	bnez	a5,1b060 <rt_timer_start+0x318>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
   1aff0:	00100713          	li	a4,1
   1aff4:	fec42783          	lw	a5,-20(s0)
   1aff8:	40f707b3          	sub	a5,a4,a5
   1affc:	00279793          	slli	a5,a5,0x2
   1b000:	ff040713          	addi	a4,s0,-16
   1b004:	00f707b3          	add	a5,a4,a5
   1b008:	fe87a683          	lw	a3,-24(a5)
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
   1b00c:	00100713          	li	a4,1
   1b010:	fec42783          	lw	a5,-20(s0)
   1b014:	40f707b3          	sub	a5,a4,a5
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
   1b018:	00278793          	addi	a5,a5,2
   1b01c:	00379793          	slli	a5,a5,0x3
   1b020:	fcc42703          	lw	a4,-52(s0)
   1b024:	00f707b3          	add	a5,a4,a5
   1b028:	00478793          	addi	a5,a5,4
   1b02c:	00078593          	mv	a1,a5
   1b030:	00068513          	mv	a0,a3
   1b034:	f30ff0ef          	jal	ra,1a764 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
   1b038:	fe442783          	lw	a5,-28(s0)
   1b03c:	0027d793          	srli	a5,a5,0x2
   1b040:	fef42223          	sw	a5,-28(s0)
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
   1b044:	fec42783          	lw	a5,-20(s0)
   1b048:	00178793          	addi	a5,a5,1
   1b04c:	fef42623          	sw	a5,-20(s0)
   1b050:	fec42703          	lw	a4,-20(s0)
   1b054:	00100793          	li	a5,1
   1b058:	f8e7f6e3          	bgeu	a5,a4,1afe4 <rt_timer_start+0x29c>
   1b05c:	0080006f          	j	1b064 <rt_timer_start+0x31c>
            break;
   1b060:	00000013          	nop
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
   1b064:	fcc42783          	lw	a5,-52(s0)
   1b068:	0097c783          	lbu	a5,9(a5)
   1b06c:	0017e793          	ori	a5,a5,1
   1b070:	0ff7f713          	andi	a4,a5,255
   1b074:	fcc42783          	lw	a5,-52(s0)
   1b078:	00e784a3          	sb	a4,9(a5)

#ifdef RT_USING_TIMER_SOFT
    if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
   1b07c:	fcc42783          	lw	a5,-52(s0)
   1b080:	0097c783          	lbu	a5,9(a5)
   1b084:	0047f793          	andi	a5,a5,4
   1b088:	02078a63          	beqz	a5,1b0bc <rt_timer_start+0x374>
    {
        /* check whether timer thread is ready */
        if ((_soft_timer_status == RT_SOFT_TIMER_IDLE) &&
   1b08c:	80c18793          	addi	a5,gp,-2036 # 2236c <_soft_timer_status>
   1b090:	0007c703          	lbu	a4,0(a5)
   1b094:	00100793          	li	a5,1
   1b098:	02f71263          	bne	a4,a5,1b0bc <rt_timer_start+0x374>
           ((_timer_thread.stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND))
   1b09c:	93c18793          	addi	a5,gp,-1732 # 2249c <_timer_thread>
   1b0a0:	0347c783          	lbu	a5,52(a5)
   1b0a4:	0077f713          	andi	a4,a5,7
        if ((_soft_timer_status == RT_SOFT_TIMER_IDLE) &&
   1b0a8:	00200793          	li	a5,2
   1b0ac:	00f71863          	bne	a4,a5,1b0bc <rt_timer_start+0x374>
        {
            /* resume timer thread to check soft timer */
            rt_thread_resume(&_timer_thread);
   1b0b0:	93c18513          	addi	a0,gp,-1732 # 2249c <_timer_thread>
   1b0b4:	e41f80ef          	jal	ra,13ef4 <rt_thread_resume>
            need_schedule = RT_TRUE;
   1b0b8:	00100493          	li	s1,1
        }
    }
#endif /* RT_USING_TIMER_SOFT */

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1b0bc:	00090513          	mv	a0,s2
   1b0c0:	591000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    if (need_schedule)
   1b0c4:	00048463          	beqz	s1,1b0cc <rt_timer_start+0x384>
    {
        rt_schedule();
   1b0c8:	dc0fd0ef          	jal	ra,18688 <rt_schedule>
    }

    return RT_EOK;
   1b0cc:	00000793          	li	a5,0
}
   1b0d0:	00078513          	mv	a0,a5
   1b0d4:	03c12083          	lw	ra,60(sp)
   1b0d8:	03812403          	lw	s0,56(sp)
   1b0dc:	03412483          	lw	s1,52(sp)
   1b0e0:	03012903          	lw	s2,48(sp)
   1b0e4:	04010113          	addi	sp,sp,64
   1b0e8:	00008067          	ret

0001b0ec <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
   1b0ec:	fe010113          	addi	sp,sp,-32
   1b0f0:	00112e23          	sw	ra,28(sp)
   1b0f4:	00812c23          	sw	s0,24(sp)
   1b0f8:	00912a23          	sw	s1,20(sp)
   1b0fc:	02010413          	addi	s0,sp,32
   1b100:	fea42623          	sw	a0,-20(s0)
    register rt_base_t level;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
   1b104:	fec42783          	lw	a5,-20(s0)
   1b108:	00079e63          	bnez	a5,1b124 <rt_timer_stop+0x38>
   1b10c:	1f500613          	li	a2,501
   1b110:	00006597          	auipc	a1,0x6
   1b114:	1f458593          	addi	a1,a1,500 # 21304 <__FUNCTION__.2537>
   1b118:	00006517          	auipc	a0,0x6
   1b11c:	0b850513          	addi	a0,a0,184 # 211d0 <__FUNCTION__.2432+0x1c>
   1b120:	f25f70ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
   1b124:	fec42783          	lw	a5,-20(s0)
   1b128:	00078513          	mv	a0,a5
   1b12c:	dfdf50ef          	jal	ra,10f28 <rt_object_get_type>
   1b130:	00050793          	mv	a5,a0
   1b134:	00078713          	mv	a4,a5
   1b138:	00a00793          	li	a5,10
   1b13c:	00f70e63          	beq	a4,a5,1b158 <rt_timer_stop+0x6c>
   1b140:	1f600613          	li	a2,502
   1b144:	00006597          	auipc	a1,0x6
   1b148:	1c058593          	addi	a1,a1,448 # 21304 <__FUNCTION__.2537>
   1b14c:	00006517          	auipc	a0,0x6
   1b150:	09850513          	addi	a0,a0,152 # 211e4 <__FUNCTION__.2432+0x30>
   1b154:	ef1f70ef          	jal	ra,13044 <rt_assert_handler>

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
   1b158:	fec42783          	lw	a5,-20(s0)
   1b15c:	0097c783          	lbu	a5,9(a5)
   1b160:	0017f793          	andi	a5,a5,1
   1b164:	00079663          	bnez	a5,1b170 <rt_timer_stop+0x84>
        return -RT_ERROR;
   1b168:	fff00793          	li	a5,-1
   1b16c:	0580006f          	j	1b1c4 <rt_timer_stop+0xd8>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));
   1b170:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   1b174:	0007a783          	lw	a5,0(a5)
   1b178:	00078c63          	beqz	a5,1b190 <rt_timer_stop+0xa4>
   1b17c:	de018793          	addi	a5,gp,-544 # 22940 <rt_object_put_hook>
   1b180:	0007a703          	lw	a4,0(a5)
   1b184:	fec42783          	lw	a5,-20(s0)
   1b188:	00078513          	mv	a0,a5
   1b18c:	000700e7          	jalr	a4

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1b190:	4b9000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1b194:	00050493          	mv	s1,a0

    _timer_remove(timer);
   1b198:	fec42503          	lw	a0,-20(s0)
   1b19c:	85dff0ef          	jal	ra,1a9f8 <_timer_remove>
    /* change status */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1b1a0:	fec42783          	lw	a5,-20(s0)
   1b1a4:	0097c783          	lbu	a5,9(a5)
   1b1a8:	ffe7f793          	andi	a5,a5,-2
   1b1ac:	0ff7f713          	andi	a4,a5,255
   1b1b0:	fec42783          	lw	a5,-20(s0)
   1b1b4:	00e784a3          	sb	a4,9(a5)

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1b1b8:	00048513          	mv	a0,s1
   1b1bc:	495000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   1b1c0:	00000793          	li	a5,0
}
   1b1c4:	00078513          	mv	a0,a5
   1b1c8:	01c12083          	lw	ra,28(sp)
   1b1cc:	01812403          	lw	s0,24(sp)
   1b1d0:	01412483          	lw	s1,20(sp)
   1b1d4:	02010113          	addi	sp,sp,32
   1b1d8:	00008067          	ret

0001b1dc <rt_timer_control>:
 * @param arg the argument
 *
 * @return the statu of control
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
   1b1dc:	fe010113          	addi	sp,sp,-32
   1b1e0:	00112e23          	sw	ra,28(sp)
   1b1e4:	00812c23          	sw	s0,24(sp)
   1b1e8:	02010413          	addi	s0,sp,32
   1b1ec:	fea42623          	sw	a0,-20(s0)
   1b1f0:	feb42423          	sw	a1,-24(s0)
   1b1f4:	fec42223          	sw	a2,-28(s0)
    register rt_base_t level;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
   1b1f8:	fec42783          	lw	a5,-20(s0)
   1b1fc:	00079e63          	bnez	a5,1b218 <rt_timer_control+0x3c>
   1b200:	21900613          	li	a2,537
   1b204:	00006597          	auipc	a1,0x6
   1b208:	11058593          	addi	a1,a1,272 # 21314 <__FUNCTION__.2544>
   1b20c:	00006517          	auipc	a0,0x6
   1b210:	fc450513          	addi	a0,a0,-60 # 211d0 <__FUNCTION__.2432+0x1c>
   1b214:	e31f70ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
   1b218:	fec42783          	lw	a5,-20(s0)
   1b21c:	00078513          	mv	a0,a5
   1b220:	d09f50ef          	jal	ra,10f28 <rt_object_get_type>
   1b224:	00050793          	mv	a5,a0
   1b228:	00078713          	mv	a4,a5
   1b22c:	00a00793          	li	a5,10
   1b230:	00f70e63          	beq	a4,a5,1b24c <rt_timer_control+0x70>
   1b234:	21a00613          	li	a2,538
   1b238:	00006597          	auipc	a1,0x6
   1b23c:	0dc58593          	addi	a1,a1,220 # 21314 <__FUNCTION__.2544>
   1b240:	00006517          	auipc	a0,0x6
   1b244:	fa450513          	addi	a0,a0,-92 # 211e4 <__FUNCTION__.2432+0x30>
   1b248:	dfdf70ef          	jal	ra,13044 <rt_assert_handler>

    level = rt_hw_interrupt_disable();
   1b24c:	3fd000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1b250:	00050093          	mv	ra,a0
   1b254:	fe842703          	lw	a4,-24(s0)
   1b258:	00400793          	li	a5,4
   1b25c:	0ae7ec63          	bltu	a5,a4,1b314 <rt_timer_control+0x138>
   1b260:	fe842783          	lw	a5,-24(s0)
   1b264:	00279713          	slli	a4,a5,0x2
   1b268:	00006797          	auipc	a5,0x6
   1b26c:	04078793          	addi	a5,a5,64 # 212a8 <__FUNCTION__.2432+0xf4>
   1b270:	00f707b3          	add	a5,a4,a5
   1b274:	0007a703          	lw	a4,0(a5)
   1b278:	00006797          	auipc	a5,0x6
   1b27c:	03078793          	addi	a5,a5,48 # 212a8 <__FUNCTION__.2432+0xf4>
   1b280:	00f707b3          	add	a5,a4,a5
   1b284:	00078067          	jr	a5
    switch (cmd)
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
   1b288:	fec42783          	lw	a5,-20(s0)
   1b28c:	0247a703          	lw	a4,36(a5)
   1b290:	fe442783          	lw	a5,-28(s0)
   1b294:	00e7a023          	sw	a4,0(a5)
        break;
   1b298:	0800006f          	j	1b318 <rt_timer_control+0x13c>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
   1b29c:	fe442783          	lw	a5,-28(s0)
   1b2a0:	0007a703          	lw	a4,0(a5)
   1b2a4:	fec42783          	lw	a5,-20(s0)
   1b2a8:	02e7a223          	sw	a4,36(a5)
        break;
   1b2ac:	06c0006f          	j	1b318 <rt_timer_control+0x13c>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
   1b2b0:	fec42783          	lw	a5,-20(s0)
   1b2b4:	0097c783          	lbu	a5,9(a5)
   1b2b8:	ffd7f793          	andi	a5,a5,-3
   1b2bc:	0ff7f713          	andi	a4,a5,255
   1b2c0:	fec42783          	lw	a5,-20(s0)
   1b2c4:	00e784a3          	sb	a4,9(a5)
        break;
   1b2c8:	0500006f          	j	1b318 <rt_timer_control+0x13c>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
   1b2cc:	fec42783          	lw	a5,-20(s0)
   1b2d0:	0097c783          	lbu	a5,9(a5)
   1b2d4:	0027e793          	ori	a5,a5,2
   1b2d8:	0ff7f713          	andi	a4,a5,255
   1b2dc:	fec42783          	lw	a5,-20(s0)
   1b2e0:	00e784a3          	sb	a4,9(a5)
        break;
   1b2e4:	0340006f          	j	1b318 <rt_timer_control+0x13c>

    case RT_TIMER_CTRL_GET_STATE:
        if(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
   1b2e8:	fec42783          	lw	a5,-20(s0)
   1b2ec:	0097c783          	lbu	a5,9(a5)
   1b2f0:	0017f793          	andi	a5,a5,1
   1b2f4:	00078a63          	beqz	a5,1b308 <rt_timer_control+0x12c>
        {
            /*timer is start and run*/
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_ACTIVATED;
   1b2f8:	fe442783          	lw	a5,-28(s0)
   1b2fc:	00100713          	li	a4,1
   1b300:	00e7a023          	sw	a4,0(a5)
        else
        {
            /*timer is stop*/
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
        }
        break;
   1b304:	0140006f          	j	1b318 <rt_timer_control+0x13c>
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
   1b308:	fe442783          	lw	a5,-28(s0)
   1b30c:	0007a023          	sw	zero,0(a5)
        break;
   1b310:	0080006f          	j	1b318 <rt_timer_control+0x13c>

    default:
        break;
   1b314:	00000013          	nop
    }
    rt_hw_interrupt_enable(level);
   1b318:	00008513          	mv	a0,ra
   1b31c:	335000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return RT_EOK;
   1b320:	00000793          	li	a5,0
}
   1b324:	00078513          	mv	a0,a5
   1b328:	01c12083          	lw	ra,28(sp)
   1b32c:	01812403          	lw	s0,24(sp)
   1b330:	02010113          	addi	sp,sp,32
   1b334:	00008067          	ret

0001b338 <rt_timer_check>:
 *        the corresponding timeout function will be invoked.
 *
 * @note This function shall be invoked in operating system timer interrupt.
 */
void rt_timer_check(void)
{
   1b338:	fe010113          	addi	sp,sp,-32
   1b33c:	00112e23          	sw	ra,28(sp)
   1b340:	00812c23          	sw	s0,24(sp)
   1b344:	00912a23          	sw	s1,20(sp)
   1b348:	02010413          	addi	s0,sp,32
    struct rt_timer *t;
    rt_tick_t current_tick;
    register rt_base_t level;
    rt_list_t list;

    rt_list_init(&list);
   1b34c:	fe040793          	addi	a5,s0,-32
   1b350:	00078513          	mv	a0,a5
   1b354:	bd4ff0ef          	jal	ra,1a728 <rt_list_init>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));

    current_tick = rt_tick_get();
   1b358:	da1fc0ef          	jal	ra,180f8 <rt_tick_get>
   1b35c:	fea42623          	sw	a0,-20(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1b360:	2e9000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1b364:	00050493          	mv	s1,a0

    while (!rt_list_isempty(&_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
   1b368:	1380006f          	j	1b4a0 <rt_timer_check+0x168>
    {
        t = rt_list_entry(_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
   1b36c:	92c18793          	addi	a5,gp,-1748 # 2248c <_timer_list>
   1b370:	0007a783          	lw	a5,0(a5)
   1b374:	fec78793          	addi	a5,a5,-20
   1b378:	fef42423          	sw	a5,-24(s0)

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
   1b37c:	fe842783          	lw	a5,-24(s0)
   1b380:	0287a783          	lw	a5,40(a5)
   1b384:	fec42703          	lw	a4,-20(s0)
   1b388:	40f70733          	sub	a4,a4,a5
   1b38c:	800007b7          	lui	a5,0x80000
   1b390:	ffe7c793          	xori	a5,a5,-2
   1b394:	12e7e063          	bltu	a5,a4,1b4b4 <rt_timer_check+0x17c>
        {
            RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
   1b398:	bbc18793          	addi	a5,gp,-1092 # 2271c <rt_timer_enter_hook>
   1b39c:	0007a783          	lw	a5,0(a5) # 80000000 <__top+0x70000010>
   1b3a0:	00078a63          	beqz	a5,1b3b4 <rt_timer_check+0x7c>
   1b3a4:	bbc18793          	addi	a5,gp,-1092 # 2271c <rt_timer_enter_hook>
   1b3a8:	0007a783          	lw	a5,0(a5)
   1b3ac:	fe842503          	lw	a0,-24(s0)
   1b3b0:	000780e7          	jalr	a5

            /* remove timer from timer list firstly */
            _timer_remove(t);
   1b3b4:	fe842503          	lw	a0,-24(s0)
   1b3b8:	e40ff0ef          	jal	ra,1a9f8 <_timer_remove>
            if (!(t->parent.flag & RT_TIMER_FLAG_PERIODIC))
   1b3bc:	fe842783          	lw	a5,-24(s0)
   1b3c0:	0097c783          	lbu	a5,9(a5)
   1b3c4:	0027f793          	andi	a5,a5,2
   1b3c8:	00079e63          	bnez	a5,1b3e4 <rt_timer_check+0xac>
            {
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1b3cc:	fe842783          	lw	a5,-24(s0)
   1b3d0:	0097c783          	lbu	a5,9(a5)
   1b3d4:	ffe7f793          	andi	a5,a5,-2
   1b3d8:	0ff7f713          	andi	a4,a5,255
   1b3dc:	fe842783          	lw	a5,-24(s0)
   1b3e0:	00e784a3          	sb	a4,9(a5)
            }
            /* add timer to temporary list  */
            rt_list_insert_after(&list, &(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
   1b3e4:	fe842783          	lw	a5,-24(s0)
   1b3e8:	01478713          	addi	a4,a5,20
   1b3ec:	fe040793          	addi	a5,s0,-32
   1b3f0:	00070593          	mv	a1,a4
   1b3f4:	00078513          	mv	a0,a5
   1b3f8:	b6cff0ef          	jal	ra,1a764 <rt_list_insert_after>
            /* call timeout function */
            t->timeout_func(t->parameter);
   1b3fc:	fe842783          	lw	a5,-24(s0)
   1b400:	01c7a703          	lw	a4,28(a5)
   1b404:	fe842783          	lw	a5,-24(s0)
   1b408:	0207a783          	lw	a5,32(a5)
   1b40c:	00078513          	mv	a0,a5
   1b410:	000700e7          	jalr	a4

            /* re-get tick */
            current_tick = rt_tick_get();
   1b414:	ce5fc0ef          	jal	ra,180f8 <rt_tick_get>
   1b418:	fea42623          	sw	a0,-20(s0)

            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
   1b41c:	bc018793          	addi	a5,gp,-1088 # 22720 <rt_timer_exit_hook>
   1b420:	0007a783          	lw	a5,0(a5)
   1b424:	00078a63          	beqz	a5,1b438 <rt_timer_check+0x100>
   1b428:	bc018793          	addi	a5,gp,-1088 # 22720 <rt_timer_exit_hook>
   1b42c:	0007a783          	lw	a5,0(a5)
   1b430:	fe842503          	lw	a0,-24(s0)
   1b434:	000780e7          	jalr	a5
            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* Check whether the timer object is detached or started again */
            if (rt_list_isempty(&list))
   1b438:	fe040793          	addi	a5,s0,-32
   1b43c:	00078513          	mv	a0,a5
   1b440:	be4ff0ef          	jal	ra,1a824 <rt_list_isempty>
   1b444:	00050793          	mv	a5,a0
   1b448:	00078463          	beqz	a5,1b450 <rt_timer_check+0x118>
            {
                continue;
   1b44c:	0540006f          	j	1b4a0 <rt_timer_check+0x168>
            }
            rt_list_remove(&(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
   1b450:	fe842783          	lw	a5,-24(s0)
   1b454:	01478793          	addi	a5,a5,20
   1b458:	00078513          	mv	a0,a5
   1b45c:	b64ff0ef          	jal	ra,1a7c0 <rt_list_remove>
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
   1b460:	fe842783          	lw	a5,-24(s0)
   1b464:	0097c783          	lbu	a5,9(a5)
   1b468:	0027f793          	andi	a5,a5,2
   1b46c:	02078a63          	beqz	a5,1b4a0 <rt_timer_check+0x168>
                (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
   1b470:	fe842783          	lw	a5,-24(s0)
   1b474:	0097c783          	lbu	a5,9(a5)
   1b478:	0017f793          	andi	a5,a5,1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
   1b47c:	02078263          	beqz	a5,1b4a0 <rt_timer_check+0x168>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1b480:	fe842783          	lw	a5,-24(s0)
   1b484:	0097c783          	lbu	a5,9(a5)
   1b488:	ffe7f793          	andi	a5,a5,-2
   1b48c:	0ff7f713          	andi	a4,a5,255
   1b490:	fe842783          	lw	a5,-24(s0)
   1b494:	00e784a3          	sb	a4,9(a5)
                rt_timer_start(t);
   1b498:	fe842503          	lw	a0,-24(s0)
   1b49c:	8adff0ef          	jal	ra,1ad48 <rt_timer_start>
    while (!rt_list_isempty(&_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
   1b4a0:	92c18513          	addi	a0,gp,-1748 # 2248c <_timer_list>
   1b4a4:	b80ff0ef          	jal	ra,1a824 <rt_list_isempty>
   1b4a8:	00050793          	mv	a5,a0
   1b4ac:	ec0780e3          	beqz	a5,1b36c <rt_timer_check+0x34>
   1b4b0:	0080006f          	j	1b4b8 <rt_timer_check+0x180>
            }
        }
        else break;
   1b4b4:	00000013          	nop
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1b4b8:	00048513          	mv	a0,s1
   1b4bc:	195000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
}
   1b4c0:	00000013          	nop
   1b4c4:	01c12083          	lw	ra,28(sp)
   1b4c8:	01812403          	lw	s0,24(sp)
   1b4cc:	01412483          	lw	s1,20(sp)
   1b4d0:	02010113          	addi	sp,sp,32
   1b4d4:	00008067          	ret

0001b4d8 <rt_timer_next_timeout_tick>:
 * @brief This function will return the next timeout tick in the system.
 *
 * @return the next timeout tick in the system
 */
rt_tick_t rt_timer_next_timeout_tick(void)
{
   1b4d8:	ff010113          	addi	sp,sp,-16
   1b4dc:	00112623          	sw	ra,12(sp)
   1b4e0:	00812423          	sw	s0,8(sp)
   1b4e4:	01010413          	addi	s0,sp,16
    return _timer_list_next_timeout(_timer_list);
   1b4e8:	92c18513          	addi	a0,gp,-1748 # 2248c <_timer_list>
   1b4ec:	c94ff0ef          	jal	ra,1a980 <_timer_list_next_timeout>
   1b4f0:	00050793          	mv	a5,a0
}
   1b4f4:	00078513          	mv	a0,a5
   1b4f8:	00c12083          	lw	ra,12(sp)
   1b4fc:	00812403          	lw	s0,8(sp)
   1b500:	01010113          	addi	sp,sp,16
   1b504:	00008067          	ret

0001b508 <rt_soft_timer_check>:
/**
 * @brief This function will check software-timer list, if a timeout event happens, the
 *        corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
   1b508:	fe010113          	addi	sp,sp,-32
   1b50c:	00112e23          	sw	ra,28(sp)
   1b510:	00812c23          	sw	s0,24(sp)
   1b514:	00912a23          	sw	s1,20(sp)
   1b518:	02010413          	addi	s0,sp,32
    rt_tick_t current_tick;
    struct rt_timer *t;
    register rt_base_t level;
    rt_list_t list;

    rt_list_init(&list);
   1b51c:	fe040793          	addi	a5,s0,-32
   1b520:	00078513          	mv	a0,a5
   1b524:	a04ff0ef          	jal	ra,1a728 <rt_list_init>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1b528:	121000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1b52c:	00050493          	mv	s1,a0

    while (!rt_list_isempty(&_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
   1b530:	15c0006f          	j	1b68c <rt_soft_timer_check+0x184>
    {
        t = rt_list_entry(_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
   1b534:	93418793          	addi	a5,gp,-1740 # 22494 <_soft_timer_list>
   1b538:	0007a783          	lw	a5,0(a5)
   1b53c:	fec78793          	addi	a5,a5,-20
   1b540:	fef42623          	sw	a5,-20(s0)
                            struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

        current_tick = rt_tick_get();
   1b544:	bb5fc0ef          	jal	ra,180f8 <rt_tick_get>
   1b548:	fea42423          	sw	a0,-24(s0)

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
   1b54c:	fec42783          	lw	a5,-20(s0)
   1b550:	0287a783          	lw	a5,40(a5)
   1b554:	fe842703          	lw	a4,-24(s0)
   1b558:	40f70733          	sub	a4,a4,a5
   1b55c:	800007b7          	lui	a5,0x80000
   1b560:	ffe7c793          	xori	a5,a5,-2
   1b564:	12e7ee63          	bltu	a5,a4,1b6a0 <rt_soft_timer_check+0x198>
        {
            RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
   1b568:	bbc18793          	addi	a5,gp,-1092 # 2271c <rt_timer_enter_hook>
   1b56c:	0007a783          	lw	a5,0(a5) # 80000000 <__top+0x70000010>
   1b570:	00078a63          	beqz	a5,1b584 <rt_soft_timer_check+0x7c>
   1b574:	bbc18793          	addi	a5,gp,-1092 # 2271c <rt_timer_enter_hook>
   1b578:	0007a783          	lw	a5,0(a5)
   1b57c:	fec42503          	lw	a0,-20(s0)
   1b580:	000780e7          	jalr	a5

            /* remove timer from timer list firstly */
            _timer_remove(t);
   1b584:	fec42503          	lw	a0,-20(s0)
   1b588:	c70ff0ef          	jal	ra,1a9f8 <_timer_remove>
            if (!(t->parent.flag & RT_TIMER_FLAG_PERIODIC))
   1b58c:	fec42783          	lw	a5,-20(s0)
   1b590:	0097c783          	lbu	a5,9(a5)
   1b594:	0027f793          	andi	a5,a5,2
   1b598:	00079e63          	bnez	a5,1b5b4 <rt_soft_timer_check+0xac>
            {
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1b59c:	fec42783          	lw	a5,-20(s0)
   1b5a0:	0097c783          	lbu	a5,9(a5)
   1b5a4:	ffe7f793          	andi	a5,a5,-2
   1b5a8:	0ff7f713          	andi	a4,a5,255
   1b5ac:	fec42783          	lw	a5,-20(s0)
   1b5b0:	00e784a3          	sb	a4,9(a5)
            }
            /* add timer to temporary list  */
            rt_list_insert_after(&list, &(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
   1b5b4:	fec42783          	lw	a5,-20(s0)
   1b5b8:	01478713          	addi	a4,a5,20
   1b5bc:	fe040793          	addi	a5,s0,-32
   1b5c0:	00070593          	mv	a1,a4
   1b5c4:	00078513          	mv	a0,a5
   1b5c8:	99cff0ef          	jal	ra,1a764 <rt_list_insert_after>

            _soft_timer_status = RT_SOFT_TIMER_BUSY;
   1b5cc:	80c18793          	addi	a5,gp,-2036 # 2236c <_soft_timer_status>
   1b5d0:	00078023          	sb	zero,0(a5)
            /* enable interrupt */
            rt_hw_interrupt_enable(level);
   1b5d4:	00048513          	mv	a0,s1
   1b5d8:	079000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

            /* call timeout function */
            t->timeout_func(t->parameter);
   1b5dc:	fec42783          	lw	a5,-20(s0)
   1b5e0:	01c7a703          	lw	a4,28(a5)
   1b5e4:	fec42783          	lw	a5,-20(s0)
   1b5e8:	0207a783          	lw	a5,32(a5)
   1b5ec:	00078513          	mv	a0,a5
   1b5f0:	000700e7          	jalr	a4

            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
   1b5f4:	bc018793          	addi	a5,gp,-1088 # 22720 <rt_timer_exit_hook>
   1b5f8:	0007a783          	lw	a5,0(a5)
   1b5fc:	00078a63          	beqz	a5,1b610 <rt_soft_timer_check+0x108>
   1b600:	bc018793          	addi	a5,gp,-1088 # 22720 <rt_timer_exit_hook>
   1b604:	0007a783          	lw	a5,0(a5)
   1b608:	fec42503          	lw	a0,-20(s0)
   1b60c:	000780e7          	jalr	a5
            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* disable interrupt */
            level = rt_hw_interrupt_disable();
   1b610:	039000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1b614:	00050493          	mv	s1,a0

            _soft_timer_status = RT_SOFT_TIMER_IDLE;
   1b618:	80c18793          	addi	a5,gp,-2036 # 2236c <_soft_timer_status>
   1b61c:	00100713          	li	a4,1
   1b620:	00e78023          	sb	a4,0(a5)
            /* Check whether the timer object is detached or started again */
            if (rt_list_isempty(&list))
   1b624:	fe040793          	addi	a5,s0,-32
   1b628:	00078513          	mv	a0,a5
   1b62c:	9f8ff0ef          	jal	ra,1a824 <rt_list_isempty>
   1b630:	00050793          	mv	a5,a0
   1b634:	00078463          	beqz	a5,1b63c <rt_soft_timer_check+0x134>
            {
                continue;
   1b638:	0540006f          	j	1b68c <rt_soft_timer_check+0x184>
            }
            rt_list_remove(&(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
   1b63c:	fec42783          	lw	a5,-20(s0)
   1b640:	01478793          	addi	a5,a5,20
   1b644:	00078513          	mv	a0,a5
   1b648:	978ff0ef          	jal	ra,1a7c0 <rt_list_remove>
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
   1b64c:	fec42783          	lw	a5,-20(s0)
   1b650:	0097c783          	lbu	a5,9(a5)
   1b654:	0027f793          	andi	a5,a5,2
   1b658:	02078a63          	beqz	a5,1b68c <rt_soft_timer_check+0x184>
                (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
   1b65c:	fec42783          	lw	a5,-20(s0)
   1b660:	0097c783          	lbu	a5,9(a5)
   1b664:	0017f793          	andi	a5,a5,1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
   1b668:	02078263          	beqz	a5,1b68c <rt_soft_timer_check+0x184>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
   1b66c:	fec42783          	lw	a5,-20(s0)
   1b670:	0097c783          	lbu	a5,9(a5)
   1b674:	ffe7f793          	andi	a5,a5,-2
   1b678:	0ff7f713          	andi	a4,a5,255
   1b67c:	fec42783          	lw	a5,-20(s0)
   1b680:	00e784a3          	sb	a4,9(a5)
                rt_timer_start(t);
   1b684:	fec42503          	lw	a0,-20(s0)
   1b688:	ec0ff0ef          	jal	ra,1ad48 <rt_timer_start>
    while (!rt_list_isempty(&_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
   1b68c:	93418513          	addi	a0,gp,-1740 # 22494 <_soft_timer_list>
   1b690:	994ff0ef          	jal	ra,1a824 <rt_list_isempty>
   1b694:	00050793          	mv	a5,a0
   1b698:	e8078ee3          	beqz	a5,1b534 <rt_soft_timer_check+0x2c>
   1b69c:	0080006f          	j	1b6a4 <rt_soft_timer_check+0x19c>
            }
        }
        else break; /* not check anymore */
   1b6a0:	00000013          	nop
    }
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1b6a4:	00048513          	mv	a0,s1
   1b6a8:	7a8000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
   1b6ac:	00000013          	nop
   1b6b0:	01c12083          	lw	ra,28(sp)
   1b6b4:	01812403          	lw	s0,24(sp)
   1b6b8:	01412483          	lw	s1,20(sp)
   1b6bc:	02010113          	addi	sp,sp,32
   1b6c0:	00008067          	ret

0001b6c4 <_timer_thread_entry>:
 * @brief System timer thread entry
 *
 * @param parameter is the arg of the thread
 */
static void _timer_thread_entry(void *parameter)
{
   1b6c4:	fd010113          	addi	sp,sp,-48
   1b6c8:	02112623          	sw	ra,44(sp)
   1b6cc:	02812423          	sw	s0,40(sp)
   1b6d0:	03010413          	addi	s0,sp,48
   1b6d4:	fca42e23          	sw	a0,-36(s0)
    rt_tick_t next_timeout;

    while (1)
    {
        /* get the next timeout tick */
        next_timeout = _timer_list_next_timeout(_soft_timer_list);
   1b6d8:	93418513          	addi	a0,gp,-1740 # 22494 <_soft_timer_list>
   1b6dc:	aa4ff0ef          	jal	ra,1a980 <_timer_list_next_timeout>
   1b6e0:	fea42623          	sw	a0,-20(s0)
        if (next_timeout == RT_TICK_MAX)
   1b6e4:	fec42703          	lw	a4,-20(s0)
   1b6e8:	fff00793          	li	a5,-1
   1b6ec:	00f71e63          	bne	a4,a5,1b708 <_timer_thread_entry+0x44>
        {
            /* no software timer exist, suspend self. */
            rt_thread_suspend(rt_thread_self());
   1b6f0:	de1f70ef          	jal	ra,134d0 <rt_thread_self>
   1b6f4:	00050793          	mv	a5,a0
   1b6f8:	00078513          	mv	a0,a5
   1b6fc:	ea0f80ef          	jal	ra,13d9c <rt_thread_suspend>
            rt_schedule();
   1b700:	f89fc0ef          	jal	ra,18688 <rt_schedule>
   1b704:	03c0006f          	j	1b740 <_timer_thread_entry+0x7c>
        else
        {
            rt_tick_t current_tick;

            /* get current tick */
            current_tick = rt_tick_get();
   1b708:	9f1fc0ef          	jal	ra,180f8 <rt_tick_get>
   1b70c:	fea42423          	sw	a0,-24(s0)

            if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
   1b710:	fec42703          	lw	a4,-20(s0)
   1b714:	fe842783          	lw	a5,-24(s0)
   1b718:	40f70733          	sub	a4,a4,a5
   1b71c:	800007b7          	lui	a5,0x80000
   1b720:	ffe7c793          	xori	a5,a5,-2
   1b724:	00e7ee63          	bltu	a5,a4,1b740 <_timer_thread_entry+0x7c>
            {
                /* get the delta timeout tick */
                next_timeout = next_timeout - current_tick;
   1b728:	fec42703          	lw	a4,-20(s0)
   1b72c:	fe842783          	lw	a5,-24(s0)
   1b730:	40f707b3          	sub	a5,a4,a5
   1b734:	fef42623          	sw	a5,-20(s0)
                rt_thread_delay(next_timeout);
   1b738:	fec42503          	lw	a0,-20(s0)
   1b73c:	ad0f80ef          	jal	ra,13a0c <rt_thread_delay>
            }
        }

        /* check software timer */
        rt_soft_timer_check();
   1b740:	dc9ff0ef          	jal	ra,1b508 <rt_soft_timer_check>
        next_timeout = _timer_list_next_timeout(_soft_timer_list);
   1b744:	f95ff06f          	j	1b6d8 <_timer_thread_entry+0x14>

0001b748 <rt_system_timer_init>:
 * @ingroup SystemInit
 *
 * @brief This function will initialize system timer
 */
void rt_system_timer_init(void)
{
   1b748:	fe010113          	addi	sp,sp,-32
   1b74c:	00112e23          	sw	ra,28(sp)
   1b750:	00812c23          	sw	s0,24(sp)
   1b754:	02010413          	addi	s0,sp,32
    int i;

    for (i = 0; i < sizeof(_timer_list) / sizeof(_timer_list[0]); i++)
   1b758:	fe042623          	sw	zero,-20(s0)
   1b75c:	0280006f          	j	1b784 <rt_system_timer_init+0x3c>
    {
        rt_list_init(_timer_list + i);
   1b760:	fec42783          	lw	a5,-20(s0)
   1b764:	00379713          	slli	a4,a5,0x3
   1b768:	92c18793          	addi	a5,gp,-1748 # 2248c <_timer_list>
   1b76c:	00f707b3          	add	a5,a4,a5
   1b770:	00078513          	mv	a0,a5
   1b774:	fb5fe0ef          	jal	ra,1a728 <rt_list_init>
    for (i = 0; i < sizeof(_timer_list) / sizeof(_timer_list[0]); i++)
   1b778:	fec42783          	lw	a5,-20(s0)
   1b77c:	00178793          	addi	a5,a5,1 # 80000001 <__top+0x70000011>
   1b780:	fef42623          	sw	a5,-20(s0)
   1b784:	fec42783          	lw	a5,-20(s0)
   1b788:	fc078ce3          	beqz	a5,1b760 <rt_system_timer_init+0x18>
    }
}
   1b78c:	00000013          	nop
   1b790:	00000013          	nop
   1b794:	01c12083          	lw	ra,28(sp)
   1b798:	01812403          	lw	s0,24(sp)
   1b79c:	02010113          	addi	sp,sp,32
   1b7a0:	00008067          	ret

0001b7a4 <rt_system_timer_thread_init>:
 * @ingroup SystemInit
 *
 * @brief This function will initialize system timer thread
 */
void rt_system_timer_thread_init(void)
{
   1b7a4:	fe010113          	addi	sp,sp,-32
   1b7a8:	00112e23          	sw	ra,28(sp)
   1b7ac:	00812c23          	sw	s0,24(sp)
   1b7b0:	02010413          	addi	s0,sp,32
#ifdef RT_USING_TIMER_SOFT
    int i;

    for (i = 0;
   1b7b4:	fe042623          	sw	zero,-20(s0)
   1b7b8:	0280006f          	j	1b7e0 <rt_system_timer_thread_init+0x3c>
         i < sizeof(_soft_timer_list) / sizeof(_soft_timer_list[0]);
         i++)
    {
        rt_list_init(_soft_timer_list + i);
   1b7bc:	fec42783          	lw	a5,-20(s0)
   1b7c0:	00379713          	slli	a4,a5,0x3
   1b7c4:	93418793          	addi	a5,gp,-1740 # 22494 <_soft_timer_list>
   1b7c8:	00f707b3          	add	a5,a4,a5
   1b7cc:	00078513          	mv	a0,a5
   1b7d0:	f59fe0ef          	jal	ra,1a728 <rt_list_init>
         i++)
   1b7d4:	fec42783          	lw	a5,-20(s0)
   1b7d8:	00178793          	addi	a5,a5,1
   1b7dc:	fef42623          	sw	a5,-20(s0)
    for (i = 0;
   1b7e0:	fec42783          	lw	a5,-20(s0)
   1b7e4:	fc078ce3          	beqz	a5,1b7bc <rt_system_timer_thread_init+0x18>
    }

    /* start software timer thread */
    rt_thread_init(&_timer_thread,
   1b7e8:	00a00893          	li	a7,10
   1b7ec:	00400813          	li	a6,4
   1b7f0:	20000793          	li	a5,512
   1b7f4:	00007717          	auipc	a4,0x7
   1b7f8:	d2870713          	addi	a4,a4,-728 # 2251c <_timer_thread_stack>
   1b7fc:	00000693          	li	a3,0
   1b800:	00000617          	auipc	a2,0x0
   1b804:	ec460613          	addi	a2,a2,-316 # 1b6c4 <_timer_thread_entry>
   1b808:	00006597          	auipc	a1,0x6
   1b80c:	ab458593          	addi	a1,a1,-1356 # 212bc <__FUNCTION__.2432+0x108>
   1b810:	93c18513          	addi	a0,gp,-1732 # 2249c <_timer_thread>
   1b814:	bf9f70ef          	jal	ra,1340c <rt_thread_init>
                   sizeof(_timer_thread_stack),
                   RT_TIMER_THREAD_PRIO,
                   10);

    /* startup */
    rt_thread_startup(&_timer_thread);
   1b818:	93c18513          	addi	a0,gp,-1732 # 2249c <_timer_thread>
   1b81c:	cd9f70ef          	jal	ra,134f4 <rt_thread_startup>
#endif /* RT_USING_TIMER_SOFT */
}
   1b820:	00000013          	nop
   1b824:	01c12083          	lw	ra,28(sp)
   1b828:	01812403          	lw	s0,24(sp)
   1b82c:	02010113          	addi	sp,sp,32
   1b830:	00008067          	ret

0001b834 <rt_list_insert_after>:
{
   1b834:	fe010113          	addi	sp,sp,-32
   1b838:	00812e23          	sw	s0,28(sp)
   1b83c:	02010413          	addi	s0,sp,32
   1b840:	fea42623          	sw	a0,-20(s0)
   1b844:	feb42423          	sw	a1,-24(s0)
    l->next->prev = n;
   1b848:	fec42783          	lw	a5,-20(s0)
   1b84c:	0007a783          	lw	a5,0(a5)
   1b850:	fe842703          	lw	a4,-24(s0)
   1b854:	00e7a223          	sw	a4,4(a5)
    n->next = l->next;
   1b858:	fec42783          	lw	a5,-20(s0)
   1b85c:	0007a703          	lw	a4,0(a5)
   1b860:	fe842783          	lw	a5,-24(s0)
   1b864:	00e7a023          	sw	a4,0(a5)
    l->next = n;
   1b868:	fec42783          	lw	a5,-20(s0)
   1b86c:	fe842703          	lw	a4,-24(s0)
   1b870:	00e7a023          	sw	a4,0(a5)
    n->prev = l;
   1b874:	fe842783          	lw	a5,-24(s0)
   1b878:	fec42703          	lw	a4,-20(s0)
   1b87c:	00e7a223          	sw	a4,4(a5)
}
   1b880:	00000013          	nop
   1b884:	01c12403          	lw	s0,28(sp)
   1b888:	02010113          	addi	sp,sp,32
   1b88c:	00008067          	ret

0001b890 <rt_list_remove>:
{
   1b890:	fe010113          	addi	sp,sp,-32
   1b894:	00812e23          	sw	s0,28(sp)
   1b898:	02010413          	addi	s0,sp,32
   1b89c:	fea42623          	sw	a0,-20(s0)
    n->next->prev = n->prev;
   1b8a0:	fec42783          	lw	a5,-20(s0)
   1b8a4:	0007a783          	lw	a5,0(a5)
   1b8a8:	fec42703          	lw	a4,-20(s0)
   1b8ac:	00472703          	lw	a4,4(a4)
   1b8b0:	00e7a223          	sw	a4,4(a5)
    n->prev->next = n->next;
   1b8b4:	fec42783          	lw	a5,-20(s0)
   1b8b8:	0047a783          	lw	a5,4(a5)
   1b8bc:	fec42703          	lw	a4,-20(s0)
   1b8c0:	00072703          	lw	a4,0(a4)
   1b8c4:	00e7a023          	sw	a4,0(a5)
    n->next = n->prev = n;
   1b8c8:	fec42783          	lw	a5,-20(s0)
   1b8cc:	fec42703          	lw	a4,-20(s0)
   1b8d0:	00e7a223          	sw	a4,4(a5)
   1b8d4:	fec42783          	lw	a5,-20(s0)
   1b8d8:	0047a703          	lw	a4,4(a5)
   1b8dc:	fec42783          	lw	a5,-20(s0)
   1b8e0:	00e7a023          	sw	a4,0(a5)
}
   1b8e4:	00000013          	nop
   1b8e8:	01c12403          	lw	s0,28(sp)
   1b8ec:	02010113          	addi	sp,sp,32
   1b8f0:	00008067          	ret

0001b8f4 <rt_thread_idle_sethook>:
 *         -RT_EFULL: hook list is full.
 *
 * @note the hook function must be simple and never be blocked or suspend.
 */
rt_err_t rt_thread_idle_sethook(void (*hook)(void))
{
   1b8f4:	fd010113          	addi	sp,sp,-48
   1b8f8:	02112623          	sw	ra,44(sp)
   1b8fc:	02812423          	sw	s0,40(sp)
   1b900:	03010413          	addi	s0,sp,48
   1b904:	fca42e23          	sw	a0,-36(s0)
    rt_size_t i;
    rt_base_t level;
    rt_err_t ret = -RT_EFULL;
   1b908:	ffd00793          	li	a5,-3
   1b90c:	fef42423          	sw	a5,-24(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1b910:	538000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1b914:	fea42223          	sw	a0,-28(s0)

    for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
   1b918:	fe042623          	sw	zero,-20(s0)
   1b91c:	0480006f          	j	1b964 <rt_thread_idle_sethook+0x70>
    {
        if (idle_hook_list[i] == RT_NULL)
   1b920:	d4818713          	addi	a4,gp,-696 # 228a8 <idle_hook_list>
   1b924:	fec42783          	lw	a5,-20(s0)
   1b928:	00279793          	slli	a5,a5,0x2
   1b92c:	00f707b3          	add	a5,a4,a5
   1b930:	0007a783          	lw	a5,0(a5)
   1b934:	02079263          	bnez	a5,1b958 <rt_thread_idle_sethook+0x64>
        {
            idle_hook_list[i] = hook;
   1b938:	d4818713          	addi	a4,gp,-696 # 228a8 <idle_hook_list>
   1b93c:	fec42783          	lw	a5,-20(s0)
   1b940:	00279793          	slli	a5,a5,0x2
   1b944:	00f707b3          	add	a5,a4,a5
   1b948:	fdc42703          	lw	a4,-36(s0)
   1b94c:	00e7a023          	sw	a4,0(a5)
            ret = RT_EOK;
   1b950:	fe042423          	sw	zero,-24(s0)
            break;
   1b954:	01c0006f          	j	1b970 <rt_thread_idle_sethook+0x7c>
    for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
   1b958:	fec42783          	lw	a5,-20(s0)
   1b95c:	00178793          	addi	a5,a5,1
   1b960:	fef42623          	sw	a5,-20(s0)
   1b964:	fec42703          	lw	a4,-20(s0)
   1b968:	00300793          	li	a5,3
   1b96c:	fae7fae3          	bgeu	a5,a4,1b920 <rt_thread_idle_sethook+0x2c>
        }
    }
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1b970:	fe442503          	lw	a0,-28(s0)
   1b974:	4dc000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return ret;
   1b978:	fe842783          	lw	a5,-24(s0)
}
   1b97c:	00078513          	mv	a0,a5
   1b980:	02c12083          	lw	ra,44(sp)
   1b984:	02812403          	lw	s0,40(sp)
   1b988:	03010113          	addi	sp,sp,48
   1b98c:	00008067          	ret

0001b990 <rt_thread_idle_delhook>:
 *
 * @return RT_EOK: delete OK.
 *         -RT_ENOSYS: hook was not found.
 */
rt_err_t rt_thread_idle_delhook(void (*hook)(void))
{
   1b990:	fd010113          	addi	sp,sp,-48
   1b994:	02112623          	sw	ra,44(sp)
   1b998:	02812423          	sw	s0,40(sp)
   1b99c:	03010413          	addi	s0,sp,48
   1b9a0:	fca42e23          	sw	a0,-36(s0)
    rt_size_t i;
    rt_base_t level;
    rt_err_t ret = -RT_ENOSYS;
   1b9a4:	ffa00793          	li	a5,-6
   1b9a8:	fef42423          	sw	a5,-24(s0)

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
   1b9ac:	49c000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1b9b0:	fea42223          	sw	a0,-28(s0)

    for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
   1b9b4:	fe042623          	sw	zero,-20(s0)
   1b9b8:	0480006f          	j	1ba00 <rt_thread_idle_delhook+0x70>
    {
        if (idle_hook_list[i] == hook)
   1b9bc:	d4818713          	addi	a4,gp,-696 # 228a8 <idle_hook_list>
   1b9c0:	fec42783          	lw	a5,-20(s0)
   1b9c4:	00279793          	slli	a5,a5,0x2
   1b9c8:	00f707b3          	add	a5,a4,a5
   1b9cc:	0007a783          	lw	a5,0(a5)
   1b9d0:	fdc42703          	lw	a4,-36(s0)
   1b9d4:	02f71063          	bne	a4,a5,1b9f4 <rt_thread_idle_delhook+0x64>
        {
            idle_hook_list[i] = RT_NULL;
   1b9d8:	d4818713          	addi	a4,gp,-696 # 228a8 <idle_hook_list>
   1b9dc:	fec42783          	lw	a5,-20(s0)
   1b9e0:	00279793          	slli	a5,a5,0x2
   1b9e4:	00f707b3          	add	a5,a4,a5
   1b9e8:	0007a023          	sw	zero,0(a5)
            ret = RT_EOK;
   1b9ec:	fe042423          	sw	zero,-24(s0)
            break;
   1b9f0:	01c0006f          	j	1ba0c <rt_thread_idle_delhook+0x7c>
    for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
   1b9f4:	fec42783          	lw	a5,-20(s0)
   1b9f8:	00178793          	addi	a5,a5,1
   1b9fc:	fef42623          	sw	a5,-20(s0)
   1ba00:	fec42703          	lw	a4,-20(s0)
   1ba04:	00300793          	li	a5,3
   1ba08:	fae7fae3          	bgeu	a5,a4,1b9bc <rt_thread_idle_delhook+0x2c>
        }
    }
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
   1ba0c:	fe442503          	lw	a0,-28(s0)
   1ba10:	440000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

    return ret;
   1ba14:	fe842783          	lw	a5,-24(s0)
}
   1ba18:	00078513          	mv	a0,a5
   1ba1c:	02c12083          	lw	ra,44(sp)
   1ba20:	02812403          	lw	s0,40(sp)
   1ba24:	03010113          	addi	sp,sp,48
   1ba28:	00008067          	ret

0001ba2c <rt_thread_defunct_enqueue>:
 * @brief Enqueue a thread to defunct queue.
 *
 * @note It must be called between rt_hw_interrupt_disable and rt_hw_interrupt_enable
 */
void rt_thread_defunct_enqueue(rt_thread_t thread)
{
   1ba2c:	fe010113          	addi	sp,sp,-32
   1ba30:	00112e23          	sw	ra,28(sp)
   1ba34:	00812c23          	sw	s0,24(sp)
   1ba38:	02010413          	addi	s0,sp,32
   1ba3c:	fea42623          	sw	a0,-20(s0)
    rt_list_insert_after(&_rt_thread_defunct, &thread->tlist);
   1ba40:	fec42783          	lw	a5,-20(s0)
   1ba44:	01478793          	addi	a5,a5,20
   1ba48:	00078593          	mv	a1,a5
   1ba4c:	81018513          	addi	a0,gp,-2032 # 22370 <_rt_thread_defunct>
   1ba50:	de5ff0ef          	jal	ra,1b834 <rt_list_insert_after>
#ifdef RT_USING_SMP
    rt_sem_release(&system_sem);
#endif
}
   1ba54:	00000013          	nop
   1ba58:	01c12083          	lw	ra,28(sp)
   1ba5c:	01812403          	lw	s0,24(sp)
   1ba60:	02010113          	addi	sp,sp,32
   1ba64:	00008067          	ret

0001ba68 <rt_thread_defunct_dequeue>:

/**
 * @brief Dequeue a thread from defunct queue.
 */
rt_thread_t rt_thread_defunct_dequeue(void)
{
   1ba68:	fe010113          	addi	sp,sp,-32
   1ba6c:	00112e23          	sw	ra,28(sp)
   1ba70:	00812c23          	sw	s0,24(sp)
   1ba74:	00912a23          	sw	s1,20(sp)
   1ba78:	02010413          	addi	s0,sp,32
    register rt_base_t lock;
    rt_thread_t thread = RT_NULL;
   1ba7c:	fe042623          	sw	zero,-20(s0)
    rt_list_t *l = &_rt_thread_defunct;
   1ba80:	81018793          	addi	a5,gp,-2032 # 22370 <_rt_thread_defunct>
   1ba84:	fef42423          	sw	a5,-24(s0)
                tlist);
        rt_list_remove(&(thread->tlist));
    }
    rt_hw_interrupt_enable(lock);
#else
    if (l->next != l)
   1ba88:	fe842783          	lw	a5,-24(s0)
   1ba8c:	0007a783          	lw	a5,0(a5)
   1ba90:	fe842703          	lw	a4,-24(s0)
   1ba94:	02f70a63          	beq	a4,a5,1bac8 <rt_thread_defunct_dequeue+0x60>
    {
        thread = rt_list_entry(l->next,
   1ba98:	fe842783          	lw	a5,-24(s0)
   1ba9c:	0007a783          	lw	a5,0(a5)
   1baa0:	fec78793          	addi	a5,a5,-20
   1baa4:	fef42623          	sw	a5,-20(s0)
                struct rt_thread,
                tlist);
        lock = rt_hw_interrupt_disable();
   1baa8:	3a0000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1baac:	00050493          	mv	s1,a0
        rt_list_remove(&(thread->tlist));
   1bab0:	fec42783          	lw	a5,-20(s0)
   1bab4:	01478793          	addi	a5,a5,20
   1bab8:	00078513          	mv	a0,a5
   1babc:	dd5ff0ef          	jal	ra,1b890 <rt_list_remove>
        rt_hw_interrupt_enable(lock);
   1bac0:	00048513          	mv	a0,s1
   1bac4:	38c000ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
    }
#endif
    return thread;
   1bac8:	fec42783          	lw	a5,-20(s0)
}
   1bacc:	00078513          	mv	a0,a5
   1bad0:	01c12083          	lw	ra,28(sp)
   1bad4:	01812403          	lw	s0,24(sp)
   1bad8:	01412483          	lw	s1,20(sp)
   1badc:	02010113          	addi	sp,sp,32
   1bae0:	00008067          	ret

0001bae4 <rt_defunct_execute>:

/**
 * @brief This function will perform system background job when system idle.
 */
static void rt_defunct_execute(void)
{
   1bae4:	fe010113          	addi	sp,sp,-32
   1bae8:	00112e23          	sw	ra,28(sp)
   1baec:	00812c23          	sw	s0,24(sp)
   1baf0:	02010413          	addi	s0,sp,32

#ifdef RT_USING_MODULE
        struct rt_dlmodule *module = RT_NULL;
#endif
        /* get defunct thread */
        thread = rt_thread_defunct_dequeue();
   1baf4:	f75ff0ef          	jal	ra,1ba68 <rt_thread_defunct_dequeue>
   1baf8:	fea42623          	sw	a0,-20(s0)
        if (thread == RT_NULL)
   1bafc:	fec42783          	lw	a5,-20(s0)
   1bb00:	06078063          	beqz	a5,1bb60 <rt_defunct_execute+0x7c>
        {
            dlmodule_destroy(module);
        }
#endif
        /* invoke thread cleanup */
        cleanup = thread->cleanup;
   1bb04:	fec42783          	lw	a5,-20(s0)
   1bb08:	0787a783          	lw	a5,120(a5)
   1bb0c:	fef42423          	sw	a5,-24(s0)
        if (cleanup != RT_NULL)
   1bb10:	fe842783          	lw	a5,-24(s0)
   1bb14:	00078863          	beqz	a5,1bb24 <rt_defunct_execute+0x40>
        {
            cleanup(thread);
   1bb18:	fe842783          	lw	a5,-24(s0)
   1bb1c:	fec42503          	lw	a0,-20(s0)
   1bb20:	000780e7          	jalr	a5
#ifdef RT_USING_SIGNALS
        rt_thread_free_sig(thread);
#endif

        /* if it's a system object, not delete it */
        if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
   1bb24:	fec42503          	lw	a0,-20(s0)
   1bb28:	b98f50ef          	jal	ra,10ec0 <rt_object_is_systemobject>
   1bb2c:	00050713          	mv	a4,a0
   1bb30:	00100793          	li	a5,1
   1bb34:	00f71863          	bne	a4,a5,1bb44 <rt_defunct_execute+0x60>
        {
            /* detach this object */
            rt_object_detach((rt_object_t)thread);
   1bb38:	fec42503          	lw	a0,-20(s0)
   1bb3c:	8ccf50ef          	jal	ra,10c08 <rt_object_detach>
   1bb40:	fb5ff06f          	j	1baf4 <rt_defunct_execute+0x10>
        }
        else
        {
#ifdef RT_USING_HEAP
            /* release thread's stack */
            RT_KERNEL_FREE(thread->stack_addr);
   1bb44:	fec42783          	lw	a5,-20(s0)
   1bb48:	0287a783          	lw	a5,40(a5)
   1bb4c:	00078513          	mv	a0,a5
   1bb50:	9fcf70ef          	jal	ra,12d4c <rt_free>
            /* delete thread object */
            rt_object_delete((rt_object_t)thread);
   1bb54:	fec42503          	lw	a0,-20(s0)
   1bb58:	aa0f50ef          	jal	ra,10df8 <rt_object_delete>
    {
   1bb5c:	f99ff06f          	j	1baf4 <rt_defunct_execute+0x10>
            break;
   1bb60:	00000013          	nop
#endif
        }
    }
}
   1bb64:	00000013          	nop
   1bb68:	01c12083          	lw	ra,28(sp)
   1bb6c:	01812403          	lw	s0,24(sp)
   1bb70:	02010113          	addi	sp,sp,32
   1bb74:	00008067          	ret

0001bb78 <rt_thread_idle_entry>:

extern void rt_system_power_manager(void);
static void rt_thread_idle_entry(void *parameter)
{
   1bb78:	fd010113          	addi	sp,sp,-48
   1bb7c:	02112623          	sw	ra,44(sp)
   1bb80:	02812423          	sw	s0,40(sp)
   1bb84:	03010413          	addi	s0,sp,48
   1bb88:	fca42e23          	sw	a0,-36(s0)
    {
#ifdef RT_USING_IDLE_HOOK
        rt_size_t i;
        void (*idle_hook)(void);

        for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
   1bb8c:	fe042623          	sw	zero,-20(s0)
   1bb90:	0380006f          	j	1bbc8 <rt_thread_idle_entry+0x50>
        {
            idle_hook = idle_hook_list[i];
   1bb94:	d4818713          	addi	a4,gp,-696 # 228a8 <idle_hook_list>
   1bb98:	fec42783          	lw	a5,-20(s0)
   1bb9c:	00279793          	slli	a5,a5,0x2
   1bba0:	00f707b3          	add	a5,a4,a5
   1bba4:	0007a783          	lw	a5,0(a5)
   1bba8:	fef42423          	sw	a5,-24(s0)
            if (idle_hook != RT_NULL)
   1bbac:	fe842783          	lw	a5,-24(s0)
   1bbb0:	00078663          	beqz	a5,1bbbc <rt_thread_idle_entry+0x44>
            {
                idle_hook();
   1bbb4:	fe842783          	lw	a5,-24(s0)
   1bbb8:	000780e7          	jalr	a5
        for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
   1bbbc:	fec42783          	lw	a5,-20(s0)
   1bbc0:	00178793          	addi	a5,a5,1
   1bbc4:	fef42623          	sw	a5,-20(s0)
   1bbc8:	fec42703          	lw	a4,-20(s0)
   1bbcc:	00300793          	li	a5,3
   1bbd0:	fce7f2e3          	bgeu	a5,a4,1bb94 <rt_thread_idle_entry+0x1c>
            }
        }
#endif /* RT_USING_IDLE_HOOK */

#ifndef RT_USING_SMP
        rt_defunct_execute();
   1bbd4:	f11ff0ef          	jal	ra,1bae4 <rt_defunct_execute>
    {
   1bbd8:	fb5ff06f          	j	1bb8c <rt_thread_idle_entry+0x14>

0001bbdc <rt_thread_idle_init>:
 * @brief This function will initialize idle thread, then start it.
 *
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
   1bbdc:	fe010113          	addi	sp,sp,-32
   1bbe0:	00112e23          	sw	ra,28(sp)
   1bbe4:	00812c23          	sw	s0,24(sp)
   1bbe8:	02010413          	addi	s0,sp,32
    rt_ubase_t i;
    char tidle_name[RT_NAME_MAX];

    for (i = 0; i < _CPUS_NR; i++)
   1bbec:	fe042623          	sw	zero,-20(s0)
   1bbf0:	0800006f          	j	1bc70 <rt_thread_idle_init+0x94>
    {
        rt_sprintf(tidle_name, "tidle%d", i);
   1bbf4:	fe440793          	addi	a5,s0,-28
   1bbf8:	fec42603          	lw	a2,-20(s0)
   1bbfc:	00005597          	auipc	a1,0x5
   1bc00:	72c58593          	addi	a1,a1,1836 # 21328 <__FUNCTION__.2544+0x14>
   1bc04:	00078513          	mv	a0,a5
   1bc08:	b31f60ef          	jal	ra,12738 <rt_sprintf>
        rt_thread_init(&idle[i],
   1bc0c:	fec42783          	lw	a5,-20(s0)
   1bc10:	00779713          	slli	a4,a5,0x7
   1bc14:	bc818793          	addi	a5,gp,-1080 # 22728 <idle>
   1bc18:	00f70533          	add	a0,a4,a5
                tidle_name,
                rt_thread_idle_entry,
                RT_NULL,
                &rt_thread_stack[i][0],
   1bc1c:	fec42783          	lw	a5,-20(s0)
   1bc20:	00879713          	slli	a4,a5,0x8
   1bc24:	c4818793          	addi	a5,gp,-952 # 227a8 <rt_thread_stack>
   1bc28:	00f70733          	add	a4,a4,a5
        rt_thread_init(&idle[i],
   1bc2c:	fe440593          	addi	a1,s0,-28
   1bc30:	02000893          	li	a7,32
   1bc34:	01f00813          	li	a6,31
   1bc38:	10000793          	li	a5,256
   1bc3c:	00000693          	li	a3,0
   1bc40:	00000617          	auipc	a2,0x0
   1bc44:	f3860613          	addi	a2,a2,-200 # 1bb78 <rt_thread_idle_entry>
   1bc48:	fc4f70ef          	jal	ra,1340c <rt_thread_init>
                32);
#ifdef RT_USING_SMP
        rt_thread_control(&idle[i], RT_THREAD_CTRL_BIND_CPU, (void*)i);
#endif /* RT_USING_SMP */
        /* startup */
        rt_thread_startup(&idle[i]);
   1bc4c:	fec42783          	lw	a5,-20(s0)
   1bc50:	00779713          	slli	a4,a5,0x7
   1bc54:	bc818793          	addi	a5,gp,-1080 # 22728 <idle>
   1bc58:	00f707b3          	add	a5,a4,a5
   1bc5c:	00078513          	mv	a0,a5
   1bc60:	895f70ef          	jal	ra,134f4 <rt_thread_startup>
    for (i = 0; i < _CPUS_NR; i++)
   1bc64:	fec42783          	lw	a5,-20(s0)
   1bc68:	00178793          	addi	a5,a5,1
   1bc6c:	fef42623          	sw	a5,-20(s0)
   1bc70:	fec42783          	lw	a5,-20(s0)
   1bc74:	f80780e3          	beqz	a5,1bbf4 <rt_thread_idle_init+0x18>
            RT_THREAD_PRIORITY_MAX - 2,
            32);
    /* startup */
    rt_thread_startup(&rt_system_thread);
#endif
}
   1bc78:	00000013          	nop
   1bc7c:	00000013          	nop
   1bc80:	01c12083          	lw	ra,28(sp)
   1bc84:	01812403          	lw	s0,24(sp)
   1bc88:	02010113          	addi	sp,sp,32
   1bc8c:	00008067          	ret

0001bc90 <rt_thread_idle_gethandler>:

/**
 * @brief This function will get the handler of the idle thread.
 */
rt_thread_t rt_thread_idle_gethandler(void)
{
   1bc90:	ff010113          	addi	sp,sp,-16
   1bc94:	00812623          	sw	s0,12(sp)
   1bc98:	00912423          	sw	s1,8(sp)
   1bc9c:	01010413          	addi	s0,sp,16
#ifdef RT_USING_SMP
    register int id = rt_hw_cpu_id();
#else
    register int id = 0;
   1bca0:	00000493          	li	s1,0
#endif /* RT_USING_SMP */

    return (rt_thread_t)(&idle[id]);
   1bca4:	00749713          	slli	a4,s1,0x7
   1bca8:	bc818793          	addi	a5,gp,-1080 # 22728 <idle>
   1bcac:	00f707b3          	add	a5,a4,a5
}
   1bcb0:	00078513          	mv	a0,a5
   1bcb4:	00c12403          	lw	s0,12(sp)
   1bcb8:	00812483          	lw	s1,8(sp)
   1bcbc:	01010113          	addi	sp,sp,16
   1bcc0:	00008067          	ret

0001bcc4 <rt_hw_stack_init>:
 */
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
   1bcc4:	fd010113          	addi	sp,sp,-48
   1bcc8:	02812623          	sw	s0,44(sp)
   1bccc:	03010413          	addi	s0,sp,48
   1bcd0:	fca42e23          	sw	a0,-36(s0)
   1bcd4:	fcb42c23          	sw	a1,-40(s0)
   1bcd8:	fcc42a23          	sw	a2,-44(s0)
   1bcdc:	fcd42823          	sw	a3,-48(s0)
    struct rt_hw_stack_frame *frame;
    rt_uint8_t         *stk;
    int                i;

    stk  = stack_addr + sizeof(rt_ubase_t);
   1bce0:	fd442783          	lw	a5,-44(s0)
   1bce4:	00478793          	addi	a5,a5,4
   1bce8:	fef42423          	sw	a5,-24(s0)
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_ubase_t)stk, REGBYTES);
   1bcec:	fe842783          	lw	a5,-24(s0)
   1bcf0:	ffc7f793          	andi	a5,a5,-4
   1bcf4:	fef42423          	sw	a5,-24(s0)
    stk -= sizeof(struct rt_hw_stack_frame);
   1bcf8:	fe842783          	lw	a5,-24(s0)
   1bcfc:	f8078793          	addi	a5,a5,-128
   1bd00:	fef42423          	sw	a5,-24(s0)

    frame = (struct rt_hw_stack_frame *)stk;
   1bd04:	fe842783          	lw	a5,-24(s0)
   1bd08:	fef42223          	sw	a5,-28(s0)

    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
   1bd0c:	fe042623          	sw	zero,-20(s0)
   1bd10:	02c0006f          	j	1bd3c <rt_hw_stack_init+0x78>
    {
        ((rt_ubase_t *)frame)[i] = 0xdeadbeef;
   1bd14:	fec42783          	lw	a5,-20(s0)
   1bd18:	00279793          	slli	a5,a5,0x2
   1bd1c:	fe442703          	lw	a4,-28(s0)
   1bd20:	00f707b3          	add	a5,a4,a5
   1bd24:	deadc737          	lui	a4,0xdeadc
   1bd28:	eef70713          	addi	a4,a4,-273 # deadbeef <__top+0xceadbeff>
   1bd2c:	00e7a023          	sw	a4,0(a5)
    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
   1bd30:	fec42783          	lw	a5,-20(s0)
   1bd34:	00178793          	addi	a5,a5,1
   1bd38:	fef42623          	sw	a5,-20(s0)
   1bd3c:	fec42703          	lw	a4,-20(s0)
   1bd40:	01f00793          	li	a5,31
   1bd44:	fce7f8e3          	bgeu	a5,a4,1bd14 <rt_hw_stack_init+0x50>
    }

    frame->ra      = (rt_ubase_t)texit;
   1bd48:	fd042703          	lw	a4,-48(s0)
   1bd4c:	fe442783          	lw	a5,-28(s0)
   1bd50:	00e7a223          	sw	a4,4(a5)
    frame->a0      = (rt_ubase_t)parameter;
   1bd54:	fd842703          	lw	a4,-40(s0)
   1bd58:	fe442783          	lw	a5,-28(s0)
   1bd5c:	02e7a423          	sw	a4,40(a5)
    frame->epc     = (rt_ubase_t)tentry;
   1bd60:	fdc42703          	lw	a4,-36(s0)
   1bd64:	fe442783          	lw	a5,-28(s0)
   1bd68:	00e7a023          	sw	a4,0(a5)

    /* force to machine mode(MPP=11) and set MPIE to 1 */
    frame->mstatus = 0x00007880;
   1bd6c:	fe442783          	lw	a5,-28(s0)
   1bd70:	00008737          	lui	a4,0x8
   1bd74:	88070713          	addi	a4,a4,-1920 # 7880 <__load-0x8780>
   1bd78:	00e7a423          	sw	a4,8(a5)

    return stk;
   1bd7c:	fe842783          	lw	a5,-24(s0)
}
   1bd80:	00078513          	mv	a0,a5
   1bd84:	02c12403          	lw	s0,44(sp)
   1bd88:	03010113          	addi	sp,sp,48
   1bd8c:	00008067          	ret

0001bd90 <rt_hw_context_switch_interrupt>:
 * void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to);
 * #endif
 */
#ifndef RT_USING_SMP
void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to)
{
   1bd90:	fe010113          	addi	sp,sp,-32
   1bd94:	00812e23          	sw	s0,28(sp)
   1bd98:	02010413          	addi	s0,sp,32
   1bd9c:	fea42623          	sw	a0,-20(s0)
   1bda0:	feb42423          	sw	a1,-24(s0)
    if (rt_thread_switch_interrupt_flag == 0)
   1bda4:	83018793          	addi	a5,gp,-2000 # 22390 <rt_thread_switch_interrupt_flag>
   1bda8:	0007a783          	lw	a5,0(a5)
   1bdac:	00079863          	bnez	a5,1bdbc <rt_hw_context_switch_interrupt+0x2c>
        rt_interrupt_from_thread = from;
   1bdb0:	82818793          	addi	a5,gp,-2008 # 22388 <rt_interrupt_from_thread>
   1bdb4:	fec42703          	lw	a4,-20(s0)
   1bdb8:	00e7a023          	sw	a4,0(a5)

    rt_interrupt_to_thread = to;
   1bdbc:	82c18793          	addi	a5,gp,-2004 # 2238c <rt_interrupt_to_thread>
   1bdc0:	fe842703          	lw	a4,-24(s0)
   1bdc4:	00e7a023          	sw	a4,0(a5)
    rt_thread_switch_interrupt_flag = 1;
   1bdc8:	83018793          	addi	a5,gp,-2000 # 22390 <rt_thread_switch_interrupt_flag>
   1bdcc:	00100713          	li	a4,1
   1bdd0:	00e7a023          	sw	a4,0(a5)

    return ;
   1bdd4:	00000013          	nop
}
   1bdd8:	01c12403          	lw	s0,28(sp)
   1bddc:	02010113          	addi	sp,sp,32
   1bde0:	00008067          	ret
#endif /* end of RT_USING_SMP */

/** shutdown CPU */
RT_WEAK void rt_hw_cpu_shutdown()
{
   1bde4:	fe010113          	addi	sp,sp,-32
   1bde8:	00112e23          	sw	ra,28(sp)
   1bdec:	00812c23          	sw	s0,24(sp)
   1bdf0:	02010413          	addi	s0,sp,32
    rt_uint32_t level;
    rt_kprintf("shutdown...\n");
   1bdf4:	00005517          	auipc	a0,0x5
   1bdf8:	53c50513          	addi	a0,a0,1340 # 21330 <__FUNCTION__.2544+0x1c>
   1bdfc:	b05f60ef          	jal	ra,12900 <rt_kprintf>

    level = rt_hw_interrupt_disable();
   1be00:	048000ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1be04:	00050793          	mv	a5,a0
   1be08:	fef42623          	sw	a5,-20(s0)
    while (level)
   1be0c:	01c0006f          	j	1be28 <rt_hw_context_switch_interrupt+0x98>
    {
        RT_ASSERT(0);
   1be10:	0a200613          	li	a2,162
   1be14:	00005597          	auipc	a1,0x5
   1be18:	53058593          	addi	a1,a1,1328 # 21344 <__FUNCTION__.2490>
   1be1c:	00005517          	auipc	a0,0x5
   1be20:	52450513          	addi	a0,a0,1316 # 21340 <__FUNCTION__.2544+0x2c>
   1be24:	a20f70ef          	jal	ra,13044 <rt_assert_handler>
    while (level)
   1be28:	fec42783          	lw	a5,-20(s0)
   1be2c:	fe0792e3          	bnez	a5,1be10 <rt_hw_context_switch_interrupt+0x80>
    }
}
   1be30:	00000013          	nop
   1be34:	00000013          	nop
   1be38:	01c12083          	lw	ra,28(sp)
   1be3c:	01812403          	lw	s0,24(sp)
   1be40:	02010113          	addi	sp,sp,32
   1be44:	00008067          	ret

0001be48 <rt_hw_interrupt_disable>:
/*
 * rt_base_t rt_hw_interrupt_disable(void);
 */
    .globl rt_hw_interrupt_disable
rt_hw_interrupt_disable:
    csrrci a0, mstatus, 8
   1be48:	30047573          	csrrci	a0,mstatus,8
    ret
   1be4c:	00008067          	ret

0001be50 <rt_hw_interrupt_enable>:
/*
 * void rt_hw_interrupt_enable(rt_base_t level);
 */
    .globl rt_hw_interrupt_enable
rt_hw_interrupt_enable:
    csrw mstatus, a0
   1be50:	30051073          	csrw	mstatus,a0
    ret
   1be54:	00008067          	ret

0001be58 <rt_hw_context_switch_to>:
 * a0 --> to
 * a1 --> to_thread
 */
    .globl rt_hw_context_switch_to
rt_hw_context_switch_to:
    LOAD sp, (a0)
   1be58:	00052103          	lw	sp,0(a0)

#ifdef RT_USING_SMP
    mv   a0,   a1
    call  rt_cpus_lock_status_restore
#endif
    LOAD a0,   2 * REGBYTES(sp)
   1be5c:	00812503          	lw	a0,8(sp)
    csrw mstatus, a0
   1be60:	30051073          	csrw	mstatus,a0
    j    rt_hw_context_switch_exit
   1be64:	0a00006f          	j	1bf04 <rt_hw_context_switch_exit>

0001be68 <rt_hw_context_switch>:
    FSTORE  f29, 29 * FREGBYTES(sp)
    FSTORE  f30, 30 * FREGBYTES(sp)
    FSTORE  f31, 31 * FREGBYTES(sp)

#endif
    addi  sp,  sp, -32 * REGBYTES
   1be68:	f8010113          	addi	sp,sp,-128
    STORE sp,  (a0)
   1be6c:	00252023          	sw	sp,0(a0)

    STORE x1,   0 * REGBYTES(sp)
   1be70:	00112023          	sw	ra,0(sp)
    STORE x1,   1 * REGBYTES(sp)
   1be74:	00112223          	sw	ra,4(sp)

    csrr a0, mstatus
   1be78:	30002573          	csrr	a0,mstatus
    andi a0, a0, 8
   1be7c:	00857513          	andi	a0,a0,8
    beqz a0, save_mpie
   1be80:	00050463          	beqz	a0,1be88 <save_mpie>
    li   a0, 0x80
   1be84:	08000513          	li	a0,128

0001be88 <save_mpie>:
save_mpie:
    STORE a0,   2 * REGBYTES(sp)
   1be88:	00a12423          	sw	a0,8(sp)

    STORE x4,   4 * REGBYTES(sp)
   1be8c:	00412823          	sw	tp,16(sp)
    STORE x5,   5 * REGBYTES(sp)
   1be90:	00512a23          	sw	t0,20(sp)
    STORE x6,   6 * REGBYTES(sp)
   1be94:	00612c23          	sw	t1,24(sp)
    STORE x7,   7 * REGBYTES(sp)
   1be98:	00712e23          	sw	t2,28(sp)
    STORE x8,   8 * REGBYTES(sp)
   1be9c:	02812023          	sw	s0,32(sp)
    STORE x9,   9 * REGBYTES(sp)
   1bea0:	02912223          	sw	s1,36(sp)
    STORE x10, 10 * REGBYTES(sp)
   1bea4:	02a12423          	sw	a0,40(sp)
    STORE x11, 11 * REGBYTES(sp)
   1bea8:	02b12623          	sw	a1,44(sp)
    STORE x12, 12 * REGBYTES(sp)
   1beac:	02c12823          	sw	a2,48(sp)
    STORE x13, 13 * REGBYTES(sp)
   1beb0:	02d12a23          	sw	a3,52(sp)
    STORE x14, 14 * REGBYTES(sp)
   1beb4:	02e12c23          	sw	a4,56(sp)
    STORE x15, 15 * REGBYTES(sp)
   1beb8:	02f12e23          	sw	a5,60(sp)
    STORE x16, 16 * REGBYTES(sp)
   1bebc:	05012023          	sw	a6,64(sp)
    STORE x17, 17 * REGBYTES(sp)
   1bec0:	05112223          	sw	a7,68(sp)
    STORE x18, 18 * REGBYTES(sp)
   1bec4:	05212423          	sw	s2,72(sp)
    STORE x19, 19 * REGBYTES(sp)
   1bec8:	05312623          	sw	s3,76(sp)
    STORE x20, 20 * REGBYTES(sp)
   1becc:	05412823          	sw	s4,80(sp)
    STORE x21, 21 * REGBYTES(sp)
   1bed0:	05512a23          	sw	s5,84(sp)
    STORE x22, 22 * REGBYTES(sp)
   1bed4:	05612c23          	sw	s6,88(sp)
    STORE x23, 23 * REGBYTES(sp)
   1bed8:	05712e23          	sw	s7,92(sp)
    STORE x24, 24 * REGBYTES(sp)
   1bedc:	07812023          	sw	s8,96(sp)
    STORE x25, 25 * REGBYTES(sp)
   1bee0:	07912223          	sw	s9,100(sp)
    STORE x26, 26 * REGBYTES(sp)
   1bee4:	07a12423          	sw	s10,104(sp)
    STORE x27, 27 * REGBYTES(sp)
   1bee8:	07b12623          	sw	s11,108(sp)
    STORE x28, 28 * REGBYTES(sp)
   1beec:	07c12823          	sw	t3,112(sp)
    STORE x29, 29 * REGBYTES(sp)
   1bef0:	07d12a23          	sw	t4,116(sp)
    STORE x30, 30 * REGBYTES(sp)
   1bef4:	07e12c23          	sw	t5,120(sp)
    STORE x31, 31 * REGBYTES(sp)
   1bef8:	07f12e23          	sw	t6,124(sp)
    /* restore to thread context
     * sp(0) -> epc;
     * sp(1) -> ra;
     * sp(i) -> x(i+2)
     */
    LOAD sp,  (a1)
   1befc:	0005a103          	lw	sp,0(a1)
#ifdef RT_USING_SMP
    mv   a0,   a2
    call  rt_cpus_lock_status_restore
#endif /*RT_USING_SMP*/

    j rt_hw_context_switch_exit
   1bf00:	0040006f          	j	1bf04 <rt_hw_context_switch_exit>

0001bf04 <rt_hw_context_switch_exit>:
    call rt_signal_check
    mv sp, a0
#endif
#endif
    /* resw ra to mepc */
    LOAD a0,   0 * REGBYTES(sp)
   1bf04:	00012503          	lw	a0,0(sp)
    csrw mepc, a0
   1bf08:	34151073          	csrw	mepc,a0

    LOAD x1,   1 * REGBYTES(sp)
   1bf0c:	00412083          	lw	ra,4(sp)

    li    t0, 0x00007800
   1bf10:	000082b7          	lui	t0,0x8
   1bf14:	80028293          	addi	t0,t0,-2048 # 7800 <__load-0x8800>
    csrw  mstatus, t0
   1bf18:	30029073          	csrw	mstatus,t0
    LOAD a0,   2 * REGBYTES(sp)
   1bf1c:	00812503          	lw	a0,8(sp)
    csrs mstatus, a0
   1bf20:	30052073          	csrs	mstatus,a0

    LOAD x4,   4 * REGBYTES(sp)
   1bf24:	01012203          	lw	tp,16(sp)
    LOAD x5,   5 * REGBYTES(sp)
   1bf28:	01412283          	lw	t0,20(sp)
    LOAD x6,   6 * REGBYTES(sp)
   1bf2c:	01812303          	lw	t1,24(sp)
    LOAD x7,   7 * REGBYTES(sp)
   1bf30:	01c12383          	lw	t2,28(sp)
    LOAD x8,   8 * REGBYTES(sp)
   1bf34:	02012403          	lw	s0,32(sp)
    LOAD x9,   9 * REGBYTES(sp)
   1bf38:	02412483          	lw	s1,36(sp)
    LOAD x10, 10 * REGBYTES(sp)
   1bf3c:	02812503          	lw	a0,40(sp)
    LOAD x11, 11 * REGBYTES(sp)
   1bf40:	02c12583          	lw	a1,44(sp)
    LOAD x12, 12 * REGBYTES(sp)
   1bf44:	03012603          	lw	a2,48(sp)
    LOAD x13, 13 * REGBYTES(sp)
   1bf48:	03412683          	lw	a3,52(sp)
    LOAD x14, 14 * REGBYTES(sp)
   1bf4c:	03812703          	lw	a4,56(sp)
    LOAD x15, 15 * REGBYTES(sp)
   1bf50:	03c12783          	lw	a5,60(sp)
    LOAD x16, 16 * REGBYTES(sp)
   1bf54:	04012803          	lw	a6,64(sp)
    LOAD x17, 17 * REGBYTES(sp)
   1bf58:	04412883          	lw	a7,68(sp)
    LOAD x18, 18 * REGBYTES(sp)
   1bf5c:	04812903          	lw	s2,72(sp)
    LOAD x19, 19 * REGBYTES(sp)
   1bf60:	04c12983          	lw	s3,76(sp)
    LOAD x20, 20 * REGBYTES(sp)
   1bf64:	05012a03          	lw	s4,80(sp)
    LOAD x21, 21 * REGBYTES(sp)
   1bf68:	05412a83          	lw	s5,84(sp)
    LOAD x22, 22 * REGBYTES(sp)
   1bf6c:	05812b03          	lw	s6,88(sp)
    LOAD x23, 23 * REGBYTES(sp)
   1bf70:	05c12b83          	lw	s7,92(sp)
    LOAD x24, 24 * REGBYTES(sp)
   1bf74:	06012c03          	lw	s8,96(sp)
    LOAD x25, 25 * REGBYTES(sp)
   1bf78:	06412c83          	lw	s9,100(sp)
    LOAD x26, 26 * REGBYTES(sp)
   1bf7c:	06812d03          	lw	s10,104(sp)
    LOAD x27, 27 * REGBYTES(sp)
   1bf80:	06c12d83          	lw	s11,108(sp)
    LOAD x28, 28 * REGBYTES(sp)
   1bf84:	07012e03          	lw	t3,112(sp)
    LOAD x29, 29 * REGBYTES(sp)
   1bf88:	07412e83          	lw	t4,116(sp)
    LOAD x30, 30 * REGBYTES(sp)
   1bf8c:	07812f03          	lw	t5,120(sp)
    LOAD x31, 31 * REGBYTES(sp)
   1bf90:	07c12f83          	lw	t6,124(sp)

    addi sp,  sp, 32 * REGBYTES
   1bf94:	08010113          	addi	sp,sp,128
    FLOAD   f31, 31 * FREGBYTES(sp)

    addi    sp, sp, 32 * FREGBYTES
#endif

    mret
   1bf98:	30200073          	mret

0001bf9c <_start_local>:
  .type   _start_local, @function
_start_local:
  # Initialize global pointer
.option push
.option norelax
1:auipc gp, %pcrel_hi(__global_pointer$)
   1bf9c:	00007197          	auipc	gp,0x7
  addi  gp, gp, %pcrel_lo(1b)
   1bfa0:	bc418193          	addi	gp,gp,-1084 # 22b60 <__global_pointer$>
.option pop

  # Clear the bss segment
  la      a0, _edata
   1bfa4:	81c18513          	addi	a0,gp,-2020 # 2237c <_edata>
  la      a2, _end
   1bfa8:	f0018613          	addi	a2,gp,-256 # 22a60 <_end>
  sub     a2, a2, a0
   1bfac:	40a60633          	sub	a2,a2,a0
  li      a1, 0
   1bfb0:	00000593          	li	a1,0
  call    memset
   1bfb4:	4f8030ef          	jal	ra,1f4ac <memset>
  la      a0, atexit
  beqz    a0, .Lweak_atexit
  .weak   __libc_fini_array
#endif

  la      a0, __libc_fini_array   # Register global termination functions
   1bfb8:	00003517          	auipc	a0,0x3
   1bfbc:	30450513          	addi	a0,a0,772 # 1f2bc <__libc_fini_array>
  call    atexit                  #  to be called upon exit
   1bfc0:	2b4030ef          	jal	ra,1f274 <atexit>
#ifdef _LITE_EXIT
.Lweak_atexit:
#endif
  call    __libc_init_array       # Run global initialization functions
   1bfc4:	14c000ef          	jal	ra,1c110 <__libc_init_array>

  lw      a0, 0(sp)                  # a0 = argc
   1bfc8:	00012503          	lw	a0,0(sp)
  addi    a1, sp, __SIZEOF_POINTER__ # a1 = argv
   1bfcc:	00410593          	addi	a1,sp,4
  li      a2, 0                      # a2 = envp = NULL
   1bfd0:	00000613          	li	a2,0
  call    entry
   1bfd4:	c39fd0ef          	jal	ra,19c0c <entry>
  tail    exit
   1bfd8:	2b00306f          	j	1f288 <exit>

0001bfdc <_malloc_r>:
#define DBG_LVL    DBG_INFO
#include <rtdbg.h>

#ifdef RT_USING_HEAP /* Memory routine */
void *_malloc_r (struct _reent *ptr, size_t size)
{
   1bfdc:	fd010113          	addi	sp,sp,-48
   1bfe0:	02112623          	sw	ra,44(sp)
   1bfe4:	02812423          	sw	s0,40(sp)
   1bfe8:	03010413          	addi	s0,sp,48
   1bfec:	fca42e23          	sw	a0,-36(s0)
   1bff0:	fcb42c23          	sw	a1,-40(s0)
    void* result;

    result = (void*)rt_malloc (size);
   1bff4:	fd842503          	lw	a0,-40(s0)
   1bff8:	c19f60ef          	jal	ra,12c10 <rt_malloc>
   1bffc:	fea42623          	sw	a0,-20(s0)
    if (result == RT_NULL)
   1c000:	fec42783          	lw	a5,-20(s0)
   1c004:	00079863          	bnez	a5,1c014 <_malloc_r+0x38>
    {
        ptr->_errno = ENOMEM;
   1c008:	fdc42783          	lw	a5,-36(s0)
   1c00c:	00c00713          	li	a4,12
   1c010:	00e7a023          	sw	a4,0(a5)
    }

    return result;
   1c014:	fec42783          	lw	a5,-20(s0)
}
   1c018:	00078513          	mv	a0,a5
   1c01c:	02c12083          	lw	ra,44(sp)
   1c020:	02812403          	lw	s0,40(sp)
   1c024:	03010113          	addi	sp,sp,48
   1c028:	00008067          	ret

0001c02c <_realloc_r>:

void *_realloc_r (struct _reent *ptr, void *old, size_t newlen)
{
   1c02c:	fd010113          	addi	sp,sp,-48
   1c030:	02112623          	sw	ra,44(sp)
   1c034:	02812423          	sw	s0,40(sp)
   1c038:	03010413          	addi	s0,sp,48
   1c03c:	fca42e23          	sw	a0,-36(s0)
   1c040:	fcb42c23          	sw	a1,-40(s0)
   1c044:	fcc42a23          	sw	a2,-44(s0)
    void* result;

    result = (void*)rt_realloc (old, newlen);
   1c048:	fd442583          	lw	a1,-44(s0)
   1c04c:	fd842503          	lw	a0,-40(s0)
   1c050:	c35f60ef          	jal	ra,12c84 <rt_realloc>
   1c054:	fea42623          	sw	a0,-20(s0)
    if (result == RT_NULL)
   1c058:	fec42783          	lw	a5,-20(s0)
   1c05c:	00079863          	bnez	a5,1c06c <_realloc_r+0x40>
    {
        ptr->_errno = ENOMEM;
   1c060:	fdc42783          	lw	a5,-36(s0)
   1c064:	00c00713          	li	a4,12
   1c068:	00e7a023          	sw	a4,0(a5)
    }

    return result;
   1c06c:	fec42783          	lw	a5,-20(s0)
}
   1c070:	00078513          	mv	a0,a5
   1c074:	02c12083          	lw	ra,44(sp)
   1c078:	02812403          	lw	s0,40(sp)
   1c07c:	03010113          	addi	sp,sp,48
   1c080:	00008067          	ret

0001c084 <_calloc_r>:

void *_calloc_r (struct _reent *ptr, size_t size, size_t len)
{
   1c084:	fd010113          	addi	sp,sp,-48
   1c088:	02112623          	sw	ra,44(sp)
   1c08c:	02812423          	sw	s0,40(sp)
   1c090:	03010413          	addi	s0,sp,48
   1c094:	fca42e23          	sw	a0,-36(s0)
   1c098:	fcb42c23          	sw	a1,-40(s0)
   1c09c:	fcc42a23          	sw	a2,-44(s0)
    void* result;

    result = (void*)rt_calloc (size, len);
   1c0a0:	fd442583          	lw	a1,-44(s0)
   1c0a4:	fd842503          	lw	a0,-40(s0)
   1c0a8:	c39f60ef          	jal	ra,12ce0 <rt_calloc>
   1c0ac:	fea42623          	sw	a0,-20(s0)
    if (result == RT_NULL)
   1c0b0:	fec42783          	lw	a5,-20(s0)
   1c0b4:	00079863          	bnez	a5,1c0c4 <_calloc_r+0x40>
    {
        ptr->_errno = ENOMEM;
   1c0b8:	fdc42783          	lw	a5,-36(s0)
   1c0bc:	00c00713          	li	a4,12
   1c0c0:	00e7a023          	sw	a4,0(a5)
    }

    return result;
   1c0c4:	fec42783          	lw	a5,-20(s0)
}
   1c0c8:	00078513          	mv	a0,a5
   1c0cc:	02c12083          	lw	ra,44(sp)
   1c0d0:	02812403          	lw	s0,40(sp)
   1c0d4:	03010113          	addi	sp,sp,48
   1c0d8:	00008067          	ret

0001c0dc <_free_r>:

void _free_r (struct _reent *ptr, void *addr)
{
   1c0dc:	fe010113          	addi	sp,sp,-32
   1c0e0:	00112e23          	sw	ra,28(sp)
   1c0e4:	00812c23          	sw	s0,24(sp)
   1c0e8:	02010413          	addi	s0,sp,32
   1c0ec:	fea42623          	sw	a0,-20(s0)
   1c0f0:	feb42423          	sw	a1,-24(s0)
    rt_free (addr);
   1c0f4:	fe842503          	lw	a0,-24(s0)
   1c0f8:	c55f60ef          	jal	ra,12d4c <rt_free>
}
   1c0fc:	00000013          	nop
   1c100:	01c12083          	lw	ra,28(sp)
   1c104:	01812403          	lw	s0,24(sp)
   1c108:	02010113          	addi	sp,sp,32
   1c10c:	00008067          	ret

0001c110 <__libc_init_array>:
    return RT_NULL;
}
#endif /*RT_USING_HEAP*/

void __libc_init_array(void)
{
   1c110:	ff010113          	addi	sp,sp,-16
   1c114:	00812623          	sw	s0,12(sp)
   1c118:	01010413          	addi	s0,sp,16
    /* we not use __libc init_aray to initialize C++ objects */
    /* __libc_init_array is ARM code, not Thumb; it will cause a hardfault. */
}
   1c11c:	00000013          	nop
   1c120:	00c12403          	lw	s0,12(sp)
   1c124:	01010113          	addi	sp,sp,16
   1c128:	00008067          	ret

0001c12c <finsh_set_prompt>:

#endif /* defined(_MSC_VER) || (defined(__GNUC__) && defined(__x86_64__)) */

#ifdef RT_USING_HEAP
int finsh_set_prompt(const char *prompt)
{
   1c12c:	fe010113          	addi	sp,sp,-32
   1c130:	00112e23          	sw	ra,28(sp)
   1c134:	00812c23          	sw	s0,24(sp)
   1c138:	02010413          	addi	s0,sp,32
   1c13c:	fea42623          	sw	a0,-20(s0)
    if (finsh_prompt_custom)
   1c140:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c144:	0007a783          	lw	a5,0(a5)
   1c148:	00078e63          	beqz	a5,1c164 <finsh_set_prompt+0x38>
    {
        rt_free(finsh_prompt_custom);
   1c14c:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c150:	0007a783          	lw	a5,0(a5)
   1c154:	00078513          	mv	a0,a5
   1c158:	bf5f60ef          	jal	ra,12d4c <rt_free>
        finsh_prompt_custom = RT_NULL;
   1c15c:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c160:	0007a023          	sw	zero,0(a5)
    }

    /* strdup */
    if (prompt)
   1c164:	fec42783          	lw	a5,-20(s0)
   1c168:	04078463          	beqz	a5,1c1b0 <finsh_set_prompt+0x84>
    {
        finsh_prompt_custom = (char *)rt_malloc(strlen(prompt) + 1);
   1c16c:	fec42503          	lw	a0,-20(s0)
   1c170:	4c8030ef          	jal	ra,1f638 <strlen>
   1c174:	00050793          	mv	a5,a0
   1c178:	00178793          	addi	a5,a5,1
   1c17c:	00078513          	mv	a0,a5
   1c180:	a91f60ef          	jal	ra,12c10 <rt_malloc>
   1c184:	00050713          	mv	a4,a0
   1c188:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c18c:	00e7a023          	sw	a4,0(a5)
        if (finsh_prompt_custom)
   1c190:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c194:	0007a783          	lw	a5,0(a5)
   1c198:	00078c63          	beqz	a5,1c1b0 <finsh_set_prompt+0x84>
        {
            strcpy(finsh_prompt_custom, prompt);
   1c19c:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c1a0:	0007a783          	lw	a5,0(a5)
   1c1a4:	fec42583          	lw	a1,-20(s0)
   1c1a8:	00078513          	mv	a0,a5
   1c1ac:	3dc030ef          	jal	ra,1f588 <strcpy>
        }
    }

    return 0;
   1c1b0:	00000793          	li	a5,0
}
   1c1b4:	00078513          	mv	a0,a5
   1c1b8:	01c12083          	lw	ra,28(sp)
   1c1bc:	01812403          	lw	s0,24(sp)
   1c1c0:	02010113          	addi	sp,sp,32
   1c1c4:	00008067          	ret

0001c1c8 <finsh_get_prompt>:
#endif /* RT_USING_HEAP */

#define _MSH_PROMPT "msh "

const char *finsh_get_prompt(void)
{
   1c1c8:	ff010113          	addi	sp,sp,-16
   1c1cc:	00112623          	sw	ra,12(sp)
   1c1d0:	00812423          	sw	s0,8(sp)
   1c1d4:	01010413          	addi	s0,sp,16
    static char finsh_prompt[RT_CONSOLEBUF_SIZE + 1] = {0};

    /* check prompt mode */
    if (!shell->prompt_mode)
   1c1d8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c1dc:	0007a783          	lw	a5,0(a5)
   1c1e0:	0247c783          	lbu	a5,36(a5)
   1c1e4:	0027f793          	andi	a5,a5,2
   1c1e8:	0ff7f793          	andi	a5,a5,255
   1c1ec:	00079a63          	bnez	a5,1c200 <finsh_get_prompt+0x38>
    {
        finsh_prompt[0] = '\0';
   1c1f0:	d5c18793          	addi	a5,gp,-676 # 228bc <finsh_prompt.3377>
   1c1f4:	00078023          	sb	zero,0(a5)
        return finsh_prompt;
   1c1f8:	d5c18793          	addi	a5,gp,-676 # 228bc <finsh_prompt.3377>
   1c1fc:	06c0006f          	j	1c268 <finsh_get_prompt+0xa0>
    }

    if (finsh_prompt_custom)
   1c200:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c204:	0007a783          	lw	a5,0(a5)
   1c208:	02078263          	beqz	a5,1c22c <finsh_get_prompt+0x64>
    {
        strncpy(finsh_prompt, finsh_prompt_custom, sizeof(finsh_prompt) - 1);
   1c20c:	d5818793          	addi	a5,gp,-680 # 228b8 <finsh_prompt_custom>
   1c210:	0007a783          	lw	a5,0(a5)
   1c214:	08000613          	li	a2,128
   1c218:	00078593          	mv	a1,a5
   1c21c:	d5c18513          	addi	a0,gp,-676 # 228bc <finsh_prompt.3377>
   1c220:	55c030ef          	jal	ra,1f77c <strncpy>
        return finsh_prompt;
   1c224:	d5c18793          	addi	a5,gp,-676 # 228bc <finsh_prompt.3377>
   1c228:	0400006f          	j	1c268 <finsh_get_prompt+0xa0>
    }
    strcpy(finsh_prompt, _MSH_PROMPT);
   1c22c:	d5c18793          	addi	a5,gp,-676 # 228bc <finsh_prompt.3377>
   1c230:	20687737          	lui	a4,0x20687
   1c234:	36d70713          	addi	a4,a4,877 # 2068736d <__top+0x1068737d>
   1c238:	00e7a023          	sw	a4,0(a5)
   1c23c:	00078223          	sb	zero,4(a5)
#if defined(DFS_USING_POSIX) && defined(DFS_USING_WORKDIR)
    /* get current working directory */
    getcwd(&finsh_prompt[rt_strlen(finsh_prompt)], RT_CONSOLEBUF_SIZE - rt_strlen(finsh_prompt));
#endif

    strcat(finsh_prompt, ">");
   1c240:	d5c18513          	addi	a0,gp,-676 # 228bc <finsh_prompt.3377>
   1c244:	3f4030ef          	jal	ra,1f638 <strlen>
   1c248:	00050793          	mv	a5,a0
   1c24c:	00078713          	mv	a4,a5
   1c250:	d5c18793          	addi	a5,gp,-676 # 228bc <finsh_prompt.3377>
   1c254:	00f707b3          	add	a5,a4,a5
   1c258:	03e00713          	li	a4,62
   1c25c:	00e78023          	sb	a4,0(a5)
   1c260:	000780a3          	sb	zero,1(a5)

    return finsh_prompt;
   1c264:	d5c18793          	addi	a5,gp,-676 # 228bc <finsh_prompt.3377>
}
   1c268:	00078513          	mv	a0,a5
   1c26c:	00c12083          	lw	ra,12(sp)
   1c270:	00812403          	lw	s0,8(sp)
   1c274:	01010113          	addi	sp,sp,16
   1c278:	00008067          	ret

0001c27c <finsh_get_prompt_mode>:
 * This function get the prompt mode of finsh shell.
 *
 * @return prompt the prompt mode, 0 disable prompt mode, other values enable prompt mode.
 */
rt_uint32_t finsh_get_prompt_mode(void)
{
   1c27c:	ff010113          	addi	sp,sp,-16
   1c280:	00112623          	sw	ra,12(sp)
   1c284:	00812423          	sw	s0,8(sp)
   1c288:	01010413          	addi	s0,sp,16
    RT_ASSERT(shell != RT_NULL);
   1c28c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c290:	0007a783          	lw	a5,0(a5)
   1c294:	00079e63          	bnez	a5,1c2b0 <finsh_get_prompt_mode+0x34>
   1c298:	07e00613          	li	a2,126
   1c29c:	00005597          	auipc	a1,0x5
   1c2a0:	14458593          	addi	a1,a1,324 # 213e0 <__FUNCTION__.3381>
   1c2a4:	00005517          	auipc	a0,0x5
   1c2a8:	0b450513          	addi	a0,a0,180 # 21358 <__FUNCTION__.2490+0x14>
   1c2ac:	d99f60ef          	jal	ra,13044 <rt_assert_handler>
    return shell->prompt_mode;
   1c2b0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c2b4:	0007a783          	lw	a5,0(a5)
   1c2b8:	0247a783          	lw	a5,36(a5)
   1c2bc:	0017d793          	srli	a5,a5,0x1
   1c2c0:	0017f793          	andi	a5,a5,1
   1c2c4:	0ff7f793          	andi	a5,a5,255
}
   1c2c8:	00078513          	mv	a0,a5
   1c2cc:	00c12083          	lw	ra,12(sp)
   1c2d0:	00812403          	lw	s0,8(sp)
   1c2d4:	01010113          	addi	sp,sp,16
   1c2d8:	00008067          	ret

0001c2dc <finsh_set_prompt_mode>:
 * The parameter 0 disable prompt mode, other values enable prompt mode.
 *
 * @param prompt the prompt mode
 */
void finsh_set_prompt_mode(rt_uint32_t prompt_mode)
{
   1c2dc:	fe010113          	addi	sp,sp,-32
   1c2e0:	00112e23          	sw	ra,28(sp)
   1c2e4:	00812c23          	sw	s0,24(sp)
   1c2e8:	02010413          	addi	s0,sp,32
   1c2ec:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(shell != RT_NULL);
   1c2f0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c2f4:	0007a783          	lw	a5,0(a5)
   1c2f8:	00079e63          	bnez	a5,1c314 <finsh_set_prompt_mode+0x38>
   1c2fc:	08d00613          	li	a2,141
   1c300:	00005597          	auipc	a1,0x5
   1c304:	0f858593          	addi	a1,a1,248 # 213f8 <__FUNCTION__.3385>
   1c308:	00005517          	auipc	a0,0x5
   1c30c:	05050513          	addi	a0,a0,80 # 21358 <__FUNCTION__.2490+0x14>
   1c310:	d35f60ef          	jal	ra,13044 <rt_assert_handler>
    shell->prompt_mode = prompt_mode;
   1c314:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c318:	0007a783          	lw	a5,0(a5)
   1c31c:	fec42703          	lw	a4,-20(s0)
   1c320:	00177713          	andi	a4,a4,1
   1c324:	0ff77713          	andi	a4,a4,255
   1c328:	00177713          	andi	a4,a4,1
   1c32c:	00171613          	slli	a2,a4,0x1
   1c330:	0247c703          	lbu	a4,36(a5)
   1c334:	ffd77713          	andi	a4,a4,-3
   1c338:	00070693          	mv	a3,a4
   1c33c:	00060713          	mv	a4,a2
   1c340:	00e6e733          	or	a4,a3,a4
   1c344:	02e78223          	sb	a4,36(a5)
}
   1c348:	00000013          	nop
   1c34c:	01c12083          	lw	ra,28(sp)
   1c350:	01812403          	lw	s0,24(sp)
   1c354:	02010113          	addi	sp,sp,32
   1c358:	00008067          	ret

0001c35c <finsh_getchar>:

int finsh_getchar(void)
{
   1c35c:	fe010113          	addi	sp,sp,-32
   1c360:	00112e23          	sw	ra,28(sp)
   1c364:	00812c23          	sw	s0,24(sp)
   1c368:	02010413          	addi	s0,sp,32
#ifdef RT_USING_DEVICE
    char ch = 0;
   1c36c:	fe0405a3          	sb	zero,-21(s0)
        return -1; /* EOF */
    }
#else
    rt_device_t device;

    RT_ASSERT(shell != RT_NULL);
   1c370:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c374:	0007a783          	lw	a5,0(a5)
   1c378:	00079e63          	bnez	a5,1c394 <finsh_getchar+0x38>
   1c37c:	0a100613          	li	a2,161
   1c380:	00005597          	auipc	a1,0x5
   1c384:	09058593          	addi	a1,a1,144 # 21410 <__FUNCTION__.3391>
   1c388:	00005517          	auipc	a0,0x5
   1c38c:	fd050513          	addi	a0,a0,-48 # 21358 <__FUNCTION__.2490+0x14>
   1c390:	cb5f60ef          	jal	ra,13044 <rt_assert_handler>

    device = shell->device;
   1c394:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c398:	0007a783          	lw	a5,0(a5)
   1c39c:	2107a783          	lw	a5,528(a5)
   1c3a0:	fef42623          	sw	a5,-20(s0)
    if (device == RT_NULL)
   1c3a4:	fec42783          	lw	a5,-20(s0)
   1c3a8:	02079063          	bnez	a5,1c3c8 <finsh_getchar+0x6c>
    {
        return -1; /* EOF */
   1c3ac:	fff00793          	li	a5,-1
   1c3b0:	0400006f          	j	1c3f0 <finsh_getchar+0x94>
    }

    while (rt_device_read(device, -1, &ch, 1) != 1)
        rt_sem_take(&shell->rx_sem, RT_WAITING_FOREVER);
   1c3b4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c3b8:	0007a783          	lw	a5,0(a5)
   1c3bc:	fff00593          	li	a1,-1
   1c3c0:	00078513          	mv	a0,a5
   1c3c4:	c14f80ef          	jal	ra,147d8 <rt_sem_take>
    while (rt_device_read(device, -1, &ch, 1) != 1)
   1c3c8:	feb40793          	addi	a5,s0,-21
   1c3cc:	00100693          	li	a3,1
   1c3d0:	00078613          	mv	a2,a5
   1c3d4:	fff00593          	li	a1,-1
   1c3d8:	fec42503          	lw	a0,-20(s0)
   1c3dc:	fb9fd0ef          	jal	ra,1a394 <rt_device_read>
   1c3e0:	00050713          	mv	a4,a0
   1c3e4:	00100793          	li	a5,1
   1c3e8:	fcf716e3          	bne	a4,a5,1c3b4 <finsh_getchar+0x58>

    return ch;
   1c3ec:	feb44783          	lbu	a5,-21(s0)
#endif /* RT_USING_POSIX_DEVIO */
#else
    extern char rt_hw_console_getchar(void);
    return rt_hw_console_getchar();
#endif /* RT_USING_DEVICE */
}
   1c3f0:	00078513          	mv	a0,a5
   1c3f4:	01c12083          	lw	ra,28(sp)
   1c3f8:	01812403          	lw	s0,24(sp)
   1c3fc:	02010113          	addi	sp,sp,32
   1c400:	00008067          	ret

0001c404 <finsh_rx_ind>:

#if !defined(RT_USING_POSIX_DEVIO) && defined(RT_USING_DEVICE)
static rt_err_t finsh_rx_ind(rt_device_t dev, rt_size_t size)
{
   1c404:	fe010113          	addi	sp,sp,-32
   1c408:	00112e23          	sw	ra,28(sp)
   1c40c:	00812c23          	sw	s0,24(sp)
   1c410:	02010413          	addi	s0,sp,32
   1c414:	fea42623          	sw	a0,-20(s0)
   1c418:	feb42423          	sw	a1,-24(s0)
    RT_ASSERT(shell != RT_NULL);
   1c41c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c420:	0007a783          	lw	a5,0(a5)
   1c424:	00079e63          	bnez	a5,1c440 <finsh_rx_ind+0x3c>
   1c428:	0b700613          	li	a2,183
   1c42c:	00005597          	auipc	a1,0x5
   1c430:	ff458593          	addi	a1,a1,-12 # 21420 <__FUNCTION__.3399>
   1c434:	00005517          	auipc	a0,0x5
   1c438:	f2450513          	addi	a0,a0,-220 # 21358 <__FUNCTION__.2490+0x14>
   1c43c:	c09f60ef          	jal	ra,13044 <rt_assert_handler>

    /* release semaphore to let finsh thread rx data */
    rt_sem_release(&shell->rx_sem);
   1c440:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c444:	0007a783          	lw	a5,0(a5)
   1c448:	00078513          	mv	a0,a5
   1c44c:	dfcf80ef          	jal	ra,14a48 <rt_sem_release>

    return RT_EOK;
   1c450:	00000793          	li	a5,0
}
   1c454:	00078513          	mv	a0,a5
   1c458:	01c12083          	lw	ra,28(sp)
   1c45c:	01812403          	lw	s0,24(sp)
   1c460:	02010113          	addi	sp,sp,32
   1c464:	00008067          	ret

0001c468 <finsh_set_device>:
 * This function sets the input device of finsh shell.
 *
 * @param device_name the name of new input device.
 */
void finsh_set_device(const char *device_name)
{
   1c468:	fd010113          	addi	sp,sp,-48
   1c46c:	02112623          	sw	ra,44(sp)
   1c470:	02812423          	sw	s0,40(sp)
   1c474:	03010413          	addi	s0,sp,48
   1c478:	fca42e23          	sw	a0,-36(s0)
    rt_device_t dev = RT_NULL;
   1c47c:	fe042623          	sw	zero,-20(s0)

    RT_ASSERT(shell != RT_NULL);
   1c480:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c484:	0007a783          	lw	a5,0(a5)
   1c488:	00079e63          	bnez	a5,1c4a4 <finsh_set_device+0x3c>
   1c48c:	0ca00613          	li	a2,202
   1c490:	00005597          	auipc	a1,0x5
   1c494:	fa058593          	addi	a1,a1,-96 # 21430 <__FUNCTION__.3404>
   1c498:	00005517          	auipc	a0,0x5
   1c49c:	ec050513          	addi	a0,a0,-320 # 21358 <__FUNCTION__.2490+0x14>
   1c4a0:	ba5f60ef          	jal	ra,13044 <rt_assert_handler>
    dev = rt_device_find(device_name);
   1c4a4:	fdc42503          	lw	a0,-36(s0)
   1c4a8:	9cdfd0ef          	jal	ra,19e74 <rt_device_find>
   1c4ac:	fea42623          	sw	a0,-20(s0)
    if (dev == RT_NULL)
   1c4b0:	fec42783          	lw	a5,-20(s0)
   1c4b4:	00079c63          	bnez	a5,1c4cc <finsh_set_device+0x64>
    {
        rt_kprintf("finsh: can not find device: %s\n", device_name);
   1c4b8:	fdc42583          	lw	a1,-36(s0)
   1c4bc:	00005517          	auipc	a0,0x5
   1c4c0:	eb050513          	addi	a0,a0,-336 # 2136c <__FUNCTION__.2490+0x28>
   1c4c4:	c3cf60ef          	jal	ra,12900 <rt_kprintf>
        return;
   1c4c8:	0c80006f          	j	1c590 <finsh_set_device+0x128>
    }

    /* check whether it's a same device */
    if (dev == shell->device) return;
   1c4cc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c4d0:	0007a783          	lw	a5,0(a5)
   1c4d4:	2107a783          	lw	a5,528(a5)
   1c4d8:	fec42703          	lw	a4,-20(s0)
   1c4dc:	0af70863          	beq	a4,a5,1c58c <finsh_set_device+0x124>
    /* open this device and set the new device in finsh shell */
    if (rt_device_open(dev, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_INT_RX | \
   1c4e0:	14300593          	li	a1,323
   1c4e4:	fec42503          	lw	a0,-20(s0)
   1c4e8:	bcdfd0ef          	jal	ra,1a0b4 <rt_device_open>
   1c4ec:	00050793          	mv	a5,a0
   1c4f0:	0a079063          	bnez	a5,1c590 <finsh_set_device+0x128>
                       RT_DEVICE_FLAG_STREAM) == RT_EOK)
    {
        if (shell->device != RT_NULL)
   1c4f4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c4f8:	0007a783          	lw	a5,0(a5)
   1c4fc:	2107a783          	lw	a5,528(a5)
   1c500:	02078863          	beqz	a5,1c530 <finsh_set_device+0xc8>
        {
            /* close old finsh device */
            rt_device_close(shell->device);
   1c504:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c508:	0007a783          	lw	a5,0(a5)
   1c50c:	2107a783          	lw	a5,528(a5)
   1c510:	00078513          	mv	a0,a5
   1c514:	d81fd0ef          	jal	ra,1a294 <rt_device_close>
            rt_device_set_rx_indicate(shell->device, RT_NULL);
   1c518:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c51c:	0007a783          	lw	a5,0(a5)
   1c520:	2107a783          	lw	a5,528(a5)
   1c524:	00000593          	li	a1,0
   1c528:	00078513          	mv	a0,a5
   1c52c:	8dcfe0ef          	jal	ra,1a608 <rt_device_set_rx_indicate>
        }

        /* clear line buffer before switch to new device */
        memset(shell->line, 0, sizeof(shell->line));
   1c530:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c534:	0007a783          	lw	a5,0(a5)
   1c538:	1ba78793          	addi	a5,a5,442
   1c53c:	05100613          	li	a2,81
   1c540:	00000593          	li	a1,0
   1c544:	00078513          	mv	a0,a5
   1c548:	765020ef          	jal	ra,1f4ac <memset>
        shell->line_curpos = shell->line_position = 0;
   1c54c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c550:	0007a783          	lw	a5,0(a5)
   1c554:	20079623          	sh	zero,524(a5)
   1c558:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1c55c:	00072703          	lw	a4,0(a4)
   1c560:	20c7d783          	lhu	a5,524(a5)
   1c564:	20f71723          	sh	a5,526(a4)

        shell->device = dev;
   1c568:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c56c:	0007a783          	lw	a5,0(a5)
   1c570:	fec42703          	lw	a4,-20(s0)
   1c574:	20e7a823          	sw	a4,528(a5)
        rt_device_set_rx_indicate(dev, finsh_rx_ind);
   1c578:	00000597          	auipc	a1,0x0
   1c57c:	e8c58593          	addi	a1,a1,-372 # 1c404 <finsh_rx_ind>
   1c580:	fec42503          	lw	a0,-20(s0)
   1c584:	884fe0ef          	jal	ra,1a608 <rt_device_set_rx_indicate>
   1c588:	0080006f          	j	1c590 <finsh_set_device+0x128>
    if (dev == shell->device) return;
   1c58c:	00000013          	nop
    }
}
   1c590:	02c12083          	lw	ra,44(sp)
   1c594:	02812403          	lw	s0,40(sp)
   1c598:	03010113          	addi	sp,sp,48
   1c59c:	00008067          	ret

0001c5a0 <finsh_get_device>:
 * This function returns current finsh shell input device.
 *
 * @return the finsh shell input device name is returned.
 */
const char *finsh_get_device()
{
   1c5a0:	ff010113          	addi	sp,sp,-16
   1c5a4:	00112623          	sw	ra,12(sp)
   1c5a8:	00812423          	sw	s0,8(sp)
   1c5ac:	01010413          	addi	s0,sp,16
    RT_ASSERT(shell != RT_NULL);
   1c5b0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c5b4:	0007a783          	lw	a5,0(a5)
   1c5b8:	00079e63          	bnez	a5,1c5d4 <finsh_get_device+0x34>
   1c5bc:	0f100613          	li	a2,241
   1c5c0:	00005597          	auipc	a1,0x5
   1c5c4:	e8458593          	addi	a1,a1,-380 # 21444 <__FUNCTION__.3407>
   1c5c8:	00005517          	auipc	a0,0x5
   1c5cc:	d9050513          	addi	a0,a0,-624 # 21358 <__FUNCTION__.2490+0x14>
   1c5d0:	a75f60ef          	jal	ra,13044 <rt_assert_handler>
    return shell->device->parent.name;
   1c5d4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c5d8:	0007a783          	lw	a5,0(a5)
   1c5dc:	2107a783          	lw	a5,528(a5)
}
   1c5e0:	00078513          	mv	a0,a5
   1c5e4:	00c12083          	lw	ra,12(sp)
   1c5e8:	00812403          	lw	s0,8(sp)
   1c5ec:	01010113          	addi	sp,sp,16
   1c5f0:	00008067          	ret

0001c5f4 <finsh_set_echo>:
 * FINSH_OPTION_ECHO=0x01 is echo mode, other values are none-echo mode.
 *
 * @param echo the echo mode
 */
void finsh_set_echo(rt_uint32_t echo)
{
   1c5f4:	fe010113          	addi	sp,sp,-32
   1c5f8:	00112e23          	sw	ra,28(sp)
   1c5fc:	00812c23          	sw	s0,24(sp)
   1c600:	02010413          	addi	s0,sp,32
   1c604:	fea42623          	sw	a0,-20(s0)
    RT_ASSERT(shell != RT_NULL);
   1c608:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c60c:	0007a783          	lw	a5,0(a5)
   1c610:	00079e63          	bnez	a5,1c62c <finsh_set_echo+0x38>
   1c614:	10100613          	li	a2,257
   1c618:	00005597          	auipc	a1,0x5
   1c61c:	e4058593          	addi	a1,a1,-448 # 21458 <__FUNCTION__.3411>
   1c620:	00005517          	auipc	a0,0x5
   1c624:	d3850513          	addi	a0,a0,-712 # 21358 <__FUNCTION__.2490+0x14>
   1c628:	a1df60ef          	jal	ra,13044 <rt_assert_handler>
    shell->echo_mode = (rt_uint8_t)echo;
   1c62c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c630:	0007a783          	lw	a5,0(a5)
   1c634:	fec42703          	lw	a4,-20(s0)
   1c638:	00177713          	andi	a4,a4,1
   1c63c:	0ff77713          	andi	a4,a4,255
   1c640:	00177613          	andi	a2,a4,1
   1c644:	0247c703          	lbu	a4,36(a5)
   1c648:	ffe77713          	andi	a4,a4,-2
   1c64c:	00070693          	mv	a3,a4
   1c650:	00060713          	mv	a4,a2
   1c654:	00e6e733          	or	a4,a3,a4
   1c658:	02e78223          	sb	a4,36(a5)
}
   1c65c:	00000013          	nop
   1c660:	01c12083          	lw	ra,28(sp)
   1c664:	01812403          	lw	s0,24(sp)
   1c668:	02010113          	addi	sp,sp,32
   1c66c:	00008067          	ret

0001c670 <finsh_get_echo>:
 * This function gets the echo mode of finsh shell.
 *
 * @return the echo mode
 */
rt_uint32_t finsh_get_echo()
{
   1c670:	ff010113          	addi	sp,sp,-16
   1c674:	00112623          	sw	ra,12(sp)
   1c678:	00812423          	sw	s0,8(sp)
   1c67c:	01010413          	addi	s0,sp,16
    RT_ASSERT(shell != RT_NULL);
   1c680:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c684:	0007a783          	lw	a5,0(a5)
   1c688:	00079e63          	bnez	a5,1c6a4 <finsh_get_echo+0x34>
   1c68c:	10e00613          	li	a2,270
   1c690:	00005597          	auipc	a1,0x5
   1c694:	dd858593          	addi	a1,a1,-552 # 21468 <__FUNCTION__.3414>
   1c698:	00005517          	auipc	a0,0x5
   1c69c:	cc050513          	addi	a0,a0,-832 # 21358 <__FUNCTION__.2490+0x14>
   1c6a0:	9a5f60ef          	jal	ra,13044 <rt_assert_handler>

    return shell->echo_mode;
   1c6a4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1c6a8:	0007a783          	lw	a5,0(a5)
   1c6ac:	0247a783          	lw	a5,36(a5)
   1c6b0:	0017f793          	andi	a5,a5,1
   1c6b4:	0ff7f793          	andi	a5,a5,255
}
   1c6b8:	00078513          	mv	a0,a5
   1c6bc:	00c12083          	lw	ra,12(sp)
   1c6c0:	00812403          	lw	s0,8(sp)
   1c6c4:	01010113          	addi	sp,sp,16
   1c6c8:	00008067          	ret

0001c6cc <shell_auto_complete>:
    }
}
#endif /* FINSH_USING_AUTH */

static void shell_auto_complete(char *prefix)
{
   1c6cc:	fe010113          	addi	sp,sp,-32
   1c6d0:	00112e23          	sw	ra,28(sp)
   1c6d4:	00812c23          	sw	s0,24(sp)
   1c6d8:	02010413          	addi	s0,sp,32
   1c6dc:	fea42623          	sw	a0,-20(s0)
    rt_kprintf("\n");
   1c6e0:	00005517          	auipc	a0,0x5
   1c6e4:	cac50513          	addi	a0,a0,-852 # 2138c <__FUNCTION__.2490+0x48>
   1c6e8:	a18f60ef          	jal	ra,12900 <rt_kprintf>
    msh_auto_complete(prefix);
   1c6ec:	fec42503          	lw	a0,-20(s0)
   1c6f0:	4d0010ef          	jal	ra,1dbc0 <msh_auto_complete>

    rt_kprintf("%s%s", FINSH_PROMPT, prefix);
   1c6f4:	ad5ff0ef          	jal	ra,1c1c8 <finsh_get_prompt>
   1c6f8:	00050793          	mv	a5,a0
   1c6fc:	fec42603          	lw	a2,-20(s0)
   1c700:	00078593          	mv	a1,a5
   1c704:	00005517          	auipc	a0,0x5
   1c708:	c8c50513          	addi	a0,a0,-884 # 21390 <__FUNCTION__.2490+0x4c>
   1c70c:	9f4f60ef          	jal	ra,12900 <rt_kprintf>
}
   1c710:	00000013          	nop
   1c714:	01c12083          	lw	ra,28(sp)
   1c718:	01812403          	lw	s0,24(sp)
   1c71c:	02010113          	addi	sp,sp,32
   1c720:	00008067          	ret

0001c724 <shell_handle_history>:

#ifdef FINSH_USING_HISTORY
static rt_bool_t shell_handle_history(struct finsh_shell *shell)
{
   1c724:	fe010113          	addi	sp,sp,-32
   1c728:	00112e23          	sw	ra,28(sp)
   1c72c:	00812c23          	sw	s0,24(sp)
   1c730:	02010413          	addi	s0,sp,32
   1c734:	fea42623          	sw	a0,-20(s0)
    for (i = 0; i <= 60; i++)
        putchar(' ');
    rt_kprintf("\r");

#else
    rt_kprintf("\033[2K\r");
   1c738:	00005517          	auipc	a0,0x5
   1c73c:	c6050513          	addi	a0,a0,-928 # 21398 <__FUNCTION__.2490+0x54>
   1c740:	9c0f60ef          	jal	ra,12900 <rt_kprintf>
#endif
    rt_kprintf("%s%s", FINSH_PROMPT, shell->line);
   1c744:	a85ff0ef          	jal	ra,1c1c8 <finsh_get_prompt>
   1c748:	00050713          	mv	a4,a0
   1c74c:	fec42783          	lw	a5,-20(s0)
   1c750:	1ba78793          	addi	a5,a5,442
   1c754:	00078613          	mv	a2,a5
   1c758:	00070593          	mv	a1,a4
   1c75c:	00005517          	auipc	a0,0x5
   1c760:	c3450513          	addi	a0,a0,-972 # 21390 <__FUNCTION__.2490+0x4c>
   1c764:	99cf60ef          	jal	ra,12900 <rt_kprintf>
    return RT_FALSE;
   1c768:	00000793          	li	a5,0
}
   1c76c:	00078513          	mv	a0,a5
   1c770:	01c12083          	lw	ra,28(sp)
   1c774:	01812403          	lw	s0,24(sp)
   1c778:	02010113          	addi	sp,sp,32
   1c77c:	00008067          	ret

0001c780 <shell_push_history>:

static void shell_push_history(struct finsh_shell *shell)
{
   1c780:	fd010113          	addi	sp,sp,-48
   1c784:	02112623          	sw	ra,44(sp)
   1c788:	02812423          	sw	s0,40(sp)
   1c78c:	03010413          	addi	s0,sp,48
   1c790:	fca42e23          	sw	a0,-36(s0)
    if (shell->line_position != 0)
   1c794:	fdc42783          	lw	a5,-36(s0)
   1c798:	20c7d783          	lhu	a5,524(a5)
   1c79c:	24078663          	beqz	a5,1c9e8 <shell_push_history+0x268>
    {
        /* push history */
        if (shell->history_count >= FINSH_HISTORY_LINES)
   1c7a0:	fdc42783          	lw	a5,-36(s0)
   1c7a4:	0287d703          	lhu	a4,40(a5)
   1c7a8:	00400793          	li	a5,4
   1c7ac:	12e7f863          	bgeu	a5,a4,1c8dc <shell_push_history+0x15c>
        {
            /* if current cmd is same as last cmd, don't push */
            if (memcmp(&shell->cmd_history[FINSH_HISTORY_LINES - 1], shell->line, FINSH_CMD_SIZE))
   1c7b0:	fdc42783          	lw	a5,-36(s0)
   1c7b4:	16a78713          	addi	a4,a5,362
   1c7b8:	fdc42783          	lw	a5,-36(s0)
   1c7bc:	1ba78793          	addi	a5,a5,442
   1c7c0:	05000613          	li	a2,80
   1c7c4:	00078593          	mv	a1,a5
   1c7c8:	00070513          	mv	a0,a4
   1c7cc:	34d020ef          	jal	ra,1f318 <memcmp>
   1c7d0:	00050793          	mv	a5,a0
   1c7d4:	20078a63          	beqz	a5,1c9e8 <shell_push_history+0x268>
            {
                /* move history */
                int index;
                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
   1c7d8:	fe042623          	sw	zero,-20(s0)
   1c7dc:	06c0006f          	j	1c848 <shell_push_history+0xc8>
                {
                    memcpy(&shell->cmd_history[index][0],
   1c7e0:	fec42703          	lw	a4,-20(s0)
   1c7e4:	00070793          	mv	a5,a4
   1c7e8:	00279793          	slli	a5,a5,0x2
   1c7ec:	00e787b3          	add	a5,a5,a4
   1c7f0:	00479793          	slli	a5,a5,0x4
   1c7f4:	02078793          	addi	a5,a5,32
   1c7f8:	fdc42703          	lw	a4,-36(s0)
   1c7fc:	00f707b3          	add	a5,a4,a5
   1c800:	00a78693          	addi	a3,a5,10
                           &shell->cmd_history[index + 1][0], FINSH_CMD_SIZE);
   1c804:	fec42783          	lw	a5,-20(s0)
   1c808:	00178713          	addi	a4,a5,1
   1c80c:	00070793          	mv	a5,a4
   1c810:	00279793          	slli	a5,a5,0x2
   1c814:	00e787b3          	add	a5,a5,a4
   1c818:	00479793          	slli	a5,a5,0x4
   1c81c:	02078793          	addi	a5,a5,32
   1c820:	fdc42703          	lw	a4,-36(s0)
   1c824:	00f707b3          	add	a5,a4,a5
   1c828:	00a78793          	addi	a5,a5,10
                    memcpy(&shell->cmd_history[index][0],
   1c82c:	05000613          	li	a2,80
   1c830:	00078593          	mv	a1,a5
   1c834:	00068513          	mv	a0,a3
   1c838:	359020ef          	jal	ra,1f390 <memcpy>
                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
   1c83c:	fec42783          	lw	a5,-20(s0)
   1c840:	00178793          	addi	a5,a5,1
   1c844:	fef42623          	sw	a5,-20(s0)
   1c848:	fec42703          	lw	a4,-20(s0)
   1c84c:	00300793          	li	a5,3
   1c850:	f8e7d8e3          	bge	a5,a4,1c7e0 <shell_push_history+0x60>
                }
                memset(&shell->cmd_history[index][0], 0, FINSH_CMD_SIZE);
   1c854:	fec42703          	lw	a4,-20(s0)
   1c858:	00070793          	mv	a5,a4
   1c85c:	00279793          	slli	a5,a5,0x2
   1c860:	00e787b3          	add	a5,a5,a4
   1c864:	00479793          	slli	a5,a5,0x4
   1c868:	02078793          	addi	a5,a5,32
   1c86c:	fdc42703          	lw	a4,-36(s0)
   1c870:	00f707b3          	add	a5,a4,a5
   1c874:	00a78793          	addi	a5,a5,10
   1c878:	05000613          	li	a2,80
   1c87c:	00000593          	li	a1,0
   1c880:	00078513          	mv	a0,a5
   1c884:	429020ef          	jal	ra,1f4ac <memset>
                memcpy(&shell->cmd_history[index][0], shell->line, shell->line_position);
   1c888:	fec42703          	lw	a4,-20(s0)
   1c88c:	00070793          	mv	a5,a4
   1c890:	00279793          	slli	a5,a5,0x2
   1c894:	00e787b3          	add	a5,a5,a4
   1c898:	00479793          	slli	a5,a5,0x4
   1c89c:	02078793          	addi	a5,a5,32
   1c8a0:	fdc42703          	lw	a4,-36(s0)
   1c8a4:	00f707b3          	add	a5,a4,a5
   1c8a8:	00a78713          	addi	a4,a5,10
   1c8ac:	fdc42783          	lw	a5,-36(s0)
   1c8b0:	1ba78693          	addi	a3,a5,442
   1c8b4:	fdc42783          	lw	a5,-36(s0)
   1c8b8:	20c7d783          	lhu	a5,524(a5)
   1c8bc:	00078613          	mv	a2,a5
   1c8c0:	00068593          	mv	a1,a3
   1c8c4:	00070513          	mv	a0,a4
   1c8c8:	2c9020ef          	jal	ra,1f390 <memcpy>

                /* it's the maximum history */
                shell->history_count = FINSH_HISTORY_LINES;
   1c8cc:	fdc42783          	lw	a5,-36(s0)
   1c8d0:	00500713          	li	a4,5
   1c8d4:	02e79423          	sh	a4,40(a5)
   1c8d8:	1100006f          	j	1c9e8 <shell_push_history+0x268>
            }
        }
        else
        {
            /* if current cmd is same as last cmd, don't push */
            if (shell->history_count == 0 || memcmp(&shell->cmd_history[shell->history_count - 1], shell->line, FINSH_CMD_SIZE))
   1c8dc:	fdc42783          	lw	a5,-36(s0)
   1c8e0:	0287d783          	lhu	a5,40(a5)
   1c8e4:	04078863          	beqz	a5,1c934 <shell_push_history+0x1b4>
   1c8e8:	fdc42783          	lw	a5,-36(s0)
   1c8ec:	0287d783          	lhu	a5,40(a5)
   1c8f0:	fff78713          	addi	a4,a5,-1
   1c8f4:	00070793          	mv	a5,a4
   1c8f8:	00279793          	slli	a5,a5,0x2
   1c8fc:	00e787b3          	add	a5,a5,a4
   1c900:	00479793          	slli	a5,a5,0x4
   1c904:	02078793          	addi	a5,a5,32
   1c908:	fdc42703          	lw	a4,-36(s0)
   1c90c:	00f707b3          	add	a5,a4,a5
   1c910:	00a78713          	addi	a4,a5,10
   1c914:	fdc42783          	lw	a5,-36(s0)
   1c918:	1ba78793          	addi	a5,a5,442
   1c91c:	05000613          	li	a2,80
   1c920:	00078593          	mv	a1,a5
   1c924:	00070513          	mv	a0,a4
   1c928:	1f1020ef          	jal	ra,1f318 <memcmp>
   1c92c:	00050793          	mv	a5,a0
   1c930:	0a078c63          	beqz	a5,1c9e8 <shell_push_history+0x268>
            {
                shell->current_history = shell->history_count;
   1c934:	fdc42783          	lw	a5,-36(s0)
   1c938:	0287d703          	lhu	a4,40(a5)
   1c93c:	fdc42783          	lw	a5,-36(s0)
   1c940:	02e79323          	sh	a4,38(a5)
                memset(&shell->cmd_history[shell->history_count][0], 0, FINSH_CMD_SIZE);
   1c944:	fdc42783          	lw	a5,-36(s0)
   1c948:	0287d783          	lhu	a5,40(a5)
   1c94c:	00078713          	mv	a4,a5
   1c950:	00070793          	mv	a5,a4
   1c954:	00279793          	slli	a5,a5,0x2
   1c958:	00e787b3          	add	a5,a5,a4
   1c95c:	00479793          	slli	a5,a5,0x4
   1c960:	02078793          	addi	a5,a5,32
   1c964:	fdc42703          	lw	a4,-36(s0)
   1c968:	00f707b3          	add	a5,a4,a5
   1c96c:	00a78793          	addi	a5,a5,10
   1c970:	05000613          	li	a2,80
   1c974:	00000593          	li	a1,0
   1c978:	00078513          	mv	a0,a5
   1c97c:	331020ef          	jal	ra,1f4ac <memset>
                memcpy(&shell->cmd_history[shell->history_count][0], shell->line, shell->line_position);
   1c980:	fdc42783          	lw	a5,-36(s0)
   1c984:	0287d783          	lhu	a5,40(a5)
   1c988:	00078713          	mv	a4,a5
   1c98c:	00070793          	mv	a5,a4
   1c990:	00279793          	slli	a5,a5,0x2
   1c994:	00e787b3          	add	a5,a5,a4
   1c998:	00479793          	slli	a5,a5,0x4
   1c99c:	02078793          	addi	a5,a5,32
   1c9a0:	fdc42703          	lw	a4,-36(s0)
   1c9a4:	00f707b3          	add	a5,a4,a5
   1c9a8:	00a78713          	addi	a4,a5,10
   1c9ac:	fdc42783          	lw	a5,-36(s0)
   1c9b0:	1ba78693          	addi	a3,a5,442
   1c9b4:	fdc42783          	lw	a5,-36(s0)
   1c9b8:	20c7d783          	lhu	a5,524(a5)
   1c9bc:	00078613          	mv	a2,a5
   1c9c0:	00068593          	mv	a1,a3
   1c9c4:	00070513          	mv	a0,a4
   1c9c8:	1c9020ef          	jal	ra,1f390 <memcpy>

                /* increase count and set current history position */
                shell->history_count ++;
   1c9cc:	fdc42783          	lw	a5,-36(s0)
   1c9d0:	0287d783          	lhu	a5,40(a5)
   1c9d4:	00178793          	addi	a5,a5,1
   1c9d8:	01079713          	slli	a4,a5,0x10
   1c9dc:	01075713          	srli	a4,a4,0x10
   1c9e0:	fdc42783          	lw	a5,-36(s0)
   1c9e4:	02e79423          	sh	a4,40(a5)
            }
        }
    }
    shell->current_history = shell->history_count;
   1c9e8:	fdc42783          	lw	a5,-36(s0)
   1c9ec:	0287d703          	lhu	a4,40(a5)
   1c9f0:	fdc42783          	lw	a5,-36(s0)
   1c9f4:	02e79323          	sh	a4,38(a5)
}
   1c9f8:	00000013          	nop
   1c9fc:	02c12083          	lw	ra,44(sp)
   1ca00:	02812403          	lw	s0,40(sp)
   1ca04:	03010113          	addi	sp,sp,48
   1ca08:	00008067          	ret

0001ca0c <finsh_thread_entry>:
#endif

void finsh_thread_entry(void *parameter)
{
   1ca0c:	fc010113          	addi	sp,sp,-64
   1ca10:	02112e23          	sw	ra,60(sp)
   1ca14:	02812c23          	sw	s0,56(sp)
   1ca18:	04010413          	addi	s0,sp,64
   1ca1c:	fca42623          	sw	a0,-52(s0)
    int ch;

    /* normal is echo mode */
#ifndef FINSH_ECHO_DISABLE_DEFAULT
    shell->echo_mode = 1;
   1ca20:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ca24:	0007a783          	lw	a5,0(a5)
   1ca28:	0247c703          	lbu	a4,36(a5)
   1ca2c:	00176713          	ori	a4,a4,1
   1ca30:	02e78223          	sb	a4,36(a5)
    shell->echo_mode = 0;
#endif

#if !defined(RT_USING_POSIX_DEVIO) && defined(RT_USING_DEVICE)
    /* set console device as shell device */
    if (shell->device == RT_NULL)
   1ca34:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ca38:	0007a783          	lw	a5,0(a5)
   1ca3c:	2107a783          	lw	a5,528(a5)
   1ca40:	02079063          	bnez	a5,1ca60 <finsh_thread_entry+0x54>
    {
        rt_device_t console = rt_console_get_device();
   1ca44:	d69f50ef          	jal	ra,127ac <rt_console_get_device>
   1ca48:	fea42023          	sw	a0,-32(s0)
        if (console)
   1ca4c:	fe042783          	lw	a5,-32(s0)
   1ca50:	00078863          	beqz	a5,1ca60 <finsh_thread_entry+0x54>
        {
            finsh_set_device(console->parent.name);
   1ca54:	fe042783          	lw	a5,-32(s0)
   1ca58:	00078513          	mv	a0,a5
   1ca5c:	a0dff0ef          	jal	ra,1c468 <finsh_set_device>
    }
    /* waiting authenticate success */
    finsh_wait_auth();
#endif

    rt_kprintf(FINSH_PROMPT);
   1ca60:	f68ff0ef          	jal	ra,1c1c8 <finsh_get_prompt>
   1ca64:	00050793          	mv	a5,a0
   1ca68:	00078513          	mv	a0,a5
   1ca6c:	e95f50ef          	jal	ra,12900 <rt_kprintf>

    while (1)
    {
        ch = (int)finsh_getchar();
   1ca70:	8edff0ef          	jal	ra,1c35c <finsh_getchar>
   1ca74:	fca42e23          	sw	a0,-36(s0)
        if (ch < 0)
   1ca78:	fdc42783          	lw	a5,-36(s0)
   1ca7c:	0807c6e3          	bltz	a5,1d308 <finsh_thread_entry+0x8fc>
         * up key  : 0x1b 0x5b 0x41
         * down key: 0x1b 0x5b 0x42
         * right key:0x1b 0x5b 0x43
         * left key: 0x1b 0x5b 0x44
         */
        if (ch == 0x1b)
   1ca80:	fdc42703          	lw	a4,-36(s0)
   1ca84:	01b00793          	li	a5,27
   1ca88:	00f71c63          	bne	a4,a5,1caa0 <finsh_thread_entry+0x94>
        {
            shell->stat = WAIT_SPEC_KEY;
   1ca8c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ca90:	0007a783          	lw	a5,0(a5)
   1ca94:	00100713          	li	a4,1
   1ca98:	02e7a023          	sw	a4,32(a5)
            continue;
   1ca9c:	0990006f          	j	1d334 <finsh_thread_entry+0x928>
        }
        else if (shell->stat == WAIT_SPEC_KEY)
   1caa0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1caa4:	0007a783          	lw	a5,0(a5)
   1caa8:	0207a703          	lw	a4,32(a5)
   1caac:	00100793          	li	a5,1
   1cab0:	02f71a63          	bne	a4,a5,1cae4 <finsh_thread_entry+0xd8>
        {
            if (ch == 0x5b)
   1cab4:	fdc42703          	lw	a4,-36(s0)
   1cab8:	05b00793          	li	a5,91
   1cabc:	00f71c63          	bne	a4,a5,1cad4 <finsh_thread_entry+0xc8>
            {
                shell->stat = WAIT_FUNC_KEY;
   1cac0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cac4:	0007a783          	lw	a5,0(a5)
   1cac8:	00200713          	li	a4,2
   1cacc:	02e7a023          	sw	a4,32(a5)
                continue;
   1cad0:	0650006f          	j	1d334 <finsh_thread_entry+0x928>
            }

            shell->stat = WAIT_NORMAL;
   1cad4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cad8:	0007a783          	lw	a5,0(a5)
   1cadc:	0207a023          	sw	zero,32(a5)
   1cae0:	2ec0006f          	j	1cdcc <finsh_thread_entry+0x3c0>
        }
        else if (shell->stat == WAIT_FUNC_KEY)
   1cae4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cae8:	0007a783          	lw	a5,0(a5)
   1caec:	0207a703          	lw	a4,32(a5)
   1caf0:	00200793          	li	a5,2
   1caf4:	2cf71c63          	bne	a4,a5,1cdcc <finsh_thread_entry+0x3c0>
        {
            shell->stat = WAIT_NORMAL;
   1caf8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cafc:	0007a783          	lw	a5,0(a5)
   1cb00:	0207a023          	sw	zero,32(a5)

            if (ch == 0x41) /* up key */
   1cb04:	fdc42703          	lw	a4,-36(s0)
   1cb08:	04100793          	li	a5,65
   1cb0c:	0ef71063          	bne	a4,a5,1cbec <finsh_thread_entry+0x1e0>
            {
#ifdef FINSH_USING_HISTORY
                /* prev history */
                if (shell->current_history > 0)
   1cb10:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cb14:	0007a783          	lw	a5,0(a5)
   1cb18:	0267d783          	lhu	a5,38(a5)
   1cb1c:	0c078063          	beqz	a5,1cbdc <finsh_thread_entry+0x1d0>
                    shell->current_history --;
   1cb20:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cb24:	0007a783          	lw	a5,0(a5)
   1cb28:	0267d703          	lhu	a4,38(a5)
   1cb2c:	fff70713          	addi	a4,a4,-1
   1cb30:	01071713          	slli	a4,a4,0x10
   1cb34:	01075713          	srli	a4,a4,0x10
   1cb38:	02e79323          	sh	a4,38(a5)
                    shell->current_history = 0;
                    continue;
                }

                /* copy the history command */
                memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
   1cb3c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cb40:	0007a783          	lw	a5,0(a5)
   1cb44:	1ba78693          	addi	a3,a5,442
   1cb48:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cb4c:	0007a703          	lw	a4,0(a5)
   1cb50:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cb54:	0007a783          	lw	a5,0(a5)
   1cb58:	0267d783          	lhu	a5,38(a5)
   1cb5c:	00078613          	mv	a2,a5
   1cb60:	00060793          	mv	a5,a2
   1cb64:	00279793          	slli	a5,a5,0x2
   1cb68:	00c787b3          	add	a5,a5,a2
   1cb6c:	00479793          	slli	a5,a5,0x4
   1cb70:	02078793          	addi	a5,a5,32
   1cb74:	00f707b3          	add	a5,a4,a5
   1cb78:	00a78793          	addi	a5,a5,10
   1cb7c:	05000613          	li	a2,80
   1cb80:	00078593          	mv	a1,a5
   1cb84:	00068513          	mv	a0,a3
   1cb88:	009020ef          	jal	ra,1f390 <memcpy>
                       FINSH_CMD_SIZE);
                shell->line_curpos = shell->line_position = strlen(shell->line);
   1cb8c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cb90:	0007a783          	lw	a5,0(a5)
   1cb94:	1ba78793          	addi	a5,a5,442
   1cb98:	00078513          	mv	a0,a5
   1cb9c:	29d020ef          	jal	ra,1f638 <strlen>
   1cba0:	00050713          	mv	a4,a0
   1cba4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cba8:	0007a783          	lw	a5,0(a5)
   1cbac:	01071713          	slli	a4,a4,0x10
   1cbb0:	01075713          	srli	a4,a4,0x10
   1cbb4:	20e79623          	sh	a4,524(a5)
   1cbb8:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1cbbc:	00072703          	lw	a4,0(a4)
   1cbc0:	20c7d783          	lhu	a5,524(a5)
   1cbc4:	20f71723          	sh	a5,526(a4)
                shell_handle_history(shell);
   1cbc8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cbcc:	0007a783          	lw	a5,0(a5)
   1cbd0:	00078513          	mv	a0,a5
   1cbd4:	b51ff0ef          	jal	ra,1c724 <shell_handle_history>
#endif
                continue;
   1cbd8:	75c0006f          	j	1d334 <finsh_thread_entry+0x928>
                    shell->current_history = 0;
   1cbdc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cbe0:	0007a783          	lw	a5,0(a5)
   1cbe4:	02079323          	sh	zero,38(a5)
                    continue;
   1cbe8:	74c0006f          	j	1d334 <finsh_thread_entry+0x928>
            }
            else if (ch == 0x42) /* down key */
   1cbec:	fdc42703          	lw	a4,-36(s0)
   1cbf0:	04200793          	li	a5,66
   1cbf4:	10f71e63          	bne	a4,a5,1cd10 <finsh_thread_entry+0x304>
            {
#ifdef FINSH_USING_HISTORY
                /* next history */
                if (shell->current_history < shell->history_count - 1)
   1cbf8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cbfc:	0007a783          	lw	a5,0(a5)
   1cc00:	0267d783          	lhu	a5,38(a5)
   1cc04:	00078713          	mv	a4,a5
   1cc08:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc0c:	0007a783          	lw	a5,0(a5)
   1cc10:	0287d783          	lhu	a5,40(a5)
   1cc14:	fff78793          	addi	a5,a5,-1
   1cc18:	02f75263          	bge	a4,a5,1cc3c <finsh_thread_entry+0x230>
                    shell->current_history ++;
   1cc1c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc20:	0007a783          	lw	a5,0(a5)
   1cc24:	0267d703          	lhu	a4,38(a5)
   1cc28:	00170713          	addi	a4,a4,1
   1cc2c:	01071713          	slli	a4,a4,0x10
   1cc30:	01075713          	srli	a4,a4,0x10
   1cc34:	02e79323          	sh	a4,38(a5)
   1cc38:	0380006f          	j	1cc70 <finsh_thread_entry+0x264>
                else
                {
                    /* set to the end of history */
                    if (shell->history_count != 0)
   1cc3c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc40:	0007a783          	lw	a5,0(a5)
   1cc44:	0287d783          	lhu	a5,40(a5)
   1cc48:	6c078463          	beqz	a5,1d310 <finsh_thread_entry+0x904>
                        shell->current_history = shell->history_count - 1;
   1cc4c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc50:	0007a783          	lw	a5,0(a5)
   1cc54:	0287d703          	lhu	a4,40(a5)
   1cc58:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc5c:	0007a783          	lw	a5,0(a5)
   1cc60:	fff70713          	addi	a4,a4,-1
   1cc64:	01071713          	slli	a4,a4,0x10
   1cc68:	01075713          	srli	a4,a4,0x10
   1cc6c:	02e79323          	sh	a4,38(a5)
                    else
                        continue;
                }

                memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
   1cc70:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc74:	0007a783          	lw	a5,0(a5)
   1cc78:	1ba78693          	addi	a3,a5,442
   1cc7c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc80:	0007a703          	lw	a4,0(a5)
   1cc84:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cc88:	0007a783          	lw	a5,0(a5)
   1cc8c:	0267d783          	lhu	a5,38(a5)
   1cc90:	00078613          	mv	a2,a5
   1cc94:	00060793          	mv	a5,a2
   1cc98:	00279793          	slli	a5,a5,0x2
   1cc9c:	00c787b3          	add	a5,a5,a2
   1cca0:	00479793          	slli	a5,a5,0x4
   1cca4:	02078793          	addi	a5,a5,32
   1cca8:	00f707b3          	add	a5,a4,a5
   1ccac:	00a78793          	addi	a5,a5,10
   1ccb0:	05000613          	li	a2,80
   1ccb4:	00078593          	mv	a1,a5
   1ccb8:	00068513          	mv	a0,a3
   1ccbc:	6d4020ef          	jal	ra,1f390 <memcpy>
                       FINSH_CMD_SIZE);
                shell->line_curpos = shell->line_position = strlen(shell->line);
   1ccc0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ccc4:	0007a783          	lw	a5,0(a5)
   1ccc8:	1ba78793          	addi	a5,a5,442
   1cccc:	00078513          	mv	a0,a5
   1ccd0:	169020ef          	jal	ra,1f638 <strlen>
   1ccd4:	00050713          	mv	a4,a0
   1ccd8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ccdc:	0007a783          	lw	a5,0(a5)
   1cce0:	01071713          	slli	a4,a4,0x10
   1cce4:	01075713          	srli	a4,a4,0x10
   1cce8:	20e79623          	sh	a4,524(a5)
   1ccec:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1ccf0:	00072703          	lw	a4,0(a4)
   1ccf4:	20c7d783          	lhu	a5,524(a5)
   1ccf8:	20f71723          	sh	a5,526(a4)
                shell_handle_history(shell);
   1ccfc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cd00:	0007a783          	lw	a5,0(a5)
   1cd04:	00078513          	mv	a0,a5
   1cd08:	a1dff0ef          	jal	ra,1c724 <shell_handle_history>
#endif
                continue;
   1cd0c:	6280006f          	j	1d334 <finsh_thread_entry+0x928>
            }
            else if (ch == 0x44) /* left key */
   1cd10:	fdc42703          	lw	a4,-36(s0)
   1cd14:	04400793          	li	a5,68
   1cd18:	04f71063          	bne	a4,a5,1cd58 <finsh_thread_entry+0x34c>
            {
                if (shell->line_curpos)
   1cd1c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cd20:	0007a783          	lw	a5,0(a5)
   1cd24:	20e7d783          	lhu	a5,526(a5)
   1cd28:	5e078863          	beqz	a5,1d318 <finsh_thread_entry+0x90c>
                {
                    rt_kprintf("\b");
   1cd2c:	00004517          	auipc	a0,0x4
   1cd30:	67450513          	addi	a0,a0,1652 # 213a0 <__FUNCTION__.2490+0x5c>
   1cd34:	bcdf50ef          	jal	ra,12900 <rt_kprintf>
                    shell->line_curpos --;
   1cd38:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cd3c:	0007a783          	lw	a5,0(a5)
   1cd40:	20e7d703          	lhu	a4,526(a5)
   1cd44:	fff70713          	addi	a4,a4,-1
   1cd48:	01071713          	slli	a4,a4,0x10
   1cd4c:	01075713          	srli	a4,a4,0x10
   1cd50:	20e79723          	sh	a4,526(a5)
                }

                continue;
   1cd54:	5c40006f          	j	1d318 <finsh_thread_entry+0x90c>
            }
            else if (ch == 0x43) /* right key */
   1cd58:	fdc42703          	lw	a4,-36(s0)
   1cd5c:	04300793          	li	a5,67
   1cd60:	06f71663          	bne	a4,a5,1cdcc <finsh_thread_entry+0x3c0>
            {
                if (shell->line_curpos < shell->line_position)
   1cd64:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cd68:	0007a783          	lw	a5,0(a5)
   1cd6c:	20e7d703          	lhu	a4,526(a5)
   1cd70:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cd74:	0007a783          	lw	a5,0(a5)
   1cd78:	20c7d783          	lhu	a5,524(a5)
   1cd7c:	5af77263          	bgeu	a4,a5,1d320 <finsh_thread_entry+0x914>
                {
                    rt_kprintf("%c", shell->line[shell->line_curpos]);
   1cd80:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cd84:	0007a783          	lw	a5,0(a5)
   1cd88:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1cd8c:	00072703          	lw	a4,0(a4)
   1cd90:	20e75703          	lhu	a4,526(a4)
   1cd94:	00e787b3          	add	a5,a5,a4
   1cd98:	1ba7c783          	lbu	a5,442(a5)
   1cd9c:	00078593          	mv	a1,a5
   1cda0:	00004517          	auipc	a0,0x4
   1cda4:	60450513          	addi	a0,a0,1540 # 213a4 <__FUNCTION__.2490+0x60>
   1cda8:	b59f50ef          	jal	ra,12900 <rt_kprintf>
                    shell->line_curpos ++;
   1cdac:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cdb0:	0007a783          	lw	a5,0(a5)
   1cdb4:	20e7d703          	lhu	a4,526(a5)
   1cdb8:	00170713          	addi	a4,a4,1
   1cdbc:	01071713          	slli	a4,a4,0x10
   1cdc0:	01075713          	srli	a4,a4,0x10
   1cdc4:	20e79723          	sh	a4,526(a5)
                }

                continue;
   1cdc8:	5580006f          	j	1d320 <finsh_thread_entry+0x914>
            }
        }

        /* received null or error */
        if (ch == '\0' || ch == 0xFF) continue;
   1cdcc:	fdc42783          	lw	a5,-36(s0)
   1cdd0:	54078c63          	beqz	a5,1d328 <finsh_thread_entry+0x91c>
   1cdd4:	fdc42703          	lw	a4,-36(s0)
   1cdd8:	0ff00793          	li	a5,255
   1cddc:	54f70663          	beq	a4,a5,1d328 <finsh_thread_entry+0x91c>
        /* handle tab key */
        else if (ch == '\t')
   1cde0:	fdc42703          	lw	a4,-36(s0)
   1cde4:	00900793          	li	a5,9
   1cde8:	08f71863          	bne	a4,a5,1ce78 <finsh_thread_entry+0x46c>
        {
            int i;
            /* move the cursor to the beginning of line */
            for (i = 0; i < shell->line_curpos; i++)
   1cdec:	fe042623          	sw	zero,-20(s0)
   1cdf0:	01c0006f          	j	1ce0c <finsh_thread_entry+0x400>
                rt_kprintf("\b");
   1cdf4:	00004517          	auipc	a0,0x4
   1cdf8:	5ac50513          	addi	a0,a0,1452 # 213a0 <__FUNCTION__.2490+0x5c>
   1cdfc:	b05f50ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < shell->line_curpos; i++)
   1ce00:	fec42783          	lw	a5,-20(s0)
   1ce04:	00178793          	addi	a5,a5,1
   1ce08:	fef42623          	sw	a5,-20(s0)
   1ce0c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ce10:	0007a783          	lw	a5,0(a5)
   1ce14:	20e7d783          	lhu	a5,526(a5)
   1ce18:	00078713          	mv	a4,a5
   1ce1c:	fec42783          	lw	a5,-20(s0)
   1ce20:	fce7cae3          	blt	a5,a4,1cdf4 <finsh_thread_entry+0x3e8>

            /* auto complete */
            shell_auto_complete(&shell->line[0]);
   1ce24:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ce28:	0007a783          	lw	a5,0(a5)
   1ce2c:	1ba78793          	addi	a5,a5,442
   1ce30:	00078513          	mv	a0,a5
   1ce34:	899ff0ef          	jal	ra,1c6cc <shell_auto_complete>
            /* re-calculate position */
            shell->line_curpos = shell->line_position = strlen(shell->line);
   1ce38:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ce3c:	0007a783          	lw	a5,0(a5)
   1ce40:	1ba78793          	addi	a5,a5,442
   1ce44:	00078513          	mv	a0,a5
   1ce48:	7f0020ef          	jal	ra,1f638 <strlen>
   1ce4c:	00050713          	mv	a4,a0
   1ce50:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ce54:	0007a783          	lw	a5,0(a5)
   1ce58:	01071713          	slli	a4,a4,0x10
   1ce5c:	01075713          	srli	a4,a4,0x10
   1ce60:	20e79623          	sh	a4,524(a5)
   1ce64:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1ce68:	00072703          	lw	a4,0(a4)
   1ce6c:	20c7d783          	lhu	a5,524(a5)
   1ce70:	20f71723          	sh	a5,526(a4)

            continue;
   1ce74:	4c00006f          	j	1d334 <finsh_thread_entry+0x928>
        }
        /* handle backspace key */
        else if (ch == 0x7f || ch == 0x08)
   1ce78:	fdc42703          	lw	a4,-36(s0)
   1ce7c:	07f00793          	li	a5,127
   1ce80:	00f70863          	beq	a4,a5,1ce90 <finsh_thread_entry+0x484>
   1ce84:	fdc42703          	lw	a4,-36(s0)
   1ce88:	00800793          	li	a5,8
   1ce8c:	18f71e63          	bne	a4,a5,1d028 <finsh_thread_entry+0x61c>
        {
            /* note that shell->line_curpos >= 0 */
            if (shell->line_curpos == 0)
   1ce90:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1ce94:	0007a783          	lw	a5,0(a5)
   1ce98:	20e7d783          	lhu	a5,526(a5)
   1ce9c:	48078a63          	beqz	a5,1d330 <finsh_thread_entry+0x924>
                continue;

            shell->line_position--;
   1cea0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cea4:	0007a783          	lw	a5,0(a5)
   1cea8:	20c7d703          	lhu	a4,524(a5)
   1ceac:	fff70713          	addi	a4,a4,-1
   1ceb0:	01071713          	slli	a4,a4,0x10
   1ceb4:	01075713          	srli	a4,a4,0x10
   1ceb8:	20e79623          	sh	a4,524(a5)
            shell->line_curpos--;
   1cebc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cec0:	0007a783          	lw	a5,0(a5)
   1cec4:	20e7d703          	lhu	a4,526(a5)
   1cec8:	fff70713          	addi	a4,a4,-1
   1cecc:	01071713          	slli	a4,a4,0x10
   1ced0:	01075713          	srli	a4,a4,0x10
   1ced4:	20e79723          	sh	a4,526(a5)

            if (shell->line_position > shell->line_curpos)
   1ced8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cedc:	0007a783          	lw	a5,0(a5)
   1cee0:	20c7d703          	lhu	a4,524(a5)
   1cee4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cee8:	0007a783          	lw	a5,0(a5)
   1ceec:	20e7d783          	lhu	a5,526(a5)
   1cef0:	10e7f663          	bgeu	a5,a4,1cffc <finsh_thread_entry+0x5f0>
            {
                int i;

                rt_memmove(&shell->line[shell->line_curpos],
   1cef4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cef8:	0007a703          	lw	a4,0(a5)
   1cefc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf00:	0007a783          	lw	a5,0(a5)
   1cf04:	20e7d783          	lhu	a5,526(a5)
   1cf08:	1b078793          	addi	a5,a5,432
   1cf0c:	00f707b3          	add	a5,a4,a5
   1cf10:	00a78693          	addi	a3,a5,10
                           &shell->line[shell->line_curpos + 1],
   1cf14:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf18:	0007a703          	lw	a4,0(a5)
   1cf1c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf20:	0007a783          	lw	a5,0(a5)
   1cf24:	20e7d783          	lhu	a5,526(a5)
   1cf28:	00178793          	addi	a5,a5,1
   1cf2c:	1b078793          	addi	a5,a5,432
   1cf30:	00f707b3          	add	a5,a4,a5
   1cf34:	00a78713          	addi	a4,a5,10
                           shell->line_position - shell->line_curpos);
   1cf38:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf3c:	0007a783          	lw	a5,0(a5)
   1cf40:	20c7d783          	lhu	a5,524(a5)
   1cf44:	00078613          	mv	a2,a5
   1cf48:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf4c:	0007a783          	lw	a5,0(a5)
   1cf50:	20e7d783          	lhu	a5,526(a5)
   1cf54:	40f607b3          	sub	a5,a2,a5
                rt_memmove(&shell->line[shell->line_curpos],
   1cf58:	00078613          	mv	a2,a5
   1cf5c:	00070593          	mv	a1,a4
   1cf60:	00068513          	mv	a0,a3
   1cf64:	d40f40ef          	jal	ra,114a4 <rt_memmove>
                shell->line[shell->line_position] = 0;
   1cf68:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf6c:	0007a783          	lw	a5,0(a5)
   1cf70:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1cf74:	00072703          	lw	a4,0(a4)
   1cf78:	20c75703          	lhu	a4,524(a4)
   1cf7c:	00e787b3          	add	a5,a5,a4
   1cf80:	1a078d23          	sb	zero,442(a5)

                rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
   1cf84:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf88:	0007a703          	lw	a4,0(a5)
   1cf8c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cf90:	0007a783          	lw	a5,0(a5)
   1cf94:	20e7d783          	lhu	a5,526(a5)
   1cf98:	1b078793          	addi	a5,a5,432
   1cf9c:	00f707b3          	add	a5,a4,a5
   1cfa0:	00a78793          	addi	a5,a5,10
   1cfa4:	00078593          	mv	a1,a5
   1cfa8:	00004517          	auipc	a0,0x4
   1cfac:	40050513          	addi	a0,a0,1024 # 213a8 <__FUNCTION__.2490+0x64>
   1cfb0:	951f50ef          	jal	ra,12900 <rt_kprintf>

                /* move the cursor to the origin position */
                for (i = shell->line_curpos; i <= shell->line_position; i++)
   1cfb4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cfb8:	0007a783          	lw	a5,0(a5)
   1cfbc:	20e7d783          	lhu	a5,526(a5)
   1cfc0:	fef42423          	sw	a5,-24(s0)
   1cfc4:	01c0006f          	j	1cfe0 <finsh_thread_entry+0x5d4>
                    rt_kprintf("\b");
   1cfc8:	00004517          	auipc	a0,0x4
   1cfcc:	3d850513          	addi	a0,a0,984 # 213a0 <__FUNCTION__.2490+0x5c>
   1cfd0:	931f50ef          	jal	ra,12900 <rt_kprintf>
                for (i = shell->line_curpos; i <= shell->line_position; i++)
   1cfd4:	fe842783          	lw	a5,-24(s0)
   1cfd8:	00178793          	addi	a5,a5,1
   1cfdc:	fef42423          	sw	a5,-24(s0)
   1cfe0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1cfe4:	0007a783          	lw	a5,0(a5)
   1cfe8:	20c7d783          	lhu	a5,524(a5)
   1cfec:	00078713          	mv	a4,a5
   1cff0:	fe842783          	lw	a5,-24(s0)
   1cff4:	fcf75ae3          	bge	a4,a5,1cfc8 <finsh_thread_entry+0x5bc>
            {
                rt_kprintf("\b \b");
                shell->line[shell->line_position] = 0;
            }

            continue;
   1cff8:	33c0006f          	j	1d334 <finsh_thread_entry+0x928>
                rt_kprintf("\b \b");
   1cffc:	00004517          	auipc	a0,0x4
   1d000:	3b450513          	addi	a0,a0,948 # 213b0 <__FUNCTION__.2490+0x6c>
   1d004:	8fdf50ef          	jal	ra,12900 <rt_kprintf>
                shell->line[shell->line_position] = 0;
   1d008:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d00c:	0007a783          	lw	a5,0(a5)
   1d010:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1d014:	00072703          	lw	a4,0(a4)
   1d018:	20c75703          	lhu	a4,524(a4)
   1d01c:	00e787b3          	add	a5,a5,a4
   1d020:	1a078d23          	sb	zero,442(a5)
            continue;
   1d024:	3100006f          	j	1d334 <finsh_thread_entry+0x928>
        }

        /* handle end of line, break */
        if (ch == '\r' || ch == '\n')
   1d028:	fdc42703          	lw	a4,-36(s0)
   1d02c:	00d00793          	li	a5,13
   1d030:	00f70863          	beq	a4,a5,1d040 <finsh_thread_entry+0x634>
   1d034:	fdc42703          	lw	a4,-36(s0)
   1d038:	00a00793          	li	a5,10
   1d03c:	0af71463          	bne	a4,a5,1d0e4 <finsh_thread_entry+0x6d8>
        {
#ifdef FINSH_USING_HISTORY
            shell_push_history(shell);
   1d040:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d044:	0007a783          	lw	a5,0(a5)
   1d048:	00078513          	mv	a0,a5
   1d04c:	f34ff0ef          	jal	ra,1c780 <shell_push_history>
#endif
            if (shell->echo_mode)
   1d050:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d054:	0007a783          	lw	a5,0(a5)
   1d058:	0247c783          	lbu	a5,36(a5)
   1d05c:	0017f793          	andi	a5,a5,1
   1d060:	0ff7f793          	andi	a5,a5,255
   1d064:	00078863          	beqz	a5,1d074 <finsh_thread_entry+0x668>
                rt_kprintf("\n");
   1d068:	00004517          	auipc	a0,0x4
   1d06c:	32450513          	addi	a0,a0,804 # 2138c <__FUNCTION__.2490+0x48>
   1d070:	891f50ef          	jal	ra,12900 <rt_kprintf>
            msh_exec(shell->line, shell->line_position);
   1d074:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d078:	0007a783          	lw	a5,0(a5)
   1d07c:	1ba78713          	addi	a4,a5,442
   1d080:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d084:	0007a783          	lw	a5,0(a5)
   1d088:	20c7d783          	lhu	a5,524(a5)
   1d08c:	00078593          	mv	a1,a5
   1d090:	00070513          	mv	a0,a4
   1d094:	1b9000ef          	jal	ra,1da4c <msh_exec>

            rt_kprintf(FINSH_PROMPT);
   1d098:	930ff0ef          	jal	ra,1c1c8 <finsh_get_prompt>
   1d09c:	00050793          	mv	a5,a0
   1d0a0:	00078513          	mv	a0,a5
   1d0a4:	85df50ef          	jal	ra,12900 <rt_kprintf>
            memset(shell->line, 0, sizeof(shell->line));
   1d0a8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d0ac:	0007a783          	lw	a5,0(a5)
   1d0b0:	1ba78793          	addi	a5,a5,442
   1d0b4:	05100613          	li	a2,81
   1d0b8:	00000593          	li	a1,0
   1d0bc:	00078513          	mv	a0,a5
   1d0c0:	3ec020ef          	jal	ra,1f4ac <memset>
            shell->line_curpos = shell->line_position = 0;
   1d0c4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d0c8:	0007a783          	lw	a5,0(a5)
   1d0cc:	20079623          	sh	zero,524(a5)
   1d0d0:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1d0d4:	00072703          	lw	a4,0(a4)
   1d0d8:	20c7d783          	lhu	a5,524(a5)
   1d0dc:	20f71723          	sh	a5,526(a4)
            continue;
   1d0e0:	2540006f          	j	1d334 <finsh_thread_entry+0x928>
        }

        /* it's a large line, discard it */
        if (shell->line_position >= FINSH_CMD_SIZE)
   1d0e4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d0e8:	0007a783          	lw	a5,0(a5)
   1d0ec:	20c7d703          	lhu	a4,524(a5)
   1d0f0:	04f00793          	li	a5,79
   1d0f4:	00e7f863          	bgeu	a5,a4,1d104 <finsh_thread_entry+0x6f8>
            shell->line_position = 0;
   1d0f8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d0fc:	0007a783          	lw	a5,0(a5)
   1d100:	20079623          	sh	zero,524(a5)

        /* normal character */
        if (shell->line_curpos < shell->line_position)
   1d104:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d108:	0007a783          	lw	a5,0(a5)
   1d10c:	20e7d703          	lhu	a4,526(a5)
   1d110:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d114:	0007a783          	lw	a5,0(a5)
   1d118:	20c7d783          	lhu	a5,524(a5)
   1d11c:	12f77863          	bgeu	a4,a5,1d24c <finsh_thread_entry+0x840>
        {
            int i;

            rt_memmove(&shell->line[shell->line_curpos + 1],
   1d120:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d124:	0007a703          	lw	a4,0(a5)
   1d128:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d12c:	0007a783          	lw	a5,0(a5)
   1d130:	20e7d783          	lhu	a5,526(a5)
   1d134:	00178793          	addi	a5,a5,1
   1d138:	1b078793          	addi	a5,a5,432
   1d13c:	00f707b3          	add	a5,a4,a5
   1d140:	00a78693          	addi	a3,a5,10
                       &shell->line[shell->line_curpos],
   1d144:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d148:	0007a703          	lw	a4,0(a5)
   1d14c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d150:	0007a783          	lw	a5,0(a5)
   1d154:	20e7d783          	lhu	a5,526(a5)
   1d158:	1b078793          	addi	a5,a5,432
   1d15c:	00f707b3          	add	a5,a4,a5
   1d160:	00a78713          	addi	a4,a5,10
                       shell->line_position - shell->line_curpos);
   1d164:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d168:	0007a783          	lw	a5,0(a5)
   1d16c:	20c7d783          	lhu	a5,524(a5)
   1d170:	00078613          	mv	a2,a5
   1d174:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d178:	0007a783          	lw	a5,0(a5)
   1d17c:	20e7d783          	lhu	a5,526(a5)
   1d180:	40f607b3          	sub	a5,a2,a5
            rt_memmove(&shell->line[shell->line_curpos + 1],
   1d184:	00078613          	mv	a2,a5
   1d188:	00070593          	mv	a1,a4
   1d18c:	00068513          	mv	a0,a3
   1d190:	b14f40ef          	jal	ra,114a4 <rt_memmove>
            shell->line[shell->line_curpos] = ch;
   1d194:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d198:	0007a783          	lw	a5,0(a5)
   1d19c:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1d1a0:	00072703          	lw	a4,0(a4)
   1d1a4:	20e75703          	lhu	a4,526(a4)
   1d1a8:	00070693          	mv	a3,a4
   1d1ac:	fdc42703          	lw	a4,-36(s0)
   1d1b0:	0ff77713          	andi	a4,a4,255
   1d1b4:	00d787b3          	add	a5,a5,a3
   1d1b8:	1ae78d23          	sb	a4,442(a5)
            if (shell->echo_mode)
   1d1bc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d1c0:	0007a783          	lw	a5,0(a5)
   1d1c4:	0247c783          	lbu	a5,36(a5)
   1d1c8:	0017f793          	andi	a5,a5,1
   1d1cc:	0ff7f793          	andi	a5,a5,255
   1d1d0:	02078a63          	beqz	a5,1d204 <finsh_thread_entry+0x7f8>
                rt_kprintf("%s", &shell->line[shell->line_curpos]);
   1d1d4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d1d8:	0007a703          	lw	a4,0(a5)
   1d1dc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d1e0:	0007a783          	lw	a5,0(a5)
   1d1e4:	20e7d783          	lhu	a5,526(a5)
   1d1e8:	1b078793          	addi	a5,a5,432
   1d1ec:	00f707b3          	add	a5,a4,a5
   1d1f0:	00a78793          	addi	a5,a5,10
   1d1f4:	00078593          	mv	a1,a5
   1d1f8:	00004517          	auipc	a0,0x4
   1d1fc:	1bc50513          	addi	a0,a0,444 # 213b4 <__FUNCTION__.2490+0x70>
   1d200:	f00f50ef          	jal	ra,12900 <rt_kprintf>

            /* move the cursor to new position */
            for (i = shell->line_curpos; i < shell->line_position; i++)
   1d204:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d208:	0007a783          	lw	a5,0(a5)
   1d20c:	20e7d783          	lhu	a5,526(a5)
   1d210:	fef42223          	sw	a5,-28(s0)
   1d214:	01c0006f          	j	1d230 <finsh_thread_entry+0x824>
                rt_kprintf("\b");
   1d218:	00004517          	auipc	a0,0x4
   1d21c:	18850513          	addi	a0,a0,392 # 213a0 <__FUNCTION__.2490+0x5c>
   1d220:	ee0f50ef          	jal	ra,12900 <rt_kprintf>
            for (i = shell->line_curpos; i < shell->line_position; i++)
   1d224:	fe442783          	lw	a5,-28(s0)
   1d228:	00178793          	addi	a5,a5,1
   1d22c:	fef42223          	sw	a5,-28(s0)
   1d230:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d234:	0007a783          	lw	a5,0(a5)
   1d238:	20c7d783          	lhu	a5,524(a5)
   1d23c:	00078713          	mv	a4,a5
   1d240:	fe442783          	lw	a5,-28(s0)
   1d244:	fce7cae3          	blt	a5,a4,1d218 <finsh_thread_entry+0x80c>
   1d248:	0540006f          	j	1d29c <finsh_thread_entry+0x890>
        }
        else
        {
            shell->line[shell->line_position] = ch;
   1d24c:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d250:	0007a783          	lw	a5,0(a5)
   1d254:	ef818713          	addi	a4,gp,-264 # 22a58 <shell>
   1d258:	00072703          	lw	a4,0(a4)
   1d25c:	20c75703          	lhu	a4,524(a4)
   1d260:	00070693          	mv	a3,a4
   1d264:	fdc42703          	lw	a4,-36(s0)
   1d268:	0ff77713          	andi	a4,a4,255
   1d26c:	00d787b3          	add	a5,a5,a3
   1d270:	1ae78d23          	sb	a4,442(a5)
            if (shell->echo_mode)
   1d274:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d278:	0007a783          	lw	a5,0(a5)
   1d27c:	0247c783          	lbu	a5,36(a5)
   1d280:	0017f793          	andi	a5,a5,1
   1d284:	0ff7f793          	andi	a5,a5,255
   1d288:	00078a63          	beqz	a5,1d29c <finsh_thread_entry+0x890>
                rt_kprintf("%c", ch);
   1d28c:	fdc42583          	lw	a1,-36(s0)
   1d290:	00004517          	auipc	a0,0x4
   1d294:	11450513          	addi	a0,a0,276 # 213a4 <__FUNCTION__.2490+0x60>
   1d298:	e68f50ef          	jal	ra,12900 <rt_kprintf>
        }

        ch = 0;
   1d29c:	fc042e23          	sw	zero,-36(s0)
        shell->line_position ++;
   1d2a0:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d2a4:	0007a783          	lw	a5,0(a5)
   1d2a8:	20c7d703          	lhu	a4,524(a5)
   1d2ac:	00170713          	addi	a4,a4,1
   1d2b0:	01071713          	slli	a4,a4,0x10
   1d2b4:	01075713          	srli	a4,a4,0x10
   1d2b8:	20e79623          	sh	a4,524(a5)
        shell->line_curpos++;
   1d2bc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d2c0:	0007a783          	lw	a5,0(a5)
   1d2c4:	20e7d703          	lhu	a4,526(a5)
   1d2c8:	00170713          	addi	a4,a4,1
   1d2cc:	01071713          	slli	a4,a4,0x10
   1d2d0:	01075713          	srli	a4,a4,0x10
   1d2d4:	20e79723          	sh	a4,526(a5)
        if (shell->line_position >= FINSH_CMD_SIZE)
   1d2d8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d2dc:	0007a783          	lw	a5,0(a5)
   1d2e0:	20c7d703          	lhu	a4,524(a5)
   1d2e4:	04f00793          	li	a5,79
   1d2e8:	f8e7f463          	bgeu	a5,a4,1ca70 <finsh_thread_entry+0x64>
        {
            /* clear command line */
            shell->line_position = 0;
   1d2ec:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d2f0:	0007a783          	lw	a5,0(a5)
   1d2f4:	20079623          	sh	zero,524(a5)
            shell->line_curpos = 0;
   1d2f8:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d2fc:	0007a783          	lw	a5,0(a5)
   1d300:	20079723          	sh	zero,526(a5)
   1d304:	f6cff06f          	j	1ca70 <finsh_thread_entry+0x64>
            continue;
   1d308:	00000013          	nop
   1d30c:	f64ff06f          	j	1ca70 <finsh_thread_entry+0x64>
                        continue;
   1d310:	00000013          	nop
   1d314:	f5cff06f          	j	1ca70 <finsh_thread_entry+0x64>
                continue;
   1d318:	00000013          	nop
   1d31c:	f54ff06f          	j	1ca70 <finsh_thread_entry+0x64>
                continue;
   1d320:	00000013          	nop
   1d324:	f4cff06f          	j	1ca70 <finsh_thread_entry+0x64>
        if (ch == '\0' || ch == 0xFF) continue;
   1d328:	00000013          	nop
   1d32c:	f44ff06f          	j	1ca70 <finsh_thread_entry+0x64>
                continue;
   1d330:	00000013          	nop
        ch = (int)finsh_getchar();
   1d334:	f3cff06f          	j	1ca70 <finsh_thread_entry+0x64>

0001d338 <finsh_system_function_init>:
        }
    } /* end of device read */
}

void finsh_system_function_init(const void *begin, const void *end)
{
   1d338:	fe010113          	addi	sp,sp,-32
   1d33c:	00812e23          	sw	s0,28(sp)
   1d340:	02010413          	addi	s0,sp,32
   1d344:	fea42623          	sw	a0,-20(s0)
   1d348:	feb42423          	sw	a1,-24(s0)
    _syscall_table_begin = (struct finsh_syscall *) begin;
   1d34c:	83418793          	addi	a5,gp,-1996 # 22394 <_syscall_table_begin>
   1d350:	fec42703          	lw	a4,-20(s0)
   1d354:	00e7a023          	sw	a4,0(a5)
    _syscall_table_end = (struct finsh_syscall *) end;
   1d358:	83818793          	addi	a5,gp,-1992 # 22398 <_syscall_table_end>
   1d35c:	fe842703          	lw	a4,-24(s0)
   1d360:	00e7a023          	sw	a4,0(a5)
}
   1d364:	00000013          	nop
   1d368:	01c12403          	lw	s0,28(sp)
   1d36c:	02010113          	addi	sp,sp,32
   1d370:	00008067          	ret

0001d374 <finsh_system_init>:
 * @ingroup finsh
 *
 * This function will initialize finsh shell
 */
int finsh_system_init(void)
{
   1d374:	fe010113          	addi	sp,sp,-32
   1d378:	00112e23          	sw	ra,28(sp)
   1d37c:	00812c23          	sw	s0,24(sp)
   1d380:	02010413          	addi	s0,sp,32
    rt_err_t result = RT_EOK;
   1d384:	fe042623          	sw	zero,-20(s0)
                               __section_end("FSymTab"));
#elif defined (__GNUC__) || defined(__TI_COMPILER_VERSION__) || defined(__TASKING__)
    /* GNU GCC Compiler and TI CCS */
    extern const int __fsymtab_start;
    extern const int __fsymtab_end;
    finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
   1d388:	00003597          	auipc	a1,0x3
   1d38c:	8f458593          	addi	a1,a1,-1804 # 1fc7c <__rt_init_rti_start>
   1d390:	00003517          	auipc	a0,0x3
   1d394:	82c50513          	addi	a0,a0,-2004 # 1fbbc <__fsym_help>
   1d398:	fa1ff0ef          	jal	ra,1d338 <finsh_system_function_init>
#endif
#endif

#ifdef RT_USING_HEAP
    /* create or set shell structure */
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
   1d39c:	21400593          	li	a1,532
   1d3a0:	00100513          	li	a0,1
   1d3a4:	93df50ef          	jal	ra,12ce0 <rt_calloc>
   1d3a8:	00050713          	mv	a4,a0
   1d3ac:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d3b0:	00e7a023          	sw	a4,0(a5)
    if (shell == RT_NULL)
   1d3b4:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d3b8:	0007a783          	lw	a5,0(a5)
   1d3bc:	00079c63          	bnez	a5,1d3d4 <finsh_system_init+0x60>
    {
        rt_kprintf("no memory for shell\n");
   1d3c0:	00004517          	auipc	a0,0x4
   1d3c4:	ff850513          	addi	a0,a0,-8 # 213b8 <__FUNCTION__.2490+0x74>
   1d3c8:	d38f50ef          	jal	ra,12900 <rt_kprintf>
        return -1;
   1d3cc:	fff00793          	li	a5,-1
   1d3d0:	0700006f          	j	1d440 <finsh_system_init+0xcc>
    }
    tid = rt_thread_create(FINSH_THREAD_NAME,
   1d3d4:	00a00793          	li	a5,10
   1d3d8:	01400713          	li	a4,20
   1d3dc:	000016b7          	lui	a3,0x1
   1d3e0:	00000613          	li	a2,0
   1d3e4:	fffff597          	auipc	a1,0xfffff
   1d3e8:	62858593          	addi	a1,a1,1576 # 1ca0c <finsh_thread_entry>
   1d3ec:	00004517          	auipc	a0,0x4
   1d3f0:	fe450513          	addi	a0,a0,-28 # 213d0 <__FUNCTION__.2490+0x8c>
   1d3f4:	b04f60ef          	jal	ra,136f8 <rt_thread_create>
   1d3f8:	fea42423          	sw	a0,-24(s0)
                            finsh_thread_entry, RT_NULL,
                            &finsh_thread_stack[0], sizeof(finsh_thread_stack),
                            FINSH_THREAD_PRIORITY, 10);
#endif /* RT_USING_HEAP */

    rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
   1d3fc:	ef818793          	addi	a5,gp,-264 # 22a58 <shell>
   1d400:	0007a783          	lw	a5,0(a5)
   1d404:	00000693          	li	a3,0
   1d408:	00000613          	li	a2,0
   1d40c:	00004597          	auipc	a1,0x4
   1d410:	fcc58593          	addi	a1,a1,-52 # 213d8 <__FUNCTION__.2490+0x94>
   1d414:	00078513          	mv	a0,a5
   1d418:	fe1f60ef          	jal	ra,143f8 <rt_sem_init>
    finsh_set_prompt_mode(1);
   1d41c:	00100513          	li	a0,1
   1d420:	ebdfe0ef          	jal	ra,1c2dc <finsh_set_prompt_mode>

    if (tid != NULL && result == RT_EOK)
   1d424:	fe842783          	lw	a5,-24(s0)
   1d428:	00078a63          	beqz	a5,1d43c <finsh_system_init+0xc8>
   1d42c:	fec42783          	lw	a5,-20(s0)
   1d430:	00079663          	bnez	a5,1d43c <finsh_system_init+0xc8>
        rt_thread_startup(tid);
   1d434:	fe842503          	lw	a0,-24(s0)
   1d438:	8bcf60ef          	jal	ra,134f4 <rt_thread_startup>
    return 0;
   1d43c:	00000793          	li	a5,0
}
   1d440:	00078513          	mv	a0,a5
   1d444:	01c12083          	lw	ra,28(sp)
   1d448:	01812403          	lw	s0,24(sp)
   1d44c:	02010113          	addi	sp,sp,32
   1d450:	00008067          	ret

0001d454 <msh_help>:
#endif /* RT_USING_MODULE */

typedef int (*cmd_function_t)(int argc, char **argv);

int msh_help(int argc, char **argv)
{
   1d454:	fd010113          	addi	sp,sp,-48
   1d458:	02112623          	sw	ra,44(sp)
   1d45c:	02812423          	sw	s0,40(sp)
   1d460:	03010413          	addi	s0,sp,48
   1d464:	fca42e23          	sw	a0,-36(s0)
   1d468:	fcb42c23          	sw	a1,-40(s0)
    rt_kprintf("RT-Thread shell commands:\n");
   1d46c:	00004517          	auipc	a0,0x4
   1d470:	00c50513          	addi	a0,a0,12 # 21478 <__FUNCTION__.3414+0x10>
   1d474:	c8cf50ef          	jal	ra,12900 <rt_kprintf>
    {
        struct finsh_syscall *index;

        for (index = _syscall_table_begin;
   1d478:	83418793          	addi	a5,gp,-1996 # 22394 <_syscall_table_begin>
   1d47c:	0007a783          	lw	a5,0(a5)
   1d480:	fef42623          	sw	a5,-20(s0)
   1d484:	0340006f          	j	1d4b8 <msh_help+0x64>
                index < _syscall_table_end;
                FINSH_NEXT_SYSCALL(index))
        {
#if defined(FINSH_USING_DESCRIPTION) && defined(FINSH_USING_SYMTAB)
            rt_kprintf("%-16s - %s\n", index->name, index->desc);
   1d488:	fec42783          	lw	a5,-20(s0)
   1d48c:	0007a703          	lw	a4,0(a5)
   1d490:	fec42783          	lw	a5,-20(s0)
   1d494:	0047a783          	lw	a5,4(a5)
   1d498:	00078613          	mv	a2,a5
   1d49c:	00070593          	mv	a1,a4
   1d4a0:	00004517          	auipc	a0,0x4
   1d4a4:	ff450513          	addi	a0,a0,-12 # 21494 <__FUNCTION__.3414+0x2c>
   1d4a8:	c58f50ef          	jal	ra,12900 <rt_kprintf>
                FINSH_NEXT_SYSCALL(index))
   1d4ac:	fec42783          	lw	a5,-20(s0)
   1d4b0:	00c78793          	addi	a5,a5,12
   1d4b4:	fef42623          	sw	a5,-20(s0)
                index < _syscall_table_end;
   1d4b8:	83818793          	addi	a5,gp,-1992 # 22398 <_syscall_table_end>
   1d4bc:	0007a783          	lw	a5,0(a5)
        for (index = _syscall_table_begin;
   1d4c0:	fec42703          	lw	a4,-20(s0)
   1d4c4:	fcf762e3          	bltu	a4,a5,1d488 <msh_help+0x34>
#else
            rt_kprintf("%s ", index->name);
#endif
        }
    }
    rt_kprintf("\n");
   1d4c8:	00004517          	auipc	a0,0x4
   1d4cc:	fd850513          	addi	a0,a0,-40 # 214a0 <__FUNCTION__.3414+0x38>
   1d4d0:	c30f50ef          	jal	ra,12900 <rt_kprintf>

    return 0;
   1d4d4:	00000793          	li	a5,0
}
   1d4d8:	00078513          	mv	a0,a5
   1d4dc:	02c12083          	lw	ra,44(sp)
   1d4e0:	02812403          	lw	s0,40(sp)
   1d4e4:	03010113          	addi	sp,sp,48
   1d4e8:	00008067          	ret

0001d4ec <cmd_ps>:
MSH_CMD_EXPORT_ALIAS(msh_help, help, RT - Thread shell help.);

#ifdef MSH_USING_BUILT_IN_COMMANDS
int cmd_ps(int argc, char **argv)
{
   1d4ec:	fe010113          	addi	sp,sp,-32
   1d4f0:	00112e23          	sw	ra,28(sp)
   1d4f4:	00812c23          	sw	s0,24(sp)
   1d4f8:	02010413          	addi	s0,sp,32
   1d4fc:	fea42623          	sw	a0,-20(s0)
   1d500:	feb42423          	sw	a1,-24(s0)
#ifdef RT_USING_MODULE
    if ((argc == 2) && (strcmp(argv[1], "-m") == 0))
        list_module();
    else
#endif
        list_thread();
   1d504:	32d000ef          	jal	ra,1e030 <list_thread>
    return 0;
   1d508:	00000793          	li	a5,0
}
   1d50c:	00078513          	mv	a0,a5
   1d510:	01c12083          	lw	ra,28(sp)
   1d514:	01812403          	lw	s0,24(sp)
   1d518:	02010113          	addi	sp,sp,32
   1d51c:	00008067          	ret

0001d520 <cmd_free>:
MSH_CMD_EXPORT_ALIAS(cmd_ps, ps, List threads in the system.);

#ifdef RT_USING_HEAP
int cmd_free(int argc, char **argv)
{
   1d520:	fd010113          	addi	sp,sp,-48
   1d524:	02112623          	sw	ra,44(sp)
   1d528:	02812423          	sw	s0,40(sp)
   1d52c:	03010413          	addi	s0,sp,48
   1d530:	fca42e23          	sw	a0,-36(s0)
   1d534:	fcb42c23          	sw	a1,-40(s0)
    rt_uint32_t total = 0, used = 0, max_used = 0;
   1d538:	fe042623          	sw	zero,-20(s0)
   1d53c:	fe042423          	sw	zero,-24(s0)
   1d540:	fe042223          	sw	zero,-28(s0)

    rt_memory_info(&total, &used, &max_used);
   1d544:	fe440693          	addi	a3,s0,-28
   1d548:	fe840713          	addi	a4,s0,-24
   1d54c:	fec40793          	addi	a5,s0,-20
   1d550:	00068613          	mv	a2,a3
   1d554:	00070593          	mv	a1,a4
   1d558:	00078513          	mv	a0,a5
   1d55c:	84df50ef          	jal	ra,12da8 <rt_memory_info>
    rt_kprintf("total   : %d\n", total);
   1d560:	fec42783          	lw	a5,-20(s0)
   1d564:	00078593          	mv	a1,a5
   1d568:	00004517          	auipc	a0,0x4
   1d56c:	f3c50513          	addi	a0,a0,-196 # 214a4 <__FUNCTION__.3414+0x3c>
   1d570:	b90f50ef          	jal	ra,12900 <rt_kprintf>
    rt_kprintf("used    : %d\n", used);
   1d574:	fe842783          	lw	a5,-24(s0)
   1d578:	00078593          	mv	a1,a5
   1d57c:	00004517          	auipc	a0,0x4
   1d580:	f3850513          	addi	a0,a0,-200 # 214b4 <__FUNCTION__.3414+0x4c>
   1d584:	b7cf50ef          	jal	ra,12900 <rt_kprintf>
    rt_kprintf("maximum : %d\n", max_used);
   1d588:	fe442783          	lw	a5,-28(s0)
   1d58c:	00078593          	mv	a1,a5
   1d590:	00004517          	auipc	a0,0x4
   1d594:	f3450513          	addi	a0,a0,-204 # 214c4 <__FUNCTION__.3414+0x5c>
   1d598:	b68f50ef          	jal	ra,12900 <rt_kprintf>
    return 0;
   1d59c:	00000793          	li	a5,0
}
   1d5a0:	00078513          	mv	a0,a5
   1d5a4:	02c12083          	lw	ra,44(sp)
   1d5a8:	02812403          	lw	s0,40(sp)
   1d5ac:	03010113          	addi	sp,sp,48
   1d5b0:	00008067          	ret

0001d5b4 <msh_split>:
MSH_CMD_EXPORT_ALIAS(cmd_free, free, Show the memory usage in the system.);
#endif /* RT_USING_HEAP */
#endif /* MSH_USING_BUILT_IN_COMMANDS */

static int msh_split(char *cmd, rt_size_t length, char *argv[FINSH_ARG_MAX])
{
   1d5b4:	fd010113          	addi	sp,sp,-48
   1d5b8:	02112623          	sw	ra,44(sp)
   1d5bc:	02812423          	sw	s0,40(sp)
   1d5c0:	03010413          	addi	s0,sp,48
   1d5c4:	fca42e23          	sw	a0,-36(s0)
   1d5c8:	fcb42c23          	sw	a1,-40(s0)
   1d5cc:	fcc42a23          	sw	a2,-44(s0)
    char *ptr;
    rt_size_t position;
    rt_size_t argc;
    rt_size_t i;

    ptr = cmd;
   1d5d0:	fdc42783          	lw	a5,-36(s0)
   1d5d4:	fef42623          	sw	a5,-20(s0)
    position = 0;
   1d5d8:	fe042423          	sw	zero,-24(s0)
    argc = 0;
   1d5dc:	fe042223          	sw	zero,-28(s0)

    while (position < length)
   1d5e0:	2300006f          	j	1d810 <msh_split+0x25c>
    {
        /* strip bank and tab */
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
        {
            *ptr = '\0';
   1d5e4:	fec42783          	lw	a5,-20(s0)
   1d5e8:	00078023          	sb	zero,0(a5)
            ptr ++;
   1d5ec:	fec42783          	lw	a5,-20(s0)
   1d5f0:	00178793          	addi	a5,a5,1
   1d5f4:	fef42623          	sw	a5,-20(s0)
            position ++;
   1d5f8:	fe842783          	lw	a5,-24(s0)
   1d5fc:	00178793          	addi	a5,a5,1
   1d600:	fef42423          	sw	a5,-24(s0)
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
   1d604:	fec42783          	lw	a5,-20(s0)
   1d608:	0007c703          	lbu	a4,0(a5)
   1d60c:	02000793          	li	a5,32
   1d610:	00f70a63          	beq	a4,a5,1d624 <msh_split+0x70>
   1d614:	fec42783          	lw	a5,-20(s0)
   1d618:	0007c703          	lbu	a4,0(a5)
   1d61c:	00900793          	li	a5,9
   1d620:	00f71863          	bne	a4,a5,1d630 <msh_split+0x7c>
   1d624:	fe842703          	lw	a4,-24(s0)
   1d628:	fd842783          	lw	a5,-40(s0)
   1d62c:	faf76ce3          	bltu	a4,a5,1d5e4 <msh_split+0x30>
        }

        if (argc >= FINSH_ARG_MAX)
   1d630:	fe442703          	lw	a4,-28(s0)
   1d634:	00900793          	li	a5,9
   1d638:	06e7f263          	bgeu	a5,a4,1d69c <msh_split+0xe8>
        {
            rt_kprintf("Too many args ! We only Use:\n");
   1d63c:	00004517          	auipc	a0,0x4
   1d640:	e9850513          	addi	a0,a0,-360 # 214d4 <__FUNCTION__.3414+0x6c>
   1d644:	abcf50ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < argc; i++)
   1d648:	fe042023          	sw	zero,-32(s0)
   1d64c:	0340006f          	j	1d680 <msh_split+0xcc>
            {
                rt_kprintf("%s ", argv[i]);
   1d650:	fe042783          	lw	a5,-32(s0)
   1d654:	00279793          	slli	a5,a5,0x2
   1d658:	fd442703          	lw	a4,-44(s0)
   1d65c:	00f707b3          	add	a5,a4,a5
   1d660:	0007a783          	lw	a5,0(a5)
   1d664:	00078593          	mv	a1,a5
   1d668:	00004517          	auipc	a0,0x4
   1d66c:	e8c50513          	addi	a0,a0,-372 # 214f4 <__FUNCTION__.3414+0x8c>
   1d670:	a90f50ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < argc; i++)
   1d674:	fe042783          	lw	a5,-32(s0)
   1d678:	00178793          	addi	a5,a5,1
   1d67c:	fef42023          	sw	a5,-32(s0)
   1d680:	fe042703          	lw	a4,-32(s0)
   1d684:	fe442783          	lw	a5,-28(s0)
   1d688:	fcf764e3          	bltu	a4,a5,1d650 <msh_split+0x9c>
            }
            rt_kprintf("\n");
   1d68c:	00004517          	auipc	a0,0x4
   1d690:	e1450513          	addi	a0,a0,-492 # 214a0 <__FUNCTION__.3414+0x38>
   1d694:	a6cf50ef          	jal	ra,12900 <rt_kprintf>
            break;
   1d698:	19c0006f          	j	1d834 <msh_split+0x280>
        }

        if (position >= length) break;
   1d69c:	fe842703          	lw	a4,-24(s0)
   1d6a0:	fd842783          	lw	a5,-40(s0)
   1d6a4:	16f77e63          	bgeu	a4,a5,1d820 <msh_split+0x26c>

        /* handle string */
        if (*ptr == '"')
   1d6a8:	fec42783          	lw	a5,-20(s0)
   1d6ac:	0007c703          	lbu	a4,0(a5)
   1d6b0:	02200793          	li	a5,34
   1d6b4:	0ef71263          	bne	a4,a5,1d798 <msh_split+0x1e4>
        {
            ptr ++;
   1d6b8:	fec42783          	lw	a5,-20(s0)
   1d6bc:	00178793          	addi	a5,a5,1
   1d6c0:	fef42623          	sw	a5,-20(s0)
            position ++;
   1d6c4:	fe842783          	lw	a5,-24(s0)
   1d6c8:	00178793          	addi	a5,a5,1
   1d6cc:	fef42423          	sw	a5,-24(s0)
            argv[argc] = ptr;
   1d6d0:	fe442783          	lw	a5,-28(s0)
   1d6d4:	00279793          	slli	a5,a5,0x2
   1d6d8:	fd442703          	lw	a4,-44(s0)
   1d6dc:	00f707b3          	add	a5,a4,a5
   1d6e0:	fec42703          	lw	a4,-20(s0)
   1d6e4:	00e7a023          	sw	a4,0(a5)
            argc ++;
   1d6e8:	fe442783          	lw	a5,-28(s0)
   1d6ec:	00178793          	addi	a5,a5,1
   1d6f0:	fef42223          	sw	a5,-28(s0)

            /* skip this string */
            while (*ptr != '"' && position < length)
   1d6f4:	0580006f          	j	1d74c <msh_split+0x198>
            {
                if (*ptr == '\\')
   1d6f8:	fec42783          	lw	a5,-20(s0)
   1d6fc:	0007c703          	lbu	a4,0(a5)
   1d700:	05c00793          	li	a5,92
   1d704:	02f71863          	bne	a4,a5,1d734 <msh_split+0x180>
                {
                    if (*(ptr + 1) == '"')
   1d708:	fec42783          	lw	a5,-20(s0)
   1d70c:	00178793          	addi	a5,a5,1
   1d710:	0007c703          	lbu	a4,0(a5)
   1d714:	02200793          	li	a5,34
   1d718:	00f71e63          	bne	a4,a5,1d734 <msh_split+0x180>
                    {
                        ptr ++;
   1d71c:	fec42783          	lw	a5,-20(s0)
   1d720:	00178793          	addi	a5,a5,1
   1d724:	fef42623          	sw	a5,-20(s0)
                        position ++;
   1d728:	fe842783          	lw	a5,-24(s0)
   1d72c:	00178793          	addi	a5,a5,1
   1d730:	fef42423          	sw	a5,-24(s0)
                    }
                }
                ptr ++;
   1d734:	fec42783          	lw	a5,-20(s0)
   1d738:	00178793          	addi	a5,a5,1
   1d73c:	fef42623          	sw	a5,-20(s0)
                position ++;
   1d740:	fe842783          	lw	a5,-24(s0)
   1d744:	00178793          	addi	a5,a5,1
   1d748:	fef42423          	sw	a5,-24(s0)
            while (*ptr != '"' && position < length)
   1d74c:	fec42783          	lw	a5,-20(s0)
   1d750:	0007c703          	lbu	a4,0(a5)
   1d754:	02200793          	li	a5,34
   1d758:	00f70863          	beq	a4,a5,1d768 <msh_split+0x1b4>
   1d75c:	fe842703          	lw	a4,-24(s0)
   1d760:	fd842783          	lw	a5,-40(s0)
   1d764:	f8f76ae3          	bltu	a4,a5,1d6f8 <msh_split+0x144>
            }
            if (position >= length) break;
   1d768:	fe842703          	lw	a4,-24(s0)
   1d76c:	fd842783          	lw	a5,-40(s0)
   1d770:	0af77c63          	bgeu	a4,a5,1d828 <msh_split+0x274>

            /* skip '"' */
            *ptr = '\0';
   1d774:	fec42783          	lw	a5,-20(s0)
   1d778:	00078023          	sb	zero,0(a5)
            ptr ++;
   1d77c:	fec42783          	lw	a5,-20(s0)
   1d780:	00178793          	addi	a5,a5,1
   1d784:	fef42623          	sw	a5,-20(s0)
            position ++;
   1d788:	fe842783          	lw	a5,-24(s0)
   1d78c:	00178793          	addi	a5,a5,1
   1d790:	fef42423          	sw	a5,-24(s0)
   1d794:	07c0006f          	j	1d810 <msh_split+0x25c>
        }
        else
        {
            argv[argc] = ptr;
   1d798:	fe442783          	lw	a5,-28(s0)
   1d79c:	00279793          	slli	a5,a5,0x2
   1d7a0:	fd442703          	lw	a4,-44(s0)
   1d7a4:	00f707b3          	add	a5,a4,a5
   1d7a8:	fec42703          	lw	a4,-20(s0)
   1d7ac:	00e7a023          	sw	a4,0(a5)
            argc ++;
   1d7b0:	fe442783          	lw	a5,-28(s0)
   1d7b4:	00178793          	addi	a5,a5,1
   1d7b8:	fef42223          	sw	a5,-28(s0)
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
   1d7bc:	01c0006f          	j	1d7d8 <msh_split+0x224>
            {
                ptr ++;
   1d7c0:	fec42783          	lw	a5,-20(s0)
   1d7c4:	00178793          	addi	a5,a5,1
   1d7c8:	fef42623          	sw	a5,-20(s0)
                position ++;
   1d7cc:	fe842783          	lw	a5,-24(s0)
   1d7d0:	00178793          	addi	a5,a5,1
   1d7d4:	fef42423          	sw	a5,-24(s0)
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
   1d7d8:	fec42783          	lw	a5,-20(s0)
   1d7dc:	0007c703          	lbu	a4,0(a5)
   1d7e0:	02000793          	li	a5,32
   1d7e4:	02f70063          	beq	a4,a5,1d804 <msh_split+0x250>
   1d7e8:	fec42783          	lw	a5,-20(s0)
   1d7ec:	0007c703          	lbu	a4,0(a5)
   1d7f0:	00900793          	li	a5,9
   1d7f4:	00f70863          	beq	a4,a5,1d804 <msh_split+0x250>
   1d7f8:	fe842703          	lw	a4,-24(s0)
   1d7fc:	fd842783          	lw	a5,-40(s0)
   1d800:	fcf760e3          	bltu	a4,a5,1d7c0 <msh_split+0x20c>
            }
            if (position >= length) break;
   1d804:	fe842703          	lw	a4,-24(s0)
   1d808:	fd842783          	lw	a5,-40(s0)
   1d80c:	02f77263          	bgeu	a4,a5,1d830 <msh_split+0x27c>
    while (position < length)
   1d810:	fe842703          	lw	a4,-24(s0)
   1d814:	fd842783          	lw	a5,-40(s0)
   1d818:	def766e3          	bltu	a4,a5,1d604 <msh_split+0x50>
   1d81c:	0180006f          	j	1d834 <msh_split+0x280>
        if (position >= length) break;
   1d820:	00000013          	nop
   1d824:	0100006f          	j	1d834 <msh_split+0x280>
            if (position >= length) break;
   1d828:	00000013          	nop
   1d82c:	0080006f          	j	1d834 <msh_split+0x280>
            if (position >= length) break;
   1d830:	00000013          	nop
        }
    }

    return argc;
   1d834:	fe442783          	lw	a5,-28(s0)
}
   1d838:	00078513          	mv	a0,a5
   1d83c:	02c12083          	lw	ra,44(sp)
   1d840:	02812403          	lw	s0,40(sp)
   1d844:	03010113          	addi	sp,sp,48
   1d848:	00008067          	ret

0001d84c <msh_get_cmd>:

static cmd_function_t msh_get_cmd(char *cmd, int size)
{
   1d84c:	fd010113          	addi	sp,sp,-48
   1d850:	02112623          	sw	ra,44(sp)
   1d854:	02812423          	sw	s0,40(sp)
   1d858:	03010413          	addi	s0,sp,48
   1d85c:	fca42e23          	sw	a0,-36(s0)
   1d860:	fcb42c23          	sw	a1,-40(s0)
    struct finsh_syscall *index;
    cmd_function_t cmd_func = RT_NULL;
   1d864:	fe042423          	sw	zero,-24(s0)

    for (index = _syscall_table_begin;
   1d868:	83418793          	addi	a5,gp,-1996 # 22394 <_syscall_table_begin>
   1d86c:	0007a783          	lw	a5,0(a5)
   1d870:	fef42623          	sw	a5,-20(s0)
   1d874:	05c0006f          	j	1d8d0 <msh_get_cmd+0x84>
            index < _syscall_table_end;
            FINSH_NEXT_SYSCALL(index))
    {
        if (strncmp(index->name, cmd, size) == 0 &&
   1d878:	fec42783          	lw	a5,-20(s0)
   1d87c:	0007a783          	lw	a5,0(a5)
   1d880:	fd842703          	lw	a4,-40(s0)
   1d884:	00070613          	mv	a2,a4
   1d888:	fdc42583          	lw	a1,-36(s0)
   1d88c:	00078513          	mv	a0,a5
   1d890:	635010ef          	jal	ra,1f6c4 <strncmp>
   1d894:	00050793          	mv	a5,a0
   1d898:	02079663          	bnez	a5,1d8c4 <msh_get_cmd+0x78>
                index->name[size] == '\0')
   1d89c:	fec42783          	lw	a5,-20(s0)
   1d8a0:	0007a703          	lw	a4,0(a5)
   1d8a4:	fd842783          	lw	a5,-40(s0)
   1d8a8:	00f707b3          	add	a5,a4,a5
   1d8ac:	0007c783          	lbu	a5,0(a5)
        if (strncmp(index->name, cmd, size) == 0 &&
   1d8b0:	00079a63          	bnez	a5,1d8c4 <msh_get_cmd+0x78>
        {
            cmd_func = (cmd_function_t)index->func;
   1d8b4:	fec42783          	lw	a5,-20(s0)
   1d8b8:	0087a783          	lw	a5,8(a5)
   1d8bc:	fef42423          	sw	a5,-24(s0)
            break;
   1d8c0:	0200006f          	j	1d8e0 <msh_get_cmd+0x94>
            FINSH_NEXT_SYSCALL(index))
   1d8c4:	fec42783          	lw	a5,-20(s0)
   1d8c8:	00c78793          	addi	a5,a5,12
   1d8cc:	fef42623          	sw	a5,-20(s0)
            index < _syscall_table_end;
   1d8d0:	83818793          	addi	a5,gp,-1992 # 22398 <_syscall_table_end>
   1d8d4:	0007a783          	lw	a5,0(a5)
    for (index = _syscall_table_begin;
   1d8d8:	fec42703          	lw	a4,-20(s0)
   1d8dc:	f8f76ee3          	bltu	a4,a5,1d878 <msh_get_cmd+0x2c>
        }
    }

    return cmd_func;
   1d8e0:	fe842783          	lw	a5,-24(s0)
}
   1d8e4:	00078513          	mv	a0,a5
   1d8e8:	02c12083          	lw	ra,44(sp)
   1d8ec:	02812403          	lw	s0,40(sp)
   1d8f0:	03010113          	addi	sp,sp,48
   1d8f4:	00008067          	ret

0001d8f8 <_msh_exec_cmd>:
    return ret;
}
#endif /* defined(RT_USING_MODULE) && defined(DFS_USING_POSIX) */

static int _msh_exec_cmd(char *cmd, rt_size_t length, int *retp)
{
   1d8f8:	fa010113          	addi	sp,sp,-96
   1d8fc:	04112e23          	sw	ra,92(sp)
   1d900:	04812c23          	sw	s0,88(sp)
   1d904:	06010413          	addi	s0,sp,96
   1d908:	faa42623          	sw	a0,-84(s0)
   1d90c:	fab42423          	sw	a1,-88(s0)
   1d910:	fac42223          	sw	a2,-92(s0)
    int argc;
    rt_size_t cmd0_size = 0;
   1d914:	fe042623          	sw	zero,-20(s0)
    cmd_function_t cmd_func;
    char *argv[FINSH_ARG_MAX];

    RT_ASSERT(cmd);
   1d918:	fac42783          	lw	a5,-84(s0)
   1d91c:	00079e63          	bnez	a5,1d938 <_msh_exec_cmd+0x40>
   1d920:	10900613          	li	a2,265
   1d924:	00004597          	auipc	a1,0x4
   1d928:	bfc58593          	addi	a1,a1,-1028 # 21520 <__FUNCTION__.2792>
   1d92c:	00004517          	auipc	a0,0x4
   1d930:	bcc50513          	addi	a0,a0,-1076 # 214f8 <__FUNCTION__.3414+0x90>
   1d934:	f10f50ef          	jal	ra,13044 <rt_assert_handler>
    RT_ASSERT(retp);
   1d938:	fa442783          	lw	a5,-92(s0)
   1d93c:	02079663          	bnez	a5,1d968 <_msh_exec_cmd+0x70>
   1d940:	10a00613          	li	a2,266
   1d944:	00004597          	auipc	a1,0x4
   1d948:	bdc58593          	addi	a1,a1,-1060 # 21520 <__FUNCTION__.2792>
   1d94c:	00004517          	auipc	a0,0x4
   1d950:	bb050513          	addi	a0,a0,-1104 # 214fc <__FUNCTION__.3414+0x94>
   1d954:	ef0f50ef          	jal	ra,13044 <rt_assert_handler>

    /* find the size of first command */
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
   1d958:	0100006f          	j	1d968 <_msh_exec_cmd+0x70>
        cmd0_size ++;
   1d95c:	fec42783          	lw	a5,-20(s0)
   1d960:	00178793          	addi	a5,a5,1
   1d964:	fef42623          	sw	a5,-20(s0)
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
   1d968:	fac42703          	lw	a4,-84(s0)
   1d96c:	fec42783          	lw	a5,-20(s0)
   1d970:	00f707b3          	add	a5,a4,a5
   1d974:	0007c703          	lbu	a4,0(a5)
   1d978:	02000793          	li	a5,32
   1d97c:	02f70463          	beq	a4,a5,1d9a4 <_msh_exec_cmd+0xac>
   1d980:	fac42703          	lw	a4,-84(s0)
   1d984:	fec42783          	lw	a5,-20(s0)
   1d988:	00f707b3          	add	a5,a4,a5
   1d98c:	0007c703          	lbu	a4,0(a5)
   1d990:	00900793          	li	a5,9
   1d994:	00f70863          	beq	a4,a5,1d9a4 <_msh_exec_cmd+0xac>
   1d998:	fec42703          	lw	a4,-20(s0)
   1d99c:	fa842783          	lw	a5,-88(s0)
   1d9a0:	faf76ee3          	bltu	a4,a5,1d95c <_msh_exec_cmd+0x64>
    if (cmd0_size == 0)
   1d9a4:	fec42783          	lw	a5,-20(s0)
   1d9a8:	00079663          	bnez	a5,1d9b4 <_msh_exec_cmd+0xbc>
        return -RT_ERROR;
   1d9ac:	fff00793          	li	a5,-1
   1d9b0:	0880006f          	j	1da38 <_msh_exec_cmd+0x140>

    cmd_func = msh_get_cmd(cmd, cmd0_size);
   1d9b4:	fec42783          	lw	a5,-20(s0)
   1d9b8:	00078593          	mv	a1,a5
   1d9bc:	fac42503          	lw	a0,-84(s0)
   1d9c0:	e8dff0ef          	jal	ra,1d84c <msh_get_cmd>
   1d9c4:	fea42423          	sw	a0,-24(s0)
    if (cmd_func == RT_NULL)
   1d9c8:	fe842783          	lw	a5,-24(s0)
   1d9cc:	00079663          	bnez	a5,1d9d8 <_msh_exec_cmd+0xe0>
        return -RT_ERROR;
   1d9d0:	fff00793          	li	a5,-1
   1d9d4:	0640006f          	j	1da38 <_msh_exec_cmd+0x140>

    /* split arguments */
    memset(argv, 0x00, sizeof(argv));
   1d9d8:	fbc40793          	addi	a5,s0,-68
   1d9dc:	02800613          	li	a2,40
   1d9e0:	00000593          	li	a1,0
   1d9e4:	00078513          	mv	a0,a5
   1d9e8:	2c5010ef          	jal	ra,1f4ac <memset>
    argc = msh_split(cmd, length, argv);
   1d9ec:	fbc40793          	addi	a5,s0,-68
   1d9f0:	00078613          	mv	a2,a5
   1d9f4:	fa842583          	lw	a1,-88(s0)
   1d9f8:	fac42503          	lw	a0,-84(s0)
   1d9fc:	bb9ff0ef          	jal	ra,1d5b4 <msh_split>
   1da00:	fea42223          	sw	a0,-28(s0)
    if (argc == 0)
   1da04:	fe442783          	lw	a5,-28(s0)
   1da08:	00079663          	bnez	a5,1da14 <_msh_exec_cmd+0x11c>
        return -RT_ERROR;
   1da0c:	fff00793          	li	a5,-1
   1da10:	0280006f          	j	1da38 <_msh_exec_cmd+0x140>

    /* exec this command */
    *retp = cmd_func(argc, argv);
   1da14:	fbc40793          	addi	a5,s0,-68
   1da18:	fe842703          	lw	a4,-24(s0)
   1da1c:	00078593          	mv	a1,a5
   1da20:	fe442503          	lw	a0,-28(s0)
   1da24:	000700e7          	jalr	a4
   1da28:	00050713          	mv	a4,a0
   1da2c:	fa442783          	lw	a5,-92(s0)
   1da30:	00e7a023          	sw	a4,0(a5)
    return 0;
   1da34:	00000793          	li	a5,0
}
   1da38:	00078513          	mv	a0,a5
   1da3c:	05c12083          	lw	ra,92(sp)
   1da40:	05812403          	lw	s0,88(sp)
   1da44:	06010113          	addi	sp,sp,96
   1da48:	00008067          	ret

0001da4c <msh_exec>:
    return 0;
}
#endif /* defined(RT_USING_LWP) && defined(DFS_USING_POSIX) */

int msh_exec(char *cmd, rt_size_t length)
{
   1da4c:	fd010113          	addi	sp,sp,-48
   1da50:	02112623          	sw	ra,44(sp)
   1da54:	02812423          	sw	s0,40(sp)
   1da58:	03010413          	addi	s0,sp,48
   1da5c:	fca42e23          	sw	a0,-36(s0)
   1da60:	fcb42c23          	sw	a1,-40(s0)
    int cmd_ret;

    /* strim the beginning of command */
    while ((length > 0) && (*cmd  == ' ' || *cmd == '\t'))
   1da64:	01c0006f          	j	1da80 <msh_exec+0x34>
    {
        cmd++;
   1da68:	fdc42783          	lw	a5,-36(s0)
   1da6c:	00178793          	addi	a5,a5,1
   1da70:	fcf42e23          	sw	a5,-36(s0)
        length--;
   1da74:	fd842783          	lw	a5,-40(s0)
   1da78:	fff78793          	addi	a5,a5,-1
   1da7c:	fcf42c23          	sw	a5,-40(s0)
    while ((length > 0) && (*cmd  == ' ' || *cmd == '\t'))
   1da80:	fd842783          	lw	a5,-40(s0)
   1da84:	02078263          	beqz	a5,1daa8 <msh_exec+0x5c>
   1da88:	fdc42783          	lw	a5,-36(s0)
   1da8c:	0007c703          	lbu	a4,0(a5)
   1da90:	02000793          	li	a5,32
   1da94:	fcf70ae3          	beq	a4,a5,1da68 <msh_exec+0x1c>
   1da98:	fdc42783          	lw	a5,-36(s0)
   1da9c:	0007c703          	lbu	a4,0(a5)
   1daa0:	00900793          	li	a5,9
   1daa4:	fcf702e3          	beq	a4,a5,1da68 <msh_exec+0x1c>
    }

    if (length == 0)
   1daa8:	fd842783          	lw	a5,-40(s0)
   1daac:	00079663          	bnez	a5,1dab8 <msh_exec+0x6c>
        return 0;
   1dab0:	00000793          	li	a5,0
   1dab4:	0780006f          	j	1db2c <msh_exec+0xe0>

    /* Exec sequence:
     * 1. built-in command
     * 2. module(if enabled)
     */
    if (_msh_exec_cmd(cmd, length, &cmd_ret) == 0)
   1dab8:	fe840793          	addi	a5,s0,-24
   1dabc:	00078613          	mv	a2,a5
   1dac0:	fd842583          	lw	a1,-40(s0)
   1dac4:	fdc42503          	lw	a0,-36(s0)
   1dac8:	e31ff0ef          	jal	ra,1d8f8 <_msh_exec_cmd>
   1dacc:	00050793          	mv	a5,a0
   1dad0:	00079663          	bnez	a5,1dadc <msh_exec+0x90>
    {
        return cmd_ret;
   1dad4:	fe842783          	lw	a5,-24(s0)
   1dad8:	0540006f          	j	1db2c <msh_exec+0xe0>
#endif /* DFS_USING_POSIX */

    /* truncate the cmd at the first space. */
    {
        char *tcmd;
        tcmd = cmd;
   1dadc:	fdc42783          	lw	a5,-36(s0)
   1dae0:	fef42623          	sw	a5,-20(s0)
        while (*tcmd != ' ' && *tcmd != '\0')
   1dae4:	0100006f          	j	1daf4 <msh_exec+0xa8>
        {
            tcmd++;
   1dae8:	fec42783          	lw	a5,-20(s0)
   1daec:	00178793          	addi	a5,a5,1
   1daf0:	fef42623          	sw	a5,-20(s0)
        while (*tcmd != ' ' && *tcmd != '\0')
   1daf4:	fec42783          	lw	a5,-20(s0)
   1daf8:	0007c703          	lbu	a4,0(a5)
   1dafc:	02000793          	li	a5,32
   1db00:	00f70863          	beq	a4,a5,1db10 <msh_exec+0xc4>
   1db04:	fec42783          	lw	a5,-20(s0)
   1db08:	0007c783          	lbu	a5,0(a5)
   1db0c:	fc079ee3          	bnez	a5,1dae8 <msh_exec+0x9c>
        }
        *tcmd = '\0';
   1db10:	fec42783          	lw	a5,-20(s0)
   1db14:	00078023          	sb	zero,0(a5)
    }
    rt_kprintf("%s: command not found.\n", cmd);
   1db18:	fdc42583          	lw	a1,-36(s0)
   1db1c:	00004517          	auipc	a0,0x4
   1db20:	9e850513          	addi	a0,a0,-1560 # 21504 <__FUNCTION__.3414+0x9c>
   1db24:	dddf40ef          	jal	ra,12900 <rt_kprintf>
    return -1;
   1db28:	fff00793          	li	a5,-1
}
   1db2c:	00078513          	mv	a0,a5
   1db30:	02c12083          	lw	ra,44(sp)
   1db34:	02812403          	lw	s0,40(sp)
   1db38:	03010113          	addi	sp,sp,48
   1db3c:	00008067          	ret

0001db40 <str_common>:

static int str_common(const char *str1, const char *str2)
{
   1db40:	fd010113          	addi	sp,sp,-48
   1db44:	02812623          	sw	s0,44(sp)
   1db48:	03010413          	addi	s0,sp,48
   1db4c:	fca42e23          	sw	a0,-36(s0)
   1db50:	fcb42c23          	sw	a1,-40(s0)
    const char *str = str1;
   1db54:	fdc42783          	lw	a5,-36(s0)
   1db58:	fef42623          	sw	a5,-20(s0)

    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
   1db5c:	01c0006f          	j	1db78 <str_common+0x38>
    {
        str ++;
   1db60:	fec42783          	lw	a5,-20(s0)
   1db64:	00178793          	addi	a5,a5,1
   1db68:	fef42623          	sw	a5,-20(s0)
        str2 ++;
   1db6c:	fd842783          	lw	a5,-40(s0)
   1db70:	00178793          	addi	a5,a5,1
   1db74:	fcf42c23          	sw	a5,-40(s0)
    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
   1db78:	fec42783          	lw	a5,-20(s0)
   1db7c:	0007c783          	lbu	a5,0(a5)
   1db80:	02078263          	beqz	a5,1dba4 <str_common+0x64>
   1db84:	fd842783          	lw	a5,-40(s0)
   1db88:	0007c783          	lbu	a5,0(a5)
   1db8c:	00078c63          	beqz	a5,1dba4 <str_common+0x64>
   1db90:	fec42783          	lw	a5,-20(s0)
   1db94:	0007c703          	lbu	a4,0(a5)
   1db98:	fd842783          	lw	a5,-40(s0)
   1db9c:	0007c783          	lbu	a5,0(a5)
   1dba0:	fcf700e3          	beq	a4,a5,1db60 <str_common+0x20>
    }

    return (str - str1);
   1dba4:	fec42703          	lw	a4,-20(s0)
   1dba8:	fdc42783          	lw	a5,-36(s0)
   1dbac:	40f707b3          	sub	a5,a4,a5
}
   1dbb0:	00078513          	mv	a0,a5
   1dbb4:	02c12403          	lw	s0,44(sp)
   1dbb8:	03010113          	addi	sp,sp,48
   1dbbc:	00008067          	ret

0001dbc0 <msh_auto_complete>:
    rt_free(full_path);
}
#endif /* DFS_USING_POSIX */

void msh_auto_complete(char *prefix)
{
   1dbc0:	fc010113          	addi	sp,sp,-64
   1dbc4:	02112e23          	sw	ra,60(sp)
   1dbc8:	02812c23          	sw	s0,56(sp)
   1dbcc:	04010413          	addi	s0,sp,64
   1dbd0:	fca42623          	sw	a0,-52(s0)
    int length, min_length;
    const char *name_ptr, *cmd_name;
    struct finsh_syscall *index;

    min_length = 0;
   1dbd4:	fe042623          	sw	zero,-20(s0)
    name_ptr = RT_NULL;
   1dbd8:	fe042423          	sw	zero,-24(s0)

    if (*prefix == '\0')
   1dbdc:	fcc42783          	lw	a5,-52(s0)
   1dbe0:	0007c783          	lbu	a5,0(a5)
   1dbe4:	00079a63          	bnez	a5,1dbf8 <msh_auto_complete+0x38>
    {
        msh_help(0, RT_NULL);
   1dbe8:	00000593          	li	a1,0
   1dbec:	00000513          	li	a0,0
   1dbf0:	865ff0ef          	jal	ra,1d454 <msh_help>
        return;
   1dbf4:	0d40006f          	j	1dcc8 <msh_auto_complete+0x108>
    }
#endif /* DFS_USING_POSIX */

    /* checks in internal command */
    {
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
   1dbf8:	83418793          	addi	a5,gp,-1996 # 22394 <_syscall_table_begin>
   1dbfc:	0007a783          	lw	a5,0(a5)
   1dc00:	fef42223          	sw	a5,-28(s0)
   1dc04:	0940006f          	j	1dc98 <msh_auto_complete+0xd8>
        {
            /* skip finsh shell function */
            cmd_name = (const char *) index->name;
   1dc08:	fe442783          	lw	a5,-28(s0)
   1dc0c:	0007a783          	lw	a5,0(a5)
   1dc10:	fef42023          	sw	a5,-32(s0)
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0)
   1dc14:	fcc42503          	lw	a0,-52(s0)
   1dc18:	221010ef          	jal	ra,1f638 <strlen>
   1dc1c:	00050793          	mv	a5,a0
   1dc20:	00078613          	mv	a2,a5
   1dc24:	fe042583          	lw	a1,-32(s0)
   1dc28:	fcc42503          	lw	a0,-52(s0)
   1dc2c:	299010ef          	jal	ra,1f6c4 <strncmp>
   1dc30:	00050793          	mv	a5,a0
   1dc34:	04079c63          	bnez	a5,1dc8c <msh_auto_complete+0xcc>
            {
                if (min_length == 0)
   1dc38:	fec42783          	lw	a5,-20(s0)
   1dc3c:	00079e63          	bnez	a5,1dc58 <msh_auto_complete+0x98>
                {
                    /* set name_ptr */
                    name_ptr = cmd_name;
   1dc40:	fe042783          	lw	a5,-32(s0)
   1dc44:	fef42423          	sw	a5,-24(s0)
                    /* set initial length */
                    min_length = strlen(name_ptr);
   1dc48:	fe842503          	lw	a0,-24(s0)
   1dc4c:	1ed010ef          	jal	ra,1f638 <strlen>
   1dc50:	00050793          	mv	a5,a0
   1dc54:	fef42623          	sw	a5,-20(s0)
                }

                length = str_common(name_ptr, cmd_name);
   1dc58:	fe042583          	lw	a1,-32(s0)
   1dc5c:	fe842503          	lw	a0,-24(s0)
   1dc60:	ee1ff0ef          	jal	ra,1db40 <str_common>
   1dc64:	fca42e23          	sw	a0,-36(s0)
                if (length < min_length)
   1dc68:	fdc42703          	lw	a4,-36(s0)
   1dc6c:	fec42783          	lw	a5,-20(s0)
   1dc70:	00f75663          	bge	a4,a5,1dc7c <msh_auto_complete+0xbc>
                    min_length = length;
   1dc74:	fdc42783          	lw	a5,-36(s0)
   1dc78:	fef42623          	sw	a5,-20(s0)

                rt_kprintf("%s\n", cmd_name);
   1dc7c:	fe042583          	lw	a1,-32(s0)
   1dc80:	00004517          	auipc	a0,0x4
   1dc84:	89c50513          	addi	a0,a0,-1892 # 2151c <__FUNCTION__.3414+0xb4>
   1dc88:	c79f40ef          	jal	ra,12900 <rt_kprintf>
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
   1dc8c:	fe442783          	lw	a5,-28(s0)
   1dc90:	00c78793          	addi	a5,a5,12
   1dc94:	fef42223          	sw	a5,-28(s0)
   1dc98:	83818793          	addi	a5,gp,-1992 # 22398 <_syscall_table_end>
   1dc9c:	0007a783          	lw	a5,0(a5)
   1dca0:	fe442703          	lw	a4,-28(s0)
   1dca4:	f6f762e3          	bltu	a4,a5,1dc08 <msh_auto_complete+0x48>
            }
        }
    }

    /* auto complete string */
    if (name_ptr != NULL)
   1dca8:	fe842783          	lw	a5,-24(s0)
   1dcac:	00078c63          	beqz	a5,1dcc4 <msh_auto_complete+0x104>
    {
        rt_strncpy(prefix, name_ptr, min_length);
   1dcb0:	fec42783          	lw	a5,-20(s0)
   1dcb4:	00078613          	mv	a2,a5
   1dcb8:	fe842583          	lw	a1,-24(s0)
   1dcbc:	fcc42503          	lw	a0,-52(s0)
   1dcc0:	acdf30ef          	jal	ra,1178c <rt_strncpy>
    }

    return ;
   1dcc4:	00000013          	nop
}
   1dcc8:	03c12083          	lw	ra,60(sp)
   1dccc:	03812403          	lw	s0,56(sp)
   1dcd0:	04010113          	addi	sp,sp,64
   1dcd4:	00008067          	ret

0001dcd8 <rt_list_isempty>:
{
   1dcd8:	fe010113          	addi	sp,sp,-32
   1dcdc:	00812e23          	sw	s0,28(sp)
   1dce0:	02010413          	addi	s0,sp,32
   1dce4:	fea42623          	sw	a0,-20(s0)
    return l->next == l;
   1dce8:	fec42783          	lw	a5,-20(s0)
   1dcec:	0007a783          	lw	a5,0(a5)
   1dcf0:	fec42703          	lw	a4,-20(s0)
   1dcf4:	40f707b3          	sub	a5,a4,a5
   1dcf8:	0017b793          	seqz	a5,a5
   1dcfc:	0ff7f793          	andi	a5,a5,255
}
   1dd00:	00078513          	mv	a0,a5
   1dd04:	01c12403          	lw	s0,28(sp)
   1dd08:	02010113          	addi	sp,sp,32
   1dd0c:	00008067          	ret

0001dd10 <rt_list_len>:
/**
 * @brief get the list length
 * @param l the list to get.
 */
rt_inline unsigned int rt_list_len(const rt_list_t *l)
{
   1dd10:	fd010113          	addi	sp,sp,-48
   1dd14:	02812623          	sw	s0,44(sp)
   1dd18:	03010413          	addi	s0,sp,48
   1dd1c:	fca42e23          	sw	a0,-36(s0)
    unsigned int len = 0;
   1dd20:	fe042623          	sw	zero,-20(s0)
    const rt_list_t *p = l;
   1dd24:	fdc42783          	lw	a5,-36(s0)
   1dd28:	fef42423          	sw	a5,-24(s0)
    while (p->next != l)
   1dd2c:	01c0006f          	j	1dd48 <rt_list_len+0x38>
    {
        p = p->next;
   1dd30:	fe842783          	lw	a5,-24(s0)
   1dd34:	0007a783          	lw	a5,0(a5)
   1dd38:	fef42423          	sw	a5,-24(s0)
        len ++;
   1dd3c:	fec42783          	lw	a5,-20(s0)
   1dd40:	00178793          	addi	a5,a5,1
   1dd44:	fef42623          	sw	a5,-20(s0)
    while (p->next != l)
   1dd48:	fe842783          	lw	a5,-24(s0)
   1dd4c:	0007a783          	lw	a5,0(a5)
   1dd50:	fdc42703          	lw	a4,-36(s0)
   1dd54:	fcf71ee3          	bne	a4,a5,1dd30 <rt_list_len+0x20>
    }

    return len;
   1dd58:	fec42783          	lw	a5,-20(s0)
}
   1dd5c:	00078513          	mv	a0,a5
   1dd60:	02c12403          	lw	s0,44(sp)
   1dd64:	03010113          	addi	sp,sp,48
   1dd68:	00008067          	ret

0001dd6c <hello>:
#include <finsh.h>

#define LIST_FIND_OBJ_NR 8

long hello(void)
{
   1dd6c:	ff010113          	addi	sp,sp,-16
   1dd70:	00112623          	sw	ra,12(sp)
   1dd74:	00812423          	sw	s0,8(sp)
   1dd78:	01010413          	addi	s0,sp,16
    rt_kprintf("Hello RT-Thread!\n");
   1dd7c:	00003517          	auipc	a0,0x3
   1dd80:	7b450513          	addi	a0,a0,1972 # 21530 <__FUNCTION__.2792+0x10>
   1dd84:	b7df40ef          	jal	ra,12900 <rt_kprintf>

    return 0;
   1dd88:	00000793          	li	a5,0
}
   1dd8c:	00078513          	mv	a0,a5
   1dd90:	00c12083          	lw	ra,12(sp)
   1dd94:	00812403          	lw	s0,8(sp)
   1dd98:	01010113          	addi	sp,sp,16
   1dd9c:	00008067          	ret

0001dda0 <clear>:
MSH_CMD_EXPORT(hello, say hello world);

static long clear(void)
{
   1dda0:	ff010113          	addi	sp,sp,-16
   1dda4:	00112623          	sw	ra,12(sp)
   1dda8:	00812423          	sw	s0,8(sp)
   1ddac:	01010413          	addi	s0,sp,16
    rt_kprintf("\x1b[2J\x1b[H");
   1ddb0:	00003517          	auipc	a0,0x3
   1ddb4:	79450513          	addi	a0,a0,1940 # 21544 <__FUNCTION__.2792+0x24>
   1ddb8:	b49f40ef          	jal	ra,12900 <rt_kprintf>

    return 0;
   1ddbc:	00000793          	li	a5,0
}
   1ddc0:	00078513          	mv	a0,a5
   1ddc4:	00c12083          	lw	ra,12(sp)
   1ddc8:	00812403          	lw	s0,8(sp)
   1ddcc:	01010113          	addi	sp,sp,16
   1ddd0:	00008067          	ret

0001ddd4 <version>:
MSH_CMD_EXPORT(clear, clear the terminal screen);

extern void rt_show_version(void);
long version(void)
{
   1ddd4:	ff010113          	addi	sp,sp,-16
   1ddd8:	00112623          	sw	ra,12(sp)
   1dddc:	00812423          	sw	s0,8(sp)
   1dde0:	01010413          	addi	s0,sp,16
    rt_show_version();
   1dde4:	cc5f30ef          	jal	ra,11aa8 <rt_show_version>

    return 0;
   1dde8:	00000793          	li	a5,0
}
   1ddec:	00078513          	mv	a0,a5
   1ddf0:	00c12083          	lw	ra,12(sp)
   1ddf4:	00812403          	lw	s0,8(sp)
   1ddf8:	01010113          	addi	sp,sp,16
   1ddfc:	00008067          	ret

0001de00 <object_split>:
MSH_CMD_EXPORT(version, show RT - Thread version information);

rt_inline void object_split(int len)
{
   1de00:	fe010113          	addi	sp,sp,-32
   1de04:	00112e23          	sw	ra,28(sp)
   1de08:	00812c23          	sw	s0,24(sp)
   1de0c:	02010413          	addi	s0,sp,32
   1de10:	fea42623          	sw	a0,-20(s0)
    while (len--) rt_kprintf("-");
   1de14:	0100006f          	j	1de24 <object_split+0x24>
   1de18:	00003517          	auipc	a0,0x3
   1de1c:	73450513          	addi	a0,a0,1844 # 2154c <__FUNCTION__.2792+0x2c>
   1de20:	ae1f40ef          	jal	ra,12900 <rt_kprintf>
   1de24:	fec42783          	lw	a5,-20(s0)
   1de28:	fff78713          	addi	a4,a5,-1
   1de2c:	fee42623          	sw	a4,-20(s0)
   1de30:	fe0794e3          	bnez	a5,1de18 <object_split+0x18>
}
   1de34:	00000013          	nop
   1de38:	00000013          	nop
   1de3c:	01c12083          	lw	ra,28(sp)
   1de40:	01812403          	lw	s0,24(sp)
   1de44:	02010113          	addi	sp,sp,32
   1de48:	00008067          	ret

0001de4c <list_find_init>:
    int nr;             /* input: max nr, can't be 0 */
    int nr_out;         /* out: got nr */
} list_get_next_t;

static void list_find_init(list_get_next_t *p, rt_uint8_t type, rt_list_t **array, int nr)
{
   1de4c:	fd010113          	addi	sp,sp,-48
   1de50:	02112623          	sw	ra,44(sp)
   1de54:	02812423          	sw	s0,40(sp)
   1de58:	03010413          	addi	s0,sp,48
   1de5c:	fca42e23          	sw	a0,-36(s0)
   1de60:	00058793          	mv	a5,a1
   1de64:	fcc42a23          	sw	a2,-44(s0)
   1de68:	fcd42823          	sw	a3,-48(s0)
   1de6c:	fcf40da3          	sb	a5,-37(s0)
    struct rt_object_information *info;
    rt_list_t *list;

    info = rt_object_get_information((enum rt_object_class_type)type);
   1de70:	fdb44783          	lbu	a5,-37(s0)
   1de74:	00078513          	mv	a0,a5
   1de78:	a35f20ef          	jal	ra,108ac <rt_object_get_information>
   1de7c:	fea42623          	sw	a0,-20(s0)
    list = &info->object_list;
   1de80:	fec42783          	lw	a5,-20(s0)
   1de84:	00478793          	addi	a5,a5,4
   1de88:	fef42423          	sw	a5,-24(s0)

    p->list = list;
   1de8c:	fdc42783          	lw	a5,-36(s0)
   1de90:	fe842703          	lw	a4,-24(s0)
   1de94:	00e7a023          	sw	a4,0(a5)
    p->type = type;
   1de98:	fdc42783          	lw	a5,-36(s0)
   1de9c:	fdb44703          	lbu	a4,-37(s0)
   1dea0:	00e78423          	sb	a4,8(a5)
    p->array = array;
   1dea4:	fdc42783          	lw	a5,-36(s0)
   1dea8:	fd442703          	lw	a4,-44(s0)
   1deac:	00e7a223          	sw	a4,4(a5)
    p->nr = nr;
   1deb0:	fdc42783          	lw	a5,-36(s0)
   1deb4:	fd042703          	lw	a4,-48(s0)
   1deb8:	00e7a623          	sw	a4,12(a5)
    p->nr_out = 0;
   1debc:	fdc42783          	lw	a5,-36(s0)
   1dec0:	0007a823          	sw	zero,16(a5)
}
   1dec4:	00000013          	nop
   1dec8:	02c12083          	lw	ra,44(sp)
   1decc:	02812403          	lw	s0,40(sp)
   1ded0:	03010113          	addi	sp,sp,48
   1ded4:	00008067          	ret

0001ded8 <list_get_next>:

static rt_list_t *list_get_next(rt_list_t *current, list_get_next_t *arg)
{
   1ded8:	fc010113          	addi	sp,sp,-64
   1dedc:	02112e23          	sw	ra,60(sp)
   1dee0:	02812c23          	sw	s0,56(sp)
   1dee4:	04010413          	addi	s0,sp,64
   1dee8:	fca42623          	sw	a0,-52(s0)
   1deec:	fcb42423          	sw	a1,-56(s0)
    int first_flag = 0;
   1def0:	fe042623          	sw	zero,-20(s0)
    rt_ubase_t level;
    rt_list_t *node, *list;
    rt_list_t **array;
    int nr;

    arg->nr_out = 0;
   1def4:	fc842783          	lw	a5,-56(s0)
   1def8:	0007a823          	sw	zero,16(a5)

    if (!arg->nr || !arg->type)
   1defc:	fc842783          	lw	a5,-56(s0)
   1df00:	00c7a783          	lw	a5,12(a5)
   1df04:	00078863          	beqz	a5,1df14 <list_get_next+0x3c>
   1df08:	fc842783          	lw	a5,-56(s0)
   1df0c:	0087c783          	lbu	a5,8(a5)
   1df10:	00079663          	bnez	a5,1df1c <list_get_next+0x44>
    {
        return (rt_list_t *)RT_NULL;
   1df14:	00000793          	li	a5,0
   1df18:	1040006f          	j	1e01c <list_get_next+0x144>
    }

    list = arg->list;
   1df1c:	fc842783          	lw	a5,-56(s0)
   1df20:	0007a783          	lw	a5,0(a5)
   1df24:	fcf42e23          	sw	a5,-36(s0)

    if (!current) /* find first */
   1df28:	fcc42783          	lw	a5,-52(s0)
   1df2c:	00079c63          	bnez	a5,1df44 <list_get_next+0x6c>
    {
        node = list;
   1df30:	fdc42783          	lw	a5,-36(s0)
   1df34:	fef42423          	sw	a5,-24(s0)
        first_flag = 1;
   1df38:	00100793          	li	a5,1
   1df3c:	fef42623          	sw	a5,-20(s0)
   1df40:	00c0006f          	j	1df4c <list_get_next+0x74>
    }
    else
    {
        node = current;
   1df44:	fcc42783          	lw	a5,-52(s0)
   1df48:	fef42423          	sw	a5,-24(s0)
    }

    level = rt_hw_interrupt_disable();
   1df4c:	efdfd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1df50:	00050793          	mv	a5,a0
   1df54:	fcf42c23          	sw	a5,-40(s0)

    if (!first_flag)
   1df58:	fec42783          	lw	a5,-20(s0)
   1df5c:	02079e63          	bnez	a5,1df98 <list_get_next+0xc0>
    {
        struct rt_object *obj;
        /* The node in the list? */
        obj = rt_list_entry(node, struct rt_object, list);
   1df60:	fe842783          	lw	a5,-24(s0)
   1df64:	ff478793          	addi	a5,a5,-12
   1df68:	fcf42a23          	sw	a5,-44(s0)
        if ((obj->type & ~RT_Object_Class_Static) != arg->type)
   1df6c:	fd442783          	lw	a5,-44(s0)
   1df70:	0087c783          	lbu	a5,8(a5)
   1df74:	f7f7f793          	andi	a5,a5,-129
   1df78:	fc842703          	lw	a4,-56(s0)
   1df7c:	00874703          	lbu	a4,8(a4)
   1df80:	00e78c63          	beq	a5,a4,1df98 <list_get_next+0xc0>
        {
            rt_hw_interrupt_enable(level);
   1df84:	fd842783          	lw	a5,-40(s0)
   1df88:	00078513          	mv	a0,a5
   1df8c:	ec5fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
            return (rt_list_t *)RT_NULL;
   1df90:	00000793          	li	a5,0
   1df94:	0880006f          	j	1e01c <list_get_next+0x144>
        }
    }

    nr = 0;
   1df98:	fe042023          	sw	zero,-32(s0)
    array = arg->array;
   1df9c:	fc842783          	lw	a5,-56(s0)
   1dfa0:	0047a783          	lw	a5,4(a5)
   1dfa4:	fef42223          	sw	a5,-28(s0)
    while (1)
    {
        node = node->next;
   1dfa8:	fe842783          	lw	a5,-24(s0)
   1dfac:	0007a783          	lw	a5,0(a5)
   1dfb0:	fef42423          	sw	a5,-24(s0)

        if (node == list)
   1dfb4:	fe842703          	lw	a4,-24(s0)
   1dfb8:	fdc42783          	lw	a5,-36(s0)
   1dfbc:	00f71663          	bne	a4,a5,1dfc8 <list_get_next+0xf0>
        {
            node = (rt_list_t *)RT_NULL;
   1dfc0:	fe042423          	sw	zero,-24(s0)
            break;
   1dfc4:	03c0006f          	j	1e000 <list_get_next+0x128>
        }
        nr++;
   1dfc8:	fe042783          	lw	a5,-32(s0)
   1dfcc:	00178793          	addi	a5,a5,1
   1dfd0:	fef42023          	sw	a5,-32(s0)
        *array++ = node;
   1dfd4:	fe442783          	lw	a5,-28(s0)
   1dfd8:	00478713          	addi	a4,a5,4
   1dfdc:	fee42223          	sw	a4,-28(s0)
   1dfe0:	fe842703          	lw	a4,-24(s0)
   1dfe4:	00e7a023          	sw	a4,0(a5)
        if (nr == arg->nr)
   1dfe8:	fc842783          	lw	a5,-56(s0)
   1dfec:	00c7a783          	lw	a5,12(a5)
   1dff0:	fe042703          	lw	a4,-32(s0)
   1dff4:	00f70463          	beq	a4,a5,1dffc <list_get_next+0x124>
        node = node->next;
   1dff8:	fb1ff06f          	j	1dfa8 <list_get_next+0xd0>
        {
            break;
   1dffc:	00000013          	nop
        }
    }

    rt_hw_interrupt_enable(level);
   1e000:	fd842783          	lw	a5,-40(s0)
   1e004:	00078513          	mv	a0,a5
   1e008:	e49fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
    arg->nr_out = nr;
   1e00c:	fc842783          	lw	a5,-56(s0)
   1e010:	fe042703          	lw	a4,-32(s0)
   1e014:	00e7a823          	sw	a4,16(a5)
    return node;
   1e018:	fe842783          	lw	a5,-24(s0)
}
   1e01c:	00078513          	mv	a0,a5
   1e020:	03c12083          	lw	ra,60(sp)
   1e024:	03812403          	lw	s0,56(sp)
   1e028:	04010113          	addi	sp,sp,64
   1e02c:	00008067          	ret

0001e030 <list_thread>:

long list_thread(void)
{
   1e030:	f1010113          	addi	sp,sp,-240
   1e034:	0e112623          	sw	ra,236(sp)
   1e038:	0e812423          	sw	s0,232(sp)
   1e03c:	0f010413          	addi	s0,sp,240
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1e040:	fe042623          	sw	zero,-20(s0)
    const char *item_title = "thread";
   1e044:	00003797          	auipc	a5,0x3
   1e048:	50c78793          	addi	a5,a5,1292 # 21550 <__FUNCTION__.2792+0x30>
   1e04c:	fef42023          	sw	a5,-32(s0)
    int maxlen;

    list_find_init(&find_arg, RT_Object_Class_Thread, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1e050:	f9840713          	addi	a4,s0,-104
   1e054:	fb840793          	addi	a5,s0,-72
   1e058:	00800693          	li	a3,8
   1e05c:	00070613          	mv	a2,a4
   1e060:	00100593          	li	a1,1
   1e064:	00078513          	mv	a0,a5
   1e068:	de5ff0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1e06c:	00800793          	li	a5,8
   1e070:	fcf42e23          	sw	a5,-36(s0)
#ifdef RT_USING_SMP
    rt_kprintf("%-*.s cpu bind pri  status      sp     stack size max used left tick  error\n", maxlen, item_title);
    object_split(maxlen);
    rt_kprintf(" --- ---- ---  ------- ---------- ----------  ------  ---------- ---\n");
#else
    rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, item_title);
   1e074:	fe042603          	lw	a2,-32(s0)
   1e078:	fdc42583          	lw	a1,-36(s0)
   1e07c:	00003517          	auipc	a0,0x3
   1e080:	4dc50513          	addi	a0,a0,1244 # 21558 <__FUNCTION__.2792+0x38>
   1e084:	87df40ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1e088:	fdc42503          	lw	a0,-36(s0)
   1e08c:	d75ff0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" ---  ------- ---------- ----------  ------  ---------- ---\n");
   1e090:	00003517          	auipc	a0,0x3
   1e094:	50c50513          	addi	a0,a0,1292 # 2159c <__FUNCTION__.2792+0x7c>
   1e098:	869f40ef          	jal	ra,12900 <rt_kprintf>
#endif /*RT_USING_SMP*/

    do
    {
        next = list_get_next(next, &find_arg);
   1e09c:	fb840793          	addi	a5,s0,-72
   1e0a0:	00078593          	mv	a1,a5
   1e0a4:	fec42503          	lw	a0,-20(s0)
   1e0a8:	e31ff0ef          	jal	ra,1ded8 <list_get_next>
   1e0ac:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1e0b0:	fe042423          	sw	zero,-24(s0)
   1e0b4:	1e40006f          	j	1e298 <list_thread+0x268>
            {
                struct rt_object *obj;
                struct rt_thread thread_info, *thread;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1e0b8:	fe842783          	lw	a5,-24(s0)
   1e0bc:	00279793          	slli	a5,a5,0x2
   1e0c0:	ff040713          	addi	a4,s0,-16
   1e0c4:	00f707b3          	add	a5,a4,a5
   1e0c8:	fa87a783          	lw	a5,-88(a5)
   1e0cc:	ff478793          	addi	a5,a5,-12
   1e0d0:	fcf42c23          	sw	a5,-40(s0)
                level = rt_hw_interrupt_disable();
   1e0d4:	d75fd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1e0d8:	00050793          	mv	a5,a0
   1e0dc:	fcf42a23          	sw	a5,-44(s0)

                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1e0e0:	fd842783          	lw	a5,-40(s0)
   1e0e4:	0087c783          	lbu	a5,8(a5)
   1e0e8:	f7f7f793          	andi	a5,a5,-129
   1e0ec:	fc044703          	lbu	a4,-64(s0)
   1e0f0:	00e78a63          	beq	a5,a4,1e104 <list_thread+0xd4>
                {
                    rt_hw_interrupt_enable(level);
   1e0f4:	fd442783          	lw	a5,-44(s0)
   1e0f8:	00078513          	mv	a0,a5
   1e0fc:	d55fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
   1e100:	18c0006f          	j	1e28c <list_thread+0x25c>
                    continue;
                }
                /* copy info */
                rt_memcpy(&thread_info, obj, sizeof thread_info);
   1e104:	f1840793          	addi	a5,s0,-232
   1e108:	08000613          	li	a2,128
   1e10c:	fd842583          	lw	a1,-40(s0)
   1e110:	00078513          	mv	a0,a5
   1e114:	a00f30ef          	jal	ra,11314 <rt_memcpy>
                rt_hw_interrupt_enable(level);
   1e118:	fd442783          	lw	a5,-44(s0)
   1e11c:	00078513          	mv	a0,a5
   1e120:	d31fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                thread = (struct rt_thread *)obj;
   1e124:	fd842783          	lw	a5,-40(s0)
   1e128:	fcf42823          	sw	a5,-48(s0)
                        rt_kprintf("%-*.*s %3d %3d %4d ", maxlen, RT_NAME_MAX, thread->name, thread->oncpu, thread->bind_cpu, thread->current_priority);
                    else
                        rt_kprintf("%-*.*s N/A %3d %4d ", maxlen, RT_NAME_MAX, thread->name, thread->bind_cpu, thread->current_priority);

#else
                    rt_kprintf("%-*.*s %3d ", maxlen, RT_NAME_MAX, thread->name, thread->current_priority);
   1e12c:	fd042683          	lw	a3,-48(s0)
   1e130:	fd042783          	lw	a5,-48(s0)
   1e134:	0357c783          	lbu	a5,53(a5)
   1e138:	00078713          	mv	a4,a5
   1e13c:	00800613          	li	a2,8
   1e140:	fdc42583          	lw	a1,-36(s0)
   1e144:	00003517          	auipc	a0,0x3
   1e148:	49850513          	addi	a0,a0,1176 # 215dc <__FUNCTION__.2792+0xbc>
   1e14c:	fb4f40ef          	jal	ra,12900 <rt_kprintf>
#endif /*RT_USING_SMP*/
                    stat = (thread->stat & RT_THREAD_STAT_MASK);
   1e150:	fd042783          	lw	a5,-48(s0)
   1e154:	0347c783          	lbu	a5,52(a5)
   1e158:	0077f793          	andi	a5,a5,7
   1e15c:	fcf407a3          	sb	a5,-49(s0)
                    if (stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
   1e160:	fcf44703          	lbu	a4,-49(s0)
   1e164:	00100793          	li	a5,1
   1e168:	00f71a63          	bne	a4,a5,1e17c <list_thread+0x14c>
   1e16c:	00003517          	auipc	a0,0x3
   1e170:	47c50513          	addi	a0,a0,1148 # 215e8 <__FUNCTION__.2792+0xc8>
   1e174:	f8cf40ef          	jal	ra,12900 <rt_kprintf>
   1e178:	06c0006f          	j	1e1e4 <list_thread+0x1b4>
                    else if (stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
   1e17c:	fcf44703          	lbu	a4,-49(s0)
   1e180:	00200793          	li	a5,2
   1e184:	00f71a63          	bne	a4,a5,1e198 <list_thread+0x168>
   1e188:	00003517          	auipc	a0,0x3
   1e18c:	46c50513          	addi	a0,a0,1132 # 215f4 <__FUNCTION__.2792+0xd4>
   1e190:	f70f40ef          	jal	ra,12900 <rt_kprintf>
   1e194:	0500006f          	j	1e1e4 <list_thread+0x1b4>
                    else if (stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
   1e198:	fcf44783          	lbu	a5,-49(s0)
   1e19c:	00079a63          	bnez	a5,1e1b0 <list_thread+0x180>
   1e1a0:	00003517          	auipc	a0,0x3
   1e1a4:	46050513          	addi	a0,a0,1120 # 21600 <__FUNCTION__.2792+0xe0>
   1e1a8:	f58f40ef          	jal	ra,12900 <rt_kprintf>
   1e1ac:	0380006f          	j	1e1e4 <list_thread+0x1b4>
                    else if (stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
   1e1b0:	fcf44703          	lbu	a4,-49(s0)
   1e1b4:	00400793          	li	a5,4
   1e1b8:	00f71a63          	bne	a4,a5,1e1cc <list_thread+0x19c>
   1e1bc:	00003517          	auipc	a0,0x3
   1e1c0:	45050513          	addi	a0,a0,1104 # 2160c <__FUNCTION__.2792+0xec>
   1e1c4:	f3cf40ef          	jal	ra,12900 <rt_kprintf>
   1e1c8:	01c0006f          	j	1e1e4 <list_thread+0x1b4>
                    else if (stat == RT_THREAD_RUNNING) rt_kprintf(" running");
   1e1cc:	fcf44703          	lbu	a4,-49(s0)
   1e1d0:	00300793          	li	a5,3
   1e1d4:	00f71863          	bne	a4,a5,1e1e4 <list_thread+0x1b4>
   1e1d8:	00003517          	auipc	a0,0x3
   1e1dc:	44050513          	addi	a0,a0,1088 # 21618 <__FUNCTION__.2792+0xf8>
   1e1e0:	f20f40ef          	jal	ra,12900 <rt_kprintf>
                               thread->stack_size,
                               ((rt_ubase_t)ptr - (rt_ubase_t)thread->stack_addr) * 100 / thread->stack_size,
                               thread->remaining_tick,
                               thread->error);
#else
                    ptr = (rt_uint8_t *)thread->stack_addr;
   1e1e4:	fd042783          	lw	a5,-48(s0)
   1e1e8:	0287a783          	lw	a5,40(a5)
   1e1ec:	fef42223          	sw	a5,-28(s0)
                    while (*ptr == '#')ptr ++;
   1e1f0:	0100006f          	j	1e200 <list_thread+0x1d0>
   1e1f4:	fe442783          	lw	a5,-28(s0)
   1e1f8:	00178793          	addi	a5,a5,1
   1e1fc:	fef42223          	sw	a5,-28(s0)
   1e200:	fe442783          	lw	a5,-28(s0)
   1e204:	0007c703          	lbu	a4,0(a5)
   1e208:	02300793          	li	a5,35
   1e20c:	fef704e3          	beq	a4,a5,1e1f4 <list_thread+0x1c4>

                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
                               thread->stack_size + ((rt_ubase_t)thread->stack_addr - (rt_ubase_t)thread->sp),
   1e210:	fd042783          	lw	a5,-48(s0)
   1e214:	02c7a703          	lw	a4,44(a5)
   1e218:	fd042783          	lw	a5,-48(s0)
   1e21c:	0287a783          	lw	a5,40(a5)
   1e220:	00078693          	mv	a3,a5
   1e224:	fd042783          	lw	a5,-48(s0)
   1e228:	01c7a783          	lw	a5,28(a5)
   1e22c:	40f687b3          	sub	a5,a3,a5
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
   1e230:	00f705b3          	add	a1,a4,a5
   1e234:	fd042783          	lw	a5,-48(s0)
   1e238:	02c7a603          	lw	a2,44(a5)
                               thread->stack_size,
                               (thread->stack_size - ((rt_ubase_t) ptr - (rt_ubase_t) thread->stack_addr)) * 100
   1e23c:	fd042783          	lw	a5,-48(s0)
   1e240:	02c7a703          	lw	a4,44(a5)
   1e244:	fd042783          	lw	a5,-48(s0)
   1e248:	0287a783          	lw	a5,40(a5)
   1e24c:	00078693          	mv	a3,a5
   1e250:	fe442783          	lw	a5,-28(s0)
   1e254:	40f687b3          	sub	a5,a3,a5
   1e258:	00f70733          	add	a4,a4,a5
   1e25c:	06400793          	li	a5,100
   1e260:	02f70733          	mul	a4,a4,a5
                               / thread->stack_size,
   1e264:	fd042783          	lw	a5,-48(s0)
   1e268:	02c7a783          	lw	a5,44(a5)
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
   1e26c:	02f756b3          	divu	a3,a4,a5
   1e270:	fd042783          	lw	a5,-48(s0)
   1e274:	0487a703          	lw	a4,72(a5)
   1e278:	fd042783          	lw	a5,-48(s0)
   1e27c:	0307a783          	lw	a5,48(a5)
   1e280:	00003517          	auipc	a0,0x3
   1e284:	3a450513          	addi	a0,a0,932 # 21624 <__FUNCTION__.2792+0x104>
   1e288:	e78f40ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1e28c:	fe842783          	lw	a5,-24(s0)
   1e290:	00178793          	addi	a5,a5,1
   1e294:	fef42423          	sw	a5,-24(s0)
   1e298:	fc842783          	lw	a5,-56(s0)
   1e29c:	fe842703          	lw	a4,-24(s0)
   1e2a0:	e0f74ce3          	blt	a4,a5,1e0b8 <list_thread+0x88>
#endif
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1e2a4:	fec42783          	lw	a5,-20(s0)
   1e2a8:	de079ae3          	bnez	a5,1e09c <list_thread+0x6c>

    return 0;
   1e2ac:	00000793          	li	a5,0
}
   1e2b0:	00078513          	mv	a0,a5
   1e2b4:	0ec12083          	lw	ra,236(sp)
   1e2b8:	0e812403          	lw	s0,232(sp)
   1e2bc:	0f010113          	addi	sp,sp,240
   1e2c0:	00008067          	ret

0001e2c4 <show_wait_queue>:
MSH_CMD_EXPORT(list_thread, list thread);

static void show_wait_queue(struct rt_list_node *list)
{
   1e2c4:	fd010113          	addi	sp,sp,-48
   1e2c8:	02112623          	sw	ra,44(sp)
   1e2cc:	02812423          	sw	s0,40(sp)
   1e2d0:	03010413          	addi	s0,sp,48
   1e2d4:	fca42e23          	sw	a0,-36(s0)
    struct rt_thread *thread;
    struct rt_list_node *node;

    for (node = list->next; node != list; node = node->next)
   1e2d8:	fdc42783          	lw	a5,-36(s0)
   1e2dc:	0007a783          	lw	a5,0(a5)
   1e2e0:	fef42623          	sw	a5,-20(s0)
   1e2e4:	0500006f          	j	1e334 <show_wait_queue+0x70>
    {
        thread = rt_list_entry(node, struct rt_thread, tlist);
   1e2e8:	fec42783          	lw	a5,-20(s0)
   1e2ec:	fec78793          	addi	a5,a5,-20
   1e2f0:	fef42423          	sw	a5,-24(s0)
        rt_kprintf("%.*s", RT_NAME_MAX, thread->name);
   1e2f4:	fe842783          	lw	a5,-24(s0)
   1e2f8:	00078613          	mv	a2,a5
   1e2fc:	00800593          	li	a1,8
   1e300:	00003517          	auipc	a0,0x3
   1e304:	34c50513          	addi	a0,a0,844 # 2164c <__FUNCTION__.2792+0x12c>
   1e308:	df8f40ef          	jal	ra,12900 <rt_kprintf>

        if (node->next != list)
   1e30c:	fec42783          	lw	a5,-20(s0)
   1e310:	0007a783          	lw	a5,0(a5)
   1e314:	fdc42703          	lw	a4,-36(s0)
   1e318:	00f70863          	beq	a4,a5,1e328 <show_wait_queue+0x64>
            rt_kprintf("/");
   1e31c:	00003517          	auipc	a0,0x3
   1e320:	33850513          	addi	a0,a0,824 # 21654 <__FUNCTION__.2792+0x134>
   1e324:	ddcf40ef          	jal	ra,12900 <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
   1e328:	fec42783          	lw	a5,-20(s0)
   1e32c:	0007a783          	lw	a5,0(a5)
   1e330:	fef42623          	sw	a5,-20(s0)
   1e334:	fec42703          	lw	a4,-20(s0)
   1e338:	fdc42783          	lw	a5,-36(s0)
   1e33c:	faf716e3          	bne	a4,a5,1e2e8 <show_wait_queue+0x24>
    }
}
   1e340:	00000013          	nop
   1e344:	00000013          	nop
   1e348:	02c12083          	lw	ra,44(sp)
   1e34c:	02812403          	lw	s0,40(sp)
   1e350:	03010113          	addi	sp,sp,48
   1e354:	00008067          	ret

0001e358 <list_sem>:

#ifdef RT_USING_SEMAPHORE
long list_sem(void)
{
   1e358:	fa010113          	addi	sp,sp,-96
   1e35c:	04112e23          	sw	ra,92(sp)
   1e360:	04812c23          	sw	s0,88(sp)
   1e364:	04912a23          	sw	s1,84(sp)
   1e368:	05212823          	sw	s2,80(sp)
   1e36c:	06010413          	addi	s0,sp,96
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1e370:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "semaphore";
   1e374:	00003797          	auipc	a5,0x3
   1e378:	2e478793          	addi	a5,a5,740 # 21658 <__FUNCTION__.2792+0x138>
   1e37c:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_Semaphore, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1e380:	fa040713          	addi	a4,s0,-96
   1e384:	fc040793          	addi	a5,s0,-64
   1e388:	00800693          	li	a3,8
   1e38c:	00070613          	mv	a2,a4
   1e390:	00200593          	li	a1,2
   1e394:	00078513          	mv	a0,a5
   1e398:	ab5ff0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1e39c:	00800793          	li	a5,8
   1e3a0:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s v   suspend thread\n", maxlen, item_title);
   1e3a4:	fe442603          	lw	a2,-28(s0)
   1e3a8:	fe042583          	lw	a1,-32(s0)
   1e3ac:	00003517          	auipc	a0,0x3
   1e3b0:	2b850513          	addi	a0,a0,696 # 21664 <__FUNCTION__.2792+0x144>
   1e3b4:	d4cf40ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1e3b8:	fe042503          	lw	a0,-32(s0)
   1e3bc:	a45ff0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" --- --------------\n");
   1e3c0:	00003517          	auipc	a0,0x3
   1e3c4:	2c050513          	addi	a0,a0,704 # 21680 <__FUNCTION__.2792+0x160>
   1e3c8:	d38f40ef          	jal	ra,12900 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
   1e3cc:	fc040793          	addi	a5,s0,-64
   1e3d0:	00078593          	mv	a1,a5
   1e3d4:	fec42503          	lw	a0,-20(s0)
   1e3d8:	b01ff0ef          	jal	ra,1ded8 <list_get_next>
   1e3dc:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1e3e0:	fe042423          	sw	zero,-24(s0)
   1e3e4:	1280006f          	j	1e50c <list_sem+0x1b4>
            {
                struct rt_object *obj;
                struct rt_semaphore *sem;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1e3e8:	fe842783          	lw	a5,-24(s0)
   1e3ec:	00279793          	slli	a5,a5,0x2
   1e3f0:	ff040713          	addi	a4,s0,-16
   1e3f4:	00f707b3          	add	a5,a4,a5
   1e3f8:	fb07a783          	lw	a5,-80(a5)
   1e3fc:	ff478793          	addi	a5,a5,-12
   1e400:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
   1e404:	a45fd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1e408:	00050793          	mv	a5,a0
   1e40c:	fcf42c23          	sw	a5,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1e410:	fdc42783          	lw	a5,-36(s0)
   1e414:	0087c783          	lbu	a5,8(a5)
   1e418:	f7f7f793          	andi	a5,a5,-129
   1e41c:	fc844703          	lbu	a4,-56(s0)
   1e420:	00e78a63          	beq	a5,a4,1e434 <list_sem+0xdc>
                {
                    rt_hw_interrupt_enable(level);
   1e424:	fd842783          	lw	a5,-40(s0)
   1e428:	00078513          	mv	a0,a5
   1e42c:	a25fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1e430:	0d00006f          	j	1e500 <list_sem+0x1a8>
                }
                rt_hw_interrupt_enable(level);
   1e434:	fd842783          	lw	a5,-40(s0)
   1e438:	00078513          	mv	a0,a5
   1e43c:	a15fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                sem = (struct rt_semaphore *)obj;
   1e440:	fdc42783          	lw	a5,-36(s0)
   1e444:	fcf42a23          	sw	a5,-44(s0)
                if (!rt_list_isempty(&sem->parent.suspend_thread))
   1e448:	fd442783          	lw	a5,-44(s0)
   1e44c:	01478793          	addi	a5,a5,20
   1e450:	00078513          	mv	a0,a5
   1e454:	885ff0ef          	jal	ra,1dcd8 <rt_list_isempty>
   1e458:	00050793          	mv	a5,a0
   1e45c:	06079263          	bnez	a5,1e4c0 <list_sem+0x168>
                {
                    rt_kprintf("%-*.*s %03d %d:",
                               maxlen, RT_NAME_MAX,
                               sem->parent.parent.name,
   1e460:	fd442483          	lw	s1,-44(s0)
                               sem->value,
   1e464:	fd442783          	lw	a5,-44(s0)
   1e468:	01c7d783          	lhu	a5,28(a5)
                    rt_kprintf("%-*.*s %03d %d:",
   1e46c:	00078913          	mv	s2,a5
                               rt_list_len(&sem->parent.suspend_thread));
   1e470:	fd442783          	lw	a5,-44(s0)
   1e474:	01478793          	addi	a5,a5,20
                    rt_kprintf("%-*.*s %03d %d:",
   1e478:	00078513          	mv	a0,a5
   1e47c:	895ff0ef          	jal	ra,1dd10 <rt_list_len>
   1e480:	00050793          	mv	a5,a0
   1e484:	00090713          	mv	a4,s2
   1e488:	00048693          	mv	a3,s1
   1e48c:	00800613          	li	a2,8
   1e490:	fe042583          	lw	a1,-32(s0)
   1e494:	00003517          	auipc	a0,0x3
   1e498:	20450513          	addi	a0,a0,516 # 21698 <__FUNCTION__.2792+0x178>
   1e49c:	c64f40ef          	jal	ra,12900 <rt_kprintf>
                    show_wait_queue(&(sem->parent.suspend_thread));
   1e4a0:	fd442783          	lw	a5,-44(s0)
   1e4a4:	01478793          	addi	a5,a5,20
   1e4a8:	00078513          	mv	a0,a5
   1e4ac:	e19ff0ef          	jal	ra,1e2c4 <show_wait_queue>
                    rt_kprintf("\n");
   1e4b0:	00003517          	auipc	a0,0x3
   1e4b4:	1f850513          	addi	a0,a0,504 # 216a8 <__FUNCTION__.2792+0x188>
   1e4b8:	c48f40ef          	jal	ra,12900 <rt_kprintf>
   1e4bc:	0440006f          	j	1e500 <list_sem+0x1a8>
                }
                else
                {
                    rt_kprintf("%-*.*s %03d %d\n",
                               maxlen, RT_NAME_MAX,
                               sem->parent.parent.name,
   1e4c0:	fd442483          	lw	s1,-44(s0)
                               sem->value,
   1e4c4:	fd442783          	lw	a5,-44(s0)
   1e4c8:	01c7d783          	lhu	a5,28(a5)
                    rt_kprintf("%-*.*s %03d %d\n",
   1e4cc:	00078913          	mv	s2,a5
                               rt_list_len(&sem->parent.suspend_thread));
   1e4d0:	fd442783          	lw	a5,-44(s0)
   1e4d4:	01478793          	addi	a5,a5,20
                    rt_kprintf("%-*.*s %03d %d\n",
   1e4d8:	00078513          	mv	a0,a5
   1e4dc:	835ff0ef          	jal	ra,1dd10 <rt_list_len>
   1e4e0:	00050793          	mv	a5,a0
   1e4e4:	00090713          	mv	a4,s2
   1e4e8:	00048693          	mv	a3,s1
   1e4ec:	00800613          	li	a2,8
   1e4f0:	fe042583          	lw	a1,-32(s0)
   1e4f4:	00003517          	auipc	a0,0x3
   1e4f8:	1b850513          	addi	a0,a0,440 # 216ac <__FUNCTION__.2792+0x18c>
   1e4fc:	c04f40ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1e500:	fe842783          	lw	a5,-24(s0)
   1e504:	00178793          	addi	a5,a5,1
   1e508:	fef42423          	sw	a5,-24(s0)
   1e50c:	fd042783          	lw	a5,-48(s0)
   1e510:	fe842703          	lw	a4,-24(s0)
   1e514:	ecf74ae3          	blt	a4,a5,1e3e8 <list_sem+0x90>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1e518:	fec42783          	lw	a5,-20(s0)
   1e51c:	ea0798e3          	bnez	a5,1e3cc <list_sem+0x74>

    return 0;
   1e520:	00000793          	li	a5,0
}
   1e524:	00078513          	mv	a0,a5
   1e528:	05c12083          	lw	ra,92(sp)
   1e52c:	05812403          	lw	s0,88(sp)
   1e530:	05412483          	lw	s1,84(sp)
   1e534:	05012903          	lw	s2,80(sp)
   1e538:	06010113          	addi	sp,sp,96
   1e53c:	00008067          	ret

0001e540 <list_event>:
MSH_CMD_EXPORT(list_sem, list semaphore in system);
#endif

#ifdef RT_USING_EVENT
long list_event(void)
{
   1e540:	fa010113          	addi	sp,sp,-96
   1e544:	04112e23          	sw	ra,92(sp)
   1e548:	04812c23          	sw	s0,88(sp)
   1e54c:	04912a23          	sw	s1,84(sp)
   1e550:	05212823          	sw	s2,80(sp)
   1e554:	06010413          	addi	s0,sp,96
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1e558:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "event";
   1e55c:	00003797          	auipc	a5,0x3
   1e560:	16078793          	addi	a5,a5,352 # 216bc <__FUNCTION__.2792+0x19c>
   1e564:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_Event, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1e568:	fa040713          	addi	a4,s0,-96
   1e56c:	fc040793          	addi	a5,s0,-64
   1e570:	00800693          	li	a3,8
   1e574:	00070613          	mv	a2,a4
   1e578:	00400593          	li	a1,4
   1e57c:	00078513          	mv	a0,a5
   1e580:	8cdff0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1e584:	00800793          	li	a5,8
   1e588:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s      set    suspend thread\n", maxlen, item_title);
   1e58c:	fe442603          	lw	a2,-28(s0)
   1e590:	fe042583          	lw	a1,-32(s0)
   1e594:	00003517          	auipc	a0,0x3
   1e598:	13050513          	addi	a0,a0,304 # 216c4 <__FUNCTION__.2792+0x1a4>
   1e59c:	b64f40ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1e5a0:	fe042503          	lw	a0,-32(s0)
   1e5a4:	85dff0ef          	jal	ra,1de00 <object_split>
    rt_kprintf("  ---------- --------------\n");
   1e5a8:	00003517          	auipc	a0,0x3
   1e5ac:	14050513          	addi	a0,a0,320 # 216e8 <__FUNCTION__.2792+0x1c8>
   1e5b0:	b50f40ef          	jal	ra,12900 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
   1e5b4:	fc040793          	addi	a5,s0,-64
   1e5b8:	00078593          	mv	a1,a5
   1e5bc:	fec42503          	lw	a0,-20(s0)
   1e5c0:	919ff0ef          	jal	ra,1ded8 <list_get_next>
   1e5c4:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1e5c8:	fe042423          	sw	zero,-24(s0)
   1e5cc:	1080006f          	j	1e6d4 <list_event+0x194>
            {
                struct rt_object *obj;
                struct rt_event *e;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1e5d0:	fe842783          	lw	a5,-24(s0)
   1e5d4:	00279793          	slli	a5,a5,0x2
   1e5d8:	ff040713          	addi	a4,s0,-16
   1e5dc:	00f707b3          	add	a5,a4,a5
   1e5e0:	fb07a783          	lw	a5,-80(a5)
   1e5e4:	ff478793          	addi	a5,a5,-12
   1e5e8:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
   1e5ec:	85dfd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1e5f0:	00050793          	mv	a5,a0
   1e5f4:	fcf42c23          	sw	a5,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1e5f8:	fdc42783          	lw	a5,-36(s0)
   1e5fc:	0087c783          	lbu	a5,8(a5)
   1e600:	f7f7f793          	andi	a5,a5,-129
   1e604:	fc844703          	lbu	a4,-56(s0)
   1e608:	00e78a63          	beq	a5,a4,1e61c <list_event+0xdc>
                {
                    rt_hw_interrupt_enable(level);
   1e60c:	fd842783          	lw	a5,-40(s0)
   1e610:	00078513          	mv	a0,a5
   1e614:	83dfd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1e618:	0b00006f          	j	1e6c8 <list_event+0x188>
                }

                rt_hw_interrupt_enable(level);
   1e61c:	fd842783          	lw	a5,-40(s0)
   1e620:	00078513          	mv	a0,a5
   1e624:	82dfd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                e = (struct rt_event *)obj;
   1e628:	fdc42783          	lw	a5,-36(s0)
   1e62c:	fcf42a23          	sw	a5,-44(s0)
                if (!rt_list_isempty(&e->parent.suspend_thread))
   1e630:	fd442783          	lw	a5,-44(s0)
   1e634:	01478793          	addi	a5,a5,20
   1e638:	00078513          	mv	a0,a5
   1e63c:	e9cff0ef          	jal	ra,1dcd8 <rt_list_isempty>
   1e640:	00050793          	mv	a5,a0
   1e644:	06079063          	bnez	a5,1e6a4 <list_event+0x164>
                {
                    rt_kprintf("%-*.*s  0x%08x %03d:",
                               maxlen, RT_NAME_MAX,
                               e->parent.parent.name,
   1e648:	fd442483          	lw	s1,-44(s0)
                    rt_kprintf("%-*.*s  0x%08x %03d:",
   1e64c:	fd442783          	lw	a5,-44(s0)
   1e650:	01c7a903          	lw	s2,28(a5)
                               e->set,
                               rt_list_len(&e->parent.suspend_thread));
   1e654:	fd442783          	lw	a5,-44(s0)
   1e658:	01478793          	addi	a5,a5,20
                    rt_kprintf("%-*.*s  0x%08x %03d:",
   1e65c:	00078513          	mv	a0,a5
   1e660:	eb0ff0ef          	jal	ra,1dd10 <rt_list_len>
   1e664:	00050793          	mv	a5,a0
   1e668:	00090713          	mv	a4,s2
   1e66c:	00048693          	mv	a3,s1
   1e670:	00800613          	li	a2,8
   1e674:	fe042583          	lw	a1,-32(s0)
   1e678:	00003517          	auipc	a0,0x3
   1e67c:	09050513          	addi	a0,a0,144 # 21708 <__FUNCTION__.2792+0x1e8>
   1e680:	a80f40ef          	jal	ra,12900 <rt_kprintf>
                    show_wait_queue(&(e->parent.suspend_thread));
   1e684:	fd442783          	lw	a5,-44(s0)
   1e688:	01478793          	addi	a5,a5,20
   1e68c:	00078513          	mv	a0,a5
   1e690:	c35ff0ef          	jal	ra,1e2c4 <show_wait_queue>
                    rt_kprintf("\n");
   1e694:	00003517          	auipc	a0,0x3
   1e698:	01450513          	addi	a0,a0,20 # 216a8 <__FUNCTION__.2792+0x188>
   1e69c:	a64f40ef          	jal	ra,12900 <rt_kprintf>
   1e6a0:	0280006f          	j	1e6c8 <list_event+0x188>
                }
                else
                {
                    rt_kprintf("%-*.*s  0x%08x 0\n",
                               maxlen, RT_NAME_MAX, e->parent.parent.name, e->set);
   1e6a4:	fd442683          	lw	a3,-44(s0)
                    rt_kprintf("%-*.*s  0x%08x 0\n",
   1e6a8:	fd442783          	lw	a5,-44(s0)
   1e6ac:	01c7a783          	lw	a5,28(a5)
   1e6b0:	00078713          	mv	a4,a5
   1e6b4:	00800613          	li	a2,8
   1e6b8:	fe042583          	lw	a1,-32(s0)
   1e6bc:	00003517          	auipc	a0,0x3
   1e6c0:	06450513          	addi	a0,a0,100 # 21720 <__FUNCTION__.2792+0x200>
   1e6c4:	a3cf40ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1e6c8:	fe842783          	lw	a5,-24(s0)
   1e6cc:	00178793          	addi	a5,a5,1
   1e6d0:	fef42423          	sw	a5,-24(s0)
   1e6d4:	fd042783          	lw	a5,-48(s0)
   1e6d8:	fe842703          	lw	a4,-24(s0)
   1e6dc:	eef74ae3          	blt	a4,a5,1e5d0 <list_event+0x90>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1e6e0:	fec42783          	lw	a5,-20(s0)
   1e6e4:	ec0798e3          	bnez	a5,1e5b4 <list_event+0x74>

    return 0;
   1e6e8:	00000793          	li	a5,0
}
   1e6ec:	00078513          	mv	a0,a5
   1e6f0:	05c12083          	lw	ra,92(sp)
   1e6f4:	05812403          	lw	s0,88(sp)
   1e6f8:	05412483          	lw	s1,84(sp)
   1e6fc:	05012903          	lw	s2,80(sp)
   1e700:	06010113          	addi	sp,sp,96
   1e704:	00008067          	ret

0001e708 <list_mutex>:
MSH_CMD_EXPORT(list_event, list event in system);
#endif

#ifdef RT_USING_MUTEX
long list_mutex(void)
{
   1e708:	f9010113          	addi	sp,sp,-112
   1e70c:	06112623          	sw	ra,108(sp)
   1e710:	06812423          	sw	s0,104(sp)
   1e714:	06912223          	sw	s1,100(sp)
   1e718:	07212023          	sw	s2,96(sp)
   1e71c:	05312e23          	sw	s3,92(sp)
   1e720:	07010413          	addi	s0,sp,112
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1e724:	fc042e23          	sw	zero,-36(s0)

    int maxlen;
    const char *item_title = "mutex";
   1e728:	00003797          	auipc	a5,0x3
   1e72c:	00c78793          	addi	a5,a5,12 # 21734 <__FUNCTION__.2792+0x214>
   1e730:	fcf42a23          	sw	a5,-44(s0)

    list_find_init(&find_arg, RT_Object_Class_Mutex, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1e734:	f9040713          	addi	a4,s0,-112
   1e738:	fb040793          	addi	a5,s0,-80
   1e73c:	00800693          	li	a3,8
   1e740:	00070613          	mv	a2,a4
   1e744:	00300593          	li	a1,3
   1e748:	00078513          	mv	a0,a5
   1e74c:	f00ff0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1e750:	00800793          	li	a5,8
   1e754:	fcf42823          	sw	a5,-48(s0)

    rt_kprintf("%-*.s   owner  hold suspend thread\n", maxlen, item_title);
   1e758:	fd442603          	lw	a2,-44(s0)
   1e75c:	fd042583          	lw	a1,-48(s0)
   1e760:	00003517          	auipc	a0,0x3
   1e764:	fdc50513          	addi	a0,a0,-36 # 2173c <__FUNCTION__.2792+0x21c>
   1e768:	998f40ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1e76c:	fd042503          	lw	a0,-48(s0)
   1e770:	e90ff0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" -------- ---- --------------\n");
   1e774:	00003517          	auipc	a0,0x3
   1e778:	fec50513          	addi	a0,a0,-20 # 21760 <__FUNCTION__.2792+0x240>
   1e77c:	984f40ef          	jal	ra,12900 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
   1e780:	fb040793          	addi	a5,s0,-80
   1e784:	00078593          	mv	a1,a5
   1e788:	fdc42503          	lw	a0,-36(s0)
   1e78c:	f4cff0ef          	jal	ra,1ded8 <list_get_next>
   1e790:	fca42e23          	sw	a0,-36(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1e794:	fc042c23          	sw	zero,-40(s0)
   1e798:	0c80006f          	j	1e860 <list_mutex+0x158>
            {
                struct rt_object *obj;
                struct rt_mutex *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1e79c:	fd842783          	lw	a5,-40(s0)
   1e7a0:	00279793          	slli	a5,a5,0x2
   1e7a4:	fe040713          	addi	a4,s0,-32
   1e7a8:	00f707b3          	add	a5,a4,a5
   1e7ac:	fb07a783          	lw	a5,-80(a5)
   1e7b0:	ff478793          	addi	a5,a5,-12
   1e7b4:	fcf42623          	sw	a5,-52(s0)
                level = rt_hw_interrupt_disable();
   1e7b8:	e90fd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1e7bc:	00050793          	mv	a5,a0
   1e7c0:	fcf42423          	sw	a5,-56(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1e7c4:	fcc42783          	lw	a5,-52(s0)
   1e7c8:	0087c783          	lbu	a5,8(a5)
   1e7cc:	f7f7f793          	andi	a5,a5,-129
   1e7d0:	fb844703          	lbu	a4,-72(s0)
   1e7d4:	00e78a63          	beq	a5,a4,1e7e8 <list_mutex+0xe0>
                {
                    rt_hw_interrupt_enable(level);
   1e7d8:	fc842783          	lw	a5,-56(s0)
   1e7dc:	00078513          	mv	a0,a5
   1e7e0:	e70fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1e7e4:	0700006f          	j	1e854 <list_mutex+0x14c>
                }

                rt_hw_interrupt_enable(level);
   1e7e8:	fc842783          	lw	a5,-56(s0)
   1e7ec:	00078513          	mv	a0,a5
   1e7f0:	e60fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                m = (struct rt_mutex *)obj;
   1e7f4:	fcc42783          	lw	a5,-52(s0)
   1e7f8:	fcf42223          	sw	a5,-60(s0)
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
                           maxlen, RT_NAME_MAX,
                           m->parent.parent.name,
   1e7fc:	fc442483          	lw	s1,-60(s0)
                           RT_NAME_MAX,
                           m->owner->name,
   1e800:	fc442783          	lw	a5,-60(s0)
   1e804:	0207a783          	lw	a5,32(a5)
   1e808:	00078913          	mv	s2,a5
                           m->hold,
   1e80c:	fc442783          	lw	a5,-60(s0)
   1e810:	01f7c783          	lbu	a5,31(a5)
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
   1e814:	00078993          	mv	s3,a5
                           rt_list_len(&m->parent.suspend_thread));
   1e818:	fc442783          	lw	a5,-60(s0)
   1e81c:	01478793          	addi	a5,a5,20
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
   1e820:	00078513          	mv	a0,a5
   1e824:	cecff0ef          	jal	ra,1dd10 <rt_list_len>
   1e828:	00050793          	mv	a5,a0
   1e82c:	00078893          	mv	a7,a5
   1e830:	00098813          	mv	a6,s3
   1e834:	00090793          	mv	a5,s2
   1e838:	00800713          	li	a4,8
   1e83c:	00048693          	mv	a3,s1
   1e840:	00800613          	li	a2,8
   1e844:	fd042583          	lw	a1,-48(s0)
   1e848:	00003517          	auipc	a0,0x3
   1e84c:	f3850513          	addi	a0,a0,-200 # 21780 <__FUNCTION__.2792+0x260>
   1e850:	8b0f40ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1e854:	fd842783          	lw	a5,-40(s0)
   1e858:	00178793          	addi	a5,a5,1
   1e85c:	fcf42c23          	sw	a5,-40(s0)
   1e860:	fc042783          	lw	a5,-64(s0)
   1e864:	fd842703          	lw	a4,-40(s0)
   1e868:	f2f74ae3          	blt	a4,a5,1e79c <list_mutex+0x94>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1e86c:	fdc42783          	lw	a5,-36(s0)
   1e870:	f00798e3          	bnez	a5,1e780 <list_mutex+0x78>

    return 0;
   1e874:	00000793          	li	a5,0
}
   1e878:	00078513          	mv	a0,a5
   1e87c:	06c12083          	lw	ra,108(sp)
   1e880:	06812403          	lw	s0,104(sp)
   1e884:	06412483          	lw	s1,100(sp)
   1e888:	06012903          	lw	s2,96(sp)
   1e88c:	05c12983          	lw	s3,92(sp)
   1e890:	07010113          	addi	sp,sp,112
   1e894:	00008067          	ret

0001e898 <list_mailbox>:
MSH_CMD_EXPORT(list_mutex, list mutex in system);
#endif

#ifdef RT_USING_MAILBOX
long list_mailbox(void)
{
   1e898:	f9010113          	addi	sp,sp,-112
   1e89c:	06112623          	sw	ra,108(sp)
   1e8a0:	06812423          	sw	s0,104(sp)
   1e8a4:	06912223          	sw	s1,100(sp)
   1e8a8:	07212023          	sw	s2,96(sp)
   1e8ac:	05312e23          	sw	s3,92(sp)
   1e8b0:	07010413          	addi	s0,sp,112
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1e8b4:	fc042e23          	sw	zero,-36(s0)

    int maxlen;
    const char *item_title = "mailbox";
   1e8b8:	00003797          	auipc	a5,0x3
   1e8bc:	ee078793          	addi	a5,a5,-288 # 21798 <__FUNCTION__.2792+0x278>
   1e8c0:	fcf42a23          	sw	a5,-44(s0)

    list_find_init(&find_arg, RT_Object_Class_MailBox, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1e8c4:	f9040713          	addi	a4,s0,-112
   1e8c8:	fb040793          	addi	a5,s0,-80
   1e8cc:	00800693          	li	a3,8
   1e8d0:	00070613          	mv	a2,a4
   1e8d4:	00500593          	li	a1,5
   1e8d8:	00078513          	mv	a0,a5
   1e8dc:	d70ff0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1e8e0:	00800793          	li	a5,8
   1e8e4:	fcf42823          	sw	a5,-48(s0)

    rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title);
   1e8e8:	fd442603          	lw	a2,-44(s0)
   1e8ec:	fd042583          	lw	a1,-48(s0)
   1e8f0:	00003517          	auipc	a0,0x3
   1e8f4:	eb050513          	addi	a0,a0,-336 # 217a0 <__FUNCTION__.2792+0x280>
   1e8f8:	808f40ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1e8fc:	fd042503          	lw	a0,-48(s0)
   1e900:	d00ff0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" ----  ---- --------------\n");
   1e904:	00003517          	auipc	a0,0x3
   1e908:	ec050513          	addi	a0,a0,-320 # 217c4 <__FUNCTION__.2792+0x2a4>
   1e90c:	ff5f30ef          	jal	ra,12900 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
   1e910:	fb040793          	addi	a5,s0,-80
   1e914:	00078593          	mv	a1,a5
   1e918:	fdc42503          	lw	a0,-36(s0)
   1e91c:	dbcff0ef          	jal	ra,1ded8 <list_get_next>
   1e920:	fca42e23          	sw	a0,-36(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1e924:	fc042c23          	sw	zero,-40(s0)
   1e928:	1500006f          	j	1ea78 <list_mailbox+0x1e0>
            {
                struct rt_object *obj;
                struct rt_mailbox *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1e92c:	fd842783          	lw	a5,-40(s0)
   1e930:	00279793          	slli	a5,a5,0x2
   1e934:	fe040713          	addi	a4,s0,-32
   1e938:	00f707b3          	add	a5,a4,a5
   1e93c:	fb07a783          	lw	a5,-80(a5)
   1e940:	ff478793          	addi	a5,a5,-12
   1e944:	fcf42623          	sw	a5,-52(s0)
                level = rt_hw_interrupt_disable();
   1e948:	d00fd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1e94c:	00050793          	mv	a5,a0
   1e950:	fcf42423          	sw	a5,-56(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1e954:	fcc42783          	lw	a5,-52(s0)
   1e958:	0087c783          	lbu	a5,8(a5)
   1e95c:	f7f7f793          	andi	a5,a5,-129
   1e960:	fb844703          	lbu	a4,-72(s0)
   1e964:	00e78a63          	beq	a5,a4,1e978 <list_mailbox+0xe0>
                {
                    rt_hw_interrupt_enable(level);
   1e968:	fc842783          	lw	a5,-56(s0)
   1e96c:	00078513          	mv	a0,a5
   1e970:	ce0fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1e974:	0f80006f          	j	1ea6c <list_mailbox+0x1d4>
                }

                rt_hw_interrupt_enable(level);
   1e978:	fc842783          	lw	a5,-56(s0)
   1e97c:	00078513          	mv	a0,a5
   1e980:	cd0fd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                m = (struct rt_mailbox *)obj;
   1e984:	fcc42783          	lw	a5,-52(s0)
   1e988:	fcf42223          	sw	a5,-60(s0)
                if (!rt_list_isempty(&m->parent.suspend_thread))
   1e98c:	fc442783          	lw	a5,-60(s0)
   1e990:	01478793          	addi	a5,a5,20
   1e994:	00078513          	mv	a0,a5
   1e998:	b40ff0ef          	jal	ra,1dcd8 <rt_list_isempty>
   1e99c:	00050793          	mv	a5,a0
   1e9a0:	06079c63          	bnez	a5,1ea18 <list_mailbox+0x180>
                {
                    rt_kprintf("%-*.*s %04d  %04d %d:",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
   1e9a4:	fc442483          	lw	s1,-60(s0)
                               m->entry,
   1e9a8:	fc442783          	lw	a5,-60(s0)
   1e9ac:	0227d783          	lhu	a5,34(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d:",
   1e9b0:	00078913          	mv	s2,a5
                               m->size,
   1e9b4:	fc442783          	lw	a5,-60(s0)
   1e9b8:	0207d783          	lhu	a5,32(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d:",
   1e9bc:	00078993          	mv	s3,a5
                               rt_list_len(&m->parent.suspend_thread));
   1e9c0:	fc442783          	lw	a5,-60(s0)
   1e9c4:	01478793          	addi	a5,a5,20
                    rt_kprintf("%-*.*s %04d  %04d %d:",
   1e9c8:	00078513          	mv	a0,a5
   1e9cc:	b44ff0ef          	jal	ra,1dd10 <rt_list_len>
   1e9d0:	00050793          	mv	a5,a0
   1e9d4:	00078813          	mv	a6,a5
   1e9d8:	00098793          	mv	a5,s3
   1e9dc:	00090713          	mv	a4,s2
   1e9e0:	00048693          	mv	a3,s1
   1e9e4:	00800613          	li	a2,8
   1e9e8:	fd042583          	lw	a1,-48(s0)
   1e9ec:	00003517          	auipc	a0,0x3
   1e9f0:	df450513          	addi	a0,a0,-524 # 217e0 <__FUNCTION__.2792+0x2c0>
   1e9f4:	f0df30ef          	jal	ra,12900 <rt_kprintf>
                    show_wait_queue(&(m->parent.suspend_thread));
   1e9f8:	fc442783          	lw	a5,-60(s0)
   1e9fc:	01478793          	addi	a5,a5,20
   1ea00:	00078513          	mv	a0,a5
   1ea04:	8c1ff0ef          	jal	ra,1e2c4 <show_wait_queue>
                    rt_kprintf("\n");
   1ea08:	00003517          	auipc	a0,0x3
   1ea0c:	ca050513          	addi	a0,a0,-864 # 216a8 <__FUNCTION__.2792+0x188>
   1ea10:	ef1f30ef          	jal	ra,12900 <rt_kprintf>
   1ea14:	0580006f          	j	1ea6c <list_mailbox+0x1d4>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
   1ea18:	fc442483          	lw	s1,-60(s0)
                               m->entry,
   1ea1c:	fc442783          	lw	a5,-60(s0)
   1ea20:	0227d783          	lhu	a5,34(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
   1ea24:	00078913          	mv	s2,a5
                               m->size,
   1ea28:	fc442783          	lw	a5,-60(s0)
   1ea2c:	0207d783          	lhu	a5,32(a5)
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
   1ea30:	00078993          	mv	s3,a5
                               rt_list_len(&m->parent.suspend_thread));
   1ea34:	fc442783          	lw	a5,-60(s0)
   1ea38:	01478793          	addi	a5,a5,20
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
   1ea3c:	00078513          	mv	a0,a5
   1ea40:	ad0ff0ef          	jal	ra,1dd10 <rt_list_len>
   1ea44:	00050793          	mv	a5,a0
   1ea48:	00078813          	mv	a6,a5
   1ea4c:	00098793          	mv	a5,s3
   1ea50:	00090713          	mv	a4,s2
   1ea54:	00048693          	mv	a3,s1
   1ea58:	00800613          	li	a2,8
   1ea5c:	fd042583          	lw	a1,-48(s0)
   1ea60:	00003517          	auipc	a0,0x3
   1ea64:	d9850513          	addi	a0,a0,-616 # 217f8 <__FUNCTION__.2792+0x2d8>
   1ea68:	e99f30ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1ea6c:	fd842783          	lw	a5,-40(s0)
   1ea70:	00178793          	addi	a5,a5,1
   1ea74:	fcf42c23          	sw	a5,-40(s0)
   1ea78:	fc042783          	lw	a5,-64(s0)
   1ea7c:	fd842703          	lw	a4,-40(s0)
   1ea80:	eaf746e3          	blt	a4,a5,1e92c <list_mailbox+0x94>
                }

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1ea84:	fdc42783          	lw	a5,-36(s0)
   1ea88:	e80794e3          	bnez	a5,1e910 <list_mailbox+0x78>

    return 0;
   1ea8c:	00000793          	li	a5,0
}
   1ea90:	00078513          	mv	a0,a5
   1ea94:	06c12083          	lw	ra,108(sp)
   1ea98:	06812403          	lw	s0,104(sp)
   1ea9c:	06412483          	lw	s1,100(sp)
   1eaa0:	06012903          	lw	s2,96(sp)
   1eaa4:	05c12983          	lw	s3,92(sp)
   1eaa8:	07010113          	addi	sp,sp,112
   1eaac:	00008067          	ret

0001eab0 <list_msgqueue>:
MSH_CMD_EXPORT(list_mailbox, list mail box in system);
#endif

#ifdef RT_USING_MESSAGEQUEUE
long list_msgqueue(void)
{
   1eab0:	fa010113          	addi	sp,sp,-96
   1eab4:	04112e23          	sw	ra,92(sp)
   1eab8:	04812c23          	sw	s0,88(sp)
   1eabc:	04912a23          	sw	s1,84(sp)
   1eac0:	05212823          	sw	s2,80(sp)
   1eac4:	06010413          	addi	s0,sp,96
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1eac8:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "msgqueue";
   1eacc:	00003797          	auipc	a5,0x3
   1ead0:	d4478793          	addi	a5,a5,-700 # 21810 <__FUNCTION__.2792+0x2f0>
   1ead4:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_MessageQueue, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1ead8:	fa040713          	addi	a4,s0,-96
   1eadc:	fc040793          	addi	a5,s0,-64
   1eae0:	00800693          	li	a3,8
   1eae4:	00070613          	mv	a2,a4
   1eae8:	00600593          	li	a1,6
   1eaec:	00078513          	mv	a0,a5
   1eaf0:	b5cff0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1eaf4:	00800793          	li	a5,8
   1eaf8:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s entry suspend thread\n", maxlen, item_title);
   1eafc:	fe442603          	lw	a2,-28(s0)
   1eb00:	fe042583          	lw	a1,-32(s0)
   1eb04:	00003517          	auipc	a0,0x3
   1eb08:	d1850513          	addi	a0,a0,-744 # 2181c <__FUNCTION__.2792+0x2fc>
   1eb0c:	df5f30ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1eb10:	fe042503          	lw	a0,-32(s0)
   1eb14:	aecff0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" ----  --------------\n");
   1eb18:	00003517          	auipc	a0,0x3
   1eb1c:	d2050513          	addi	a0,a0,-736 # 21838 <__FUNCTION__.2792+0x318>
   1eb20:	de1f30ef          	jal	ra,12900 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
   1eb24:	fc040793          	addi	a5,s0,-64
   1eb28:	00078593          	mv	a1,a5
   1eb2c:	fec42503          	lw	a0,-20(s0)
   1eb30:	ba8ff0ef          	jal	ra,1ded8 <list_get_next>
   1eb34:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1eb38:	fe042423          	sw	zero,-24(s0)
   1eb3c:	1280006f          	j	1ec64 <list_msgqueue+0x1b4>
            {
                struct rt_object *obj;
                struct rt_messagequeue *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1eb40:	fe842783          	lw	a5,-24(s0)
   1eb44:	00279793          	slli	a5,a5,0x2
   1eb48:	ff040713          	addi	a4,s0,-16
   1eb4c:	00f707b3          	add	a5,a4,a5
   1eb50:	fb07a783          	lw	a5,-80(a5)
   1eb54:	ff478793          	addi	a5,a5,-12
   1eb58:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
   1eb5c:	aecfd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1eb60:	00050793          	mv	a5,a0
   1eb64:	fcf42c23          	sw	a5,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1eb68:	fdc42783          	lw	a5,-36(s0)
   1eb6c:	0087c783          	lbu	a5,8(a5)
   1eb70:	f7f7f793          	andi	a5,a5,-129
   1eb74:	fc844703          	lbu	a4,-56(s0)
   1eb78:	00e78a63          	beq	a5,a4,1eb8c <list_msgqueue+0xdc>
                {
                    rt_hw_interrupt_enable(level);
   1eb7c:	fd842783          	lw	a5,-40(s0)
   1eb80:	00078513          	mv	a0,a5
   1eb84:	accfd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1eb88:	0d00006f          	j	1ec58 <list_msgqueue+0x1a8>
                }

                rt_hw_interrupt_enable(level);
   1eb8c:	fd842783          	lw	a5,-40(s0)
   1eb90:	00078513          	mv	a0,a5
   1eb94:	abcfd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                m = (struct rt_messagequeue *)obj;
   1eb98:	fdc42783          	lw	a5,-36(s0)
   1eb9c:	fcf42a23          	sw	a5,-44(s0)
                if (!rt_list_isempty(&m->parent.suspend_thread))
   1eba0:	fd442783          	lw	a5,-44(s0)
   1eba4:	01478793          	addi	a5,a5,20
   1eba8:	00078513          	mv	a0,a5
   1ebac:	92cff0ef          	jal	ra,1dcd8 <rt_list_isempty>
   1ebb0:	00050793          	mv	a5,a0
   1ebb4:	06079263          	bnez	a5,1ec18 <list_msgqueue+0x168>
                {
                    rt_kprintf("%-*.*s %04d  %d:",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
   1ebb8:	fd442483          	lw	s1,-44(s0)
                               m->entry,
   1ebbc:	fd442783          	lw	a5,-44(s0)
   1ebc0:	0247d783          	lhu	a5,36(a5)
                    rt_kprintf("%-*.*s %04d  %d:",
   1ebc4:	00078913          	mv	s2,a5
                               rt_list_len(&m->parent.suspend_thread));
   1ebc8:	fd442783          	lw	a5,-44(s0)
   1ebcc:	01478793          	addi	a5,a5,20
                    rt_kprintf("%-*.*s %04d  %d:",
   1ebd0:	00078513          	mv	a0,a5
   1ebd4:	93cff0ef          	jal	ra,1dd10 <rt_list_len>
   1ebd8:	00050793          	mv	a5,a0
   1ebdc:	00090713          	mv	a4,s2
   1ebe0:	00048693          	mv	a3,s1
   1ebe4:	00800613          	li	a2,8
   1ebe8:	fe042583          	lw	a1,-32(s0)
   1ebec:	00003517          	auipc	a0,0x3
   1ebf0:	c6450513          	addi	a0,a0,-924 # 21850 <__FUNCTION__.2792+0x330>
   1ebf4:	d0df30ef          	jal	ra,12900 <rt_kprintf>
                    show_wait_queue(&(m->parent.suspend_thread));
   1ebf8:	fd442783          	lw	a5,-44(s0)
   1ebfc:	01478793          	addi	a5,a5,20
   1ec00:	00078513          	mv	a0,a5
   1ec04:	ec0ff0ef          	jal	ra,1e2c4 <show_wait_queue>
                    rt_kprintf("\n");
   1ec08:	00003517          	auipc	a0,0x3
   1ec0c:	aa050513          	addi	a0,a0,-1376 # 216a8 <__FUNCTION__.2792+0x188>
   1ec10:	cf1f30ef          	jal	ra,12900 <rt_kprintf>
   1ec14:	0440006f          	j	1ec58 <list_msgqueue+0x1a8>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %d\n",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
   1ec18:	fd442483          	lw	s1,-44(s0)
                               m->entry,
   1ec1c:	fd442783          	lw	a5,-44(s0)
   1ec20:	0247d783          	lhu	a5,36(a5)
                    rt_kprintf("%-*.*s %04d  %d\n",
   1ec24:	00078913          	mv	s2,a5
                               rt_list_len(&m->parent.suspend_thread));
   1ec28:	fd442783          	lw	a5,-44(s0)
   1ec2c:	01478793          	addi	a5,a5,20
                    rt_kprintf("%-*.*s %04d  %d\n",
   1ec30:	00078513          	mv	a0,a5
   1ec34:	8dcff0ef          	jal	ra,1dd10 <rt_list_len>
   1ec38:	00050793          	mv	a5,a0
   1ec3c:	00090713          	mv	a4,s2
   1ec40:	00048693          	mv	a3,s1
   1ec44:	00800613          	li	a2,8
   1ec48:	fe042583          	lw	a1,-32(s0)
   1ec4c:	00003517          	auipc	a0,0x3
   1ec50:	c1850513          	addi	a0,a0,-1000 # 21864 <__FUNCTION__.2792+0x344>
   1ec54:	cadf30ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1ec58:	fe842783          	lw	a5,-24(s0)
   1ec5c:	00178793          	addi	a5,a5,1
   1ec60:	fef42423          	sw	a5,-24(s0)
   1ec64:	fd042783          	lw	a5,-48(s0)
   1ec68:	fe842703          	lw	a4,-24(s0)
   1ec6c:	ecf74ae3          	blt	a4,a5,1eb40 <list_msgqueue+0x90>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1ec70:	fec42783          	lw	a5,-20(s0)
   1ec74:	ea0798e3          	bnez	a5,1eb24 <list_msgqueue+0x74>

    return 0;
   1ec78:	00000793          	li	a5,0
}
   1ec7c:	00078513          	mv	a0,a5
   1ec80:	05c12083          	lw	ra,92(sp)
   1ec84:	05812403          	lw	s0,88(sp)
   1ec88:	05412483          	lw	s1,84(sp)
   1ec8c:	05012903          	lw	s2,80(sp)
   1ec90:	06010113          	addi	sp,sp,96
   1ec94:	00008067          	ret

0001ec98 <list_mempool>:
MSH_CMD_EXPORT(list_memheap, list memory heap in system);
#endif

#ifdef RT_USING_MEMPOOL
long list_mempool(void)
{
   1ec98:	f9010113          	addi	sp,sp,-112
   1ec9c:	06112623          	sw	ra,108(sp)
   1eca0:	06812423          	sw	s0,104(sp)
   1eca4:	07010413          	addi	s0,sp,112
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1eca8:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "mempool";
   1ecac:	00003797          	auipc	a5,0x3
   1ecb0:	bcc78793          	addi	a5,a5,-1076 # 21878 <__FUNCTION__.2792+0x358>
   1ecb4:	fcf42e23          	sw	a5,-36(s0)

    list_find_init(&find_arg, RT_Object_Class_MemPool, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1ecb8:	f9840713          	addi	a4,s0,-104
   1ecbc:	fb840793          	addi	a5,s0,-72
   1ecc0:	00800693          	li	a3,8
   1ecc4:	00070613          	mv	a2,a4
   1ecc8:	00800593          	li	a1,8
   1eccc:	00078513          	mv	a0,a5
   1ecd0:	97cff0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1ecd4:	00800793          	li	a5,8
   1ecd8:	fcf42c23          	sw	a5,-40(s0)

    rt_kprintf("%-*.s block total free suspend thread\n", maxlen, item_title);
   1ecdc:	fdc42603          	lw	a2,-36(s0)
   1ece0:	fd842583          	lw	a1,-40(s0)
   1ece4:	00003517          	auipc	a0,0x3
   1ece8:	b9c50513          	addi	a0,a0,-1124 # 21880 <__FUNCTION__.2792+0x360>
   1ecec:	c15f30ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1ecf0:	fd842503          	lw	a0,-40(s0)
   1ecf4:	90cff0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" ----  ----  ---- --------------\n");
   1ecf8:	00003517          	auipc	a0,0x3
   1ecfc:	bb050513          	addi	a0,a0,-1104 # 218a8 <__FUNCTION__.2792+0x388>
   1ed00:	c01f30ef          	jal	ra,12900 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
   1ed04:	fb840793          	addi	a5,s0,-72
   1ed08:	00078593          	mv	a1,a5
   1ed0c:	fec42503          	lw	a0,-20(s0)
   1ed10:	9c8ff0ef          	jal	ra,1ded8 <list_get_next>
   1ed14:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1ed18:	fe042423          	sw	zero,-24(s0)
   1ed1c:	14c0006f          	j	1ee68 <list_mempool+0x1d0>
                struct rt_object *obj;
                struct rt_mempool *mp;
                int suspend_thread_count;
                rt_list_t *node;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1ed20:	fe842783          	lw	a5,-24(s0)
   1ed24:	00279793          	slli	a5,a5,0x2
   1ed28:	ff040713          	addi	a4,s0,-16
   1ed2c:	00f707b3          	add	a5,a4,a5
   1ed30:	fa87a783          	lw	a5,-88(a5)
   1ed34:	ff478793          	addi	a5,a5,-12
   1ed38:	fcf42a23          	sw	a5,-44(s0)
                level = rt_hw_interrupt_disable();
   1ed3c:	90cfd0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1ed40:	00050793          	mv	a5,a0
   1ed44:	fcf42823          	sw	a5,-48(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1ed48:	fd442783          	lw	a5,-44(s0)
   1ed4c:	0087c783          	lbu	a5,8(a5)
   1ed50:	f7f7f793          	andi	a5,a5,-129
   1ed54:	fc044703          	lbu	a4,-64(s0)
   1ed58:	00e78a63          	beq	a5,a4,1ed6c <list_mempool+0xd4>
                {
                    rt_hw_interrupt_enable(level);
   1ed5c:	fd042783          	lw	a5,-48(s0)
   1ed60:	00078513          	mv	a0,a5
   1ed64:	8ecfd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1ed68:	0f40006f          	j	1ee5c <list_mempool+0x1c4>
                }

                rt_hw_interrupt_enable(level);
   1ed6c:	fd042783          	lw	a5,-48(s0)
   1ed70:	00078513          	mv	a0,a5
   1ed74:	8dcfd0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                mp = (struct rt_mempool *)obj;
   1ed78:	fd442783          	lw	a5,-44(s0)
   1ed7c:	fcf42623          	sw	a5,-52(s0)

                suspend_thread_count = 0;
   1ed80:	fe042223          	sw	zero,-28(s0)
                rt_list_for_each(node, &mp->suspend_thread)
   1ed84:	fcc42783          	lw	a5,-52(s0)
   1ed88:	02c7a783          	lw	a5,44(a5)
   1ed8c:	fef42023          	sw	a5,-32(s0)
   1ed90:	01c0006f          	j	1edac <list_mempool+0x114>
                {
                    suspend_thread_count++;
   1ed94:	fe442783          	lw	a5,-28(s0)
   1ed98:	00178793          	addi	a5,a5,1
   1ed9c:	fef42223          	sw	a5,-28(s0)
                rt_list_for_each(node, &mp->suspend_thread)
   1eda0:	fe042783          	lw	a5,-32(s0)
   1eda4:	0007a783          	lw	a5,0(a5)
   1eda8:	fef42023          	sw	a5,-32(s0)
   1edac:	fcc42783          	lw	a5,-52(s0)
   1edb0:	02c78793          	addi	a5,a5,44
   1edb4:	fe042703          	lw	a4,-32(s0)
   1edb8:	fcf71ee3          	bne	a4,a5,1ed94 <list_mempool+0xfc>
                }

                if (suspend_thread_count > 0)
   1edbc:	fe442783          	lw	a5,-28(s0)
   1edc0:	06f05063          	blez	a5,1ee20 <list_mempool+0x188>
                {
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
                               maxlen, RT_NAME_MAX,
                               mp->parent.name,
   1edc4:	fcc42683          	lw	a3,-52(s0)
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
   1edc8:	fcc42783          	lw	a5,-52(s0)
   1edcc:	01c7a703          	lw	a4,28(a5)
   1edd0:	fcc42783          	lw	a5,-52(s0)
   1edd4:	0247a603          	lw	a2,36(a5)
   1edd8:	fcc42783          	lw	a5,-52(s0)
   1eddc:	0287a783          	lw	a5,40(a5)
   1ede0:	fe442883          	lw	a7,-28(s0)
   1ede4:	00078813          	mv	a6,a5
   1ede8:	00060793          	mv	a5,a2
   1edec:	00800613          	li	a2,8
   1edf0:	fd842583          	lw	a1,-40(s0)
   1edf4:	00003517          	auipc	a0,0x3
   1edf8:	ad850513          	addi	a0,a0,-1320 # 218cc <__FUNCTION__.2792+0x3ac>
   1edfc:	b05f30ef          	jal	ra,12900 <rt_kprintf>
                               mp->block_size,
                               mp->block_total_count,
                               mp->block_free_count,
                               suspend_thread_count);
                    show_wait_queue(&(mp->suspend_thread));
   1ee00:	fcc42783          	lw	a5,-52(s0)
   1ee04:	02c78793          	addi	a5,a5,44
   1ee08:	00078513          	mv	a0,a5
   1ee0c:	cb8ff0ef          	jal	ra,1e2c4 <show_wait_queue>
                    rt_kprintf("\n");
   1ee10:	00003517          	auipc	a0,0x3
   1ee14:	89850513          	addi	a0,a0,-1896 # 216a8 <__FUNCTION__.2792+0x188>
   1ee18:	ae9f30ef          	jal	ra,12900 <rt_kprintf>
   1ee1c:	0400006f          	j	1ee5c <list_mempool+0x1c4>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
                               maxlen, RT_NAME_MAX,
                               mp->parent.name,
   1ee20:	fcc42683          	lw	a3,-52(s0)
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
   1ee24:	fcc42783          	lw	a5,-52(s0)
   1ee28:	01c7a703          	lw	a4,28(a5)
   1ee2c:	fcc42783          	lw	a5,-52(s0)
   1ee30:	0247a603          	lw	a2,36(a5)
   1ee34:	fcc42783          	lw	a5,-52(s0)
   1ee38:	0287a783          	lw	a5,40(a5)
   1ee3c:	fe442883          	lw	a7,-28(s0)
   1ee40:	00078813          	mv	a6,a5
   1ee44:	00060793          	mv	a5,a2
   1ee48:	00800613          	li	a2,8
   1ee4c:	fd842583          	lw	a1,-40(s0)
   1ee50:	00003517          	auipc	a0,0x3
   1ee54:	a9850513          	addi	a0,a0,-1384 # 218e8 <__FUNCTION__.2792+0x3c8>
   1ee58:	aa9f30ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1ee5c:	fe842783          	lw	a5,-24(s0)
   1ee60:	00178793          	addi	a5,a5,1
   1ee64:	fef42423          	sw	a5,-24(s0)
   1ee68:	fc842783          	lw	a5,-56(s0)
   1ee6c:	fe842703          	lw	a4,-24(s0)
   1ee70:	eaf748e3          	blt	a4,a5,1ed20 <list_mempool+0x88>
                               suspend_thread_count);
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1ee74:	fec42783          	lw	a5,-20(s0)
   1ee78:	e80796e3          	bnez	a5,1ed04 <list_mempool+0x6c>

    return 0;
   1ee7c:	00000793          	li	a5,0
}
   1ee80:	00078513          	mv	a0,a5
   1ee84:	06c12083          	lw	ra,108(sp)
   1ee88:	06812403          	lw	s0,104(sp)
   1ee8c:	07010113          	addi	sp,sp,112
   1ee90:	00008067          	ret

0001ee94 <list_timer>:
MSH_CMD_EXPORT(list_mempool, list memory pool in system);
#endif

long list_timer(void)
{
   1ee94:	fa010113          	addi	sp,sp,-96
   1ee98:	04112e23          	sw	ra,92(sp)
   1ee9c:	04812c23          	sw	s0,88(sp)
   1eea0:	06010413          	addi	s0,sp,96
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1eea4:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "timer";
   1eea8:	00003797          	auipc	a5,0x3
   1eeac:	a5c78793          	addi	a5,a5,-1444 # 21904 <__FUNCTION__.2792+0x3e4>
   1eeb0:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_Timer, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1eeb4:	fa040713          	addi	a4,s0,-96
   1eeb8:	fc040793          	addi	a5,s0,-64
   1eebc:	00800693          	li	a3,8
   1eec0:	00070613          	mv	a2,a4
   1eec4:	00a00593          	li	a1,10
   1eec8:	00078513          	mv	a0,a5
   1eecc:	f81fe0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1eed0:	00800793          	li	a5,8
   1eed4:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s  periodic   timeout    activated     mode\n", maxlen, item_title);
   1eed8:	fe442603          	lw	a2,-28(s0)
   1eedc:	fe042583          	lw	a1,-32(s0)
   1eee0:	00003517          	auipc	a0,0x3
   1eee4:	a2c50513          	addi	a0,a0,-1492 # 2190c <__FUNCTION__.2792+0x3ec>
   1eee8:	a19f30ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1eeec:	fe042503          	lw	a0,-32(s0)
   1eef0:	f11fe0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" ---------- ---------- ----------- ---------\n");
   1eef4:	00003517          	auipc	a0,0x3
   1eef8:	a4c50513          	addi	a0,a0,-1460 # 21940 <__FUNCTION__.2792+0x420>
   1eefc:	a05f30ef          	jal	ra,12900 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
   1ef00:	fc040793          	addi	a5,s0,-64
   1ef04:	00078593          	mv	a1,a5
   1ef08:	fec42503          	lw	a0,-20(s0)
   1ef0c:	fcdfe0ef          	jal	ra,1ded8 <list_get_next>
   1ef10:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1ef14:	fe042423          	sw	zero,-24(s0)
   1ef18:	0f00006f          	j	1f008 <list_timer+0x174>
            {
                struct rt_object *obj;
                struct rt_timer *timer;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1ef1c:	fe842783          	lw	a5,-24(s0)
   1ef20:	00279793          	slli	a5,a5,0x2
   1ef24:	ff040713          	addi	a4,s0,-16
   1ef28:	00f707b3          	add	a5,a4,a5
   1ef2c:	fb07a783          	lw	a5,-80(a5)
   1ef30:	ff478793          	addi	a5,a5,-12
   1ef34:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
   1ef38:	f11fc0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1ef3c:	00050793          	mv	a5,a0
   1ef40:	fcf42c23          	sw	a5,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1ef44:	fdc42783          	lw	a5,-36(s0)
   1ef48:	0087c783          	lbu	a5,8(a5)
   1ef4c:	f7f7f793          	andi	a5,a5,-129
   1ef50:	fc844703          	lbu	a4,-56(s0)
   1ef54:	00e78a63          	beq	a5,a4,1ef68 <list_timer+0xd4>
                {
                    rt_hw_interrupt_enable(level);
   1ef58:	fd842783          	lw	a5,-40(s0)
   1ef5c:	00078513          	mv	a0,a5
   1ef60:	ef1fc0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1ef64:	0980006f          	j	1effc <list_timer+0x168>
                }

                rt_hw_interrupt_enable(level);
   1ef68:	fd842783          	lw	a5,-40(s0)
   1ef6c:	00078513          	mv	a0,a5
   1ef70:	ee1fc0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                timer = (struct rt_timer *)obj;
   1ef74:	fdc42783          	lw	a5,-36(s0)
   1ef78:	fcf42a23          	sw	a5,-44(s0)
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
                           maxlen, RT_NAME_MAX,
                           timer->parent.name,
   1ef7c:	fd442683          	lw	a3,-44(s0)
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
   1ef80:	fd442783          	lw	a5,-44(s0)
   1ef84:	0247a703          	lw	a4,36(a5)
   1ef88:	fd442783          	lw	a5,-44(s0)
   1ef8c:	0287a783          	lw	a5,40(a5)
   1ef90:	00800613          	li	a2,8
   1ef94:	fe042583          	lw	a1,-32(s0)
   1ef98:	00003517          	auipc	a0,0x3
   1ef9c:	9d850513          	addi	a0,a0,-1576 # 21970 <__FUNCTION__.2792+0x450>
   1efa0:	961f30ef          	jal	ra,12900 <rt_kprintf>
                           timer->init_tick,
                           timer->timeout_tick);
                if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
   1efa4:	fd442783          	lw	a5,-44(s0)
   1efa8:	0097c783          	lbu	a5,9(a5)
   1efac:	0017f793          	andi	a5,a5,1
   1efb0:	00078a63          	beqz	a5,1efc4 <list_timer+0x130>
                    rt_kprintf("activated   ");
   1efb4:	00003517          	auipc	a0,0x3
   1efb8:	9d450513          	addi	a0,a0,-1580 # 21988 <__FUNCTION__.2792+0x468>
   1efbc:	945f30ef          	jal	ra,12900 <rt_kprintf>
   1efc0:	0100006f          	j	1efd0 <list_timer+0x13c>
                else
                    rt_kprintf("deactivated ");
   1efc4:	00003517          	auipc	a0,0x3
   1efc8:	9d450513          	addi	a0,a0,-1580 # 21998 <__FUNCTION__.2792+0x478>
   1efcc:	935f30ef          	jal	ra,12900 <rt_kprintf>
                if (timer->parent.flag & RT_TIMER_FLAG_PERIODIC)
   1efd0:	fd442783          	lw	a5,-44(s0)
   1efd4:	0097c783          	lbu	a5,9(a5)
   1efd8:	0027f793          	andi	a5,a5,2
   1efdc:	00078a63          	beqz	a5,1eff0 <list_timer+0x15c>
                    rt_kprintf("periodic\n");
   1efe0:	00003517          	auipc	a0,0x3
   1efe4:	9c850513          	addi	a0,a0,-1592 # 219a8 <__FUNCTION__.2792+0x488>
   1efe8:	919f30ef          	jal	ra,12900 <rt_kprintf>
   1efec:	0100006f          	j	1effc <list_timer+0x168>
                else
                    rt_kprintf("one shot\n");
   1eff0:	00003517          	auipc	a0,0x3
   1eff4:	9c450513          	addi	a0,a0,-1596 # 219b4 <__FUNCTION__.2792+0x494>
   1eff8:	909f30ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1effc:	fe842783          	lw	a5,-24(s0)
   1f000:	00178793          	addi	a5,a5,1
   1f004:	fef42423          	sw	a5,-24(s0)
   1f008:	fd042783          	lw	a5,-48(s0)
   1f00c:	fe842703          	lw	a4,-24(s0)
   1f010:	f0f746e3          	blt	a4,a5,1ef1c <list_timer+0x88>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1f014:	fec42783          	lw	a5,-20(s0)
   1f018:	ee0794e3          	bnez	a5,1ef00 <list_timer+0x6c>

    rt_kprintf("current tick:0x%08x\n", rt_tick_get());
   1f01c:	8dcf90ef          	jal	ra,180f8 <rt_tick_get>
   1f020:	00050793          	mv	a5,a0
   1f024:	00078593          	mv	a1,a5
   1f028:	00003517          	auipc	a0,0x3
   1f02c:	99850513          	addi	a0,a0,-1640 # 219c0 <__FUNCTION__.2792+0x4a0>
   1f030:	8d1f30ef          	jal	ra,12900 <rt_kprintf>

    return 0;
   1f034:	00000793          	li	a5,0
}
   1f038:	00078513          	mv	a0,a5
   1f03c:	05c12083          	lw	ra,92(sp)
   1f040:	05812403          	lw	s0,88(sp)
   1f044:	06010113          	addi	sp,sp,96
   1f048:	00008067          	ret

0001f04c <list_device>:
    "Security Device",
    "Unknown"
};

long list_device(void)
{
   1f04c:	fa010113          	addi	sp,sp,-96
   1f050:	04112e23          	sw	ra,92(sp)
   1f054:	04812c23          	sw	s0,88(sp)
   1f058:	06010413          	addi	s0,sp,96
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
   1f05c:	fe042623          	sw	zero,-20(s0)

    int maxlen;
    const char *item_title = "device";
   1f060:	00003797          	auipc	a5,0x3
   1f064:	b4078793          	addi	a5,a5,-1216 # 21ba0 <device_type_str+0x64>
   1f068:	fef42223          	sw	a5,-28(s0)

    list_find_init(&find_arg, RT_Object_Class_Device, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
   1f06c:	fa040713          	addi	a4,s0,-96
   1f070:	fc040793          	addi	a5,s0,-64
   1f074:	00800693          	li	a3,8
   1f078:	00070613          	mv	a2,a4
   1f07c:	00900593          	li	a1,9
   1f080:	00078513          	mv	a0,a5
   1f084:	dc9fe0ef          	jal	ra,1de4c <list_find_init>

    maxlen = RT_NAME_MAX;
   1f088:	00800793          	li	a5,8
   1f08c:	fef42023          	sw	a5,-32(s0)

    rt_kprintf("%-*.s         type         ref count\n", maxlen, item_title);
   1f090:	fe442603          	lw	a2,-28(s0)
   1f094:	fe042583          	lw	a1,-32(s0)
   1f098:	00003517          	auipc	a0,0x3
   1f09c:	b1050513          	addi	a0,a0,-1264 # 21ba8 <device_type_str+0x6c>
   1f0a0:	861f30ef          	jal	ra,12900 <rt_kprintf>
    object_split(maxlen);
   1f0a4:	fe042503          	lw	a0,-32(s0)
   1f0a8:	d59fe0ef          	jal	ra,1de00 <object_split>
    rt_kprintf(" -------------------- ----------\n");
   1f0ac:	00003517          	auipc	a0,0x3
   1f0b0:	b2450513          	addi	a0,a0,-1244 # 21bd0 <device_type_str+0x94>
   1f0b4:	84df30ef          	jal	ra,12900 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
   1f0b8:	fc040793          	addi	a5,s0,-64
   1f0bc:	00078593          	mv	a1,a5
   1f0c0:	fec42503          	lw	a0,-20(s0)
   1f0c4:	e15fe0ef          	jal	ra,1ded8 <list_get_next>
   1f0c8:	fea42623          	sw	a0,-20(s0)
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
   1f0cc:	fe042423          	sw	zero,-24(s0)
   1f0d0:	0c80006f          	j	1f198 <list_device+0x14c>
            {
                struct rt_object *obj;
                struct rt_device *device;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
   1f0d4:	fe842783          	lw	a5,-24(s0)
   1f0d8:	00279793          	slli	a5,a5,0x2
   1f0dc:	ff040713          	addi	a4,s0,-16
   1f0e0:	00f707b3          	add	a5,a4,a5
   1f0e4:	fb07a783          	lw	a5,-80(a5)
   1f0e8:	ff478793          	addi	a5,a5,-12
   1f0ec:	fcf42e23          	sw	a5,-36(s0)
                level = rt_hw_interrupt_disable();
   1f0f0:	d59fc0ef          	jal	ra,1be48 <rt_hw_interrupt_disable>
   1f0f4:	00050793          	mv	a5,a0
   1f0f8:	fcf42c23          	sw	a5,-40(s0)
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
   1f0fc:	fdc42783          	lw	a5,-36(s0)
   1f100:	0087c783          	lbu	a5,8(a5)
   1f104:	f7f7f793          	andi	a5,a5,-129
   1f108:	fc844703          	lbu	a4,-56(s0)
   1f10c:	00e78a63          	beq	a5,a4,1f120 <list_device+0xd4>
                {
                    rt_hw_interrupt_enable(level);
   1f110:	fd842783          	lw	a5,-40(s0)
   1f114:	00078513          	mv	a0,a5
   1f118:	d39fc0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>
                    continue;
   1f11c:	0700006f          	j	1f18c <list_device+0x140>
                }

                rt_hw_interrupt_enable(level);
   1f120:	fd842783          	lw	a5,-40(s0)
   1f124:	00078513          	mv	a0,a5
   1f128:	d29fc0ef          	jal	ra,1be50 <rt_hw_interrupt_enable>

                device = (struct rt_device *)obj;
   1f12c:	fdc42783          	lw	a5,-36(s0)
   1f130:	fcf42a23          	sw	a5,-44(s0)
                rt_kprintf("%-*.*s %-20s %-8d\n",
                           maxlen, RT_NAME_MAX,
                           device->parent.name,
   1f134:	fd442683          	lw	a3,-44(s0)
                           (device->type <= RT_Device_Class_Unknown) ?
   1f138:	fd442783          	lw	a5,-44(s0)
   1f13c:	0147a703          	lw	a4,20(a5)
                rt_kprintf("%-*.*s %-20s %-8d\n",
   1f140:	01800793          	li	a5,24
   1f144:	02e7e263          	bltu	a5,a4,1f168 <list_device+0x11c>
                           device_type_str[device->type] :
   1f148:	fd442783          	lw	a5,-44(s0)
   1f14c:	0147a783          	lw	a5,20(a5)
                rt_kprintf("%-*.*s %-20s %-8d\n",
   1f150:	00003717          	auipc	a4,0x3
   1f154:	9ec70713          	addi	a4,a4,-1556 # 21b3c <device_type_str>
   1f158:	00279793          	slli	a5,a5,0x2
   1f15c:	00f707b3          	add	a5,a4,a5
   1f160:	0007a703          	lw	a4,0(a5)
   1f164:	00c0006f          	j	1f170 <list_device+0x124>
   1f168:	00003717          	auipc	a4,0x3
   1f16c:	9cc70713          	addi	a4,a4,-1588 # 21b34 <__FUNCTION__.2792+0x614>
                           device_type_str[RT_Device_Class_Unknown],
                           device->ref_count);
   1f170:	fd442783          	lw	a5,-44(s0)
   1f174:	01c7c783          	lbu	a5,28(a5)
                rt_kprintf("%-*.*s %-20s %-8d\n",
   1f178:	00800613          	li	a2,8
   1f17c:	fe042583          	lw	a1,-32(s0)
   1f180:	00003517          	auipc	a0,0x3
   1f184:	a7450513          	addi	a0,a0,-1420 # 21bf4 <device_type_str+0xb8>
   1f188:	f78f30ef          	jal	ra,12900 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
   1f18c:	fe842783          	lw	a5,-24(s0)
   1f190:	00178793          	addi	a5,a5,1
   1f194:	fef42423          	sw	a5,-24(s0)
   1f198:	fd042783          	lw	a5,-48(s0)
   1f19c:	fe842703          	lw	a4,-24(s0)
   1f1a0:	f2f74ae3          	blt	a4,a5,1f0d4 <list_device+0x88>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
   1f1a4:	fec42783          	lw	a5,-20(s0)
   1f1a8:	f00798e3          	bnez	a5,1f0b8 <list_device+0x6c>

    return 0;
   1f1ac:	00000793          	li	a5,0
}
   1f1b0:	00078513          	mv	a0,a5
   1f1b4:	05c12083          	lw	ra,92(sp)
   1f1b8:	05812403          	lw	s0,88(sp)
   1f1bc:	06010113          	addi	sp,sp,96
   1f1c0:	00008067          	ret

0001f1c4 <list>:
MSH_CMD_EXPORT(list_device, list device in system);
#endif

long list(void)
{
   1f1c4:	fe010113          	addi	sp,sp,-32
   1f1c8:	00112e23          	sw	ra,28(sp)
   1f1cc:	00812c23          	sw	s0,24(sp)
   1f1d0:	02010413          	addi	s0,sp,32
    rt_kprintf("--Commands List:\n");
   1f1d4:	00003517          	auipc	a0,0x3
   1f1d8:	a3450513          	addi	a0,a0,-1484 # 21c08 <device_type_str+0xcc>
   1f1dc:	f24f30ef          	jal	ra,12900 <rt_kprintf>
    {
        struct finsh_syscall *index;
        for (index = _syscall_table_begin;
   1f1e0:	83418793          	addi	a5,gp,-1996 # 22394 <_syscall_table_begin>
   1f1e4:	0007a783          	lw	a5,0(a5)
   1f1e8:	fef42623          	sw	a5,-20(s0)
   1f1ec:	0600006f          	j	1f24c <list+0x88>
                index < _syscall_table_end;
                FINSH_NEXT_SYSCALL(index))
        {
            /* skip the internal command */
            if (strncmp((char *)index->name, "__", 2) == 0) continue;
   1f1f0:	fec42783          	lw	a5,-20(s0)
   1f1f4:	0007a783          	lw	a5,0(a5)
   1f1f8:	00200613          	li	a2,2
   1f1fc:	00003597          	auipc	a1,0x3
   1f200:	a2058593          	addi	a1,a1,-1504 # 21c1c <device_type_str+0xe0>
   1f204:	00078513          	mv	a0,a5
   1f208:	4bc000ef          	jal	ra,1f6c4 <strncmp>
   1f20c:	00050793          	mv	a5,a0
   1f210:	02078663          	beqz	a5,1f23c <list+0x78>

#if defined(FINSH_USING_DESCRIPTION) && defined(FINSH_USING_SYMTAB)
            rt_kprintf("%-16s -- %s\n", index->name, index->desc);
   1f214:	fec42783          	lw	a5,-20(s0)
   1f218:	0007a703          	lw	a4,0(a5)
   1f21c:	fec42783          	lw	a5,-20(s0)
   1f220:	0047a783          	lw	a5,4(a5)
   1f224:	00078613          	mv	a2,a5
   1f228:	00070593          	mv	a1,a4
   1f22c:	00003517          	auipc	a0,0x3
   1f230:	9f450513          	addi	a0,a0,-1548 # 21c20 <device_type_str+0xe4>
   1f234:	eccf30ef          	jal	ra,12900 <rt_kprintf>
   1f238:	0080006f          	j	1f240 <list+0x7c>
            if (strncmp((char *)index->name, "__", 2) == 0) continue;
   1f23c:	00000013          	nop
                FINSH_NEXT_SYSCALL(index))
   1f240:	fec42783          	lw	a5,-20(s0)
   1f244:	00c78793          	addi	a5,a5,12
   1f248:	fef42623          	sw	a5,-20(s0)
                index < _syscall_table_end;
   1f24c:	83818793          	addi	a5,gp,-1992 # 22398 <_syscall_table_end>
   1f250:	0007a783          	lw	a5,0(a5)
        for (index = _syscall_table_begin;
   1f254:	fec42703          	lw	a4,-20(s0)
   1f258:	f8f76ce3          	bltu	a4,a5,1f1f0 <list+0x2c>
            rt_kprintf("%s\n", index->name);
#endif
        }
    }

    return 0;
   1f25c:	00000793          	li	a5,0
}
   1f260:	00078513          	mv	a0,a5
   1f264:	01c12083          	lw	ra,28(sp)
   1f268:	01812403          	lw	s0,24(sp)
   1f26c:	02010113          	addi	sp,sp,32
   1f270:	00008067          	ret

0001f274 <atexit>:
   1f274:	00050593          	mv	a1,a0
   1f278:	00000693          	li	a3,0
   1f27c:	00000613          	li	a2,0
   1f280:	00000513          	li	a0,0
   1f284:	5a00006f          	j	1f824 <__register_exitproc>

0001f288 <exit>:
   1f288:	ff010113          	addi	sp,sp,-16
   1f28c:	00000593          	li	a1,0
   1f290:	00812423          	sw	s0,8(sp)
   1f294:	00112623          	sw	ra,12(sp)
   1f298:	00050413          	mv	s0,a0
   1f29c:	624000ef          	jal	ra,1f8c0 <__call_exitprocs>
   1f2a0:	000227b7          	lui	a5,0x22
   1f2a4:	e847a503          	lw	a0,-380(a5) # 21e84 <_etext>
   1f2a8:	03c52783          	lw	a5,60(a0)
   1f2ac:	00078463          	beqz	a5,1f2b4 <exit+0x2c>
   1f2b0:	000780e7          	jalr	a5
   1f2b4:	00040513          	mv	a0,s0
   1f2b8:	72c000ef          	jal	ra,1f9e4 <_exit>

0001f2bc <__libc_fini_array>:
   1f2bc:	ff010113          	addi	sp,sp,-16
   1f2c0:	00812423          	sw	s0,8(sp)
   1f2c4:	000227b7          	lui	a5,0x22
   1f2c8:	00022437          	lui	s0,0x22
   1f2cc:	e8c40413          	addi	s0,s0,-372 # 21e8c <__fini_array_end>
   1f2d0:	e8c78793          	addi	a5,a5,-372 # 21e8c <__fini_array_end>
   1f2d4:	408787b3          	sub	a5,a5,s0
   1f2d8:	00912223          	sw	s1,4(sp)
   1f2dc:	00112623          	sw	ra,12(sp)
   1f2e0:	4027d493          	srai	s1,a5,0x2
   1f2e4:	02048063          	beqz	s1,1f304 <__libc_fini_array+0x48>
   1f2e8:	ffc78793          	addi	a5,a5,-4
   1f2ec:	00878433          	add	s0,a5,s0
   1f2f0:	00042783          	lw	a5,0(s0)
   1f2f4:	fff48493          	addi	s1,s1,-1
   1f2f8:	ffc40413          	addi	s0,s0,-4
   1f2fc:	000780e7          	jalr	a5
   1f300:	fe0498e3          	bnez	s1,1f2f0 <__libc_fini_array+0x34>
   1f304:	00c12083          	lw	ra,12(sp)
   1f308:	00812403          	lw	s0,8(sp)
   1f30c:	00412483          	lw	s1,4(sp)
   1f310:	01010113          	addi	sp,sp,16
   1f314:	00008067          	ret

0001f318 <memcmp>:
   1f318:	00300793          	li	a5,3
   1f31c:	02c7f863          	bgeu	a5,a2,1f34c <memcmp+0x34>
   1f320:	00b567b3          	or	a5,a0,a1
   1f324:	0037f793          	andi	a5,a5,3
   1f328:	00300693          	li	a3,3
   1f32c:	04079e63          	bnez	a5,1f388 <memcmp+0x70>
   1f330:	00052703          	lw	a4,0(a0)
   1f334:	0005a783          	lw	a5,0(a1)
   1f338:	04f71863          	bne	a4,a5,1f388 <memcmp+0x70>
   1f33c:	ffc60613          	addi	a2,a2,-4
   1f340:	00450513          	addi	a0,a0,4
   1f344:	00458593          	addi	a1,a1,4
   1f348:	fec6e4e3          	bltu	a3,a2,1f330 <memcmp+0x18>
   1f34c:	fff60693          	addi	a3,a2,-1
   1f350:	02060863          	beqz	a2,1f380 <memcmp+0x68>
   1f354:	00168693          	addi	a3,a3,1 # 1001 <__load-0xefff>
   1f358:	00d586b3          	add	a3,a1,a3
   1f35c:	0080006f          	j	1f364 <memcmp+0x4c>
   1f360:	02d58063          	beq	a1,a3,1f380 <memcmp+0x68>
   1f364:	00054783          	lbu	a5,0(a0)
   1f368:	0005c703          	lbu	a4,0(a1)
   1f36c:	00150513          	addi	a0,a0,1
   1f370:	00158593          	addi	a1,a1,1
   1f374:	fee786e3          	beq	a5,a4,1f360 <memcmp+0x48>
   1f378:	40e78533          	sub	a0,a5,a4
   1f37c:	00008067          	ret
   1f380:	00000513          	li	a0,0
   1f384:	00008067          	ret
   1f388:	fff60693          	addi	a3,a2,-1
   1f38c:	fc9ff06f          	j	1f354 <memcmp+0x3c>

0001f390 <memcpy>:
   1f390:	00a5c7b3          	xor	a5,a1,a0
   1f394:	0037f793          	andi	a5,a5,3
   1f398:	00c508b3          	add	a7,a0,a2
   1f39c:	06079263          	bnez	a5,1f400 <memcpy+0x70>
   1f3a0:	00300793          	li	a5,3
   1f3a4:	04c7fe63          	bgeu	a5,a2,1f400 <memcpy+0x70>
   1f3a8:	00357793          	andi	a5,a0,3
   1f3ac:	00050713          	mv	a4,a0
   1f3b0:	06079863          	bnez	a5,1f420 <memcpy+0x90>
   1f3b4:	ffc8f613          	andi	a2,a7,-4
   1f3b8:	fe060793          	addi	a5,a2,-32
   1f3bc:	08f76c63          	bltu	a4,a5,1f454 <memcpy+0xc4>
   1f3c0:	02c77c63          	bgeu	a4,a2,1f3f8 <memcpy+0x68>
   1f3c4:	00058693          	mv	a3,a1
   1f3c8:	00070793          	mv	a5,a4
   1f3cc:	0006a803          	lw	a6,0(a3)
   1f3d0:	00478793          	addi	a5,a5,4
   1f3d4:	00468693          	addi	a3,a3,4
   1f3d8:	ff07ae23          	sw	a6,-4(a5)
   1f3dc:	fec7e8e3          	bltu	a5,a2,1f3cc <memcpy+0x3c>
   1f3e0:	fff60793          	addi	a5,a2,-1
   1f3e4:	40e787b3          	sub	a5,a5,a4
   1f3e8:	ffc7f793          	andi	a5,a5,-4
   1f3ec:	00478793          	addi	a5,a5,4
   1f3f0:	00f70733          	add	a4,a4,a5
   1f3f4:	00f585b3          	add	a1,a1,a5
   1f3f8:	01176863          	bltu	a4,a7,1f408 <memcpy+0x78>
   1f3fc:	00008067          	ret
   1f400:	00050713          	mv	a4,a0
   1f404:	ff157ce3          	bgeu	a0,a7,1f3fc <memcpy+0x6c>
   1f408:	0005c783          	lbu	a5,0(a1)
   1f40c:	00170713          	addi	a4,a4,1
   1f410:	00158593          	addi	a1,a1,1
   1f414:	fef70fa3          	sb	a5,-1(a4)
   1f418:	ff1768e3          	bltu	a4,a7,1f408 <memcpy+0x78>
   1f41c:	00008067          	ret
   1f420:	0005c683          	lbu	a3,0(a1)
   1f424:	00170713          	addi	a4,a4,1
   1f428:	00377793          	andi	a5,a4,3
   1f42c:	fed70fa3          	sb	a3,-1(a4)
   1f430:	00158593          	addi	a1,a1,1
   1f434:	f80780e3          	beqz	a5,1f3b4 <memcpy+0x24>
   1f438:	0005c683          	lbu	a3,0(a1)
   1f43c:	00170713          	addi	a4,a4,1
   1f440:	00377793          	andi	a5,a4,3
   1f444:	fed70fa3          	sb	a3,-1(a4)
   1f448:	00158593          	addi	a1,a1,1
   1f44c:	fc079ae3          	bnez	a5,1f420 <memcpy+0x90>
   1f450:	f65ff06f          	j	1f3b4 <memcpy+0x24>
   1f454:	0045a683          	lw	a3,4(a1)
   1f458:	0005a283          	lw	t0,0(a1)
   1f45c:	0085af83          	lw	t6,8(a1)
   1f460:	00c5af03          	lw	t5,12(a1)
   1f464:	0105ae83          	lw	t4,16(a1)
   1f468:	0145ae03          	lw	t3,20(a1)
   1f46c:	0185a303          	lw	t1,24(a1)
   1f470:	01c5a803          	lw	a6,28(a1)
   1f474:	00d72223          	sw	a3,4(a4)
   1f478:	0205a683          	lw	a3,32(a1)
   1f47c:	00572023          	sw	t0,0(a4)
   1f480:	01f72423          	sw	t6,8(a4)
   1f484:	01e72623          	sw	t5,12(a4)
   1f488:	01d72823          	sw	t4,16(a4)
   1f48c:	01c72a23          	sw	t3,20(a4)
   1f490:	00672c23          	sw	t1,24(a4)
   1f494:	01072e23          	sw	a6,28(a4)
   1f498:	02d72023          	sw	a3,32(a4)
   1f49c:	02470713          	addi	a4,a4,36
   1f4a0:	02458593          	addi	a1,a1,36
   1f4a4:	faf768e3          	bltu	a4,a5,1f454 <memcpy+0xc4>
   1f4a8:	f19ff06f          	j	1f3c0 <memcpy+0x30>

0001f4ac <memset>:
   1f4ac:	00f00313          	li	t1,15
   1f4b0:	00050713          	mv	a4,a0
   1f4b4:	02c37e63          	bgeu	t1,a2,1f4f0 <memset+0x44>
   1f4b8:	00f77793          	andi	a5,a4,15
   1f4bc:	0a079063          	bnez	a5,1f55c <memset+0xb0>
   1f4c0:	08059263          	bnez	a1,1f544 <memset+0x98>
   1f4c4:	ff067693          	andi	a3,a2,-16
   1f4c8:	00f67613          	andi	a2,a2,15
   1f4cc:	00e686b3          	add	a3,a3,a4
   1f4d0:	00b72023          	sw	a1,0(a4)
   1f4d4:	00b72223          	sw	a1,4(a4)
   1f4d8:	00b72423          	sw	a1,8(a4)
   1f4dc:	00b72623          	sw	a1,12(a4)
   1f4e0:	01070713          	addi	a4,a4,16
   1f4e4:	fed766e3          	bltu	a4,a3,1f4d0 <memset+0x24>
   1f4e8:	00061463          	bnez	a2,1f4f0 <memset+0x44>
   1f4ec:	00008067          	ret
   1f4f0:	40c306b3          	sub	a3,t1,a2
   1f4f4:	00269693          	slli	a3,a3,0x2
   1f4f8:	00000297          	auipc	t0,0x0
   1f4fc:	005686b3          	add	a3,a3,t0
   1f500:	00c68067          	jr	12(a3)
   1f504:	00b70723          	sb	a1,14(a4)
   1f508:	00b706a3          	sb	a1,13(a4)
   1f50c:	00b70623          	sb	a1,12(a4)
   1f510:	00b705a3          	sb	a1,11(a4)
   1f514:	00b70523          	sb	a1,10(a4)
   1f518:	00b704a3          	sb	a1,9(a4)
   1f51c:	00b70423          	sb	a1,8(a4)
   1f520:	00b703a3          	sb	a1,7(a4)
   1f524:	00b70323          	sb	a1,6(a4)
   1f528:	00b702a3          	sb	a1,5(a4)
   1f52c:	00b70223          	sb	a1,4(a4)
   1f530:	00b701a3          	sb	a1,3(a4)
   1f534:	00b70123          	sb	a1,2(a4)
   1f538:	00b700a3          	sb	a1,1(a4)
   1f53c:	00b70023          	sb	a1,0(a4)
   1f540:	00008067          	ret
   1f544:	0ff5f593          	andi	a1,a1,255
   1f548:	00859693          	slli	a3,a1,0x8
   1f54c:	00d5e5b3          	or	a1,a1,a3
   1f550:	01059693          	slli	a3,a1,0x10
   1f554:	00d5e5b3          	or	a1,a1,a3
   1f558:	f6dff06f          	j	1f4c4 <memset+0x18>
   1f55c:	00279693          	slli	a3,a5,0x2
   1f560:	00000297          	auipc	t0,0x0
   1f564:	005686b3          	add	a3,a3,t0
   1f568:	00008293          	mv	t0,ra
   1f56c:	fa0680e7          	jalr	-96(a3)
   1f570:	00028093          	mv	ra,t0
   1f574:	ff078793          	addi	a5,a5,-16
   1f578:	40f70733          	sub	a4,a4,a5
   1f57c:	00f60633          	add	a2,a2,a5
   1f580:	f6c378e3          	bgeu	t1,a2,1f4f0 <memset+0x44>
   1f584:	f3dff06f          	j	1f4c0 <memset+0x14>

0001f588 <strcpy>:
   1f588:	00b567b3          	or	a5,a0,a1
   1f58c:	0037f793          	andi	a5,a5,3
   1f590:	08079263          	bnez	a5,1f614 <strcpy+0x8c>
   1f594:	0005a703          	lw	a4,0(a1)
   1f598:	7f7f86b7          	lui	a3,0x7f7f8
   1f59c:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__top+0x6f7f7f8f>
   1f5a0:	00d777b3          	and	a5,a4,a3
   1f5a4:	00d787b3          	add	a5,a5,a3
   1f5a8:	00e7e7b3          	or	a5,a5,a4
   1f5ac:	00d7e7b3          	or	a5,a5,a3
   1f5b0:	fff00613          	li	a2,-1
   1f5b4:	06c79e63          	bne	a5,a2,1f630 <strcpy+0xa8>
   1f5b8:	00050613          	mv	a2,a0
   1f5bc:	fff00813          	li	a6,-1
   1f5c0:	00e62023          	sw	a4,0(a2)
   1f5c4:	0045a703          	lw	a4,4(a1)
   1f5c8:	00458593          	addi	a1,a1,4
   1f5cc:	00460613          	addi	a2,a2,4
   1f5d0:	00d777b3          	and	a5,a4,a3
   1f5d4:	00d787b3          	add	a5,a5,a3
   1f5d8:	00e7e7b3          	or	a5,a5,a4
   1f5dc:	00d7e7b3          	or	a5,a5,a3
   1f5e0:	ff0780e3          	beq	a5,a6,1f5c0 <strcpy+0x38>
   1f5e4:	0005c783          	lbu	a5,0(a1)
   1f5e8:	0015c703          	lbu	a4,1(a1)
   1f5ec:	0025c683          	lbu	a3,2(a1)
   1f5f0:	00f60023          	sb	a5,0(a2)
   1f5f4:	00078a63          	beqz	a5,1f608 <strcpy+0x80>
   1f5f8:	00e600a3          	sb	a4,1(a2)
   1f5fc:	00070663          	beqz	a4,1f608 <strcpy+0x80>
   1f600:	00d60123          	sb	a3,2(a2)
   1f604:	00069463          	bnez	a3,1f60c <strcpy+0x84>
   1f608:	00008067          	ret
   1f60c:	000601a3          	sb	zero,3(a2)
   1f610:	00008067          	ret
   1f614:	00050793          	mv	a5,a0
   1f618:	0005c703          	lbu	a4,0(a1)
   1f61c:	00178793          	addi	a5,a5,1
   1f620:	00158593          	addi	a1,a1,1
   1f624:	fee78fa3          	sb	a4,-1(a5)
   1f628:	fe0718e3          	bnez	a4,1f618 <strcpy+0x90>
   1f62c:	00008067          	ret
   1f630:	00050613          	mv	a2,a0
   1f634:	fb1ff06f          	j	1f5e4 <strcpy+0x5c>

0001f638 <strlen>:
   1f638:	00357793          	andi	a5,a0,3
   1f63c:	00050713          	mv	a4,a0
   1f640:	04079c63          	bnez	a5,1f698 <strlen+0x60>
   1f644:	7f7f86b7          	lui	a3,0x7f7f8
   1f648:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__top+0x6f7f7f8f>
   1f64c:	fff00593          	li	a1,-1
   1f650:	00072603          	lw	a2,0(a4)
   1f654:	00470713          	addi	a4,a4,4
   1f658:	00d677b3          	and	a5,a2,a3
   1f65c:	00d787b3          	add	a5,a5,a3
   1f660:	00c7e7b3          	or	a5,a5,a2
   1f664:	00d7e7b3          	or	a5,a5,a3
   1f668:	feb784e3          	beq	a5,a1,1f650 <strlen+0x18>
   1f66c:	ffc74683          	lbu	a3,-4(a4)
   1f670:	ffd74603          	lbu	a2,-3(a4)
   1f674:	ffe74783          	lbu	a5,-2(a4)
   1f678:	40a70733          	sub	a4,a4,a0
   1f67c:	04068063          	beqz	a3,1f6bc <strlen+0x84>
   1f680:	02060a63          	beqz	a2,1f6b4 <strlen+0x7c>
   1f684:	00f03533          	snez	a0,a5
   1f688:	00e50533          	add	a0,a0,a4
   1f68c:	ffe50513          	addi	a0,a0,-2
   1f690:	00008067          	ret
   1f694:	fa0688e3          	beqz	a3,1f644 <strlen+0xc>
   1f698:	00074783          	lbu	a5,0(a4)
   1f69c:	00170713          	addi	a4,a4,1
   1f6a0:	00377693          	andi	a3,a4,3
   1f6a4:	fe0798e3          	bnez	a5,1f694 <strlen+0x5c>
   1f6a8:	40a70733          	sub	a4,a4,a0
   1f6ac:	fff70513          	addi	a0,a4,-1
   1f6b0:	00008067          	ret
   1f6b4:	ffd70513          	addi	a0,a4,-3
   1f6b8:	00008067          	ret
   1f6bc:	ffc70513          	addi	a0,a4,-4
   1f6c0:	00008067          	ret

0001f6c4 <strncmp>:
   1f6c4:	0a060463          	beqz	a2,1f76c <strncmp+0xa8>
   1f6c8:	00b567b3          	or	a5,a0,a1
   1f6cc:	0037f793          	andi	a5,a5,3
   1f6d0:	04079c63          	bnez	a5,1f728 <strncmp+0x64>
   1f6d4:	00300793          	li	a5,3
   1f6d8:	04c7f863          	bgeu	a5,a2,1f728 <strncmp+0x64>
   1f6dc:	feff0337          	lui	t1,0xfeff0
   1f6e0:	808088b7          	lui	a7,0x80808
   1f6e4:	eff30313          	addi	t1,t1,-257 # fefefeff <__top+0xeefeff0f>
   1f6e8:	08088893          	addi	a7,a7,128 # 80808080 <__top+0x70808090>
   1f6ec:	00300e13          	li	t3,3
   1f6f0:	01c0006f          	j	1f70c <strncmp+0x48>
   1f6f4:	ffc60613          	addi	a2,a2,-4
   1f6f8:	06060a63          	beqz	a2,1f76c <strncmp+0xa8>
   1f6fc:	06079863          	bnez	a5,1f76c <strncmp+0xa8>
   1f700:	00450513          	addi	a0,a0,4
   1f704:	00458593          	addi	a1,a1,4
   1f708:	02ce7063          	bgeu	t3,a2,1f728 <strncmp+0x64>
   1f70c:	00052703          	lw	a4,0(a0)
   1f710:	0005a683          	lw	a3,0(a1)
   1f714:	006707b3          	add	a5,a4,t1
   1f718:	fff74813          	not	a6,a4
   1f71c:	0107f7b3          	and	a5,a5,a6
   1f720:	0117f7b3          	and	a5,a5,a7
   1f724:	fcd708e3          	beq	a4,a3,1f6f4 <strncmp+0x30>
   1f728:	00054683          	lbu	a3,0(a0)
   1f72c:	0005c803          	lbu	a6,0(a1)
   1f730:	04d81263          	bne	a6,a3,1f774 <strncmp+0xb0>
   1f734:	00100793          	li	a5,1
   1f738:	02f60a63          	beq	a2,a5,1f76c <strncmp+0xa8>
   1f73c:	00050713          	mv	a4,a0
   1f740:	0140006f          	j	1f754 <strncmp+0x90>
   1f744:	00074683          	lbu	a3,0(a4)
   1f748:	0005c803          	lbu	a6,0(a1)
   1f74c:	03069463          	bne	a3,a6,1f774 <strncmp+0xb0>
   1f750:	00078e63          	beqz	a5,1f76c <strncmp+0xa8>
   1f754:	00170713          	addi	a4,a4,1
   1f758:	fff74793          	not	a5,a4
   1f75c:	00c787b3          	add	a5,a5,a2
   1f760:	00158593          	addi	a1,a1,1
   1f764:	00f507b3          	add	a5,a0,a5
   1f768:	fc069ee3          	bnez	a3,1f744 <strncmp+0x80>
   1f76c:	00000513          	li	a0,0
   1f770:	00008067          	ret
   1f774:	41068533          	sub	a0,a3,a6
   1f778:	00008067          	ret

0001f77c <strncpy>:
   1f77c:	00a5e7b3          	or	a5,a1,a0
   1f780:	0037f793          	andi	a5,a5,3
   1f784:	00050713          	mv	a4,a0
   1f788:	06079863          	bnez	a5,1f7f8 <strncpy+0x7c>
   1f78c:	00300793          	li	a5,3
   1f790:	06c7f463          	bgeu	a5,a2,1f7f8 <strncpy+0x7c>
   1f794:	feff0337          	lui	t1,0xfeff0
   1f798:	808088b7          	lui	a7,0x80808
   1f79c:	eff30313          	addi	t1,t1,-257 # fefefeff <__top+0xeefeff0f>
   1f7a0:	08088893          	addi	a7,a7,128 # 80808080 <__top+0x70808090>
   1f7a4:	00300e13          	li	t3,3
   1f7a8:	0005a683          	lw	a3,0(a1)
   1f7ac:	006687b3          	add	a5,a3,t1
   1f7b0:	fff6c813          	not	a6,a3
   1f7b4:	0107f7b3          	and	a5,a5,a6
   1f7b8:	0117f7b3          	and	a5,a5,a7
   1f7bc:	02079e63          	bnez	a5,1f7f8 <strncpy+0x7c>
   1f7c0:	00d72023          	sw	a3,0(a4)
   1f7c4:	ffc60613          	addi	a2,a2,-4
   1f7c8:	00470713          	addi	a4,a4,4
   1f7cc:	00458593          	addi	a1,a1,4
   1f7d0:	fcce6ce3          	bltu	t3,a2,1f7a8 <strncpy+0x2c>
   1f7d4:	00158593          	addi	a1,a1,1
   1f7d8:	00170793          	addi	a5,a4,1
   1f7dc:	02060463          	beqz	a2,1f804 <strncpy+0x88>
   1f7e0:	fff5c683          	lbu	a3,-1(a1)
   1f7e4:	fff60813          	addi	a6,a2,-1
   1f7e8:	fed78fa3          	sb	a3,-1(a5)
   1f7ec:	00068e63          	beqz	a3,1f808 <strncpy+0x8c>
   1f7f0:	00078713          	mv	a4,a5
   1f7f4:	00080613          	mv	a2,a6
   1f7f8:	00158593          	addi	a1,a1,1
   1f7fc:	00170793          	addi	a5,a4,1
   1f800:	fe0610e3          	bnez	a2,1f7e0 <strncpy+0x64>
   1f804:	00008067          	ret
   1f808:	00c70633          	add	a2,a4,a2
   1f80c:	00080a63          	beqz	a6,1f820 <strncpy+0xa4>
   1f810:	00178793          	addi	a5,a5,1
   1f814:	fe078fa3          	sb	zero,-1(a5)
   1f818:	fec79ce3          	bne	a5,a2,1f810 <strncpy+0x94>
   1f81c:	00008067          	ret
   1f820:	00008067          	ret

0001f824 <__register_exitproc>:
   1f824:	000227b7          	lui	a5,0x22
   1f828:	e847a703          	lw	a4,-380(a5) # 21e84 <_etext>
   1f82c:	14872783          	lw	a5,328(a4)
   1f830:	04078c63          	beqz	a5,1f888 <__register_exitproc+0x64>
   1f834:	0047a703          	lw	a4,4(a5)
   1f838:	01f00813          	li	a6,31
   1f83c:	06e84e63          	blt	a6,a4,1f8b8 <__register_exitproc+0x94>
   1f840:	00271813          	slli	a6,a4,0x2
   1f844:	02050663          	beqz	a0,1f870 <__register_exitproc+0x4c>
   1f848:	01078333          	add	t1,a5,a6
   1f84c:	08c32423          	sw	a2,136(t1)
   1f850:	1887a883          	lw	a7,392(a5)
   1f854:	00100613          	li	a2,1
   1f858:	00e61633          	sll	a2,a2,a4
   1f85c:	00c8e8b3          	or	a7,a7,a2
   1f860:	1917a423          	sw	a7,392(a5)
   1f864:	10d32423          	sw	a3,264(t1)
   1f868:	00200693          	li	a3,2
   1f86c:	02d50463          	beq	a0,a3,1f894 <__register_exitproc+0x70>
   1f870:	00170713          	addi	a4,a4,1
   1f874:	00e7a223          	sw	a4,4(a5)
   1f878:	010787b3          	add	a5,a5,a6
   1f87c:	00b7a423          	sw	a1,8(a5)
   1f880:	00000513          	li	a0,0
   1f884:	00008067          	ret
   1f888:	14c70793          	addi	a5,a4,332
   1f88c:	14f72423          	sw	a5,328(a4)
   1f890:	fa5ff06f          	j	1f834 <__register_exitproc+0x10>
   1f894:	18c7a683          	lw	a3,396(a5)
   1f898:	00170713          	addi	a4,a4,1
   1f89c:	00e7a223          	sw	a4,4(a5)
   1f8a0:	00c6e633          	or	a2,a3,a2
   1f8a4:	18c7a623          	sw	a2,396(a5)
   1f8a8:	010787b3          	add	a5,a5,a6
   1f8ac:	00b7a423          	sw	a1,8(a5)
   1f8b0:	00000513          	li	a0,0
   1f8b4:	00008067          	ret
   1f8b8:	fff00513          	li	a0,-1
   1f8bc:	00008067          	ret

0001f8c0 <__call_exitprocs>:
   1f8c0:	fd010113          	addi	sp,sp,-48
   1f8c4:	000227b7          	lui	a5,0x22
   1f8c8:	01412c23          	sw	s4,24(sp)
   1f8cc:	e847aa03          	lw	s4,-380(a5) # 21e84 <_etext>
   1f8d0:	03212023          	sw	s2,32(sp)
   1f8d4:	02112623          	sw	ra,44(sp)
   1f8d8:	148a2903          	lw	s2,328(s4)
   1f8dc:	02812423          	sw	s0,40(sp)
   1f8e0:	02912223          	sw	s1,36(sp)
   1f8e4:	01312e23          	sw	s3,28(sp)
   1f8e8:	01512a23          	sw	s5,20(sp)
   1f8ec:	01612823          	sw	s6,16(sp)
   1f8f0:	01712623          	sw	s7,12(sp)
   1f8f4:	01812423          	sw	s8,8(sp)
   1f8f8:	04090063          	beqz	s2,1f938 <__call_exitprocs+0x78>
   1f8fc:	00050b13          	mv	s6,a0
   1f900:	00058b93          	mv	s7,a1
   1f904:	00100a93          	li	s5,1
   1f908:	fff00993          	li	s3,-1
   1f90c:	00492483          	lw	s1,4(s2)
   1f910:	fff48413          	addi	s0,s1,-1
   1f914:	02044263          	bltz	s0,1f938 <__call_exitprocs+0x78>
   1f918:	00249493          	slli	s1,s1,0x2
   1f91c:	009904b3          	add	s1,s2,s1
   1f920:	040b8463          	beqz	s7,1f968 <__call_exitprocs+0xa8>
   1f924:	1044a783          	lw	a5,260(s1)
   1f928:	05778063          	beq	a5,s7,1f968 <__call_exitprocs+0xa8>
   1f92c:	fff40413          	addi	s0,s0,-1
   1f930:	ffc48493          	addi	s1,s1,-4
   1f934:	ff3416e3          	bne	s0,s3,1f920 <__call_exitprocs+0x60>
   1f938:	02c12083          	lw	ra,44(sp)
   1f93c:	02812403          	lw	s0,40(sp)
   1f940:	02412483          	lw	s1,36(sp)
   1f944:	02012903          	lw	s2,32(sp)
   1f948:	01c12983          	lw	s3,28(sp)
   1f94c:	01812a03          	lw	s4,24(sp)
   1f950:	01412a83          	lw	s5,20(sp)
   1f954:	01012b03          	lw	s6,16(sp)
   1f958:	00c12b83          	lw	s7,12(sp)
   1f95c:	00812c03          	lw	s8,8(sp)
   1f960:	03010113          	addi	sp,sp,48
   1f964:	00008067          	ret
   1f968:	00492783          	lw	a5,4(s2)
   1f96c:	0044a683          	lw	a3,4(s1)
   1f970:	fff78793          	addi	a5,a5,-1
   1f974:	04878e63          	beq	a5,s0,1f9d0 <__call_exitprocs+0x110>
   1f978:	0004a223          	sw	zero,4(s1)
   1f97c:	fa0688e3          	beqz	a3,1f92c <__call_exitprocs+0x6c>
   1f980:	18892783          	lw	a5,392(s2)
   1f984:	008a9733          	sll	a4,s5,s0
   1f988:	00492c03          	lw	s8,4(s2)
   1f98c:	00f777b3          	and	a5,a4,a5
   1f990:	02079263          	bnez	a5,1f9b4 <__call_exitprocs+0xf4>
   1f994:	000680e7          	jalr	a3
   1f998:	00492703          	lw	a4,4(s2)
   1f99c:	148a2783          	lw	a5,328(s4)
   1f9a0:	01871463          	bne	a4,s8,1f9a8 <__call_exitprocs+0xe8>
   1f9a4:	f8f904e3          	beq	s2,a5,1f92c <__call_exitprocs+0x6c>
   1f9a8:	f80788e3          	beqz	a5,1f938 <__call_exitprocs+0x78>
   1f9ac:	00078913          	mv	s2,a5
   1f9b0:	f5dff06f          	j	1f90c <__call_exitprocs+0x4c>
   1f9b4:	18c92783          	lw	a5,396(s2)
   1f9b8:	0844a583          	lw	a1,132(s1)
   1f9bc:	00f77733          	and	a4,a4,a5
   1f9c0:	00071c63          	bnez	a4,1f9d8 <__call_exitprocs+0x118>
   1f9c4:	000b0513          	mv	a0,s6
   1f9c8:	000680e7          	jalr	a3
   1f9cc:	fcdff06f          	j	1f998 <__call_exitprocs+0xd8>
   1f9d0:	00892223          	sw	s0,4(s2)
   1f9d4:	fa9ff06f          	j	1f97c <__call_exitprocs+0xbc>
   1f9d8:	00058513          	mv	a0,a1
   1f9dc:	000680e7          	jalr	a3
   1f9e0:	fb9ff06f          	j	1f998 <__call_exitprocs+0xd8>

0001f9e4 <_exit>:
   1f9e4:	00000593          	li	a1,0
   1f9e8:	00000613          	li	a2,0
   1f9ec:	00000693          	li	a3,0
   1f9f0:	00000713          	li	a4,0
   1f9f4:	00000793          	li	a5,0
   1f9f8:	05d00893          	li	a7,93
   1f9fc:	00000073          	ecall
   1fa00:	00054463          	bltz	a0,1fa08 <_exit+0x24>
   1fa04:	0000006f          	j	1fa04 <_exit+0x20>
   1fa08:	ff010113          	addi	sp,sp,-16
   1fa0c:	00812423          	sw	s0,8(sp)
   1fa10:	00050413          	mv	s0,a0
   1fa14:	00112623          	sw	ra,12(sp)
   1fa18:	40800433          	neg	s0,s0
   1fa1c:	00c000ef          	jal	ra,1fa28 <__errno>
   1fa20:	00852023          	sw	s0,0(a0)
   1fa24:	0000006f          	j	1fa24 <_exit+0x40>

0001fa28 <__errno>:
   1fa28:	8181a503          	lw	a0,-2024(gp) # 22378 <_impure_ptr>
   1fa2c:	00008067          	ret

0001fa30 <IRQ_Handler>:
  .align 2
  .global IRQ_Handler
IRQ_Handler:

    /* save all from thread context */
    addi sp, sp, -32 * REGBYTES
   1fa30:	f8010113          	addi	sp,sp,-128

    STORE x1,   1 * REGBYTES(sp)
   1fa34:	00112223          	sw	ra,4(sp)
    
    STORE x4,   4 * REGBYTES(sp)
   1fa38:	00412823          	sw	tp,16(sp)
    STORE x5,   5 * REGBYTES(sp)
   1fa3c:	00512a23          	sw	t0,20(sp)
    STORE x6,   6 * REGBYTES(sp)
   1fa40:	00612c23          	sw	t1,24(sp)
    STORE x7,   7 * REGBYTES(sp)
   1fa44:	00712e23          	sw	t2,28(sp)
    STORE x8,   8 * REGBYTES(sp)
   1fa48:	02812023          	sw	s0,32(sp)
    STORE x9,   9 * REGBYTES(sp)
   1fa4c:	02912223          	sw	s1,36(sp)
    STORE x10, 10 * REGBYTES(sp)
   1fa50:	02a12423          	sw	a0,40(sp)
    STORE x11, 11 * REGBYTES(sp)
   1fa54:	02b12623          	sw	a1,44(sp)
    STORE x12, 12 * REGBYTES(sp)
   1fa58:	02c12823          	sw	a2,48(sp)
    STORE x13, 13 * REGBYTES(sp)
   1fa5c:	02d12a23          	sw	a3,52(sp)
    STORE x14, 14 * REGBYTES(sp)
   1fa60:	02e12c23          	sw	a4,56(sp)
    STORE x15, 15 * REGBYTES(sp)
   1fa64:	02f12e23          	sw	a5,60(sp)
    STORE x16, 16 * REGBYTES(sp)
   1fa68:	05012023          	sw	a6,64(sp)
    STORE x17, 17 * REGBYTES(sp)
   1fa6c:	05112223          	sw	a7,68(sp)
    STORE x18, 18 * REGBYTES(sp)
   1fa70:	05212423          	sw	s2,72(sp)
    STORE x19, 19 * REGBYTES(sp)
   1fa74:	05312623          	sw	s3,76(sp)
    STORE x20, 20 * REGBYTES(sp)
   1fa78:	05412823          	sw	s4,80(sp)
    STORE x21, 21 * REGBYTES(sp)
   1fa7c:	05512a23          	sw	s5,84(sp)
    STORE x22, 22 * REGBYTES(sp)
   1fa80:	05612c23          	sw	s6,88(sp)
    STORE x23, 23 * REGBYTES(sp)
   1fa84:	05712e23          	sw	s7,92(sp)
    STORE x24, 24 * REGBYTES(sp)
   1fa88:	07812023          	sw	s8,96(sp)
    STORE x25, 25 * REGBYTES(sp)
   1fa8c:	07912223          	sw	s9,100(sp)
    STORE x26, 26 * REGBYTES(sp)
   1fa90:	07a12423          	sw	s10,104(sp)
    STORE x27, 27 * REGBYTES(sp)
   1fa94:	07b12623          	sw	s11,108(sp)
    STORE x28, 28 * REGBYTES(sp)
   1fa98:	07c12823          	sw	t3,112(sp)
    STORE x29, 29 * REGBYTES(sp)
   1fa9c:	07d12a23          	sw	t4,116(sp)
    STORE x30, 30 * REGBYTES(sp)
   1faa0:	07e12c23          	sw	t5,120(sp)
    STORE x31, 31 * REGBYTES(sp)
   1faa4:	07f12e23          	sw	t6,124(sp)

    li    t0,   0x80
   1faa8:	08000293          	li	t0,128
    STORE t0,   2 * REGBYTES(sp)
   1faac:	00512423          	sw	t0,8(sp)

    move  s0, sp
   1fab0:	00010413          	mv	s0,sp

    /* switch to interrupt stack */
    la    sp, _stacktop
   1fab4:	0ffe0117          	auipc	sp,0xffe0
   1fab8:	53c10113          	addi	sp,sp,1340 # ffffff0 <__top>

    /* interrupt handle */
    call  rt_interrupt_enter
   1fabc:	98cf90ef          	jal	ra,18c48 <rt_interrupt_enter>
    csrr  a0, mcause
   1fac0:	34202573          	csrr	a0,mcause
    csrr  a1, mepc
   1fac4:	341025f3          	csrr	a1,mepc
    mv    a2, sp
   1fac8:	00010613          	mv	a2,sp
    call  SystemIrqHandler
   1facc:	e98f00ef          	jal	ra,10164 <SystemIrqHandler>
    call  rt_interrupt_leave
   1fad0:	9e0f90ef          	jal	ra,18cb0 <rt_interrupt_leave>

    /* switch to from thread stack */
    move  sp, s0
   1fad4:	00040113          	mv	sp,s0

    /* need to switch new thread */
    la    s0, rt_thread_switch_interrupt_flag
   1fad8:	83018413          	addi	s0,gp,-2000 # 22390 <rt_thread_switch_interrupt_flag>
    lw    s2, 0(s0)
   1fadc:	00042903          	lw	s2,0(s0)
    beqz  s2, spurious_interrupt
   1fae0:	02090863          	beqz	s2,1fb10 <spurious_interrupt>
    /* clear switch interrupt flag */
    sw    zero, 0(s0)
   1fae4:	00042023          	sw	zero,0(s0)

    csrr  a0, mepc
   1fae8:	34102573          	csrr	a0,mepc
    STORE a0, 0 * REGBYTES(sp)
   1faec:	00a12023          	sw	a0,0(sp)

    la    s0, rt_interrupt_from_thread
   1faf0:	82818413          	addi	s0,gp,-2008 # 22388 <rt_interrupt_from_thread>
    LOAD  s1, 0(s0)
   1faf4:	00042483          	lw	s1,0(s0)
    STORE sp, 0(s1)
   1faf8:	0024a023          	sw	sp,0(s1)

    la    s0, rt_interrupt_to_thread
   1fafc:	82c18413          	addi	s0,gp,-2004 # 2238c <rt_interrupt_to_thread>
    LOAD  s1, 0(s0)
   1fb00:	00042483          	lw	s1,0(s0)
    LOAD  sp, 0(s1)
   1fb04:	0004a103          	lw	sp,0(s1)

    LOAD  a0,  0 * REGBYTES(sp)
   1fb08:	00012503          	lw	a0,0(sp)
    csrw  mepc, a0
   1fb0c:	34151073          	csrw	mepc,a0

0001fb10 <spurious_interrupt>:

spurious_interrupt:
    LOAD  x1,   1 * REGBYTES(sp)
   1fb10:	00412083          	lw	ra,4(sp)

    /* Remain in M-mode after mret */
    li    t0, 0x00001800
   1fb14:	000022b7          	lui	t0,0x2
   1fb18:	80028293          	addi	t0,t0,-2048 # 1800 <__load-0xe800>
    csrs  mstatus, t0
   1fb1c:	3002a073          	csrs	mstatus,t0
    LOAD  t0,   2 * REGBYTES(sp)
   1fb20:	00812283          	lw	t0,8(sp)
    csrs  mstatus, t0 
   1fb24:	3002a073          	csrs	mstatus,t0

    LOAD  x4,   4 * REGBYTES(sp)
   1fb28:	01012203          	lw	tp,16(sp)
    LOAD  x5,   5 * REGBYTES(sp)
   1fb2c:	01412283          	lw	t0,20(sp)
    LOAD  x6,   6 * REGBYTES(sp)
   1fb30:	01812303          	lw	t1,24(sp)
    LOAD  x7,   7 * REGBYTES(sp)
   1fb34:	01c12383          	lw	t2,28(sp)
    LOAD  x8,   8 * REGBYTES(sp)
   1fb38:	02012403          	lw	s0,32(sp)
    LOAD  x9,   9 * REGBYTES(sp)
   1fb3c:	02412483          	lw	s1,36(sp)
    LOAD  x10, 10 * REGBYTES(sp)
   1fb40:	02812503          	lw	a0,40(sp)
    LOAD  x11, 11 * REGBYTES(sp)
   1fb44:	02c12583          	lw	a1,44(sp)
    LOAD  x12, 12 * REGBYTES(sp)
   1fb48:	03012603          	lw	a2,48(sp)
    LOAD  x13, 13 * REGBYTES(sp)
   1fb4c:	03412683          	lw	a3,52(sp)
    LOAD  x14, 14 * REGBYTES(sp)
   1fb50:	03812703          	lw	a4,56(sp)
    LOAD  x15, 15 * REGBYTES(sp)
   1fb54:	03c12783          	lw	a5,60(sp)
    LOAD  x16, 16 * REGBYTES(sp)
   1fb58:	04012803          	lw	a6,64(sp)
    LOAD  x17, 17 * REGBYTES(sp)
   1fb5c:	04412883          	lw	a7,68(sp)
    LOAD  x18, 18 * REGBYTES(sp)
   1fb60:	04812903          	lw	s2,72(sp)
    LOAD  x19, 19 * REGBYTES(sp)
   1fb64:	04c12983          	lw	s3,76(sp)
    LOAD  x20, 20 * REGBYTES(sp)
   1fb68:	05012a03          	lw	s4,80(sp)
    LOAD  x21, 21 * REGBYTES(sp)
   1fb6c:	05412a83          	lw	s5,84(sp)
    LOAD  x22, 22 * REGBYTES(sp)
   1fb70:	05812b03          	lw	s6,88(sp)
    LOAD  x23, 23 * REGBYTES(sp)
   1fb74:	05c12b83          	lw	s7,92(sp)
    LOAD  x24, 24 * REGBYTES(sp)
   1fb78:	06012c03          	lw	s8,96(sp)
    LOAD  x25, 25 * REGBYTES(sp)
   1fb7c:	06412c83          	lw	s9,100(sp)
    LOAD  x26, 26 * REGBYTES(sp)
   1fb80:	06812d03          	lw	s10,104(sp)
    LOAD  x27, 27 * REGBYTES(sp)
   1fb84:	06c12d83          	lw	s11,108(sp)
    LOAD  x28, 28 * REGBYTES(sp)
   1fb88:	07012e03          	lw	t3,112(sp)
    LOAD  x29, 29 * REGBYTES(sp)
   1fb8c:	07412e83          	lw	t4,116(sp)
    LOAD  x30, 30 * REGBYTES(sp)
   1fb90:	07812f03          	lw	t5,120(sp)
    LOAD  x31, 31 * REGBYTES(sp)
   1fb94:	07c12f83          	lw	t6,124(sp)

    addi  sp, sp, 32 * REGBYTES
   1fb98:	08010113          	addi	sp,sp,128
    mret
   1fb9c:	30200073          	mret

0001fba0 <register_fini>:
   1fba0:	000007b7          	lui	a5,0x0
   1fba4:	00078793          	mv	a5,a5
   1fba8:	00078863          	beqz	a5,1fbb8 <register_fini+0x18>
   1fbac:	0001f537          	lui	a0,0x1f
   1fbb0:	2bc50513          	addi	a0,a0,700 # 1f2bc <__libc_fini_array>
   1fbb4:	ec0ff06f          	j	1f274 <atexit>
   1fbb8:	00008067          	ret

0001fbbc <__fsym_help>:
   1fbbc:	00021c30 00021c38 0001d454              0...8...T...

0001fbc8 <__fsym_ps>:
   1fbc8:	00021c50 00021c54 0001d4ec              P...T.......

0001fbd4 <__fsym_free>:
   1fbd4:	00021c70 00021c78 0001d520              p...x... ...

0001fbe0 <__fsym_hello>:
   1fbe0:	00021ca0 00021ca8 0001dd6c              ........l...

0001fbec <__fsym_clear>:
   1fbec:	00021cb8 00021cc0 0001dda0              ............

0001fbf8 <__fsym_version>:
   1fbf8:	00021cdc 00021ce4 0001ddd4              ............

0001fc04 <__fsym_list_thread>:
   1fc04:	00021d0c 00021d18 0001e030              ........0...

0001fc10 <__fsym_list_sem>:
   1fc10:	00021d24 00021d30 0001e358              $...0...X...

0001fc1c <__fsym_list_event>:
   1fc1c:	00021d4c 00021d58 0001e540              L...X...@...

0001fc28 <__fsym_list_mutex>:
   1fc28:	00021d70 00021d7c 0001e708              p...|.......

0001fc34 <__fsym_list_mailbox>:
   1fc34:	00021d94 00021da4 0001e898              ............

0001fc40 <__fsym_list_msgqueue>:
   1fc40:	00021dbc 00021dcc 0001eab0              ............

0001fc4c <__fsym_list_mempool>:
   1fc4c:	00021dec 00021dfc 0001ec98              ............

0001fc58 <__fsym_list_timer>:
   1fc58:	00021e18 00021e24 0001ee94              ....$.......

0001fc64 <__fsym_list_device>:
   1fc64:	00021e3c 00021e48 0001f04c              <...H...L...

0001fc70 <__fsym_list>:
   1fc70:	00021e60 00021e68 0001f1c4              `...h.......

0001fc7c <__rt_init_rti_start>:
   1fc7c:	00019acc                                ....

0001fc80 <__rt_init_rti_board_start>:
   1fc80:	00019aec                                ....

0001fc84 <__rt_init_uart_init>:
   1fc84:	0001034c                                L...

0001fc88 <__rt_init_rti_board_end>:
   1fc88:	00019b0c                                ....

0001fc8c <__rt_init_finsh_system_init>:
   1fc8c:	0001d374                                t...

0001fc90 <__rt_init_rti_end>:
   1fc90:	00019b2c                                ,...
